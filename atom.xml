<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep It Simple And Stupid</title>
  
  <subtitle>Caoxl-Hexo-caoxl.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.caoxl.com/"/>
  <updated>2020-06-03T09:53:09.509Z</updated>
  <id>http://blog.caoxl.com/</id>
  
  <author>
    <name>CAO XIAN LIANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Gitlab+Jenkins 实现自动化构建</title>
    <link href="http://blog.caoxl.com/2020/06/03/Gitlab-Jenkins-AutoBuild/"/>
    <id>http://blog.caoxl.com/2020/06/03/Gitlab-Jenkins-AutoBuild/</id>
    <published>2020-06-03T01:20:01.000Z</published>
    <updated>2020-06-03T09:53:09.509Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>使用 Gitlab+Jenkins 实现自动化构建</p></blockquote><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="Jenkins-密钥配置"><a href="#Jenkins-密钥配置" class="headerlink" title="Jenkins 密钥配置"></a>Jenkins 密钥配置</h2><ul><li>设置jenkins的shell终端为/bin/bash</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# grep jenkins /etc/passwd</span><br><span class="line">jenkins:x:990:987:Jenkins Automation Server:/var/lib/jenkins:/bin/false</span><br></pre></td></tr></table></figure><ul><li>登录到jenkins用户生成密钥</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# su - jenkins</span><br><span class="line">Last login: Wed Jun  3 15:27:02 CST 2020 on pts/3</span><br><span class="line">[root@caoxl ~]# ssh-keygen -t rsa</span><br><span class="line">[root@caoxl ~]# cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>添加公钥到gitlab服务器，用来clone代码</li><li>添加完成之后从gitlab服务器clone下自己的工程，会在.ssh/known_hosts添加gitlab服务器记录</li><li>添加公钥到jenkins服务器root用户，用来执行部署脚本</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 输入以下, 并且输入服务器密码即可</span><br><span class="line">[root@caoxl ~]# ssh-copy-id -i .ssh/id_rsa.pub root@47.107.169.233</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: ".ssh/id_rsa.pub"</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@47.107.169.233's password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   "ssh 'root@47.107.169.233'"</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><h2 id="准备一个脚本"><a href="#准备一个脚本" class="headerlink" title="准备一个脚本"></a>准备一个脚本</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl deploy]# cat /shell/deploy/jenkins_deploy.sh</span><br><span class="line"><span class="section">#!/bin/bash</span></span><br><span class="line">echo "部署脚本被执行"</span><br></pre></td></tr></table></figure><p>注意：如果是生产配置，直接把这个脚本换成对应项目的上线脚本即可，jenkins配置无须修改。</p><ul><li>正式脚本</li></ul><blockquote><p>/bin/sh /shell/deploy/jenkins_deploy.sh ${WORKSPACE} ${JOB_NAME} ${BUILD_NUMBER}</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#!/bin/bash</span></span><br><span class="line">tar -zcvf /var/www/code<span class="emphasis">_backup/$&#123;JOB_</span>NAME&#125;<span class="emphasis">_$&#123;BUILD_</span>NUMBER&#125;.tar.gz /$&#123;WORKSPACE&#125;/$&#123;JOB_NAME&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /$&#123;WORKSPACE&#125;</span><br><span class="line">tar -zcvf /var/www/code<span class="emphasis">_backup/$&#123;JOB_</span>NAME&#125;<span class="emphasis">_$&#123;BUILD_</span>NUMBER&#125;.tar.gz $&#123;JOB_NAME&#125;</span><br><span class="line">tar -zcvf /var/www/code<span class="emphasis">_backup/$&#123;JOB_</span>NAME&#125;<span class="emphasis">_$&#123;BUILD_</span>NUMBER&#125;_bak.tar.gz /var/www/lumen6.caoxl.com</span><br><span class="line">mv /var/www/code<span class="emphasis">_backup/$&#123;JOB_</span>NAME&#125;<span class="emphasis">_$&#123;BUILD_</span>NUMBER&#125;.tar.gz /var/www/</span><br><span class="line">cd /var/www/</span><br><span class="line">tar -zxvf $&#123;JOB<span class="emphasis">_NAME&#125;_</span>$&#123;BUILD_NUMBER&#125;.tar.gz</span><br><span class="line">rm $&#123;JOB<span class="emphasis">_NAME&#125;_</span>$&#123;BUILD_NUMBER&#125;.tar.gz</span><br><span class="line">chown -Rf www:www *</span><br></pre></td></tr></table></figure><h1 id="Jenkins-触发式构建"><a href="#Jenkins-触发式构建" class="headerlink" title="Jenkins 触发式构建"></a>Jenkins 触发式构建</h1><blockquote><p>用于开发环境部署，开发人员push代码或者合并代码到gitlab项目的master分支，jenkins就部署代码到对应服务器。</p></blockquote><h1 id="Jenkins-参数化构建"><a href="#Jenkins-参数化构建" class="headerlink" title="Jenkins 参数化构建"></a>Jenkins 参数化构建</h1><blockquote><p>用于测试环境预上线环境部署，开发push代码或者合并代码到gitlab项目的master分支之后，并不会部署代码，而是需要登录到jenkins的web界面，点击构建按钮，传入对应的参数（比如参数需要构建的tag，需要部署的分支）然后才会部署。</p></blockquote><h1 id="Jenkins-定时构建"><a href="#Jenkins-定时构建" class="headerlink" title="Jenkins 定时构建"></a>Jenkins 定时构建</h1><blockquote><p>用于APP自动打包，定时构建是在参数化构建的基础上添加的，开发人员可以登录jenkins手动传入tag进行打包，如果不手动打包，那么jenkins就每天凌晨从gitlab拉取最新的APP代码打包。</p></blockquote><p>// 压缩<br>cd /var/lib/jenkins/workspace/<br>tar -zcvf /var/www/code_backup/lumen6.caoxl.com_17.tar.gz lumen6.caoxl.com<br>tar -zcvf /var/www/code_backup/lumen6.caoxl.com_17_bak.tar.gz /var/www/lumen6.caoxl.com<br>mv /var/www/code_backup/lumen6.caoxl.com_17.tar.gz /var/www/<br>cd /var/www/<br>// 解压<br>tar -zxvf lumen6.caoxl.com_17.tar.gz<br>rm ${JOB_NAME}_${BUILD_NUMBER}.tar.gz<br>chown -Rf www:www *</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用 Gitlab+Jenkins 实现自动化构建&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Gitlab" scheme="http://blog.caoxl.com/tags/Gitlab/"/>
    
      <category term="Jenkins" scheme="http://blog.caoxl.com/tags/Jenkins/"/>
    
      <category term="自动化构建" scheme="http://blog.caoxl.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 安装部署 Jenkins</title>
    <link href="http://blog.caoxl.com/2020/06/02/Install-Jenkins-In-CentOS7/"/>
    <id>http://blog.caoxl.com/2020/06/02/Install-Jenkins-In-CentOS7/</id>
    <published>2020-06-02T03:40:05.000Z</published>
    <updated>2020-06-02T07:20:23.205Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Jenkins是一个开源的支持自动化构建、部署等任务的平台。基本上可以说是持续集成（CI）、持续发布（CD）不可或缺的工具。<br><a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins 官网</a></p></blockquote><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="本篇环境信息"><a href="#本篇环境信息" class="headerlink" title="本篇环境信息"></a>本篇环境信息</h2><table><thead><tr><th style="text-align:left">工具/环境</th><th style="text-align:left">版本</th></tr></thead><tbody><tr><td style="text-align:left">Linux Server</td><td style="text-align:left">CentOS7</td></tr><tr><td style="text-align:left">Jenkins</td><td style="text-align:left">2.222.4</td></tr><tr><td style="text-align:left">JDK</td><td style="text-align:left">1.8.0_212</td></tr><tr><td style="text-align:left">Nginx</td><td style="text-align:left">1.15.1</td></tr></tbody></table><ul><li>查看JAVA SDK版本</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# java -version</span><br><span class="line">openjdk version "1.8.0_212"</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_212-b04)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.212-b04, mixed mode)</span><br></pre></td></tr></table></figure><ul><li>查看Nginx版本</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# /usr/local/nginx/sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.15.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC) </span><br><span class="line">configure arguments:</span><br></pre></td></tr></table></figure><ul><li>查看Jenkins端口</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# cat /etc/sysconfig/jenkins | grep "JENKINS_PORT"</span><br><span class="line">JENKINS_PORT="8080"</span><br></pre></td></tr></table></figure><h1 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h1><h2 id="Yum安装"><a href="#Yum安装" class="headerlink" title="Yum安装"></a>Yum安装</h2><ul><li>yum源导入</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#添加Yum源</span></span><br><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line"></span><br><span class="line"><span class="section">#导入密钥</span></span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y jenkins</span><br></pre></td></tr></table></figure><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><p>Jenkins站点的默认监听端口是8080</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --add-port=8080/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="配置Java可选路径"><a href="#配置Java可选路径" class="headerlink" title="配置Java可选路径"></a>配置Java可选路径</h2><p>因为Jenkins默认的java可选路径不包含我们部署的jdk路径，所以这里要配置一下，不然Jenkins服务会启动失败</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#修改jenkins启动脚本</span></span><br><span class="line">sudo vi /etc/init.d/jenkins</span><br><span class="line"></span><br><span class="line"><span class="section">#修改candidates增加java可选路径：/usr/java/jdk1.8.0_181/bin/java</span></span><br><span class="line">candidates="</span><br><span class="line"><span class="code">    /etc/alternatives/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/java-1.8.0/bin/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/jre-1.8.0/bin/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/java-1.7.0/bin/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/jre-1.7.0/bin/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/java-11.0/bin/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/jre-11.0/bin/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/java-11-openjdk-amd64</span></span><br><span class="line"><span class="code">    /usr/bin/java</span></span><br><span class="line">"</span><br></pre></td></tr></table></figure><h2 id="启动Jenkins并设置Jenkins开机启动"><a href="#启动Jenkins并设置Jenkins开机启动" class="headerlink" title="启动Jenkins并设置Jenkins开机启动"></a>启动Jenkins并设置Jenkins开机启动</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#重载服务（由于前面修改了Jenkins启动脚本）</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="section">#启动Jenkins服务</span></span><br><span class="line">sudo systemctl start jenkins</span><br><span class="line"></span><br><span class="line"><span class="section">#将Jenkins服务设置为开机启动</span></span><br><span class="line"><span class="section">#由于Jenkins不是Native Service，所以需要用chkconfig命令而不是systemctl命令</span></span><br><span class="line">sudo /sbin/chkconfig jenkins on</span><br></pre></td></tr></table></figure><p>浏览器输入 <code>http://&lt;ip address&gt;:8080</code> 访问Jenkins</p><h2 id="修改Jenkins端口"><a href="#修改Jenkins端口" class="headerlink" title="修改Jenkins端口"></a>修改Jenkins端口</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line">JENKINS_PORT="8080" // 修改成自己需要的端口即可</span><br><span class="line"></span><br><span class="line">// 重新启动jenkins</span><br><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure><h1 id="配置Nginx反向代理Jenkins"><a href="#配置Nginx反向代理Jenkins" class="headerlink" title="配置Nginx反向代理Jenkins"></a>配置Nginx反向代理Jenkins</h1><ul><li>新建配置文件</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#新增Jenkins专用Nginx配置文件</span></span><br><span class="line">sudo vi /etc/nginx/conf.d/jenkins.conf</span><br><span class="line"></span><br><span class="line"><span class="section">#输入以下内容并保存</span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="code">    listen 80;#监听80端口</span></span><br><span class="line"><span class="code">    server_name jenkins.caoxl.com;#监听的域名</span></span><br><span class="line"><span class="code">    access_log  /var/log/nginx/jenkins.access.log main;</span></span><br><span class="line"><span class="code">    error_log  /var/log/nginx/jenkins.error.log error;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    location / &#123; #转发或处理</span></span><br><span class="line"><span class="code">        proxy_pass http://127.0.0.1:8080; </span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    error_page   500 502 503 504  /50x.html;#错误页</span></span><br><span class="line"><span class="code">    location = /50x.html &#123;</span></span><br><span class="line"><span class="code">        root   /usr/share/nginx/html;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重载Nginx配置</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>报<code>-bash: nginx: command not found</code>, 解决办法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl sbin]# vi /etc/profile</span><br><span class="line">export PATH=$PATH:/usr/local/nginx/sbin  // Nginx可执行文件路径</span><br><span class="line">[root@caoxl sbin]# source /etc/profile</span><br></pre></td></tr></table></figure><h1 id="解决Jenkins插件下载慢的问题"><a href="#解决Jenkins插件下载慢的问题" class="headerlink" title="解决Jenkins插件下载慢的问题"></a>解决Jenkins插件下载慢的问题</h1><h2 id="修改插件下载链接"><a href="#修改插件下载链接" class="headerlink" title="修改插件下载链接"></a>修改插件下载链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/jenkins/hudson.model.UpdateCenter.xml</span><br><span class="line"></span><br><span class="line"><span class="section"># 修改</span></span><br><span class="line">https://updates.jenkins.io/update-center.json</span><br><span class="line"><span class="section"># 为</span></span><br><span class="line">http://mirror.xmission.com/jenkins/updates/update-center.json</span><br><span class="line"></span><br><span class="line"><span class="section"># 重新启动jenkins</span></span><br><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure><h2 id="修改default-json"><a href="#修改default-json" class="headerlink" title="修改default.json"></a>修改default.json</h2><p>cd 到<code>updates</code>目录,找到<code>default.json</code>文件</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl updates]# pwd</span><br><span class="line">/var/lib/jenkins/updates</span><br><span class="line">[root@caoxl updates]# ll</span><br><span class="line">total 2.2M</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 1.9M Jun  2 14:22 default.json</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 5.3K Jun  2 14:22 hudson.tasks.Maven.MavenInstaller</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 274K Jun  2 14:53 hudson.tools.JDKInstaller</span><br></pre></td></tr></table></figure><p>使用vi编辑文件，如下，替换所有插件下载的url</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:1,$s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g</span><br></pre></td></tr></table></figure><p>替换连接测试url</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:1,$s/http:\/\/www.google.com/https:\/\/www.baidu.com/g</span><br></pre></td></tr></table></figure><p><strong>进入vi先输入<code>:</code>然后再粘贴上边的<code>:</code>后边的命令，注意不要写两个冒号!</strong></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://juejin.im/post/5aa76e416fb9a028d37512c1" target="_blank" rel="noopener">使用CentOS7安装配置Jenkins</a></li><li><a href="https://ken.io/note/centos7-jenkins-install-tutorial" target="_blank" rel="noopener">CentOS 7 下Jenkins安装部署教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Jenkins是一个开源的支持自动化构建、部署等任务的平台。基本上可以说是持续集成（CI）、持续发布（CD）不可或缺的工具。&lt;br&gt;&lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jenkins 官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="CentOS7" scheme="http://blog.caoxl.com/tags/CentOS7/"/>
    
      <category term="Jenkins" scheme="http://blog.caoxl.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 安装部署 Gitlab</title>
    <link href="http://blog.caoxl.com/2020/06/01/Install-Gitlab-In-Centos7/"/>
    <id>http://blog.caoxl.com/2020/06/01/Install-Gitlab-In-Centos7/</id>
    <published>2020-06-01T01:46:29.000Z</published>
    <updated>2020-06-02T06:28:54.488Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>GitLab一个开源的git仓库管理平台，方便团队协作开发、管理。</p></blockquote><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装基础依赖"><a href="#安装基础依赖" class="headerlink" title="安装基础依赖"></a>安装基础依赖</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 安装基础依赖</span></span><br><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line"></span><br><span class="line"><span class="section"># 启动ssh服务&amp;设置为开机启动</span></span><br><span class="line">sudo systemctl enable sshd</span><br><span class="line">sudo systemctl start sshd</span><br></pre></td></tr></table></figure><h2 id="安装Postfix"><a href="#安装Postfix" class="headerlink" title="安装Postfix"></a>安装Postfix</h2><p>Postfix是一个邮件服务器，GitLab发送邮件需要用到</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#安装postfix</span></span><br><span class="line">sudo yum install -y postfix</span><br><span class="line"></span><br><span class="line"><span class="section">#启动postfix并设置为开机启动</span></span><br><span class="line">sudo systemctl enable postfix</span><br><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure><ul><li>报 <code>Job for postfix.service failed because the control process exited with error code. See &quot;systemctl status postfix.service&quot; and &quot;journalctl -xe&quot; for details.</code>错误, 解决办法:</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 修改 /etc/postfix/main.cf 的设置</span></span><br><span class="line">inet_protocols = ipv4</span><br><span class="line">inet_interfaces = all</span><br><span class="line"><span class="section"># 重新启动postfix即可</span></span><br><span class="line">sudo systemctl restart postfix.service</span><br></pre></td></tr></table></figure><h2 id="开放ssh以及http服务（80端口）"><a href="#开放ssh以及http服务（80端口）" class="headerlink" title="开放ssh以及http服务（80端口）"></a>开放ssh以及http服务（80端口）</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#开放ssh、http服务</span></span><br><span class="line">sudo firewall-cmd --add-service=ssh --permanent</span><br><span class="line">sudo firewall-cmd --add-service=http --permanent</span><br><span class="line"></span><br><span class="line"><span class="section">#重载防火墙规则</span></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><ul><li>报 <code>FirewallD is not running</code>, 解决办法:</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start firewalld</span><br></pre></td></tr></table></figure><h1 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h1><p>本次我们部署的是社区版:<code>gitlab-ce</code>，如果要部署商业版可以把关键字替换为：<code>gitlab-ee</code></p><h2 id="Yum安装GitLab"><a href="#Yum安装GitLab" class="headerlink" title="Yum安装GitLab"></a>Yum安装GitLab</h2><ul><li>添加GitLab社区版Package</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><ul><li>安装GitLab社区版</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y gitlab-ce</span><br></pre></td></tr></table></figure><p>安装成功后会看到gitlab-ce打印了以下图形</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">       *.                  *.</span></span><br><span class="line"><span class="code">      ***                 ***</span></span><br><span class="line"><span class="code">     *****               *****</span></span><br><span class="line"><span class="code">    .******             *******</span></span><br><span class="line"><span class="code">    ********            ********</span></span><br><span class="line">   ,,,,,,,,,<span class="strong">*****</span><span class="strong">*****</span>*,,,,,,,,,</span><br><span class="line">  ,,,,,,,,,,,<span class="strong">*****</span><span class="emphasis">***</span>*,,,,,,,,,,,</span><br><span class="line">  .,,,,,,,,,,,<span class="strong">*****</span>**,,,,,,,,,,,,</span><br><span class="line"><span class="code">      ,,,,,,,,,*****,,,,,,,,,.</span></span><br><span class="line"><span class="code">         ,,,,,,,****,,,,,,</span></span><br><span class="line"><span class="code">            .,,,***,,,,</span></span><br><span class="line"><span class="code">                ,*,.</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">     _______ __  __          __</span></span><br><span class="line"><span class="code">    / ____(_) /_/ /   ____ _/ /_</span></span><br><span class="line">   / / <span class="strong">__/ / __</span>/ /   / <span class="strong">__ `/ __</span> \</span><br><span class="line">  / /<span class="emphasis">_/ / / /_</span>/ /<span class="emphasis">___</span>/ /<span class="emphasis">_/ / /_</span>/ /</span><br><span class="line">  \<span class="strong">____/_/\__</span>/<span class="strong">_____</span>/\<span class="strong">__,_/_.__</span>_/</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">Thank you for installing GitLab!</span><br></pre></td></tr></table></figure><h2 id="配置GitLab站点Url"><a href="#配置GitLab站点Url" class="headerlink" title="配置GitLab站点Url"></a>配置GitLab站点Url</h2><p>GitLab默认的配置文件路径是<code>/etc/gitlab/gitlab.rb</code></p><p>默认的站点Url配置项是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">external_url 'http://gitlab.example.com'</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#修改配置文件</span></span><br><span class="line">sudo vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="section">#配置首页地址</span></span><br><span class="line">external_url 'http://gitlab.caoxl.com'</span><br></pre></td></tr></table></figure><ul><li>防火墙开启端口</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl init.d]# firewall-cmd --add-port=9999/tcp --permanent</span><br><span class="line">success</span><br></pre></td></tr></table></figure><h2 id="启动并访问Gitlab"><a href="#启动并访问Gitlab" class="headerlink" title="启动并访问Gitlab"></a>启动并访问Gitlab</h2><ul><li>启动Gitlab</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#重新配置并启动</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line"><span class="section">#完成后将会看到如下输出</span></span><br><span class="line">Running handlers:</span><br><span class="line">Running handlers complete</span><br><span class="line">Chef Client finished, 3/709 resources updated in 15 seconds</span><br><span class="line">gitlab Reconfigured!</span><br><span class="line"></span><br><span class="line"><span class="section">#启动</span></span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure><ul><li>访问Gitlab</li></ul><p>将设置的域名DNS解析到服务器IP，或者修改本地host将域名指向服务器IP。访问：<code>http://gitlab.caoxl.com</code></p><p>这时候会提示为管理员账号设置密码。管理员账号默认username是<code>root</code>。<br>设置完成之后即可使用<code>root</code>账号登录，登陆后会进入欢迎界面。</p><ul><li>报<code>ruby_block[authorize Grafana with GitLab] action run</code>,解决办法</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># vim /etc/gitlab/gitlab.rb</span></span><br><span class="line">monitoring[<span class="string">'grafana'</span>][<span class="symbol">'enable'</span>] = false</span><br></pre></td></tr></table></figure><ul><li>报 <code>Whoops, GitLab is taking too much time to respond. (502)错误</code>, 解决办法</li></ul><p>原因是端口被其他服务占用了，需要更换配置文件里得到端口 ，并且执行<code>gitlab-ctl reconfigure</code>, <code>gitlab-ctl restart</code> 就可以解决</p><h1 id="GitLab常用配置"><a href="#GitLab常用配置" class="headerlink" title="GitLab常用配置"></a>GitLab常用配置</h1><h2 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h2><p>配置邮箱可以让GitLab在发生相应事件的时候进行邮件通知<br>比如：找回密码、添加邮箱等</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#修改配置文件</span></span><br><span class="line">sudo vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="section">#邮件配置</span></span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>enable'] = true</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>address'] = 'smtp.163.com'</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>port'] = 465</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>user_name'] = 'yourmail@163.com'</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>password'] = 'yourpasswd'</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>domain'] = 'smtp.163.com'</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>authentication'] = 'login'</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>enable<span class="emphasis">_starttls_</span>auto'] = true</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>tls'] = true</span><br><span class="line">gitlab<span class="emphasis">_rails['gitlab_</span>email_enabled'] = true</span><br><span class="line">gitlab<span class="emphasis">_rails['gitlab_</span>email_from'] = 'yourmail@163.com'</span><br><span class="line">gitlab<span class="emphasis">_rails['gitlab_</span>email<span class="emphasis">_display_</span>name'] = 'Gitlab'</span><br><span class="line"></span><br><span class="line"><span class="section">#保存后，重新配置并启动GitLab</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h2 id="禁用创建组权限"><a href="#禁用创建组权限" class="headerlink" title="禁用创建组权限"></a>禁用创建组权限</h2><p>GitLab默认所有的注册用户都可以创建组。但对于团队来说，通常只会给Leader相关权限。<br>虽然可以在用户管理界面取消权限，但毕竟不方便。我们可以通过配置GitLab默认禁用创建组权限。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#修改配置文件</span></span><br><span class="line">sudo vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="section">#开启gitlab_rails['gitlab_default_can_create_group'] 选项，并将值设置为false</span></span><br><span class="line"><span class="section">### GitLab user privileges</span></span><br><span class="line">gitlab<span class="emphasis">_rails['gitlab_</span>default<span class="emphasis">_can_</span>create_group'] = false</span><br><span class="line"></span><br><span class="line"><span class="section">#保存后，重新配置并启动GitLab</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h2 id="gitlab-ctl常用命令介绍"><a href="#gitlab-ctl常用命令介绍" class="headerlink" title="gitlab-ctl常用命令介绍"></a>gitlab-ctl常用命令介绍</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl cmd</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>check-config</code></td><td style="text-align:left">检查在gitlab中是否有任何配置。在指定版本中删除的rb</td></tr><tr><td style="text-align:left"><code>deploy-page</code></td><td style="text-align:left">安装部署页面</td></tr><tr><td style="text-align:left"><code>diff-config</code></td><td style="text-align:left">将用户配置与包可用配置进行比较</td></tr><tr><td style="text-align:left"><code>remove-accounts</code></td><td style="text-align:left">删除所有用户和组</td></tr><tr><td style="text-align:left"><code>upgrade</code></td><td style="text-align:left">升级</td></tr><tr><td style="text-align:left"><code>once</code></td><td style="text-align:left">如果GitLab服务停止了就启动服务，如果已启动就不做任何操作</td></tr><tr><td style="text-align:left"><code>restart</code></td><td style="text-align:left">重启GitLab服务</td></tr><tr><td style="text-align:left"><code>start</code></td><td style="text-align:left">如果GitLab服务停止了就启动服务，如果已启动就重启服务</td></tr><tr><td style="text-align:left"><code>stop</code></td><td style="text-align:left">停止GitLab服务</td></tr><tr><td style="text-align:left"><code>status</code></td><td style="text-align:left">查看GitLab服务状态</td></tr><tr><td style="text-align:left"><code>reconfigure</code></td><td style="text-align:left">reconfigure重新配置GitLab并启动</td></tr></tbody></table><h1 id="解决Gitlab的Nginx以及自带Nginx冲突问题"><a href="#解决Gitlab的Nginx以及自带Nginx冲突问题" class="headerlink" title="解决Gitlab的Nginx以及自带Nginx冲突问题"></a>解决Gitlab的Nginx以及自带Nginx冲突问题</h1><blockquote><p>vim /etc/gitlab/gitlab.rb</p></blockquote><p>做以下修改:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 禁用Gitlab的nginx</span><br><span class="line">nginx['enable'] = false</span><br><span class="line"></span><br><span class="line">// 设置自建Nginx的用户, 查看用户命令看说明</span><br><span class="line">web<span class="emphasis">_server['external_</span>users'] = ['www']</span><br><span class="line"></span><br><span class="line">// 修改监听方式和监听地址</span><br><span class="line">gitlab<span class="emphasis">_workhorse['listen_</span>network'] = "tcp"</span><br><span class="line">gitlab<span class="emphasis">_workhorse['listen_</span>addr'] = "127.0.0.1:9999"</span><br><span class="line"></span><br><span class="line">// 最后执行下面命令让配置生效：</span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><ul><li><code>说明</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/local/nginx/conf/nginx.conf | grep user</span><br></pre></td></tr></table></figure><ul><li>配置Nginx, 新增<code>gitlab.conf</code></li></ul><blockquote><p><a href="https://gitlab.com/gitlab-org/gitlab-recipes/blob/master/web-server/nginx/gitlab-omnibus-nginx.conf" target="_blank" rel="noopener">官网提供配置 - gitlab-omnibus-nginx.conf</a></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">upstream gitlab-workhorse &#123;</span><br><span class="line"><span class="code">    server 127.0.0.1:9999; #根据实际情况修改, 与gitlab.rb中的gitlab_workhorse['listen_addr']一致</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">## Normal HTTP host</span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="code">    listen 80;</span></span><br><span class="line"><span class="code">    listen [::]:80 default_server;</span></span><br><span class="line"><span class="code">    server_name gitlab.caoxl.com; ## 修改成自己的域名；</span></span><br><span class="line"><span class="code">    server_tokens off; ## Don't show the nginx version number, a security best practice</span></span><br><span class="line"><span class="code">    root /opt/gitlab/embedded/service/gitlab-rails/public;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    ## See app/controllers/application_controller.rb for headers set</span></span><br><span class="line"></span><br><span class="line"><span class="code">    ## Individual nginx logs for this GitLab vhost</span></span><br><span class="line"><span class="code">    access_log  /var/log/nginx/gitlab_access.log; # 根据实际情况修改</span></span><br><span class="line"><span class="code">    error_log   /var/log/nginx/gitlab_error.log;  # 根据实际情况修改</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">    location / &#123;</span></span><br><span class="line"><span class="code">        client_max_body_size 0;</span></span><br><span class="line"><span class="code">        gzip off;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        ## https://github.com/gitlabhq/gitlabhq/issues/694</span></span><br><span class="line"><span class="code">        ## Some requests take more than 30 seconds.</span></span><br><span class="line"><span class="code">        proxy_read_timeout      300;</span></span><br><span class="line"><span class="code">        proxy_connect_timeout   300;</span></span><br><span class="line"><span class="code">        proxy_redirect          off;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        proxy_http_version 1.1;</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">        proxy_set_header    Host                $http_host;</span></span><br><span class="line"><span class="code">        proxy_set_header    X-Real-IP           $remote_addr;</span></span><br><span class="line"><span class="code">        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;</span></span><br><span class="line"><span class="code">        proxy_set_header    X-Forwarded-Proto   $scheme;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        proxy_pass http://gitlab-workhorse;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启Nginx: <code>sudo service nginx restart</code></li></ul><h1 id="解决Gitlab访问502问题"><a href="#解决Gitlab访问502问题" class="headerlink" title="解决Gitlab访问502问题"></a>解决Gitlab访问502问题</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R o+x /opt/gitlab/embedded/service//gitlab-rails/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GitLab一个开源的git仓库管理平台，方便团队协作开发、管理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Gitlab" scheme="http://blog.caoxl.com/tags/Gitlab/"/>
    
      <category term="CentOS7" scheme="http://blog.caoxl.com/tags/CentOS7/"/>
    
  </entry>
  
  <entry>
    <title>值得期待的PHP8新特性</title>
    <link href="http://blog.caoxl.com/2020/05/30/Hello-PHP8/"/>
    <id>http://blog.caoxl.com/2020/05/30/Hello-PHP8/</id>
    <published>2020-05-30T01:31:16.000Z</published>
    <updated>2020-05-30T03:14:05.415Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>罗列出 PHP8 中会发生的一些改变：新功能、性能改进和突破性变化。</p></blockquote><a id="more"></a><h1 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h1><h2 id="联合类型-Union-types"><a href="#联合类型-Union-types" class="headerlink" title="联合类型(Union types)"></a>联合类型(Union types)</h2><p>考虑到 PHP 的动态类型特性，联合类型在很多情况下都很有用。<br>联合类型是两个或多个类型的集合，这些类型指示可以使用这两个类型中的任何一个。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(Foo|Bar $input)</span>: <span class="title">int</span>|<span class="title">float</span></span>;</span><br></pre></td></tr></table></figure><p>请注意，void 永远不能是联合类型的一部分，因为它表示 “根本没有返回值”。</p><p>此外，可以使用 <code>|NULL</code> 或使用现有的 <code>？</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(Foo|null $foo)</span>: <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">(?Bar $bar)</span>: <span class="title">void</span></span>;</span><br></pre></td></tr></table></figure><h2 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h2><blockquote><p>JIT-Just-In-Time 编译器承诺显著提高性能，尽管在 Web 应用可能没有较大的好处。</p></blockquote><h2 id="静态返回类型-Static-return-types"><a href="#静态返回类型-Static-return-types" class="headerlink" title="静态返回类型 (Static return types)"></a>静态返回类型 (Static return types)</h2><p>虽然已经可以返回 self ，但在 PHP8 之前，静态不是有效的返回类型。考虑到 PHP 的动态类型特性，它对许多开发人员都很有用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span>: <span class="title">static</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">static</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="弱映射"><a href="#弱映射" class="headerlink" title="弱映射"></a>弱映射</h2><p>基于在 PHP 7.4 中添加的 <code>WeakRefs</code> RFC 的基础上，在 PHP 8 中 添加了 WeakMap 实现。<code>WeakMap</code> 包含对对象的引用，这不会阻止这些对象被垃圾回收。</p><p>以 ORM 为例，它们经常实现包含对实体类的引用的缓存，以提高实体之间关系的性能。<br>这些实体对象不能被垃圾回收，只要该缓存有对它们的引用，即使缓存是唯一引用它们的东西。</p><p>如果该缓存层改为使用弱引用和映射，则 PHP 将在其他对象不再引用这些对象时对它们进行垃圾回收。<br>特别是在 ORM 的情况下，它可以在一个请求中管理数百个 (如果不是数千个) 实体；弱映射可以提供一种更好、更资源友好的方式来处理这些对象。</p><p>以下是 Weak maps 的用法，RFC 中的一个示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WeakMap $cache;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSomethingWithCaching</span><span class="params">(object $obj)</span>: <span class="title">object</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;cache[$obj] ??= <span class="keyword">$this</span>-&gt;computeSomethingExpensive($obj);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可以在对象上使用-class"><a href="#可以在对象上使用-class" class="headerlink" title="可以在对象上使用 ::class"></a>可以在对象上使用 <code>::class</code></h2><p>一个小而有用的新特性：现在可以对对象使用 <code>::class</code>，而不必对它们使用 <code>get_class()</code>。<br>它的工作方式与 <code>get_class()</code> 相同。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$foo = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line">var_dump($foo::class);</span><br></pre></td></tr></table></figure><h2 id="创建-DateTime-对象的接口"><a href="#创建-DateTime-对象的接口" class="headerlink" title="创建 DateTime 对象的接口"></a>创建 DateTime 对象的接口</h2><p>您已经可以使用 <code>DateTime::createFromImmutable($immutableDateTime)</code>，从 <code>DateTimeImmutable</code> 对象创建 <code>DateTime</code> 对象，但是反过来很棘手。</p><p>通过添加 <code>DateTime::createFromInterface()</code> 和 <code>DatetimeImmutable::createFromInterface()</code>，现在有了一种将 <code>DateTime</code> 和 <code>DateTimeImmutable</code> 对象相互转换的通用方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DateTime::createFromInterface(DateTimeInterface $other);</span><br><span class="line"></span><br><span class="line">DateTimeImmutable::createFromInterface(DateTimeInterface $other);</span><br></pre></td></tr></table></figure><h2 id="新的-Stringable-接口"><a href="#新的-Stringable-接口" class="headerlink" title="新的 Stringable 接口"></a>新的 <code>Stringable</code> 接口</h2><p><code>Stringable</code> 接口可用于键入提示任何字符串或实现<code>__toString()</code>。<br>此外，每当类实现 <code>__toString()</code> 时，它都会自动在幕后实现接口，不需要手动实现它。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'foo'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">(Stringable $stringable)</span> </span>&#123; <span class="comment">/* … */</span> &#125;</span><br><span class="line"></span><br><span class="line">bar(<span class="keyword">new</span> Foo());</span><br><span class="line">bar(<span class="string">'abc'</span>);</span><br></pre></td></tr></table></figure><h2 id="新的-str-contains-函数"><a href="#新的-str-contains-函数" class="headerlink" title="新的 str_contains() 函数"></a>新的 <code>str_contains()</code> 函数</h2><blockquote><p>有些人可能会说这是早就应该实现的功能，但是我们最终不必再依赖 <code>strpos()</code> 来知道一个字符串是否包含另一个字符串。</p></blockquote><ul><li>以前:</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (strpos(<span class="string">'string with lots of words'</span>, <span class="string">'words'</span>) !== <span class="keyword">false</span>) &#123; <span class="comment">/* … */</span> &#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">- 现在:</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line">    <span class="keyword">if</span> (str_contains(<span class="string">'string with lots of words'</span>, <span class="string">'words'</span>)) &#123; <span class="comment">/* … */</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="新的-fdiv-函数"><a href="#新的-fdiv-函数" class="headerlink" title="新的 fdiv() 函数"></a>新的 <code>fdiv()</code> 函数</h2><p>新的 <code>fdiv()</code> 函数的作用类似于 <code>fmod()</code> 和 <code>intdiv()</code> 函数，它们<strong>允许被 0 整除</strong>。<br>您将得到 <code>INF</code>、<code>-INF</code> 或 <code>NaN</code> ，而不是错误，具体取决于大小写。</p><h2 id="新的-get-debug-type-函数"><a href="#新的-get-debug-type-函数" class="headerlink" title="新的 get_debug_type() 函数"></a>新的 <code>get_debug_type()</code> 函数</h2><p><code>get_debug_type()</code> 返回一个变量的类型。<br>听起来像是 <code>gettype()</code> 可以实现的功能。<br><code>get_debug_type()</code> 为数组、字符串、匿名类和对象返回更有用的输出。</p><p>例如，在类 <code>\foo\Bar</code> 上调用 <code>gettype()</code> 将返回 <code>Object</code>。<br>使用 <code>get_debug_type()</code> 将返回类名。</p><h2 id="改进-traits-里的抽象方法"><a href="#改进-traits-里的抽象方法" class="headerlink" title="改进 traits 里的抽象方法"></a>改进 <code>traits</code> 里的抽象方法</h2><p>traits 可以指定必须由使用它们的类实现的抽象方法。<br>但是有一个警告：在 PHP8 之前，这些方法实现的签名没有经过验证。<br>在以下代码中有效：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> Test &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(int $input)</span>: <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsesTrait</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Test</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($input)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用 traits 并实现其抽象方法时，PHP8 将执行正确的方法签名验证。<br>这意味着您需要改写以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsesTrait</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Test</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(int $input)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="token-get-all-的对象接口-RFC"><a href="#token-get-all-的对象接口-RFC" class="headerlink" title="token_get_all() 的对象接口 RFC"></a><code>token_get_all()</code> 的对象接口 RFC</h2><p>函数的作用是：返回值的是一个数组。<br>此 RFC 使用 <code>PhpToken::getall()</code> 方法添加一个 <code>PhpToken</code> 类。<br>此实现使用对象，而不是普通值。<br>它消耗更少的内存，更容易阅读。</p><h2 id="统一错误类型-RFC"><a href="#统一错误类型-RFC" class="headerlink" title="统一错误类型 RFC"></a>统一错误类型 RFC</h2><p>PHP 中的用户定义函数已经抛出 <code>TypeErrors</code>，但是内部函数没有抛出 <code>TypeErrors</code>，而是发出警告并返回 <code>NULL</code>。<br>从 PHP8 开始，内部函数的行为已经保持一致。</p><h2 id="默认错误报告级别"><a href="#默认错误报告级别" class="headerlink" title="默认错误报告级别"></a>默认错误报告级别</h2><p>现在是 <code>E_ALL</code>，而不是除 <code>E_NOTICE</code> 和 <code>E_DEVERATED</code> 之外的所有内容。<br>这意味着可能会弹出许多以前被悄悄忽略的错误，尽管在 PHP8 之前可能已经存在</p><h2 id="运算符不再忽略致命错误"><a href="#运算符不再忽略致命错误" class="headerlink" title="@运算符不再忽略致命错误"></a>@运算符不再忽略致命错误</h2><p>此更改可能会揭示在 PHP8 之前隐藏的错误。请确保在生产服务器上设置 <code>display_errors=off</code></p><h2 id="串联优先级-RFC"><a href="#串联优先级-RFC" class="headerlink" title="串联优先级 RFC"></a>串联优先级 RFC</h2><p>虽然在 PHP7.4 中已不推荐使用，但此更改现在生效。<br>如果你这样写的话：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"sum: "</span> . $a + $b;</span><br></pre></td></tr></table></figure><p>PHP 以前会这样解释它：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> (<span class="string">"sum: "</span> . $a) + $b;</span><br></pre></td></tr></table></figure><p>PHP 8 将会这样解释它：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"sum: "</span> . ($a + $b);</span><br></pre></td></tr></table></figure><h2 id="反射方法签名更改"><a href="#反射方法签名更改" class="headerlink" title="反射方法签名更改"></a>反射方法签名更改</h2><p>反射类的三个方法签名已更改：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReflectionClass::newInstance($args);</span><br><span class="line">ReflectionFunction::invoke($args);</span><br><span class="line">ReflectionMethod::invoke($object, $args);</span><br></pre></td></tr></table></figure><p>现已成为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReflectionClass::newInstance(...$args);</span><br><span class="line">ReflectionFunction::invoke(...$args);</span><br><span class="line">ReflectionMethod::invoke($object, ...$args);</span><br></pre></td></tr></table></figure><p>升级指南指定，如果您扩展了这些类，并且仍然希望同时支持 PHP 7 和 PHP 8，则允许以下签名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReflectionClass::newInstance($arg = <span class="keyword">null</span>, ...$args);</span><br><span class="line">ReflectionFunction::invoke($arg = <span class="keyword">null</span>, ...$args);</span><br><span class="line">ReflectionMethod::invoke($object, $arg = <span class="keyword">null</span>, ...$args);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;罗列出 PHP8 中会发生的一些改变：新功能、性能改进和突破性变化。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://blog.caoxl.com/categories/PHP/"/>
    
    
      <category term="PHP8" scheme="http://blog.caoxl.com/tags/PHP8/"/>
    
  </entry>
  
  <entry>
    <title>PHP面试/笔试题杂记 VIII</title>
    <link href="http://blog.caoxl.com/2020/05/21/Interview-Questions-Notes-VIII/"/>
    <id>http://blog.caoxl.com/2020/05/21/Interview-Questions-Notes-VIII/</id>
    <published>2020-05-21T03:35:49.000Z</published>
    <updated>2020-05-21T08:07:25.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>知识嘛就是常问常新.</p></blockquote><a id="more"></a><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="MySQL索引-全文索引-聚簇索引"><a href="#MySQL索引-全文索引-聚簇索引" class="headerlink" title="MySQL索引 (全文索引, 聚簇索引)"></a>MySQL索引 (全文索引, 聚簇索引)</h2><h3 id="FULLTEXT"><a href="#FULLTEXT" class="headerlink" title="FULLTEXT"></a>FULLTEXT</h3><p>即为全文索引，目前只有MyISAM引擎支持。其可以在CREATE TABLE ，ALTER TABLE ，CREATE INDEX 使用，不过目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。值得一提的是，在数据量较大时候，现将数据放入一个没有全局索引的表中，然后再用CREATE INDEX创建FULLTEXT索引，要比先为一张表建立FULLTEXT然后再将数据写入的速度快很多。</p><h3 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h3><ul><li>Hash 索引仅仅能满足”=”,”IN”和”&lt;=&gt;”查询，不能使用范围查询。</li></ul><p>由于 Hash 索引比较的是进行 Hash 运算之后的 Hash 值，所以它只能用于等值的过滤，不能用于基于范围的过滤，因为经过相应的 Hash 算法处理之后的 Hash 值的大小关系，并不能保证和Hash运算前完全一样。</p><ul><li>Hash 索引无法被用来避免数据的排序操作。</li></ul><p>由于 Hash 索引中存放的是经过 Hash 计算之后的 Hash 值，而且Hash值的大小关系并不一定和 Hash 运算前的键值完全一样，所以数据库无法利用索引的数据来避免任何排序运算；</p><ul><li>Hash 索引不能利用部分索引键查询。</li></ul><p>对于组合索引，Hash 索引在计算 Hash 值的时候是组合索引键合并后再一起计算 Hash 值，而不是单独计算 Hash 值，所以通过组合索引的前面一个或几个索引键进行查询的时候，Hash 索引也无法被利用。</p><ul><li>Hash 索引在任何时候都不能避免表扫描。</li></ul><p>前面已经知道，Hash 索引是将索引键通过 Hash 运算之后，将 Hash运算结果的 Hash 值和所对应的行指针信息存放于一个 Hash 表中，由于不同索引键存在相同 Hash 值，所以即使取满足某个 Hash 键值的数据的记录条数，也无法从 Hash 索引中直接完成查询，还是要通过访问表中的实际数据进行相应的比较，并得到相应的结果。</p><ul><li>Hash 索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。</li></ul><p>对于选择性比较低的索引键，如果创建 Hash 索引，那么将会存在大量记录指针信息存于同一个 Hash 值相关联。这样要定位某一条记录时就会非常麻烦，会浪费多次表数据的访问，而造成整体性能低下。</p><h3 id="BTREE"><a href="#BTREE" class="headerlink" title="BTREE"></a>BTREE</h3><p>BTREE索引就是一种将索引值按一定的算法，存入一个树形的数据结构中</p><h2 id="MySQL引擎-MyISAM-InnoDB"><a href="#MySQL引擎-MyISAM-InnoDB" class="headerlink" title="MySQL引擎 (MyISAM, InnoDB)"></a>MySQL引擎 (MyISAM, InnoDB)</h2><ul><li><code>MyISAM</code>类型不支持事务处理等高级处理，而<code>InnoDB</code>类型支持.</li><li><code>MyISAM</code>类型的表强调的是性能，其执行数度比<code>InnoDB</code>类型更快.</li><li><code>InnoDB</code>不支持<code>FULLTEXT</code>类型的索引.</li><li><code>InnoDB</code>中不保存表的具体行数，也就是说，执行<code>select count(*) from table</code>时，<code>InnoDB</code>要扫描一遍整个表来计算有多少行，但是<code>MyISAM</code>只要简单的读出保存好的行数即可.</li><li>对于<code>AUTO_INCREMENT</code>类型的字段，InnoDB中必须包含只有该字段的索引，但是在<code>MyISAM</code>表中，可以和其他字段一起建立联合索引。</li><li><code>DELETE FROM table</code>时，<code>InnoDB</code>不会重新建立表，而是一行一行的删除。</li><li><code>LOAD TABLE FROM MASTER</code>操作对<code>InnoDB</code>是不起作用的，解决方法是首先把<code>InnoDB</code>表改成<code>MyISAM</code>表，导入数据后再改成<code>InnoDB</code>表，但是对于使用的额外的<code>InnoDB</code>特性(例如外键)的表不适用.</li><li><code>MyISAM</code>支持表锁，<code>InnoDB</code>支持行锁。</li></ul><h2 id="MySQL优化方式"><a href="#MySQL优化方式" class="headerlink" title="MySQL优化方式"></a>MySQL优化方式</h2><h3 id="MySQL-优化常用方法"><a href="#MySQL-优化常用方法" class="headerlink" title="MySQL 优化常用方法"></a>MySQL 优化常用方法</h3><ol><li>选取最适用的字段属性 </li><li>使用连接（JOIN）来代替子查询(Sub-Queries) </li><li>使用联合(UNION)来代替手动创建的临时表</li><li>事务 </li><li>锁定表</li><li>使用外键 </li><li>使用索引 </li><li>优化的查询语句 </li></ol><h3 id="MySQL-性能优化方案"><a href="#MySQL-性能优化方案" class="headerlink" title="MySQL 性能优化方案"></a>MySQL 性能优化方案</h3><ul><li>列出mysql服务器运行各种状态值</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status;</span><br></pre></td></tr></table></figure><ul><li>查询mysql服务器配置信息语句</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables;</span><br></pre></td></tr></table></figure><h4 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'slow%';</span><br><span class="line">+---------------------+-------------------------------------------+</span><br><span class="line">| Variable_name       | Value                                     |</span><br><span class="line">+---------------------+-------------------------------------------+</span><br><span class="line">| slow<span class="emphasis">_launch_</span>time    | 2                                         |</span><br><span class="line">| slow<span class="emphasis">_query_</span>log      | ON                                        |</span><br><span class="line">| slow<span class="emphasis">_query_</span>log<span class="emphasis">_file | /home/mysql/data3056/mysql/slow_</span>query.log |</span><br><span class="line">+---------------------+-------------------------------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; show global status like 'slow%';</span><br><span class="line">+---------------------+-------+</span><br><span class="line">| Variable_name       | Value |</span><br><span class="line">+---------------------+-------+</span><br><span class="line">| Slow<span class="emphasis">_launch_</span>threads | 0     |</span><br><span class="line">| Slow_queries        | 52321 |</span><br><span class="line">+---------------------+-------+</span><br></pre></td></tr></table></figure><h4 id="连接数"><a href="#连接数" class="headerlink" title="连接数"></a>连接数</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'max_connections';</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| max_connections | 4532  |</span><br><span class="line">+-----------------+-------+</span><br></pre></td></tr></table></figure><ul><li>查询一下服务器响应的最大连接数：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'max<span class="emphasis">_used_</span>connections';</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Variable_name        | Value |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Max<span class="emphasis">_used_</span>connections | 835   |</span><br><span class="line">+----------------------+-------+</span><br></pre></td></tr></table></figure><h4 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'created_tmp%';</span><br><span class="line">+-------------------------+-----------+</span><br><span class="line">| Variable_name           | Value     |</span><br><span class="line">+-------------------------+-----------+</span><br><span class="line">| Created<span class="emphasis">_tmp_</span>disk_tables | 44999364  |</span><br><span class="line">| Created<span class="emphasis">_tmp_</span>files       | 1763      |</span><br><span class="line">| Created<span class="emphasis">_tmp_</span>tables      | 120658849 |</span><br><span class="line">+-------------------------+-----------+</span><br></pre></td></tr></table></figure><ul><li>查看一下mysql服务器对临时表的配置</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  show variables where variable<span class="emphasis">_name in ('tmp_</span>table<span class="emphasis">_size', 'max_</span>heap<span class="emphasis">_table_</span>size');</span><br><span class="line">+---------------------+----------+</span><br><span class="line">| Variable_name       | Value    |</span><br><span class="line">+---------------------+----------+</span><br><span class="line">| max<span class="emphasis">_heap_</span>table_size | 67108864 |</span><br><span class="line">| tmp<span class="emphasis">_table_</span>size      | 2097152  |</span><br><span class="line">+---------------------+----------+</span><br></pre></td></tr></table></figure><h4 id="open-table-情况"><a href="#open-table-情况" class="headerlink" title="open table 情况"></a>open table 情况</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'open%tables%';</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Open_tables   | 1998  |</span><br><span class="line">| Opened_tables | 7704  |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure><blockquote><p><code>open_tables</code> 表示打开表的数量，<code>opened_tables</code>表示打开过的表数量，如果<code>opened_tables</code>数量过大，说明配置中 <code>table_open_cache</code>(5.1.3之前这个值叫做<code>table_cache</code>)值可能太小，我们查询一下服务器<code>table_open_cache</code>：</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'table<span class="emphasis">_open_</span>cache';</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| table<span class="emphasis">_open_</span>cache | 2000  |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure><h4 id="进程使用情况"><a href="#进程使用情况" class="headerlink" title="进程使用情况"></a>进程使用情况</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'thread%';</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Threads_cached    | 10    |</span><br><span class="line">| Threads_connected | 736   |</span><br><span class="line">| Threads_created   | 85295 |</span><br><span class="line">| Threads_running   | 3     |</span><br><span class="line">+-------------------+-------+</span><br></pre></td></tr></table></figure><blockquote><p><code>threads_created</code>表示创建过的线程数，如果发现<code>threads_created</code>值过大的话，表明 mysql服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中<code>thread_cache_size</code>值，</p></blockquote><ul><li>查询服务器 thread_cache_size配置：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'thread<span class="emphasis">_cache_</span>size';</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| thread<span class="emphasis">_cache_</span>size | 100   |</span><br><span class="line">+-------------------+-------+</span><br></pre></td></tr></table></figure><h4 id="查询缓存-query-cache"><a href="#查询缓存-query-cache" class="headerlink" title="查询缓存(query cache)"></a>查询缓存(query cache)</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'qcache%';</span><br><span class="line">+-------------------------+-----------+</span><br><span class="line">| Variable_name           | Value     |</span><br><span class="line">+-------------------------+-----------+</span><br><span class="line">| Qcache<span class="emphasis">_free_</span>blocks      | 1         |</span><br><span class="line">| Qcache<span class="emphasis">_free_</span>memory      | 3128864   |</span><br><span class="line">| Qcache_hits             | 0         |</span><br><span class="line">| Qcache_inserts          | 0         |</span><br><span class="line">| Qcache<span class="emphasis">_lowmem_</span>prunes    | 0         |</span><br><span class="line">| Qcache<span class="emphasis">_not_</span>cached       | 712727780 |</span><br><span class="line">| Qcache<span class="emphasis">_queries_</span>in_cache | 0         |</span><br><span class="line">| Qcache<span class="emphasis">_total_</span>blocks     | 1         |</span><br><span class="line">+-------------------------+-----------+</span><br></pre></td></tr></table></figure><ul><li><code>Qcache_free_blocks</code>: 缓存中相邻内存块的个数。数目大说明可能有碎片。flush query cache会对缓存中的碎片进行整理，从而得到一个空闲块。</li><li><code>Qcache_free_memory</code>: 缓存中的空闲内存</li><li><code>Qcache_hits</code>: 每次查询在缓存中命中时就增大</li><li><code>Qcache_inserts</code>: 每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。</li><li><code>Qcache_lowmem_prunes</code>: 缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看；如果这个数字在不断增长，就表示可能碎片非常严重，或者内存 很少。（上面的 free_blocks和free_memory可以告诉您属于哪种情况）</li><li><code>Qcache_not_cached</code>: 不适合进行缓存的查询的数量，通常是由于这些查询不是 select 语句或者用了now()之类的函数。</li><li><code>Qcache_queries_in_cache</code>: 当前缓存的查询（和响应）的数量。</li><li><code>Qcache_total_blocks</code>: 缓存中块的数量。</li></ul><p>再查询一下服务器关于query_cache的配置：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'query_cache%';</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">| Variable_name                | Value   |</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">| query<span class="emphasis">_cache_</span>limit            | 1048576 |</span><br><span class="line">| query<span class="emphasis">_cache_</span>min<span class="emphasis">_res_</span>unit     | 1024    |</span><br><span class="line">| query<span class="emphasis">_cache_</span>size             | 3145728 |</span><br><span class="line">| query<span class="emphasis">_cache_</span>type             | OFF     |</span><br><span class="line">| query<span class="emphasis">_cache_</span>wlock_invalidate | OFF     |</span><br><span class="line">+------------------------------+---------+</span><br></pre></td></tr></table></figure><ul><li><code>query_cache_limit</code>: query_cache_limit</li><li><code>query_cache_min_res_unit</code>: 缓存块的最小大小</li><li><code>query_cache_size</code>: 查询缓存大小</li><li><code>query_cache_type</code>: 缓存类型，决定缓存什么样的查询，示例中表示不缓存 select sql_no_cache 查询</li><li><code>query_cache_wlock_invalidate</code>: 当有其他客户端正在对myisam表进行写操作时，如果查询在query cache中，是否返回cache结果还是等写操作完成再读表获取结果。</li></ul><h4 id="排序使用情况"><a href="#排序使用情况" class="headerlink" title="排序使用情况"></a>排序使用情况</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'sort%';</span><br><span class="line">+-------------------+----------+</span><br><span class="line">| Variable_name     | Value    |</span><br><span class="line">+-------------------+----------+</span><br><span class="line">| Sort<span class="emphasis">_merge_</span>passes | 3948     |</span><br><span class="line">| Sort_range        | 19442930 |</span><br><span class="line">| Sort_rows         | 87116099 |</span><br><span class="line">| Sort_scan         | 1748111  |</span><br><span class="line">+-------------------+----------+</span><br></pre></td></tr></table></figure><h4 id="文件打开数-open-files"><a href="#文件打开数-open-files" class="headerlink" title="文件打开数(open_files)"></a>文件打开数(open_files)</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'open_files';</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Open_files    | 10    |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'open<span class="emphasis">_files_</span>limit';</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| open<span class="emphasis">_files_</span>limit | 65535 |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure><p>比较合适的设置：<code>open_files / open_files_limit * 100% &lt;= 75%</code></p><h4 id="表锁情况"><a href="#表锁情况" class="headerlink" title="表锁情况"></a>表锁情况</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'table_locks%';</span><br><span class="line">+-----------------------+----------+</span><br><span class="line">| Variable_name         | Value    |</span><br><span class="line">+-----------------------+----------+</span><br><span class="line">| Table<span class="emphasis">_locks_</span>immediate | 61629615 |</span><br><span class="line">| Table<span class="emphasis">_locks_</span>waited    | 77       |</span><br><span class="line">+-----------------------+----------+</span><br></pre></td></tr></table></figure><ul><li><code>Table_locks_immediate</code>: 表示立即释放表锁数</li><li><code>Table_locks_waited</code>: 表示需要等待的表锁数</li></ul><p>如果 <code>table_locks_immediate / table_locks_waited &gt; 5000</code>，最好采用<code>innodb</code>引擎，因为<code>innodb</code>是行锁而<code>myisam</code>是表锁，对于高并发写入的应用<code>innodb</code>效果会好些</p><h4 id="表扫描情况"><a href="#表扫描情况" class="headerlink" title="表扫描情况"></a>表扫描情况</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'handler_read%';</span><br><span class="line">+-----------------------+--------------+</span><br><span class="line">| Variable_name         | Value        |</span><br><span class="line">+-----------------------+--------------+</span><br><span class="line">| Handler<span class="emphasis">_read_</span>first    | 177188783    |</span><br><span class="line">| Handler<span class="emphasis">_read_</span>key      | 3542386589   |</span><br><span class="line">| Handler<span class="emphasis">_read_</span>last     | 52930        |</span><br><span class="line">| Handler<span class="emphasis">_read_</span>next     | 445982431928 |</span><br><span class="line">| Handler<span class="emphasis">_read_</span>prev     | 89234087     |</span><br><span class="line">| Handler<span class="emphasis">_read_</span>rnd      | 2283006748   |</span><br><span class="line">| Handler<span class="emphasis">_read_</span>rnd_next | 175219902622 |</span><br><span class="line">+-----------------------+--------------+</span><br></pre></td></tr></table></figure><ul><li>服务器完成的查询请求次数: </li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'com_select';</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| Variable_name | Value     |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| Com_select    | 713039214 |</span><br><span class="line">+---------------+-----------+</span><br></pre></td></tr></table></figure><p>计算表扫描率: </p><blockquote><p>表扫描率 ＝ handler_read_rnd_next / com_select</p></blockquote><h2 id="MySQL-分库分表"><a href="#MySQL-分库分表" class="headerlink" title="MySQL 分库分表"></a>MySQL 分库分表</h2><h3 id="数据库主从"><a href="#数据库主从" class="headerlink" title="数据库主从"></a>数据库主从</h3><p>从数据库(Slave)是主数据库的备份，当主数据库(Master)变化时从数据库要更新，这些数据库软件可以设计更新周期。这是提高信息安全的手段。主从数据库服务器不在一个地理位置上，当发生意外时数据库可以保存。</p><ul><li>主从分工</li></ul><p>其中Master负责写操作的负载，也就是说一切写的操作都在Master上进行，而读的操作则分摊到Slave上进行。</p><ul><li>基本过程</li></ul><ol><li>Mysql的主从同步就是当master（主库）发生数据变化的时候，会实时同步到slave（从库）。</li><li>主从复制可以水平扩展数据库的负载能力，容错，高可用，数据备份。</li><li>不管是delete、update、insert，还是创建函数、存储过程，都是在master上，当master有操作的时候，slave会快速的接受到这些操作，从而做同步。</li></ol><ul><li>用途和条件</li></ul><ol><li>mysql主从复制用途<ul><li>实时灾备，用于故障切换</li><li>读写分离，提供查询服务</li><li>备份，避免影响业务</li></ul></li><li>主从部署必要条件：<ul><li>主库开启binlog日志（设置log-bin参数）</li><li>主从server-id不同</li><li>从库服务器能连通主库</li></ul></li></ol><h4 id="主从形式"><a href="#主从形式" class="headerlink" title="主从形式"></a>主从形式</h4><ul><li>一主一从</li><li>主主复制</li><li>一主多从—扩展系统读取的性能，因为读是在从库读取的;</li><li>多主一从—5.7开始支持</li><li>联级复制</li></ul><h4 id="主从同步的延迟等问题、原因及解决方案："><a href="#主从同步的延迟等问题、原因及解决方案：" class="headerlink" title="主从同步的延迟等问题、原因及解决方案："></a>主从同步的延迟等问题、原因及解决方案：</h4><ul><li>mysql数据库从库同步的延迟问题</li></ul><blockquote><p>MySQL数据库主从同步延迟原理mysql主从同步原理：主库针对写操作，顺序写binlog，从库单线程去主库顺序读”写操作的binlog”，从库取到binlog在本地原样执行（随机写），来保证主从数据逻辑上一致。mysql的主从复制都是单线程的操作，主库对所有DDL和DML产生binlog，binlog是顺序写，所以效率很高，slave的Slave_IO_Running线程到主库取日志，效率比较高，下一步，问题来了，slave的Slave_SQL_Running线程将主库的DDL和DML操作在slave实施。DML和DDL的IO操作是随即的，不是顺序的，成本高很多，还可能可slave上的其他查询产生lock争用，由于Slave_SQL_Running也是单线程的，所以一个DDL卡主了，需要执行10分钟，那么所有之后的DDL会等待这个DDL执行完才会继续执行，这就导致了延时。有朋友会问：“主库上那个相同的DDL也需要执行10分，为什么slave会延时？”，答案是master可以并发，Slave_SQL_Running线程却不可以。</p></blockquote><ul><li>MySql数据库从库同步的延迟解决方案</li></ul><ol><li>架构方面</li></ol><ul><li>业务的持久化层的实现采用分库架构，mysql服务可平行扩展，分散压力。</li><li>单个库读写分离，一主多从，主写从读，分散压力。这样从库压力比主库高，保护主库。</li><li>服务的基础架构在业务和mysql之间加入memcache或者redis的cache层。降低mysql的读压力。</li><li>不同业务的mysql物理上放在不同机器，分散压力。</li><li>使用比主库更好的硬件设备作为slave总结，mysql压力小，延迟自然会变小。</li></ul><ol start="2"><li>硬件方面</li></ol><ul><li>提高服务器性能</li></ul><ol start="3"><li>mysql主从同步加速</li></ol><ul><li>sync_binlog在slave端设置为0</li><li>–logs-slave-updates 从服务器从主服务器接收到的更新不记入它的二进制日志。</li><li>直接禁用slave端的binlog</li><li>slave端，如果使用的存储引擎是innodb，innodb_flush_log_at_trx_commit =2</li></ul><h3 id="水平分表"><a href="#水平分表" class="headerlink" title="水平分表"></a>水平分表</h3><p>例：QQ的登录表。假设QQ的用户有100亿，如果只有一张表，每个用户登录的时候数据库都要从这100亿中查找，会很慢很慢。如果将这一张表分成100份，每张表有1亿条，就小了很多，比如qq0,qq1,qq1…qq99表。</p><p>用户登录的时候，可以将用户的id%100，那么会得到0-99的数，查询表的时候，将表名qq跟取模的数连接起来，就构建了表名。比如123456789用户，取模的89，那么就到qq89表查询，查询的时间将会大大缩短。</p><p>这就是水平分割。</p><h3 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h3><p>也就是“大表拆小表”，基于列字段进行的。一般是表中的字段较多，将不常用的， 数据较大，长度较长（比如text类型字段）的拆分到“扩展表“。 一般是针对那种几百列的大表，也避免查询时，数据量太大造成的“跨页”问题。</p><h2 id="MySQL-如何做双机热备和负载均衡"><a href="#MySQL-如何做双机热备和负载均衡" class="headerlink" title="MySQL+如何做双机热备和负载均衡"></a>MySQL+如何做双机热备和负载均衡</h2><blockquote><p><a href="https://juejin.im/post/5ca2f93cf265da307261fae1" target="_blank" rel="noopener">MySQL 主从复制，双机热备</a></p></blockquote><h3 id="双机热备"><a href="#双机热备" class="headerlink" title="双机热备"></a>双机热备</h3><blockquote><p>所谓双机热备其实是一个复制的过程，复制过程中一个服务器充当主服务器，一个或多个服务器充当从服务。 这个复制的过程实质上是从服务器复制主服务器上MySQL的二进制日志（bin-log），并在从服务器上还原主服务器上的sql语句操作，这样只要两个数据库的初态是一样的，就能一直同步。</p></blockquote><p>实现双机热备，原理其实就是做两个机器的互相主从，我们把上述步骤主从对调，然后做一遍就能实现了双机热备了</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li>mysql读写分离</li></ul><p>mysql复制时，产生了多个数据副本（备库），为减少服务器压力，从库用于处理读操作，主库可同时处理读写是mysql集群实现读写分离的常用策略。</p><p>由于备库的复制是异步的，无法实时同步，读写分离的主要难点也在于从库上的脏数据。通常如果使用备库进行读，一般对数据的实时性要求不能太高。对此，mysql提供了几种常见的读写分离方式，例如基于查询的读写分离、基于脏数据、基于会话等，有兴趣可继续研究。</p><p>mysql设置的读写分离，减少了主库的请求量，将大量读的操作发送给从库，实现负载均衡。</p><ul><li>修改DNS</li></ul><p>通过n个服务器IP指定到一个域名，根据请求的不同标识特征，将请求发送给不同的IP服务器进行处理。</p><ul><li>引入中间件</li></ul><p>mysql官方提供了一个mysql负载的中间件，mysql_proxy，也需要在服务器上进行安装，修改配置文件（mysql的服务器IP）,实质与nginx类似，也是一个代理服务器。</p><h2 id="数据表类型有哪些"><a href="#数据表类型有哪些" class="headerlink" title="数据表类型有哪些"></a>数据表类型有哪些</h2><ul><li>MyISAM、InnoDB、HEAP、BOB,ARCHIVE,CSV等</li><li>MyISAM：成熟、稳定、易于管理，快速读取。一些功能不支持（事务等），表级锁。</li><li>InnoDB：支持事务、外键等特性、数据行锁定。空间占用大，不支持全文索引等。</li></ul><h2 id="MySQL-把一个大表拆分多个表后-如何解决跨表查询效率问题"><a href="#MySQL-把一个大表拆分多个表后-如何解决跨表查询效率问题" class="headerlink" title="MySQL 把一个大表拆分多个表后,如何解决跨表查询效率问题"></a>MySQL 把一个大表拆分多个表后,如何解决跨表查询效率问题</h2><h2 id="MySQL-对于大表-千万级-要怎么优化呢"><a href="#MySQL-对于大表-千万级-要怎么优化呢" class="headerlink" title="MySQL 对于大表(千万级),要怎么优化呢?"></a>MySQL 对于大表(千万级),要怎么优化呢?</h2><ol><li>优化SQL和索引</li><li>加缓存, Memcached, redis等</li><li>主从复制,读写分离</li><li>分库分表</li><li>分布式系统</li></ol><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>规范设计<ul><li>配置规范</li><li>建表规范</li><li>命名规范</li><li>索引规范</li><li>应用规范</li></ul></li><li>业务层优化<ul><li>业务拆分</li><li>数据拆分</li><li>读多写少优化场景<ul><li>采用缓存</li></ul></li><li>读少写多优化场景<ul><li>采用异步提交模式</li><li>使用队列技术</li><li>降低写入频率</li></ul></li></ul></li><li>架构层优化</li><li>管理优化<ul><li>数据清理如何做</li><li>数据变更如何做</li><li>尽可能避免数据碎片</li></ul></li></ul><h2 id="MySQL-的慢查询问题"><a href="#MySQL-的慢查询问题" class="headerlink" title="MySQL 的慢查询问题"></a>MySQL 的慢查询问题</h2><blockquote><p>其实通过慢查询日志来分析是一种比较简单的方式，如果不想看日志，可以借助工具来完成，<br>  如<code>mysqldumpslow</code>, <code>mysqlsla</code>, <code>myprofi</code>, <code>mysql-explain-slow-log</code>, <code>mysqllogfilter</code>等，感觉自己来分析一个需要丰富的经验，一个浪费时间。</p></blockquote><h2 id="SQL语言分4大类请列举"><a href="#SQL语言分4大类请列举" class="headerlink" title="SQL语言分4大类请列举 ?"></a>SQL语言分4大类请列举 ?</h2><ul><li>DDL–CREATE,DROP,ALTER</li></ul><blockquote><p>DDL 数据库定义语言 (Data Definition Language)</p></blockquote><ul><li>DML–INSERT,UPDATE,DELETE</li></ul><blockquote><p>数据库操纵语言 (Data Manipulation Language)</p></blockquote><ul><li>DQL–SELECT</li></ul><blockquote><p>数据库查询语言 (Data Query Language)</p></blockquote><ul><li>DCL–GRANT,REVOKE,COMMIT,ROLLBACK</li></ul><blockquote><p>数据库控制语言 (Data Control Language)</p></blockquote><h2 id="mysql-请写出数据类型-int-char-varchar-datetime-text-的意思"><a href="#mysql-请写出数据类型-int-char-varchar-datetime-text-的意思" class="headerlink" title="(mysql)请写出数据类型(int char varchar datetime text)的意思;"></a>(mysql)请写出数据类型(int char varchar datetime text)的意思;</h2><ul><li>int : 数值类型</li><li>char : 固定长度字符串类型</li><li>varchar : 可变长度字符串类型</li><li>datetime : 时期时间类型</li><li>text : 文本类型</li></ul><h3 id="varchar和char有什么区别"><a href="#varchar和char有什么区别" class="headerlink" title="varchar和char有什么区别:"></a>varchar和char有什么区别:</h3><ul><li>char 长度是固定的，不管你存储的数据是多少他都会是固定的长度。而varchar则是可变长度但他要在总长度上加1字符，这个用来存储位置。</li><li>char 固定长度，所以在处理速度上要比varchar快速很多，但是浪费存储空间，所以对存储不大，但在速度上有要求的可以使用char类型，反之可以用varchar类型来实例。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;知识嘛就是常问常新.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="笔试题" scheme="http://blog.caoxl.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Linux awk使用</title>
    <link href="http://blog.caoxl.com/2020/05/19/Linux-cmd-awk/"/>
    <id>http://blog.caoxl.com/2020/05/19/Linux-cmd-awk/</id>
    <published>2020-05-19T02:29:47.000Z</published>
    <updated>2020-05-19T03:11:01.407Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。</p></blockquote><a id="more"></a><h1 id="awk命令格式和选项"><a href="#awk命令格式和选项" class="headerlink" title="awk命令格式和选项"></a>awk命令格式和选项</h1><h2 id="语法形式"><a href="#语法形式" class="headerlink" title="语法形式"></a>语法形式</h2><blockquote><p>awk [options] ‘script’ var=value file(s)<br>awk [options] -f script_file var=value file(s)</p></blockquote><h3 id="常用命令选项"><a href="#常用命令选项" class="headerlink" title="常用命令选项"></a>常用命令选项</h3><ul><li>-F fs: fs指定输入分隔符, fs可以是字符串或正则表达式，如-F:</li><li>-v var=value 赋值一个用户定义变量，将外部变量传递给awk</li><li>-f script_file 从脚本文件中读取awk命令</li></ul><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><ul><li><code>log.txt</code>文本内容如下：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2 this is a test</span><br><span class="line">3 Are you like awk</span><br><span class="line">This's a test</span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure><h2 id="用法一"><a href="#用法一" class="headerlink" title="用法一:"></a>用法一:</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;[pattern] action&#125;' &#123;filenames&#125; # 行匹配语句 awk ''只能用单引号</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 每行按空格或TAB分割，输出文本中的1、4项</span></span><br><span class="line">[root@caoxl ~]# awk '&#123;print $1,$4&#125;' log.txt</span><br><span class="line">2 a</span><br><span class="line">3 like</span><br><span class="line">This's </span><br><span class="line">10 orange,apple,mongo</span><br><span class="line"></span><br><span class="line"><span class="section"># 格式化输出</span></span><br><span class="line">[root@caoxl ~]# awk '&#123;printf "%-8s %-10s\n",$1,$4&#125;' log.txt</span><br><span class="line">2        a         </span><br><span class="line">3        like      </span><br><span class="line">This's             </span><br><span class="line">10       orange,apple,mongo</span><br></pre></td></tr></table></figure><h2 id="用法二"><a href="#用法二" class="headerlink" title="用法二:"></a>用法二:</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F #-F相当于内置变了FS, 指定分割字符</span><br></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 使用","分割</span></span><br><span class="line">[root@caoxl ~]# awk -F, '&#123;print $1,$2&#125;' log.txt</span><br><span class="line">2 this is a test </span><br><span class="line">3 Are you like awk </span><br><span class="line">This's a test </span><br><span class="line">10 There are orange apple</span><br><span class="line"></span><br><span class="line"><span class="section"># 或者使用内建变量</span></span><br><span class="line">[root@caoxl ~]# awk 'BEGIN&#123;FS=","&#125;&#123;print $1,$2&#125;' log.txt</span><br><span class="line">2 this is a test </span><br><span class="line">3 Are you like awk </span><br><span class="line">This's a test </span><br><span class="line">10 There are orange apple</span><br><span class="line"></span><br><span class="line"><span class="section"># 使用多个分隔符.先使用空格分割，然后对分割结果再使用","分割</span></span><br><span class="line">2 this</span><br><span class="line">3 Are</span><br><span class="line">This's a</span><br><span class="line">10 There</span><br></pre></td></tr></table></figure><h2 id="用法三"><a href="#用法三" class="headerlink" title="用法三:"></a>用法三:</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -v # 设置变量</span><br></pre></td></tr></table></figure><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# awk -va=1 '&#123;print $1,$1+a&#125;' log.txt</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">This's 1</span><br><span class="line">10 11</span><br><span class="line"></span><br><span class="line">[root@caoxl ~]# awk -va=1 -vb=s '&#123;print $1,$1+a,$1b&#125;' log.txt</span><br><span class="line">2 3 2s</span><br><span class="line">3 4 3s</span><br><span class="line">This's 1 This'ss</span><br><span class="line">10 11 10s</span><br></pre></td></tr></table></figure><h2 id="用法四"><a href="#用法四" class="headerlink" title="用法四:"></a>用法四:</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -f &#123;awk脚本&#125; &#123;文件名&#125;</span><br></pre></td></tr></table></figure><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><ul><li><code>cal.awk</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#!/bin/awk -f</span></span><br><span class="line"><span class="section">#运行前</span></span><br><span class="line">BEGIN &#123;</span><br><span class="line"><span class="code">    math = 0</span></span><br><span class="line"><span class="code">    english = 0</span></span><br><span class="line"><span class="code">    computer = 0</span></span><br><span class="line"> </span><br><span class="line"><span class="code">    printf "NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n"</span></span><br><span class="line"><span class="code">    printf "---------------------------------------------\n"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">#运行中</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="code">    math+=$3</span></span><br><span class="line"><span class="code">    english+=$4</span></span><br><span class="line"><span class="code">    computer+=$5</span></span><br><span class="line"><span class="code">    printf "%-6s %-6s %4d %8d %8d %8d\n", $1, $2, $3, $4, $5, $3+$4+$5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">#运行后</span></span><br><span class="line">END &#123;</span><br><span class="line"><span class="code">    printf "---------------------------------------------\n"</span></span><br><span class="line"><span class="code">    printf "  TOTAL:%10d %8d %8d \n", math, english, computer</span></span><br><span class="line"><span class="code">    printf "AVERAGE:%10.2f %8.2f %8.2f\n", math/NR, english/NR, computer/NR</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>score.txt</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Marry   2143 78 84 77</span><br><span class="line">Jack    2321 66 78 45</span><br><span class="line">Tom     2122 48 77 71</span><br><span class="line">Mike    2537 87 97 95</span><br><span class="line">Bob     2415 40 57 62</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# awk -f cal.awk score.txt</span><br><span class="line">NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL</span><br><span class="line">---------------------------------------------</span><br><span class="line">Marry  2143     78       84       77      239</span><br><span class="line">Jack   2321     66       78       45      189</span><br><span class="line">Tom    2122     48       77       71      196</span><br><span class="line">Mike   2537     87       97       95      279</span><br><span class="line">Bob    2415     40       57       62      159</span><br><span class="line">---------------------------------------------</span><br><span class="line">  TOTAL:       319      393      350 </span><br><span class="line">AVERAGE:     63.80    78.60    70.00</span><br></pre></td></tr></table></figure><h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法:"></a>其他用法:</h2><ul><li>从文件中找出长度大于30的行</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# awk 'length&gt;30' log.txt </span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure><ul><li>打印九九乘法表</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# seq 9 | sed 'H;g' | awk -v RS='' '&#123;for(i=1;i<span class="xml"><span class="tag">&lt;<span class="name">=NF;i++)printf("%dx%d=%d%s",</span> <span class="attr">i</span>, <span class="attr">NR</span>, <span class="attr">i</span>*<span class="attr">NR</span>, <span class="attr">i</span>==<span class="string">NR?</span>"\<span class="attr">n</span>"<span class="attr">:</span>"\<span class="attr">t</span>")&#125;'</span></span></span><br><span class="line"><span class="xml">1x1=1</span></span><br><span class="line"><span class="xml">1x2=22x2=4</span></span><br><span class="line"><span class="xml">1x3=32x3=63x3=9</span></span><br><span class="line"><span class="xml">1x4=42x4=83x4=124x4=16</span></span><br><span class="line"><span class="xml">1x5=52x5=103x5=154x5=205x5=25</span></span><br><span class="line"><span class="xml">1x6=62x6=123x6=184x6=245x6=306x6=36</span></span><br><span class="line"><span class="xml">1x7=72x7=143x7=214x7=285x7=356x7=427x7=49</span></span><br><span class="line"><span class="xml">1x8=82x8=163x8=244x8=325x8=406x8=487x8=568x8=64</span></span><br><span class="line"><span class="xml">1x9=92x9=183x9=274x9=365x9=456x9=547x9=638x9=729x9=81</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.caoxl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.caoxl.com/tags/Linux/"/>
    
      <category term="awk" scheme="http://blog.caoxl.com/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 基础知识 II</title>
    <link href="http://blog.caoxl.com/2020/04/23/MySQL-Basic-Knowledge-II/"/>
    <id>http://blog.caoxl.com/2020/04/23/MySQL-Basic-Knowledge-II/</id>
    <published>2020-04-23T07:58:29.000Z</published>
    <updated>2020-04-23T09:13:26.210Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>闲来无事, 复习复习MySQL<br><a href="https://learnku.com/articles/27776" target="_blank" rel="noopener">原文地址: [记录] MySQL 学习笔记</a></p></blockquote><a id="more"></a><h1 id="连接与断开服务器"><a href="#连接与断开服务器" class="headerlink" title="连接与断开服务器"></a>连接与断开服务器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</span><br><span class="line">SHOW PROCESSLIST; -- 显示哪些线程正在运行</span><br><span class="line">SHOW VARIABLES;   -- 显示系统变量信息</span><br></pre></td></tr></table></figure><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 查看当前数据库</span><br><span class="line">    SELECT DATABASE();</span><br><span class="line">-- 显示当前时间、用户名、数据库版本</span><br><span class="line">    SELECT now(), user(), version();</span><br><span class="line">-- 创建库</span><br><span class="line">    CREATE DATABASE [IF NOT EXISTS] 数据库名 数据库选项</span><br><span class="line">    数据库选项：</span><br><span class="line">        CHARACTER SET charset_name</span><br><span class="line">        COLLATE collation_name。</span><br><span class="line">-- 查看已有库</span><br><span class="line">    SHOW DATABASES [LIKE &apos;PATTERN&apos;]</span><br><span class="line">-- 查看当前库信息</span><br><span class="line">    SHOW CREATE DATABASE 数据库名</span><br><span class="line">-- 修改库的选项信息</span><br><span class="line">    ALTER DATABASE 库名 选项信息</span><br><span class="line">-- 删除库</span><br><span class="line">    DROP DATABASE[ IF EXISTS] 数据库名</span><br><span class="line">        同时删除该数据库相关的目录及其目录内容</span><br></pre></td></tr></table></figure><h1 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表</span><br><span class="line">    CREATE [TEMPORARY] TABLE [IF NOT EXISTS] [库名.]表名 (表的结构定义)[表选项]</span><br><span class="line">        每个字段必须有数据类型</span><br><span class="line">        最后一个字段后不能有逗号</span><br><span class="line">        TEMPORARY 临时表，会话结束时表自动消失</span><br><span class="line">        对于字段的定义：</span><br><span class="line">            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT &apos;string&apos;]</span><br><span class="line"></span><br><span class="line">-- 表选项</span><br><span class="line">    -- 字符集</span><br><span class="line">        CHARSET = charset_name</span><br><span class="line">        如果表没有设定，则使用数据库字符集</span><br><span class="line">    -- 存储引擎</span><br><span class="line">        ENGINE = engine_name</span><br><span class="line">        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同</span><br><span class="line">        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive</span><br><span class="line">        不同的引擎在保存表的结构和数据时采用不同的方式</span><br><span class="line">        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引</span><br><span class="line">        InnoDB表文件含义：.frm表定义，表空间数据和日志文件</span><br><span class="line">        SHOW ENGINES -- 显示存储引擎的状态信息</span><br><span class="line">        SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息</span><br><span class="line">    -- 自增起始数</span><br><span class="line">        AUTO_INCREMENT = 行数</span><br><span class="line">    -- 数据文件目录</span><br><span class="line">        DATA DIRECTORY = &apos;目录&apos;</span><br><span class="line">    -- 索引文件目录</span><br><span class="line">        INDEX DIRECTORY = &apos;目录&apos;</span><br><span class="line">    -- 表注释</span><br><span class="line">        COMMENT = &apos;string&apos;</span><br><span class="line">    -- 分区选项</span><br><span class="line">        PARTITION BY ... (详细见手册)</span><br><span class="line"></span><br><span class="line">-- 查看所有表</span><br><span class="line">    SHOW TABLES[ LIKE &apos;pattern&apos;]</span><br><span class="line">    SHOW TABLES FROM 表名</span><br><span class="line"></span><br><span class="line">-- 查看表结构</span><br><span class="line">    SHOW CREATE TABLE 表名 （信息更详细）</span><br><span class="line">    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE &apos;PATTERN&apos;]</span><br><span class="line">    SHOW TABLE STATUS [FROM db_name] [LIKE &apos;pattern&apos;]</span><br><span class="line"></span><br><span class="line">-- 修改表</span><br><span class="line">    -- 修改表本身的选项</span><br><span class="line">        ALTER TABLE 表名 表的选项</span><br><span class="line">        eg: ALTER TABLE 表名 ENGINE=MYISAM;</span><br><span class="line">    -- 对表进行重命名</span><br><span class="line">        RENAME TABLE 原表名 TO 新表名</span><br><span class="line">        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）</span><br><span class="line">        -- RENAME可以交换两个表名</span><br><span class="line">    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）</span><br><span class="line">        ALTER TABLE 表名 操作名</span><br><span class="line">        -- 操作名</span><br><span class="line">            ADD[COLUMN] 字段定义        -- 增加字段</span><br><span class="line">                AFTER 字段名            -- 表示增加在该字段名后面</span><br><span class="line">                FIRST                  -- 表示增加在第一个</span><br><span class="line">            ADD PRIMARY KEY(字段名)     -- 创建主键</span><br><span class="line">            ADD UNIQUE [索引名] (字段名) -- 创建唯一索引</span><br><span class="line">            ADD INDEX [索引名] (字段名)  -- 创建普通索引</span><br><span class="line">            DROP[ COLUMN] 字段名        -- 删除字段</span><br><span class="line">            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)</span><br><span class="line">            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改</span><br><span class="line">            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)</span><br><span class="line">            DROP INDEX 索引名 -- 删除索引</span><br><span class="line">            DROP FOREIGN KEY 外键    -- 删除外键</span><br><span class="line"></span><br><span class="line">-- 删除表</span><br><span class="line">    DROP TABLE[ IF EXISTS] 表名 ...</span><br><span class="line"></span><br><span class="line">-- 清空表数据</span><br><span class="line">    TRUNCATE [TABLE] 表名</span><br><span class="line"></span><br><span class="line">-- 复制表结构</span><br><span class="line">    CREATE TABLE 表名 LIKE 要复制的表名</span><br><span class="line"></span><br><span class="line">-- 复制表结构和数据</span><br><span class="line">    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名</span><br><span class="line"></span><br><span class="line">-- 检查表是否有错误</span><br><span class="line">    CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line"></span><br><span class="line">-- 优化表</span><br><span class="line">    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br><span class="line"></span><br><span class="line">-- 修复表</span><br><span class="line">    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]</span><br><span class="line"></span><br><span class="line">-- 分析表</span><br><span class="line">    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 增</span><br><span class="line">    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]</span><br><span class="line">        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。</span><br><span class="line">        -- 可同时插入多条数据记录！</span><br><span class="line">        REPLACE 与 INSERT 完全一样，可互换。</span><br><span class="line">    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]</span><br><span class="line"></span><br><span class="line">-- 查</span><br><span class="line">    SELECT 字段列表 FROM 表名[其他子句]</span><br><span class="line">        -- 可来自多个表的多个字段</span><br><span class="line">        -- 其他子句可以不使用</span><br><span class="line">        -- 字段列表可以用*代替，表示所有字段</span><br><span class="line"></span><br><span class="line">-- 删</span><br><span class="line">    DELETE FROM 表名[ 删除条件子句]</span><br><span class="line">        没有条件子句，则会删除全部</span><br><span class="line"></span><br><span class="line">-- 改</span><br><span class="line">    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]</span><br></pre></td></tr></table></figure><h1 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- MySQL、数据库、表、字段均可设置编码</span><br><span class="line">-- 数据编码与客户端编码不需一致</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &apos;character_set_%&apos;;   -- 查看所有字符集编码项</span><br><span class="line">    character_set_client        客户端向服务器发送数据时使用的编码</span><br><span class="line">    character_set_results       服务器端将结果返回给客户端所使用的编码</span><br><span class="line">    character_set_connection    连接层编码</span><br><span class="line">SET 变量名 = 变量值</span><br><span class="line">    SET character_set_client = gbk;</span><br><span class="line">    SET character_set_results = gbk;</span><br><span class="line">    SET character_set_connection = gbk;</span><br><span class="line">SET NAMES GBK;  -- 相当于完成以上三个设置</span><br><span class="line"></span><br><span class="line">-- 校对集</span><br><span class="line">    校对集用以排序</span><br><span class="line">    SHOW CHARACTER SET [LIKE &apos;pattern&apos;]/SHOW CHARSET [LIKE &apos;pattern&apos;]   查看所有字符集</span><br><span class="line">    SHOW COLLATION [LIKE &apos;pattern&apos;]     查看所有校对集</span><br><span class="line">    CHARSET 字符集编码     设置字符集编码</span><br><span class="line">    COLLATE 校对集编码     设置校对集编码</span><br></pre></td></tr></table></figure><h1 id="数据类型-列类型"><a href="#数据类型-列类型" class="headerlink" title="数据类型 (列类型)"></a>数据类型 (列类型)</h1><ul><li><ol><li>数值类型</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-- a. 整型 ----------</span><br><span class="line">    类型         字节     范围（有符号位）</span><br><span class="line">    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255</span><br><span class="line">    smallint    2字节    -32768 ~ 32767</span><br><span class="line">    mediumint   3字节    -8388608 ~ 8388607</span><br><span class="line">    int         4字节</span><br><span class="line">    bigint      8字节</span><br><span class="line">    int(M)  M表示总位数</span><br><span class="line">    - 默认存在符号位，unsigned 属性修改</span><br><span class="line">    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改</span><br><span class="line">        例：int(5)   插入一个数&apos;123&apos;，补填后为&apos;00123&apos;</span><br><span class="line">    - 在满足要求的情况下，越小越好。</span><br><span class="line">    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。</span><br><span class="line"></span><br><span class="line">-- b. 浮点型 ----------</span><br><span class="line">    类型             字节     范围</span><br><span class="line">    float(单精度)     4字节</span><br><span class="line">    double(双精度)    8字节</span><br><span class="line">    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。</span><br><span class="line">        不同于整型，前后均会补填0.</span><br><span class="line">    定义浮点型时，需指定总位数和小数位数。</span><br><span class="line">        float(M, D)     double(M, D)</span><br><span class="line">        M表示总位数，D表示小数位数。</span><br><span class="line">        M和D的大小会决定浮点数的范围。不同于整型的固定范围。</span><br><span class="line">        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。</span><br><span class="line">        支持科学计数法表示。</span><br><span class="line">        浮点数表示近似值。</span><br><span class="line"></span><br><span class="line">-- c. 定点数 ----------</span><br><span class="line">    decimal -- 可变长度</span><br><span class="line">    decimal(M, D)   M也表示总位数，D表示小数位数。</span><br><span class="line">    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。</span><br><span class="line">    将浮点数转换为字符串来保存，每9位数字保存为4个字节。</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>字符串类型</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-- a. char, varchar ----------</span><br><span class="line">    char    定长字符串，速度快，但浪费空间</span><br><span class="line">    varchar 变长字符串，速度慢，但节省空间</span><br><span class="line">    M表示能存储的最大长度，此长度是字符数，非字节数。</span><br><span class="line">    不同的编码，所占用的空间不同。</span><br><span class="line">    char,最多255个字符，与编码无关。</span><br><span class="line">    varchar,最多65535字符，与编码有关。</span><br><span class="line">    一条有效记录最大不能超过65535个字节。</span><br><span class="line">        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符</span><br><span class="line">    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。</span><br><span class="line">    varchar 的最大有效长度由最大行大小和使用的字符集确定。</span><br><span class="line">    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。</span><br><span class="line">    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3</span><br><span class="line"></span><br><span class="line">-- b. blob, text ----------</span><br><span class="line">    blob 二进制字符串（字节字符串）</span><br><span class="line">        tinyblob, blob, mediumblob, longblob</span><br><span class="line">    text 非二进制字符串（字符字符串）</span><br><span class="line">        tinytext, text, mediumtext, longtext</span><br><span class="line">    text 在定义时，不需要定义长度，也不会计算总长度。</span><br><span class="line">    text 类型在定义时，不可给default值</span><br><span class="line"></span><br><span class="line">-- c. binary, varbinary ----------</span><br><span class="line">    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。</span><br><span class="line">    char, varchar, text 对应 binary, varbinary, blob.</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>日期时间类型</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">3. 日期时间类型</span><br><span class="line">    一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。</span><br><span class="line">    datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59</span><br><span class="line">    date        3字节    日期         1000-01-01 到 9999-12-31</span><br><span class="line">    timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07</span><br><span class="line">    time        3字节    时间         -838:59:59 到 838:59:59</span><br><span class="line">    year        1字节    年份         1901 - 2155</span><br><span class="line">datetime    YYYY-MM-DD hh:mm:ss</span><br><span class="line">timestamp   YY-MM-DD hh:mm:ss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">date        YYYY-MM-DD</span><br><span class="line">            YY-MM-DD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">time        hh:mm:ss</span><br><span class="line">            hhmmss</span><br><span class="line">            hhmmss</span><br><span class="line">year        YYYY</span><br><span class="line">            YY</span><br><span class="line">            YYYY</span><br><span class="line">            YY</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>枚举和集合</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 枚举(enum) ----------</span><br><span class="line">enum(val1, val2, val3...)</span><br><span class="line">    在已知的值中进行单选。最大数量为65535.</span><br><span class="line">    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。</span><br><span class="line">    表现为字符串类型，存储却是整型。</span><br><span class="line">    NULL值的索引是NULL。</span><br><span class="line">    空字符串错误值的索引值是0。</span><br><span class="line"></span><br><span class="line">-- 集合(set) ----------</span><br><span class="line">set(val1, val2, val3...)</span><br><span class="line">    create table tab ( gender set(&apos;男&apos;, &apos;女&apos;, &apos;无&apos;) );</span><br><span class="line">    insert into tab values (&apos;男, 女&apos;);</span><br><span class="line">    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。</span><br><span class="line">    当创建表时，SET成员值的尾部空格将自动被删除。</span><br></pre></td></tr></table></figure><h1 id="列属性-列约束"><a href="#列属性-列约束" class="headerlink" title="列属性 (列约束)"></a>列属性 (列约束)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">1. PRIMARY 主键</span><br><span class="line">    - 能唯一标识记录的字段，可以作为主键。</span><br><span class="line">    - 一个表只能有一个主键。</span><br><span class="line">    - 主键具有唯一性。</span><br><span class="line">    - 声明字段时，用 primary key 标识。</span><br><span class="line">        也可以在字段列表之后声明</span><br><span class="line">            例：create table tab ( id int, stu varchar(10), primary key (id));</span><br><span class="line">    - 主键字段的值不能为null。</span><br><span class="line">    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。</span><br><span class="line">        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));</span><br><span class="line"></span><br><span class="line">2. UNIQUE 唯一索引（唯一约束）</span><br><span class="line">    使得某字段的值也不能重复。</span><br><span class="line"></span><br><span class="line">3. NULL 约束</span><br><span class="line">    null不是数据类型，是列的一个属性。</span><br><span class="line">    表示当前列是否可以为null，表示什么都没有。</span><br><span class="line">    null, 允许为空。默认。</span><br><span class="line">    not null, 不允许为空。</span><br><span class="line">    insert into tab values (null, &apos;val&apos;);</span><br><span class="line">        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null</span><br><span class="line"></span><br><span class="line">4. DEFAULT 默认值属性</span><br><span class="line">    当前字段的默认值。</span><br><span class="line">    insert into tab values (default, &apos;val&apos;);    -- 此时表示强制使用默认值。</span><br><span class="line">    create table tab ( add_time timestamp default current_timestamp );</span><br><span class="line">        -- 表示将当前时间的时间戳设为默认值。</span><br><span class="line">        current_date, current_time</span><br><span class="line"></span><br><span class="line">5. AUTO_INCREMENT 自动增长约束</span><br><span class="line">    自动增长必须为索引（主键或unique）</span><br><span class="line">    只能存在一个字段为自动增长。</span><br><span class="line">    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;</span><br><span class="line"></span><br><span class="line">6. COMMENT 注释</span><br><span class="line">    例：create table tab ( id int ) comment &apos;注释内容&apos;;</span><br><span class="line"></span><br><span class="line">7. FOREIGN KEY 外键约束</span><br><span class="line">    用于限制主表与从表数据完整性。</span><br><span class="line">    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);</span><br><span class="line">        -- 将表t1的t1_id外键关联到表t2的id字段。</span><br><span class="line">        -- 每个外键都有一个名字，可以通过 constraint 指定</span><br><span class="line">    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。</span><br><span class="line">    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。</span><br><span class="line">    MySQL中，可以对InnoDB引擎使用外键约束：</span><br><span class="line">    语法：</span><br><span class="line">    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]</span><br><span class="line">    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。</span><br><span class="line">    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。</span><br><span class="line">    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：</span><br><span class="line">    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。</span><br><span class="line">    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。</span><br><span class="line">    3. restrict，拒绝父表删除和更新。</span><br><span class="line">    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。</span><br></pre></td></tr></table></figure><h1 id="建表规范"><a href="#建表规范" class="headerlink" title="建表规范"></a>建表规范</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- Normal Format, NF</span><br><span class="line">    - 每个表保存一个实体信息</span><br><span class="line">    - 每个具有一个ID字段作为主键</span><br><span class="line">    - ID主键 + 原子表</span><br><span class="line"></span><br><span class="line">-- 1NF, 第一范式</span><br><span class="line">    字段不能再分，就满足第一范式。</span><br><span class="line">-- 2NF, 第二范式</span><br><span class="line">    满足第一范式的前提下，不能出现部分依赖。</span><br><span class="line">    消除符合主键就可以避免部分依赖。增加单列关键字。</span><br><span class="line">-- 3NF, 第三范式</span><br><span class="line">    满足第二范式的前提下，不能出现传递依赖。</span><br><span class="line">    某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。</span><br><span class="line">    将一个实体信息的数据放在一个表内实现。</span><br></pre></td></tr></table></figure><h1 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT</span><br><span class="line"></span><br><span class="line">a. select_expr</span><br><span class="line">    -- 可以用 * 表示所有字段。</span><br><span class="line">        select * from tb;</span><br><span class="line">    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）</span><br><span class="line">        select stu, 29+25, now() from tb;</span><br><span class="line">    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。</span><br><span class="line">        - 使用 as 关键字，也可省略 as.</span><br><span class="line">        select stu+10 as add10 from tb;</span><br><span class="line"></span><br><span class="line">b. FROM 子句</span><br><span class="line">    用于标识查询来源。</span><br><span class="line">    -- 可以为表起别名。使用as关键字。</span><br><span class="line">        SELECT * FROM tb1 AS tt, tb2 AS bb;</span><br><span class="line">    -- from子句后，可以同时出现多个表。</span><br><span class="line">        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。</span><br><span class="line">        SELECT * FROM tb1, tb2;</span><br><span class="line">    -- 向优化符提示如何选择索引</span><br><span class="line">        USE INDEX、IGNORE INDEX、FORCE INDEX</span><br><span class="line">        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;</span><br><span class="line">        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;</span><br><span class="line"></span><br><span class="line">c. WHERE 子句</span><br><span class="line">    -- 从from获得的数据源中进行筛选。</span><br><span class="line">    -- 整型1表示真，0表示假。</span><br><span class="line">    -- 表达式由运算符和运算数组成。</span><br><span class="line">        -- 运算数：变量（字段）、值、函数返回值</span><br><span class="line">        -- 运算符：</span><br><span class="line">            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,</span><br><span class="line">            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor</span><br><span class="line">            is/is not 加上ture/false/unknown，检验某个值的真假</span><br><span class="line">            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较</span><br><span class="line"></span><br><span class="line">d. GROUP BY 子句, 分组子句</span><br><span class="line">    GROUP BY 字段/别名 [排序方式]</span><br><span class="line">    分组后会进行排序。升序：ASC，降序：DESC</span><br><span class="line">    以下[合计函数]需配合 GROUP BY 使用：</span><br><span class="line">    count 返回不同的非NULL值数目  count(*)、count(字段)</span><br><span class="line">    sum 求和</span><br><span class="line">    max 求最大值</span><br><span class="line">    min 求最小值</span><br><span class="line">    avg 求平均值</span><br><span class="line">    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。</span><br><span class="line"></span><br><span class="line">e. HAVING 子句，条件子句</span><br><span class="line">    与 where 功能、用法相同，执行时机不同。</span><br><span class="line">    where 在开始时执行检测数据，对原数据进行过滤。</span><br><span class="line">    having 对筛选出的结果再次进行过滤。</span><br><span class="line">    having 字段必须是查询出来的，where 字段必须是数据表存在的。</span><br><span class="line">    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。</span><br><span class="line">    where 不可以使用合计函数。一般需用合计函数才会用 having</span><br><span class="line">    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。</span><br><span class="line"></span><br><span class="line">f. ORDER BY 子句，排序子句</span><br><span class="line">    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...</span><br><span class="line">    升序：ASC，降序：DESC</span><br><span class="line">    支持多个字段的排序。</span><br><span class="line"></span><br><span class="line">g. LIMIT 子句，限制结果数量子句</span><br><span class="line">    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。</span><br><span class="line">    limit 起始位置, 获取条数</span><br><span class="line">    省略第一个参数，表示从索引0开始。limit 获取条数</span><br><span class="line"></span><br><span class="line">h. DISTINCT, ALL 选项</span><br><span class="line">    distinct 去除重复记录</span><br><span class="line">    默认为 all, 全部记录</span><br></pre></td></tr></table></figure><h1 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">将多个select查询的结果组合成一个结果集合。</span><br><span class="line">SELECT ... UNION [ALL|DISTINCT] SELECT ...</span><br><span class="line">默认 DISTINCT 方式，即所有返回的行都是唯一的</span><br><span class="line">建议，对每个SELECT查询加上小括号包裹。</span><br><span class="line">ORDER BY 排序时，需加上 LIMIT 进行结合。</span><br><span class="line">需要各select查询的字段数量一样。</span><br><span class="line">每个select查询的字段列表（数量、类型）应一致，因为结果中的字段名以第一条select语句为准。</span><br></pre></td></tr></table></figure><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- 子查询需用括号包裹。</span><br><span class="line">-- from型</span><br><span class="line">    from后要求是一个表，必须给子查询结果取个别名。</span><br><span class="line">    - 简化每个查询内的条件。</span><br><span class="line">    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。</span><br><span class="line">    - 子查询返回一个表，表型子查询。</span><br><span class="line">    select * from (select * from tb where id &gt; 0) as subfrom where id&gt;1;</span><br><span class="line"></span><br><span class="line">-- where型</span><br><span class="line">    - 子查询返回一个值，标量子查询。</span><br><span class="line">    - 不需要给子查询取别名。</span><br><span class="line">    - where子查询内的表，不能直接用以更新。</span><br><span class="line">    select * from tb where money = (select max(money) from tb);</span><br><span class="line">    -- 列子查询</span><br><span class="line">        如果子查询结果返回的是一列。</span><br><span class="line">        使用 in 或 not in 完成查询</span><br><span class="line">        exists 和 not exists 条件</span><br><span class="line">            如果子查询返回数据，则返回1或0。常用于判断条件。</span><br><span class="line">            select column1 from t1 where exists (select * from t2);</span><br><span class="line">    -- 行子查询</span><br><span class="line">        查询条件是一个行。</span><br><span class="line">        select * from t1 where (id, gender) in (select id, gender from t2);</span><br><span class="line">        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)</span><br><span class="line">        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。</span><br><span class="line">    -- 特殊运算符</span><br><span class="line">    != all()    相当于 not in</span><br><span class="line">    = some()    相当于 in。any 是 some 的别名</span><br><span class="line">    != some()   不等同于 not in，不等于其中某一个。</span><br><span class="line">    all, some 可以配合其他运算符一起使用。</span><br></pre></td></tr></table></figure><h1 id="连接查询-JOIN"><a href="#连接查询-JOIN" class="headerlink" title="连接查询 (JOIN)"></a>连接查询 (JOIN)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">将多个表的字段进行连接，可以指定连接条件。</span><br><span class="line">-- 内连接(inner join)</span><br><span class="line">    - 默认就是内连接，可省略inner。</span><br><span class="line">    - 只有数据存在时才能发送连接。即连接结果不能出现空行。</span><br><span class="line">    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）</span><br><span class="line">    也可用where表示连接条件。</span><br><span class="line">    还有 using, 但需字段名相同。 using(字段名)</span><br><span class="line">    -- 交叉连接 cross join</span><br><span class="line">        即，没有条件的内连接。</span><br><span class="line">        select * from tb1 cross join tb2;</span><br><span class="line"></span><br><span class="line">-- 外连接(outer join)</span><br><span class="line">    - 如果数据不存在，也会出现在连接结果中。</span><br><span class="line">    -- 左外连接 left join</span><br><span class="line">        如果数据不存在，左表记录会出现，而右表为null填充</span><br><span class="line">    -- 右外连接 right join</span><br><span class="line">        如果数据不存在，右表记录会出现，而左表为null填充</span><br><span class="line"></span><br><span class="line">-- 自然连接(natural join)</span><br><span class="line">    自动判断连接条件完成连接。</span><br><span class="line">    相当于省略了using，会自动查找相同字段名。</span><br><span class="line">    natural join</span><br><span class="line">    natural left join</span><br><span class="line">    natural right join</span><br></pre></td></tr></table></figure><h1 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">select语句获得的数据可以用insert插入。</span><br><span class="line">可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。</span><br><span class="line">    或者使用set语法。</span><br><span class="line">    INSERT INTO tbl_name SET field=value,...；</span><br><span class="line"></span><br><span class="line">可以一次性使用多个值，采用(), (), ();的形式。</span><br><span class="line">    INSERT INTO tbl_name VALUES (), (), ();</span><br><span class="line"></span><br><span class="line">可以在列值指定时，使用表达式。</span><br><span class="line">    INSERT INTO tbl_name VALUES (field_value, 10+10, now());</span><br><span class="line"></span><br><span class="line">可以使用一个特殊值 DEFAULT，表示该列使用默认值。</span><br><span class="line">    INSERT INTO tbl_name VALUES (field_value, DEFAULT);</span><br><span class="line"></span><br><span class="line">可以通过一个查询的结果，作为需要插入的值。</span><br><span class="line">    INSERT INTO tbl_name SELECT ...;</span><br><span class="line"></span><br><span class="line">可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。</span><br><span class="line">    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, ...;</span><br></pre></td></tr></table></figure><h1 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]</span><br><span class="line">按照条件删除。where</span><br><span class="line">指定删除的最多记录数。limit</span><br><span class="line">可以通过排序条件删除。order by + limit</span><br><span class="line">支持多表删除，使用类似连接语法。</span><br><span class="line">delete from 需要删除数据多表1，表2 using 表连接操作 条件。</span><br></pre></td></tr></table></figure><h1 id="TRUNCATE"><a href="#TRUNCATE" class="headerlink" title="TRUNCATE"></a>TRUNCATE</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE [TABLE] tbl_name</span><br><span class="line">清空数据</span><br><span class="line">删除重建表</span><br><span class="line">区别：</span><br><span class="line">1. truncate 是删除表再创建，delete 是逐条删除</span><br><span class="line">2. truncate 重置auto_increment的值。而delete不会</span><br><span class="line">3. truncate 不知道删除了几条，而delete知道。</span><br><span class="line">4. 当被用于带分区的表时，truncate 会保留分区</span><br></pre></td></tr></table></figure><h1 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h1><blockquote><p>备份，将数据的结构与表内数据保存起来。<br>  利用 mysqldump 指令完成。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 导出</span><br><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line">mysqldump [options] ---database DB1 [DB2 DB3...]</span><br><span class="line">mysqldump [options] --all--database</span><br><span class="line">1. 导出一张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span><br><span class="line">2. 导出多张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)</span><br><span class="line">3. 导出所有表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">4. 导出一个库</span><br><span class="line">　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">可以-w携带WHERE条件</span><br><span class="line"></span><br><span class="line">-- 导入</span><br><span class="line">1. 在登录mysql的情况下：</span><br><span class="line">　　source  备份文件</span><br><span class="line">2. 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><blockquote><p>什么是视图：<br>      视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。<br>      视图具有表结构文件，但不存在数据文件。<br>      对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。<br>      视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-- 创建视图</span><br><span class="line">CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW view_name [(column_list)] AS select_statement</span><br><span class="line">    - 视图名必须唯一，同时不能与表重名。</span><br><span class="line">    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。</span><br><span class="line">    - 可以指定视图执行的算法，通过ALGORITHM指定。</span><br><span class="line">    - column_list如果存在，则数目必须等于SELECT语句检索的列数</span><br><span class="line"></span><br><span class="line">-- 查看结构</span><br><span class="line">    SHOW CREATE VIEW view_name</span><br><span class="line"></span><br><span class="line">-- 删除视图</span><br><span class="line">    - 删除视图后，数据依然存在。</span><br><span class="line">    - 可同时删除多个视图。</span><br><span class="line">    DROP VIEW [IF EXISTS] view_name ...</span><br><span class="line"></span><br><span class="line">-- 修改视图结构</span><br><span class="line">    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。</span><br><span class="line">    ALTER VIEW view_name [(column_list)] AS select_statement</span><br><span class="line"></span><br><span class="line">-- 视图作用</span><br><span class="line">    1. 简化业务逻辑</span><br><span class="line">    2. 对客户端隐藏真实的表结构</span><br><span class="line"></span><br><span class="line">-- 视图算法(ALGORITHM)</span><br><span class="line">    MERGE       合并</span><br><span class="line">        将视图的查询语句，与外部查询需要先合并再执行！</span><br><span class="line">    TEMPTABLE   临时表</span><br><span class="line">        将视图执行完毕后，形成临时表，再做外层查询！</span><br><span class="line">    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。</span><br></pre></td></tr></table></figure><h1 id="事务-transaction"><a href="#事务-transaction" class="headerlink" title="事务 (transaction)"></a>事务 (transaction)</h1><blockquote><p>事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</p><pre><code>- 支持连续SQL的集体成功或集体撤销。- 事务是数据库在数据晚自习方面的一个功能。- 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。- InnoDB被称为事务安全型引擎。</code></pre></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">-- 事务开启</span><br><span class="line">    START TRANSACTION; 或者 BEGIN;</span><br><span class="line">    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。</span><br><span class="line"></span><br><span class="line">-- 事务提交</span><br><span class="line">    COMMIT;</span><br><span class="line"></span><br><span class="line">-- 事务回滚</span><br><span class="line">    ROLLBACK;</span><br><span class="line">    如果部分操作发生问题，映射到事务开启前。</span><br><span class="line"></span><br><span class="line">-- 事务的特性</span><br><span class="line">    1. 原子性（Atomicity）</span><br><span class="line">        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</span><br><span class="line">    2. 一致性（Consistency）</span><br><span class="line">        事务前后数据的完整性必须保持一致。</span><br><span class="line">        - 事务开始和结束时，外部数据一致</span><br><span class="line">        - 在整个事务过程中，操作是连续的</span><br><span class="line">    3. 隔离性（Isolation）</span><br><span class="line">        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。</span><br><span class="line">    4. 持久性（Durability）</span><br><span class="line">        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。</span><br><span class="line"></span><br><span class="line">-- 事务的实现</span><br><span class="line">    1. 要求是事务支持的表类型</span><br><span class="line">    2. 执行一组相关的操作前开启事务</span><br><span class="line">    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。</span><br><span class="line"></span><br><span class="line">-- 事务的原理</span><br><span class="line">    利用InnoDB的自动提交(autocommit)特性完成。</span><br><span class="line">    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。</span><br><span class="line">    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。</span><br><span class="line">-- 注意</span><br><span class="line">    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。</span><br><span class="line">    2. 事务不能被嵌套</span><br><span class="line"></span><br><span class="line">-- 保存点</span><br><span class="line">    SAVEPOINT 保存点名称 -- 设置一个事务保存点</span><br><span class="line">    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点</span><br><span class="line">    RELEASE SAVEPOINT 保存点名称 -- 删除保存点</span><br><span class="line"></span><br><span class="line">-- InnoDB自动提交特性设置</span><br><span class="line">    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。</span><br><span class="line">    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。</span><br><span class="line">    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，</span><br><span class="line">        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)</span><br><span class="line">        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)</span><br></pre></td></tr></table></figure><h1 id="锁表"><a href="#锁表" class="headerlink" title="锁表"></a>锁表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表锁定只用于防止其它客户端进行不正当地读取和写入</span><br><span class="line">MyISAM 支持表锁，InnoDB 支持行锁</span><br><span class="line">-- 锁定</span><br><span class="line">    LOCK TABLES tbl_name [AS alias]</span><br><span class="line">-- 解锁</span><br><span class="line">    UNLOCK TABLES</span><br></pre></td></tr></table></figure><h1 id="SQL编程"><a href="#SQL编程" class="headerlink" title="SQL编程"></a>SQL编程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">--// 局部变量 ----------</span><br><span class="line">-- 变量声明</span><br><span class="line">    declare var_name[,...] type [default value]</span><br><span class="line">    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。</span><br><span class="line">-- 赋值</span><br><span class="line">    使用 set 和 select into 语句为变量赋值。</span><br><span class="line">    - 注意：在函数内是可以使用全局变量（用户自定义的变量）</span><br><span class="line"></span><br><span class="line">--// 全局变量 ----------</span><br><span class="line">-- 定义、赋值</span><br><span class="line">set 语句可以定义并为变量赋值。</span><br><span class="line">set @var = value;</span><br><span class="line">也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。</span><br><span class="line">还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。</span><br><span class="line">select @var:=20;</span><br><span class="line">select @v1:=id, @v2=name from t1 limit 1;</span><br><span class="line">select * from tbl_name where @var:=30;</span><br><span class="line">select into 可以将表中查询获得的数据赋给变量。</span><br><span class="line">    -| select max(height) into @max_height from tb;</span><br><span class="line"></span><br><span class="line">-- 自定义变量名</span><br><span class="line">为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。</span><br><span class="line">@var=10;</span><br><span class="line">    - 变量被定义后，在整个会话周期都有效（登录到退出）</span><br><span class="line"></span><br><span class="line">--// 控制结构 ----------</span><br><span class="line">-- if语句</span><br><span class="line">if search_condition then</span><br><span class="line">    statement_list   </span><br><span class="line">[elseif search_condition then</span><br><span class="line">    statement_list]</span><br><span class="line">...</span><br><span class="line">[else</span><br><span class="line">    statement_list]</span><br><span class="line">end if;</span><br><span class="line">-- case语句</span><br><span class="line">CASE value WHEN [compare-value] THEN result</span><br><span class="line">[WHEN [compare-value] THEN result ...]</span><br><span class="line">[ELSE result]</span><br><span class="line">END</span><br><span class="line">-- while循环</span><br><span class="line">[begin_label:] while search_condition do</span><br><span class="line">    statement_list</span><br><span class="line">end while [end_label];</span><br><span class="line">- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。</span><br><span class="line">    -- 退出循环</span><br><span class="line">        退出整个循环 leave</span><br><span class="line">        退出当前循环 iterate</span><br><span class="line">        通过退出的标签决定退出哪个循环</span><br></pre></td></tr></table></figure><ul><li>内置函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">-- 数值函数</span><br><span class="line">abs(x)          -- 绝对值 abs(-10.9) = 10</span><br><span class="line">format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span><br><span class="line">ceil(x)         -- 向上取整 ceil(10.1) = 11</span><br><span class="line">floor(x)        -- 向下取整 floor (10.1) = 10</span><br><span class="line">round(x)        -- 四舍五入去整</span><br><span class="line">mod(m, n)       -- m%n m mod n 求余 10%3=1</span><br><span class="line">pi()            -- 获得圆周率</span><br><span class="line">pow(m, n)       -- m^n</span><br><span class="line">sqrt(x)         -- 算术平方根</span><br><span class="line">rand()          -- 随机数</span><br><span class="line">truncate(x, d)  -- 截取d位小数</span><br><span class="line"></span><br><span class="line">-- 时间日期函数</span><br><span class="line">now(), current_timestamp();     -- 当前日期时间</span><br><span class="line">current_date();                 -- 当前日期</span><br><span class="line">current_time();                 -- 当前时间</span><br><span class="line">date(&apos;yyyy-mm-dd hh:ii:ss&apos;);    -- 获取日期部分</span><br><span class="line">time(&apos;yyyy-mm-dd hh:ii:ss&apos;);    -- 获取时间部分</span><br><span class="line">date_format(&apos;yyyy-mm-dd hh:ii:ss&apos;, &apos;%d %y %a %d %m %b %j&apos;); -- 格式化时间</span><br><span class="line">unix_timestamp();               -- 获得unix时间戳</span><br><span class="line">from_unixtime();                -- 从时间戳获得时间</span><br><span class="line"></span><br><span class="line">-- 字符串函数</span><br><span class="line">length(string)          -- string长度，字节</span><br><span class="line">char_length(string)     -- string的字符个数</span><br><span class="line">substring(str, position [,length])      -- 从str的position开始,取length个字符</span><br><span class="line">replace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str</span><br><span class="line">instr(string ,substring)    -- 返回substring首次在string中出现的位置</span><br><span class="line">concat(string [,...])   -- 连接字串</span><br><span class="line">charset(str)            -- 返回字串字符集</span><br><span class="line">lcase(string)           -- 转换成小写</span><br><span class="line">left(string, length)    -- 从string2中的左边起取length个字符</span><br><span class="line">load_file(file_name)    -- 从文件读取内容</span><br><span class="line">locate(substring, string [,start_position]) -- 同instr,但可指定开始位置</span><br><span class="line">lpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length</span><br><span class="line">ltrim(string)           -- 去除前端空格</span><br><span class="line">repeat(string, count)   -- 重复count次</span><br><span class="line">rpad(string, length, pad)   --在str后用pad补充,直到长度为length</span><br><span class="line">rtrim(string)           -- 去除后端空格</span><br><span class="line">strcmp(string1 ,string2)    -- 逐字符比较两字串大小</span><br><span class="line"></span><br><span class="line">-- 流程函数</span><br><span class="line">case when [condition] then result [when [condition] then result ...] [else result] end   多分支</span><br><span class="line">if(expr1,expr2,expr3)  双分支。</span><br><span class="line"></span><br><span class="line">-- 聚合函数</span><br><span class="line">count()</span><br><span class="line">sum();</span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">avg();</span><br><span class="line">group_concat()</span><br><span class="line"></span><br><span class="line">-- 其他常用函数</span><br><span class="line">md5();</span><br><span class="line">default();</span><br></pre></td></tr></table></figure><ul><li>存储函数，自定义函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 新建</span><br><span class="line">    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型</span><br><span class="line">        函数体</span><br><span class="line">    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。</span><br><span class="line">    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。</span><br><span class="line">    - 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。</span><br><span class="line">    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。</span><br><span class="line">    - 多条语句应该使用 begin...end 语句块包含。</span><br><span class="line">    - 一定要有 return 返回值语句。</span><br><span class="line"></span><br><span class="line">-- 删除</span><br><span class="line">    DROP FUNCTION [IF EXISTS] function_name;</span><br><span class="line"></span><br><span class="line">-- 查看</span><br><span class="line">    SHOW FUNCTION STATUS LIKE &apos;PATTEN&apos;</span><br><span class="line">    SHOW CREATE FUNCTION function_name;</span><br><span class="line"></span><br><span class="line">-- 修改</span><br><span class="line">    ALTER FUNCTION function_name 函数选项</span><br></pre></td></tr></table></figure><ul><li>存储过程，自定义功能</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-- 定义</span><br><span class="line">存储存储过程 是一段代码（过程），存储在数据库中的sql组成。</span><br><span class="line">一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。</span><br><span class="line">而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。</span><br><span class="line"></span><br><span class="line">-- 创建</span><br><span class="line">CREATE PROCEDURE sp_name (参数列表)</span><br><span class="line">    过程体</span><br><span class="line">参数列表：不同于函数的参数列表，需要指明参数类型</span><br><span class="line">IN，表示输入型</span><br><span class="line">OUT，表示输出型</span><br><span class="line">INOUT，表示混合型</span><br><span class="line">注意，没有返回值。</span><br><span class="line"></span><br><span class="line">-- 存储过程</span><br><span class="line">存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。</span><br><span class="line">调用：CALL 过程名</span><br><span class="line">-- 注意</span><br><span class="line">- 没有返回值。</span><br><span class="line">- 只能单独调用，不可夹杂在其他语句中</span><br><span class="line">-- 参数</span><br><span class="line">IN|OUT|INOUT 参数名 数据类型</span><br><span class="line">IN      输入：在调用过程中，将数据输入到过程体内部的参数</span><br><span class="line">OUT     输出：在调用过程中，将过程体处理完的结果返回到客户端</span><br><span class="line">INOUT   输入输出：既可输入，也可输出</span><br><span class="line">-- 语法</span><br><span class="line">CREATE PROCEDURE 过程名 (参数列表)</span><br><span class="line">BEGIN</span><br><span class="line">    过程体</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h1 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">-- root密码重置</span><br><span class="line">1. 停止MySQL服务</span><br><span class="line">2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &amp;</span><br><span class="line">    [Windows] mysqld --skip-grant-tables</span><br><span class="line">3. use mysql;</span><br><span class="line">4. UPDATE `user` SET PASSWORD=PASSWORD(&quot;密码&quot;) WHERE `user` = &quot;root&quot;;</span><br><span class="line">5. FLUSH PRIVILEGES;</span><br><span class="line">用户信息表：mysql.user</span><br><span class="line"></span><br><span class="line">-- 刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">-- 增加用户</span><br><span class="line">CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)</span><br><span class="line">    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。</span><br><span class="line">    - 只能创建用户，不能赋予权限。</span><br><span class="line">    - 用户名，注意引号：如 &apos;user_name&apos;@&apos;192.168.1.1&apos;</span><br><span class="line">    - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span><br><span class="line"></span><br><span class="line">-- 重命名用户</span><br><span class="line">RENAME USER old_user TO new_user</span><br><span class="line"></span><br><span class="line">-- 设置密码</span><br><span class="line">SET PASSWORD = PASSWORD(&apos;密码&apos;)  -- 为当前用户设置密码</span><br><span class="line">SET PASSWORD FOR 用户名 = PASSWORD(&apos;密码&apos;) -- 为指定用户设置密码</span><br><span class="line"></span><br><span class="line">-- 删除用户</span><br><span class="line">DROP USER 用户名</span><br><span class="line"></span><br><span class="line">-- 分配权限/添加用户</span><br><span class="line">GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &apos;password&apos;]</span><br><span class="line">    - all privileges 表示所有权限</span><br><span class="line">    - *.* 表示所有库的所有表</span><br><span class="line">    - 库名.表名 表示某库下面的某表</span><br><span class="line">    GRANT ALL PRIVILEGES ON `pms`.* TO &apos;pms&apos;@&apos;%&apos; IDENTIFIED BY &apos;pms0817&apos;;</span><br><span class="line"></span><br><span class="line">-- 查看权限</span><br><span class="line">SHOW GRANTS FOR 用户名</span><br><span class="line">    -- 查看当前用户权限</span><br><span class="line">    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();</span><br><span class="line"></span><br><span class="line">-- 撤消权限</span><br><span class="line">REVOKE 权限列表 ON 表名 FROM 用户名</span><br><span class="line">REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限</span><br><span class="line"></span><br><span class="line">-- 权限层级</span><br><span class="line">-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。</span><br><span class="line">全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user</span><br><span class="line">    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。</span><br><span class="line">数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host</span><br><span class="line">    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。</span><br><span class="line">表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv</span><br><span class="line">    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。</span><br><span class="line">列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv</span><br><span class="line">    当使用REVOKE时，您必须指定与被授权列相同的列。</span><br><span class="line"></span><br><span class="line">-- 权限列表</span><br><span class="line">ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限</span><br><span class="line">ALTER   -- 允许使用ALTER TABLE</span><br><span class="line">ALTER ROUTINE   -- 更改或取消已存储的子程序</span><br><span class="line">CREATE  -- 允许使用CREATE TABLE</span><br><span class="line">CREATE ROUTINE  -- 创建已存储的子程序</span><br><span class="line">CREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE</span><br><span class="line">CREATE USER;     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span><br><span class="line">CREATE VIEW     -- 允许使用CREATE VIEW</span><br><span class="line">DELETE  -- 允许使用DELETE</span><br><span class="line">DROP    -- 允许使用DROP TABLE</span><br><span class="line">EXECUTE     -- 允许用户运行已存储的子程序</span><br><span class="line">FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span><br><span class="line">INDEX   -- 允许使用CREATE INDEX和DROP INDEX</span><br><span class="line">INSERT  -- 允许使用INSERT</span><br><span class="line">LOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES</span><br><span class="line">PROCESS     -- 允许使用SHOW FULL PROCESSLIST</span><br><span class="line">REFERENCES  -- 未被实施</span><br><span class="line">RELOAD  -- 允许使用FLUSH</span><br><span class="line">REPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址</span><br><span class="line">REPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span><br><span class="line">SELECT  -- 允许使用SELECT</span><br><span class="line">SHOW DATABASES  -- 显示所有数据库</span><br><span class="line">SHOW VIEW   -- 允许使用SHOW CREATE VIEW</span><br><span class="line">SHUTDOWN    -- 允许使用mysqladmin shutdown</span><br><span class="line">SUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span><br><span class="line">UPDATE  -- 允许使用UPDATE</span><br><span class="line">USAGE   -- “无权限”的同义词</span><br><span class="line">GRANT OPTION    -- 允许授予权限</span><br></pre></td></tr></table></figure><h1 id="表维护"><a href="#表维护" class="headerlink" title="表维护"></a>表维护</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 分析和存储表的关键字分布</span><br><span class="line">ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...</span><br><span class="line"></span><br><span class="line">-- 检查一个或多个表是否有错误</span><br><span class="line">CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;</span><br><span class="line"></span><br><span class="line">-- 整理数据文件的碎片</span><br><span class="line">OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span><br><span class="line"></span><br><span class="line">2. 每个库目录存在一个保存当前数据库的选项文件db.opt。</span><br><span class="line"></span><br><span class="line">3. 注释：</span><br><span class="line">    单行注释 # 注释内容</span><br><span class="line">    多行注释 /* 注释内容 */</span><br><span class="line">    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span><br><span class="line"></span><br><span class="line">4. 模式通配符：</span><br><span class="line">    _   任意单个字符</span><br><span class="line">    %   任意多个字符，甚至包括零字符</span><br><span class="line">    单引号需要进行转义 \&apos;</span><br><span class="line"></span><br><span class="line">5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\G&quot;, &quot;\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span><br><span class="line"></span><br><span class="line">6. SQL对大小写不敏感</span><br><span class="line"></span><br><span class="line">7. 清除已有语句：\c</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;闲来无事, 复习复习MySQL&lt;br&gt;&lt;a href=&quot;https://learnku.com/articles/27776&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址: [记录] MySQL 学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://blog.caoxl.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://blog.caoxl.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Swoole 再深入</title>
    <link href="http://blog.caoxl.com/2020/04/09/Swoole-Learn-More/"/>
    <id>http://blog.caoxl.com/2020/04/09/Swoole-Learn-More/</id>
    <published>2020-04-09T03:55:42.000Z</published>
    <updated>2020-04-10T06:41:13.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>问即是学</p></blockquote><a id="more"></a><h1 id="基础编程知识"><a href="#基础编程知识" class="headerlink" title="基础编程知识"></a>基础编程知识</h1><h2 id="阻塞-和-非阻塞-的区别"><a href="#阻塞-和-非阻塞-的区别" class="headerlink" title="阻塞 和 非阻塞 的区别?"></a><code>阻塞</code> 和 <code>非阻塞</code> 的区别?</h2><ul><li>同步(<code>Synchronous</code>)IO</li></ul><blockquote><p>当一个程序发起调用的时候，在程序没有处理完成返回结果时，调用方会一直等待，等待结果的返回。</p></blockquote><ul><li>异步(<code>Asynchronous</code>)IO</li></ul><blockquote><p>当一个程序发起调用的时候，程序立即返回调用成功的消息，但不会马上返回结果，而是需要通过回调的方式把返回结果返回给调用方。</p></blockquote><ul><li>阻塞(<code>Blocking</code>)IO</li></ul><blockquote><p>阻塞就是在程序调用之后，结果返回之前，当前的进程/线程是被挂起的</p></blockquote><ul><li>非阻塞(<code>non-Blocking</code>)IO</li></ul><blockquote><p>非阻塞是指程序调用之后，结果返回之前，不会挂起该进程/线程的。</p></blockquote><h3 id="异步的优势"><a href="#异步的优势" class="headerlink" title="异步的优势 ?"></a>异步的优势 ?</h3><ul><li>高并发，同步阻塞IO模型的并发能力依赖于进程/线程数量</li><li>无IO等待，同步模型无法解决<code>IOWait</code>很高的场景</li></ul><h3 id="同步的优势"><a href="#同步的优势" class="headerlink" title="同步的优势 ?"></a>同步的优势 ?</h3><ul><li>编码简单，同步模式编写/调试程序更轻松</li><li>可控性好，同步模式的程序具有良好的过载保护机制</li></ul><h2 id="PHP的GC机制"><a href="#PHP的GC机制" class="headerlink" title="PHP的GC机制 ?"></a>PHP的GC机制 ?</h2><blockquote><p>GC机制: 垃圾回收机制</p></blockquote><blockquote><p><code>PHP5.3</code>: 当变量容器的<code>ref_count</code>计数清0时，表示该变量容器就会被销毁，实现了内存回收<br><code>PHP5.3</code>版本之后引入<strong>根缓冲机制</strong>，即php启动时默认设置指定<code>zval</code>数量的根缓冲区（默认是10000），当php发现有存在循环引用的<code>zval</code>时，就会把其投入到根缓冲区，当根缓冲区达到配置文件中的指定数量（默认是10000）后，就会进行垃圾回收，以此解决循环引用导致的内存泄漏问题</p></blockquote><h2 id="PHP面向对象编程-对象引用机制和对象与内存之间的关系"><a href="#PHP面向对象编程-对象引用机制和对象与内存之间的关系" class="headerlink" title="PHP面向对象编程: 对象引用机制和对象与内存之间的关系 ?"></a>PHP面向对象编程: 对象引用机制和对象与内存之间的关系 ?</h2><blockquote><p>对象释放的时候调用了<code>__destruct()</code>,释放内存;</p></blockquote><h1 id="多进程编程"><a href="#多进程编程" class="headerlink" title="多进程编程"></a>多进程编程</h1><h2 id="fpm-和-swoole-的多进程模型及其区别"><a href="#fpm-和-swoole-的多进程模型及其区别" class="headerlink" title="fpm 和 swoole 的多进程模型及其区别 ?"></a><code>fpm</code> 和 <code>swoole</code> 的多进程模型及其区别 ?</h2><ul><li><code>PHP-FPM</code></li></ul><p><code>php-fpm</code> 就是通过 <code>FastCGI</code> 协议来处理 PHP 与第三方 WEB 服务器之间的通信<br>比如 <code>Nginx + php-fpm</code> 的组合，这种方式运行的 <code>fpm</code> 是 <code>Master/Worker</code> 模式，启动一个 <code>Master</code> 进程监听来自 <code>Nginx</code> 的请求，再 <code>fork</code> 多个 <code>Worker</code> 进程处理请求。每个 <code>Worker</code> 进程只能处理一个请求，单一进程的生命周期大体如下：</p><ol><li>初始化模块。</li><li>初始化请求。此处请求是请求 PHP 执行代码的意思，并非 HTTP 的请求。</li><li>执行 PHP 脚本。</li><li>结束请求。</li><li>关闭模块。</li></ol><ul><li><code>Swoole</code></li></ul><p><code>Swoole</code> 采用的也是 <code>Master/Worker</code> 模式，不同的是 <code>Master</code> 进程有多个 <code>Reactor</code> 线程，<code>Master</code> 只是一个事件发生器，负责监听 <code>Socket</code> 句柄的事件变化。<code>Worker</code> 以多进程的方式运行，接收来自 <code>Reactor</code> 线程的请求，并执行回调函数（PHP 编写的）。启动 <code>Master</code> 进程的流程大致是：</p><ol><li>初始化模块。</li><li>初始化请求。因为 swoole 需要通过 cli 的方式运行，所以初始化请求时，不会初始化 PHP 的全局变量，如 $_SERVER, $_POST, $_GET 等。</li><li>执行 PHP 脚本。包括词法、语法分析，变量、函数、类的初始化等，Master 进入监听状态，并不会结束进程。</li></ol><p><strong>对比不同:</strong></p><ul><li><p><strong>PHP-FPM</strong></p><ul><li>Master 主进程 / Worker 多进程模式。</li><li>启动 Master，通过 FastCGI 协议监听来自 Nginx 传输的请求。</li><li>每个 Worker 进程只对应一个连接，用于执行完整的 PHP 代码。</li><li>PHP 代码执行完毕，占用的内存会全部销毁，下一次请求需要重新再进行初始化等各种繁琐的操作。</li><li>只用于 HTTP Server。</li></ul></li><li><p><strong>Swoole</strong></p><ul><li>Master 主进程（由多个 Reactor 线程组成）/ Worker 多进程（或多线程）模式</li><li>启动 Master，初始化 PHP 代码，由 Reactor 监听 Socket 句柄的事件变化。</li><li>Reactor 主线程负责子多线程的均衡问题，Manager 进程管理 Worker 多进程，包括 TaskWorker 的进程。</li><li>每个 Worker 接受来自 Reactor 的请求，只需要执行回调函数部分的 PHP 代码。</li><li>只在 Master 启动时执行一遍 PHP 初始化代码，Master 进入监听状态，并不会结束进程。</li><li>不仅可以用于 HTTP Server，还可以建立 TCP 连接、WebSocket 连接。</li></ul></li></ul><h2 id="进程间通信-进程隔离-进程信号量"><a href="#进程间通信-进程隔离-进程信号量" class="headerlink" title="进程间通信? 进程隔离? 进程信号量?"></a>进程间通信? 进程隔离? 进程信号量?</h2><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><ul><li>管道</li></ul><ol><li>我们知道进程直接是相互独立的，那如果在进程之间通信就需要通过特殊介质，建立管道是其中一种方式。</li><li>管道分无名管道(pipe)和有名管道(FIFO)，无名管道只能用于父子进程或者兄弟进程这些具有亲缘关系的进程；</li><li>为了克服这个缺点，就有了有名管道，提供非亲缘关系直接进程间通信</li></ol><ul><li>信号</li></ul><ol><li>比如我们kill命令来杀死一个进程，就是内核生成一个信号，当系统捕获到是这个信号就会做出相应得操作。</li><li>信号可以作为进程间通信或修改行为的一种方式，明确地由一个进程发送给另一个进程。一个信号的产生叫生成，接收到一个信号叫捕获。</li></ol><ul><li>消息队列</li><li>共享内存</li></ul><h3 id="进程隔离"><a href="#进程隔离" class="headerlink" title="进程隔离"></a>进程隔离</h3><ul><li>不同的进程中PHP变量不是共享，即使是全局变量，在A进程内修改了它的值，在B进程内是无效的</li><li>如果需要在不同的Worker进程内共享数据，可以用<code>Redis</code>、<code>MySQL</code>、文件、<code>Swoole\Table</code>、<code>APCu</code>、<code>shmget</code>等工具实现</li><li>不同进程的文件句柄是隔离的，所以在A进程创建的Socket连接或打开的文件，在B进程内是无效，即使是将它的fd发送到B进程也是不可用的</li></ul><h1 id="基础的TCP-UDP认知"><a href="#基础的TCP-UDP认知" class="headerlink" title="基础的TCP/UDP认知"></a>基础的TCP/UDP认知</h1><h2 id="TCP-和-UDP的区别"><a href="#TCP-和-UDP的区别" class="headerlink" title="TCP 和 UDP的区别 ?"></a><code>TCP</code> 和 <code>UDP</code>的区别 ?</h2><blockquote><p>TCP(Transmission Control Protocol, 传输控制协议)<br>TCP 三次握手 四次挥手</p></blockquote><blockquote><p>UDP(User Data Protocol, 用户数据报协议)</p></blockquote><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><ol><li>基于连接与无连接;</li></ol></li><li><ol start="2"><li>对系统资源的要求 (TCP较多，UDP少);</li></ol></li><li><ol start="3"><li>UDP程序结构较简单;</li></ol></li><li><ol start="4"><li>流模式与数据报模式;</li></ol></li><li><ol start="5"><li>TCP保证数据正确性，UDP可能丢包;</li></ol></li><li><ol start="6"><li>TCP保证数据顺序，UDP不保证</li></ol></li></ul><h2 id="OSI七层模型中的上四层"><a href="#OSI七层模型中的上四层" class="headerlink" title="OSI七层模型中的上四层 ?"></a>OSI七层模型中的上四层 ?</h2><blockquote><p>应用层 表示层 会话层 传输层 网络层 数据链路层 物理层</p></blockquote><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><h2 id="Swoole的协程工作模式"><a href="#Swoole的协程工作模式" class="headerlink" title="Swoole的协程工作模式 ?"></a>Swoole的协程工作模式 ?</h2><ul><li>内存栈</li></ul><p><code>4.0</code>版本使用了<code>PHP</code>+<code>C</code>的双栈模式。创建协程时会创建一个<code>C</code>栈，默认尺寸为<code>2M</code>，创建一个<code>PHP</code>栈，默认为<code>8K</code>。</p><p>C栈主要用于保存底层函数调用的局部变量数据，用于解决<code>call_user_func</code>、<code>array_map</code>等C函数调用在协程切换时未能还原的问题。<code>4.0</code>版本无论如何切换协程，底层总是能正确地切换回原先的C函数栈帧继续向下执行。</p><ul><li>协程切换</li></ul><p><code>C</code>栈切换使用了<code>boost.context 1.60</code>汇编代码，用于保存寄存器，切换指令序列。主要是<code>jump_fcontext</code>这个<code>ASM</code>函数提供。<br><code>PHP</code>栈的切换是跟随C栈切同步进行的。底层会切换<code>EG(vm_stack)</code>使得<code>PHP</code>恢复到正确的<code>PHP</code>函数栈帧。<code>4.0.2</code>版本还增加了<code>ob</code>输出缓存区的切换，<code>ob_start</code>等操作也可以用于协程。</p><ul><li>协程调度</li></ul><p><code>4.0</code>协程实现中，主协程即为<code>Reactor</code>协程，负责整个<code>EventLoop</code>的运行。主协程实现事件监听，在IO事件完成后唤醒其他工作协程。</p><ul><li><ul><li>协程挂起</li></ul></li></ul><p>在工作协程中执行一些<code>IO</code>操作时，底层会将<code>IO</code>事件注册到<code>EventLoop</code>，并让出执行权。</p><ul><li><ul><li>协程恢复</li></ul></li></ul><p>当主协程的<code>Reactor</code>接收到新的<code>IO</code>事件，底层会挂起主协程，并恢复<code>IO</code>事件对应的工作协程。该工作协程挂起或退出时，会再次回到主协程。</p><h1 id="Swoole常见的”坑”"><a href="#Swoole常见的”坑”" class="headerlink" title="Swoole常见的”坑”"></a>Swoole常见的”坑”</h1><h2 id="为何全局变量无法共享呢"><a href="#为何全局变量无法共享呢" class="headerlink" title="为何全局变量无法共享呢 ?"></a>为何全局变量无法共享呢 ?</h2><blockquote><p>这是在于出现了进程克隆，而每个进程之间的数据都是不一致的。</p></blockquote><h2 id="echo-var-dump-无法输出到浏览器-http响应"><a href="#echo-var-dump-无法输出到浏览器-http响应" class="headerlink" title="echo var_dump 无法输出到浏览器(http响应) ?"></a><code>echo</code> <code>var_dump</code> 无法输出到浏览器(http响应) ?</h2><blockquote><p>原因在于模式的变更，<strong>swoole的运行模式不再是fpm，而是cli</strong>，如果你需要把数据响应给浏览器，你只能 通过<code>Http request</code>回调中的<code>response</code>对象进行响应</p></blockquote><h2 id="http请求参数获取"><a href="#http请求参数获取" class="headerlink" title="http请求参数获取 ?"></a>http请求参数获取 ?</h2><blockquote><p>在同<code>swoole</code>的<code>http</code>服务的时候，很多人会发现<code>$_GET</code>、<code>$_POST</code>等常见全局变量无法使用。这是因为<code>$_GET</code>、<code>$_POST</code>等变量都是全局的，在<code>swoole</code>当中会出现问题，如果想获取请求参数，可以用<code>swoole</code>回调时提供的<code>Request</code>对象来进行获取</p></blockquote><h2 id="swoole不能使用die-exit"><a href="#swoole不能使用die-exit" class="headerlink" title="swoole不能使用die/exit ?"></a>swoole不能使用die/exit ?</h2><blockquote><p><code>phper</code>都习惯用<code>die/exit</code>来调试代码，这是因为这个命令会直接退出当前进程，对于fpm来讲，每个请求都对应一个独立进程，退出了问题不大，但是在<code>swoole</code>当中，可能一个进程中会有多个请求同时在处理，如果你<code>exit</code>或者<code>die</code>来退出当前进程，会导致数据丢失。</p></blockquote><h2 id="swoole下为何需要断线重连"><a href="#swoole下为何需要断线重连" class="headerlink" title="swoole下为何需要断线重连 ?"></a>swoole下为何需要断线重连 ?</h2><blockquote><p>在<code>swoole</code>常驻内存的情况下， 请求结束后，该连接并不会被清理，依旧保留在内存空间内，而该连接若是长时间没有使用，或者是因为网络波动，那么就会断开。下次请求进来的时候，你没有判断连接状态，就直接去执行sql语句，那么就意味着你操作了一个断线的数据库连接，因此肯定会报错。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;问即是学&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Swoole" scheme="http://blog.caoxl.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>Swoft V2 学习日志</title>
    <link href="http://blog.caoxl.com/2020/04/09/Swoft-V2-Learning/"/>
    <id>http://blog.caoxl.com/2020/04/09/Swoft-V2-Learning/</id>
    <published>2020-04-09T02:43:20.000Z</published>
    <updated>2020-04-09T02:48:29.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Swoole" scheme="http://blog.caoxl.com/tags/Swoole/"/>
    
      <category term="Swoft" scheme="http://blog.caoxl.com/tags/Swoft/"/>
    
  </entry>
  
  <entry>
    <title>PHP7.4 新特性</title>
    <link href="http://blog.caoxl.com/2020/04/08/PHP-74-New-Features/"/>
    <id>http://blog.caoxl.com/2020/04/08/PHP-74-New-Features/</id>
    <published>2020-04-08T09:39:35.000Z</published>
    <updated>2020-04-08T09:55:44.301Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>原文地址: <a href="https://learnku.com/articles/37449" target="_blank" rel="noopener">PHP7.4 新特性</a></p></blockquote><a id="more"></a><h1 id="属性添加限定类型"><a href="#属性添加限定类型" class="headerlink" title="属性添加限定类型"></a>属性添加限定类型</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> int $age;</span><br><span class="line">  <span class="keyword">public</span> string $name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user = <span class="keyword">new</span> User();</span><br><span class="line">$user-&gt;age  = <span class="number">10</span>;</span><br><span class="line">$user-&gt;name = <span class="string">"张三"</span>;</span><br><span class="line"><span class="comment">// error 需要传递int</span></span><br><span class="line">$user-&gt;age  = <span class="string">"zhang"</span>;</span><br></pre></td></tr></table></figure><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>这个特性基本上参考 <code>Js</code> 的 <code>ES6</code> 的语法。可以让我们的代码写的更少。如果你的代码有 <code>fn</code> 这个函数。可能会冲突</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$factor = <span class="number">10</span>;</span><br><span class="line">$nums = array_map(fn($n) =&gt; $n * $factor, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// [10,20,30]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前的写法</span></span><br><span class="line">$nums = array_map(<span class="function"><span class="keyword">function</span> <span class="params">($num)</span> <span class="title">use</span> <span class="params">($factor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $num * $factor;</span><br><span class="line">&#125;, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h1 id="有限返回类型协变与参数类型逆变"><a href="#有限返回类型协变与参数类型逆变" class="headerlink" title="有限返回类型协变与参数类型逆变"></a>有限返回类型协变与参数类型逆变</h1><p>仅当使用自动加载时，才提供完全协变 / 逆变支持。在单个文件中，只能使用非循环类型引用，因为所有类在被引用之前都必须可用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span><span class="params">()</span>: <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildProducer</span> <span class="keyword">extends</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span><span class="params">()</span>: <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组解包"><a href="#数组解包" class="headerlink" title="数组解包"></a>数组解包</h1><p>使用展开运算符 <code>...</code> 解包数组。这个特性，应该又是从 js 那吸收过来的。看例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$parts  = [<span class="string">'apple'</span>, <span class="string">'pear'</span>];</span><br><span class="line">$fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, ...$parts, <span class="string">'watermelon'</span>];</span><br><span class="line"><span class="comment">// ['banana', 'orange', 'apple', 'pear', 'watermelon'];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 老的写法</span></span><br><span class="line">$fruits = array_merge([<span class="string">'banana'</span>, <span class="string">'orange'</span>], $parts, [<span class="string">'watermelon'</span>]);</span><br></pre></td></tr></table></figure><h1 id="空合并运算符赋值"><a href="#空合并运算符赋值" class="headerlink" title="空合并运算符赋值"></a>空合并运算符赋值</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php">$array[<span class="string">'key'</span>] ??= computeDefault();</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="comment">// 老的写法</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (!<span class="keyword">isset</span>($array[<span class="string">'key'</span>])) &#123;</span></span><br><span class="line"><span class="php">    $array[<span class="string">'key'</span>] = computeDefault();</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="数值文字分隔符"><a href="#数值文字分隔符" class="headerlink" title="数值文字分隔符"></a>数值文字分隔符</h1><p>数字文字可以在数字之间包含下划线。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="number">6.674</span>_083e<span class="number">-11</span>; <span class="comment">// float</span></span><br><span class="line"><span class="number">299</span>_792_458;   <span class="comment">// decimal</span></span><br><span class="line"><span class="number">0xCAFE</span>_F00D;   <span class="comment">// hexadecimal</span></span><br><span class="line"><span class="number">0</span>b0101_1111;   <span class="comment">// binary</span></span><br></pre></td></tr></table></figure><h1 id="允许从-toString-抛出异常"><a href="#允许从-toString-抛出异常" class="headerlink" title="允许从 __toString () 抛出异常"></a>允许从 __toString () 抛出异常</h1><blockquote><p>现在允许从 __toString() 引发异常，以往这会导致致命错误，字符串转换中现有的可恢复致命错误已转换为 Error 异常。</p></blockquote><h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><ul><li>新增 <code>FILTER_VALIDATE_FLOAT</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">filter_var(<span class="number">1.00</span>, FILTER_VALIDATE_FLOAT);</span><br></pre></td></tr></table></figure><h1 id="strip-tags-支持数组"><a href="#strip-tags-支持数组" class="headerlink" title="strip_tags 支持数组"></a>strip_tags 支持数组</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">strip_tags($str,[<span class="string">'p'</span>,<span class="string">'a'</span>,<span class="string">'div'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 老的写法</span></span><br><span class="line">strip_tags($str,<span class="string">"&lt;p&gt;&lt;a&gt;&lt;div&gt;"</span>);</span><br></pre></td></tr></table></figure><h1 id="废弃的特性"><a href="#废弃的特性" class="headerlink" title="废弃的特性"></a>废弃的特性</h1><h2 id="没有显式括号的嵌套三元运算符"><a href="#没有显式括号的嵌套三元运算符" class="headerlink" title="没有显式括号的嵌套三元运算符"></a>没有显式括号的嵌套三元运算符</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> ? <span class="number">2</span> : <span class="number">3</span> ? <span class="number">4</span> : <span class="number">5</span>;   <span class="comment">// deprecated</span></span><br><span class="line">(<span class="number">1</span> ? <span class="number">2</span> : <span class="number">3</span>) ? <span class="number">4</span> : <span class="number">5</span>; <span class="comment">// ok</span></span><br><span class="line"><span class="number">1</span> ? <span class="number">2</span> : (<span class="number">3</span> ? <span class="number">4</span> : <span class="number">5</span>); <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><h2 id="花括号访问数组索引"><a href="#花括号访问数组索引" class="headerlink" title="花括号访问数组索引"></a>花括号访问数组索引</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$arr = [<span class="string">"a"</span>=&gt;<span class="string">"111"</span>];</span><br><span class="line">$index = <span class="string">"a"</span>;</span><br><span class="line">$arr&#123;$index&#125;; <span class="comment">// 废弃</span></span><br><span class="line">$arr[$index];</span><br></pre></td></tr></table></figure><h2 id="real-和-is-real-实数"><a href="#real-和-is-real-实数" class="headerlink" title="real 和 is_real 实数"></a>real 和 is_real 实数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$num = <span class="string">""</span>;</span><br><span class="line">$a = (real) $num; <span class="comment">// 废弃</span></span><br><span class="line">$a = (float) $num;</span><br></pre></td></tr></table></figure><h2 id="parent-关键词在没父类的类中使用"><a href="#parent-关键词在没父类的类中使用" class="headerlink" title="parent 关键词在没父类的类中使用"></a>parent 关键词在没父类的类中使用</h2><p>在没有父类的类中使用 parent 会出现编译错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::index(); <span class="comment">//编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="money-format-函数"><a href="#money-format-函数" class="headerlink" title="money_format 函数"></a>money_format 函数</h2><p><code>money_format</code> 被废弃，使用 <code>numberFormater</code> 替换</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址: &lt;a href=&quot;https://learnku.com/articles/37449&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHP7.4 新特性&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://blog.caoxl.com/categories/PHP/"/>
    
    
      <category term="PHP7.4" scheme="http://blog.caoxl.com/tags/PHP7-4/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 再深入</title>
    <link href="http://blog.caoxl.com/2020/04/08/RabbitMQ-Learn-More/"/>
    <id>http://blog.caoxl.com/2020/04/08/RabbitMQ-Learn-More/</id>
    <published>2020-04-08T06:19:22.000Z</published>
    <updated>2020-04-08T07:11:27.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>问即是学</p></blockquote><a id="more"></a><h1 id="什么是RabbitMQ"><a href="#什么是RabbitMQ" class="headerlink" title="什么是RabbitMQ ?"></a>什么是RabbitMQ ?</h1><blockquote><p>RabbitMQ是一款开源的，Erlang编写的，基于AMQP协议的消息中间件</p></blockquote><h1 id="什么是消息中间件"><a href="#什么是消息中间件" class="headerlink" title="什么是消息中间件 ?"></a>什么是消息中间件 ?</h1><blockquote><p>是关注于数据的发送和接收，利用高效可靠的异步消息传递机制集成分布式系统</p></blockquote><h1 id="RabbitMQ的使用场景"><a href="#RabbitMQ的使用场景" class="headerlink" title="RabbitMQ的使用场景 ?"></a>RabbitMQ的使用场景 ?</h1><ul><li><ol><li>服务间异步通信</li></ol></li><li><ol start="2"><li>顺序消费</li></ol></li><li><ol start="3"><li>定时任务</li></ol></li><li><ol start="4"><li>请求削峰</li></ol></li></ul><h1 id="RabbitMQ基本概念"><a href="#RabbitMQ基本概念" class="headerlink" title="RabbitMQ基本概念 ?"></a>RabbitMQ基本概念 ?</h1><blockquote><ul><li><code>Broker</code>: 简单来说就是消息队列服务器实体</li><li><code>Exchange</code>: 消息交换机，它指定消息按什么规则，路由到哪个队列</li><li><code>Queue</code>: 消息队列载体，每个消息都会被投入到一个或多个队列</li><li><code>Binding</code>:  绑定，它的作用就是把<code>exchange</code>和<code>queue</code>按照路由规则绑定起来</li><li><code>Routing Key</code>:  路由关键字，<code>exchange</code>根据这个关键字进行消息投递</li><li><code>VHost</code>:  vhost 可以理解为虚拟 <code>broker</code> ，即 mini-RabbitMQ server。其内部均含有独立的 <code>queue</code>、<code>exchange</code> 和 <code>binding</code> 等，但最最重要的是，其拥有独立的权限系统，可以做到 vhost 范围的用户控制。当然，从 RabbitMQ 的全局角度，vhost 可以作为不同权限隔离的手段</li><li><code>Producer</code>: 消息生产者，就是投递消息的程序</li><li><code>Consumer</code>: 消息消费者，就是接受消息的程序</li><li><code>Channel</code>: 消息通道，在客户端的每个连接里，可建立多个<code>channel</code>，每个<code>channel</code>代表一个会话任务</li></ul></blockquote><h1 id="RabbitMQ的工作模式"><a href="#RabbitMQ的工作模式" class="headerlink" title="RabbitMQ的工作模式 ?"></a>RabbitMQ的工作模式 ?</h1><h2 id="Simple模式-即最简单的收发模式"><a href="#Simple模式-即最简单的收发模式" class="headerlink" title="Simple模式 (即最简单的收发模式)"></a>Simple模式 (即最简单的收发模式)</h2><ul><li><ol><li>消息产生消息，将消息放入队列</li></ol></li><li><ol start="2"><li>消息的消费者(<code>consumer</code>) 监听 消息队列,如果队列中有消息,就消费掉,消息被拿走后,自动从队列中删除(隐患 消息可能没有被消费者正确处理,已经从队列中消失了,造成消息的丢失，这里可以设置成手动的<code>ack</code>,但如果设置成手动<code>ack</code>，处理完后要及时发送<code>ack</code>消息给队列，否则会造成内存溢出)。</li></ol></li></ul><h2 id="Work工作模式-资源的竞争"><a href="#Work工作模式-资源的竞争" class="headerlink" title="Work工作模式 (资源的竞争)"></a>Work工作模式 (资源的竞争)</h2><ul><li><ol><li>消息产生者将消息放入队列消费者可以有多个,消费者1,消费者2同时监听同一个队列,消息被消费。</li></ol></li><li><ol start="2"><li>C1 C2共同争抢当前的消息队列内容,谁先拿到谁负责消费消息(隐患：高并发情况下,默认会产生某一个消息被多个消费者共同使用,可以设置一个开关(synchronize) 保证一条消息只能被一个消费者使用)。</li></ol></li></ul><h2 id="Publish-Subscribe发布订阅-共享资源"><a href="#Publish-Subscribe发布订阅-共享资源" class="headerlink" title="Publish/Subscribe发布订阅 (共享资源)"></a>Publish/Subscribe发布订阅 (共享资源)</h2><ul><li><ol><li>每个消费者监听自己的队列；</li></ol></li><li><ol start="2"><li>生产者将消息发给<code>broker</code>，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收到消息。</li></ol></li></ul><h2 id="Routing路由模式"><a href="#Routing路由模式" class="headerlink" title="Routing路由模式"></a>Routing路由模式</h2><ul><li><ol><li>消息生产者将消息发送给交换机按照路由判断,路由是字符串(info) 当前产生的消息携带路由字符(对象的方法),交换机根据路由的key,只能匹配上路由key对应的消息队列,对应的消费者才能消费消息;</li></ol></li><li><ol start="2"><li>根据业务功能定义路由字符串</li></ol></li><li><ol start="3"><li>从系统的代码逻辑中获取对应的功能字符串,将消息任务扔到对应的队列中。</li></ol></li><li><ol start="4"><li>业务场景:error 通知;EXCEPTION;错误通知的功能;传统意义的错误通知;客户通知;利用key路由,可以将程序中的错误封装成消息传入到消息队列中,开发者可以自定义消费者,实时接收错误;</li></ol></li></ul><h2 id="Topic主题模式-路由模式的一种"><a href="#Topic主题模式-路由模式的一种" class="headerlink" title="Topic主题模式 (路由模式的一种)"></a>Topic主题模式 (路由模式的一种)</h2><ul><li><ol><li>星号井号代表通配符</li></ol></li><li><ol start="2"><li>星号代表多个单词,井号代表一个单词</li></ol></li><li><ol start="3"><li>路由功能添加模糊匹配</li></ol></li><li><ol start="4"><li>消息产生者产生消息,把消息交给交换机</li></ol></li><li><ol start="5"><li>交换机根据key的规则模糊匹配到对应的队列,由队列的监听消费者接收消息消费</li></ol></li></ul><h1 id="如何保证RabbitMQ消息的顺序性"><a href="#如何保证RabbitMQ消息的顺序性" class="headerlink" title="如何保证RabbitMQ消息的顺序性 ?"></a>如何保证RabbitMQ消息的顺序性 ?</h1><h1 id="如何确保消息正确地发送至-RabbitMQ"><a href="#如何确保消息正确地发送至-RabbitMQ" class="headerlink" title="如何确保消息正确地发送至 RabbitMQ ?"></a>如何确保消息正确地发送至 RabbitMQ ?</h1><h2 id="发送方确认模式"><a href="#发送方确认模式" class="headerlink" title="发送方确认模式"></a>发送方确认模式</h2><ul><li>将信道设置成 <code>confirm</code> 模式（发送方确认模式），则所有在信道上发布的消息都会被指派一个唯一的 ID。</li><li>一旦消息被投递到目的队列后，或者消息被写入磁盘后（可持久化的消息），信道会发送一个确认给生产者（包含消息唯一 ID）。</li><li>如果 RabbitMQ 发生内部错误从而导致消息丢失，会发送一条 <code>nack</code>（not acknowledged，未确认）消息。</li><li>发送方确认模式是异步的，生产者应用程序在等待确认的同时，可以继续发送消息。当确认消息到达生产者应用程序，生产者应用程序的回调方法就会被触发来处理确认消息。</li></ul><h2 id="接收方确认机制"><a href="#接收方确认机制" class="headerlink" title="接收方确认机制"></a>接收方确认机制</h2><ul><li>消费者接收每一条消息后都必须进行确认（消息接收和消息确认是两个不同操作）。只有消费者确认了消息，RabbitMQ 才能安全地把消息从队列中删除。</li><li>这里并没有用到超时机制，<code>RabbitMQ</code> 仅通过 <code>Consumer</code> 的连接中断来确认是否需要重新发送消息。也就是说，只要连接不中断，<code>RabbitMQ</code> 给了 <code>Consumer</code> 足够长的时间来处理消息。保证数据的最终一致性；</li></ul><p>下面罗列几种特殊情况</p><ul><li>如果消费者接收到消息，<strong>在确认之前断开了连接或取消订阅</strong>，RabbitMQ 会认为消息没有被分发，然后重新分发给下一个订阅的消费者。（可能存在消息重复消费的隐患，需要去重）</li><li>如果消费者接收到消息却没有确认消息，连接也未断开，则 RabbitMQ 认为该消费者繁忙，将不会给该消费者分发更多的消息。</li></ul><h1 id="如何保证RabbitMQ消息的可靠传输"><a href="#如何保证RabbitMQ消息的可靠传输" class="headerlink" title="如何保证RabbitMQ消息的可靠传输 ?"></a>如何保证RabbitMQ消息的可靠传输 ?</h1><p>消息不可靠的情况可能是消息丢失，劫持等原因；</p><p>丢失又分为：<code>生产者丢失消息</code>、<code>消息列表丢失消息</code>、<code>消费者丢失消息</code>；</p><h2 id="生产者丢失消息"><a href="#生产者丢失消息" class="headerlink" title="生产者丢失消息"></a>生产者丢失消息</h2><p>从生产者弄丢数据这个角度来看，RabbitMQ提供<code>transaction</code>和<code>confirm</code>模式来确保生产者不丢消息；</p><ul><li><code>transaction</code>机制</li></ul><blockquote><p>发送消息前，开启事务（channel.txSelect()）,然后发送消息，如果发送过程中出现什么异常，事务就会回滚（channel.txRollback()）,如果发送成功则提交事务（channel.txCommit()）。然而，这种方式有个缺点：吞吐量下降；</p></blockquote><ul><li><code>confirm</code>模式</li></ul><blockquote><p>一旦channel进入confirm模式，所有在该信道上发布的消息都将会被指派一个唯一的ID（从1开始），一旦消息被投递到所有匹配的队列之后；<br>rabbitMQ就会发送一个ACK给生产者（包含消息的唯一ID），这就使得生产者知道消息已经正确到达目的队列了；<br>如果rabbitMQ没能处理该消息，则会发送一个Nack消息给你，你可以进行重试操作。</p></blockquote><h2 id="消息队列丢失消息"><a href="#消息队列丢失消息" class="headerlink" title="消息队列丢失消息"></a>消息队列丢失消息</h2><blockquote><p>消息持久化。处理消息队列丢数据的情况，一般是开启持久化磁盘的配置。</p></blockquote><p>如何持久化?</p><ul><li><ol><li>将<code>queue</code>的持久化标识<code>durable</code>设置为<code>true</code>,则代表是一个持久的队列</li></ol></li><li><ol start="2"><li>发送消息的时候将<code>deliveryMode=2</code></li></ol></li></ul><h2 id="消费者丢失消息"><a href="#消费者丢失消息" class="headerlink" title="消费者丢失消息"></a>消费者丢失消息</h2><blockquote><p>消费者丢数据一般是因为采用了自动确认消息模式，改为手动确认消息即可！<br>解决方案：处理消息成功后，<strong>手动回复确认消息</strong>。</p></blockquote><h1 id="RabbitMQ-上的一个-queue-中存放的-message-是否有数量限制"><a href="#RabbitMQ-上的一个-queue-中存放的-message-是否有数量限制" class="headerlink" title="RabbitMQ 上的一个 queue 中存放的 message 是否有数量限制 ?"></a>RabbitMQ 上的一个 queue 中存放的 message 是否有数量限制 ?</h1><blockquote><p>可以认为是无限制，因为限制取决于机器的<strong>内存</strong>，但是消息过多会导致处理效率的下降。</p></blockquote><h1 id="消息基于什么传输"><a href="#消息基于什么传输" class="headerlink" title="消息基于什么传输 ?"></a>消息基于什么传输 ?</h1><blockquote><p><code>RabbitMQ</code> 使用<strong>信道</strong>的方式来传输数据。信道是建立在真实的 <code>TCP</code> 连接内的虚拟连接，且每条 <code>TCP</code> 连接上的信道数量没有限制。</p></blockquote><h1 id="消息如何分发"><a href="#消息如何分发" class="headerlink" title="消息如何分发 ?"></a>消息如何分发 ?</h1><blockquote><p>若该队列至少有一个消费者订阅，消息将以循环（round-robin）的方式发送给消费者。每条消息只会分发给一个订阅的消费者（前提是消费者能够正常处理消息并进行确认）。通过路由可实现多消费的功能</p></blockquote><h1 id="消息怎么路由"><a href="#消息怎么路由" class="headerlink" title="消息怎么路由 ?"></a>消息怎么路由 ?</h1><blockquote><p>消息提供方-&gt;路由-&gt;一至多个队列消息发布到交换器时，消息将拥有一个路由键（routing key），在消息创建时设定。通过队列路由键，可以把队列绑定到交换器上。消息到达交换器后，RabbitMQ 会将消息的路由键与队列的路由键进行匹配（针对不同的交换机有不同的路由规则）；</p></blockquote><p>常用的交换机主要分为一下三种：</p><ul><li><code>fanout</code>: 如果交换机收到消息，将会广播到所有绑定的队列上</li><li><code>direct</code>: 如果路由键完全匹配，消息就被投递到相应的队列</li><li><code>topic</code>: 可以使来自不同源头的消息能够到达同一个队列。 使用 <code>topic</code> 交换机时，可以使用通配符</li></ul><h1 id="RabbitMQ-的优缺点"><a href="#RabbitMQ-的优缺点" class="headerlink" title="RabbitMQ 的优缺点 ?"></a>RabbitMQ 的优缺点 ?</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>异步处理 - 相比于传统的串行、并行方式，提高了系统吞吐量。</li><li>应用解耦 - 系统间通过消息通信，不用关心其他系统的处理。</li><li>流量削锋 - 可以通过消息队列长度控制请求量；可以缓解短时间内的高并发请求。</li><li>日志处理 - 解决大量日志传输。</li><li>消息通讯 - 消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>系统可用性降低</li><li>系统复杂度提高</li><li>一致性问题</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;问即是学&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="RabbitMQ" scheme="http://blog.caoxl.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 实战记录</title>
    <link href="http://blog.caoxl.com/2020/04/03/RabbitMq-Actual-Combat-1/"/>
    <id>http://blog.caoxl.com/2020/04/03/RabbitMq-Actual-Combat-1/</id>
    <published>2020-04-03T01:37:50.000Z</published>
    <updated>2020-04-03T06:57:24.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>啊 好久没有写博客了, 我的博客就是总结自己的学习之路<br>加油 重新启程 keep calm and think more.</p></blockquote><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><blockquote><p>composer require php-amqplib/php-amqplib</p></blockquote><h1 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">api</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Wire</span>\<span class="title">AMQPTable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deliver</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $params = Request::instance()-&gt;param();</span><br><span class="line">        <span class="keyword">unset</span>($params[<span class="string">'sign'</span>]);</span><br><span class="line">        $params[<span class="string">'send_time'</span>]   = time();</span><br><span class="line">        $params[<span class="string">'create_time'</span>] = time();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;deliverMessage(json_encode($params), <span class="string">'test_exchange'</span>, <span class="string">'api_test_queue'</span>, <span class="string">'api_test'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Done'</span>;<span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息队列 - 投递消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $exchangeName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $queueName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $routingKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">deliverMessage</span><span class="params">($message, $exchangeName, $queueName, $routingKey)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接和信道</span></span><br><span class="line">        $connection = <span class="keyword">new</span> AMQPStreamConnection(</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'host'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'port'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'TEST'</span>][<span class="string">'user'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'TEST'</span>][<span class="string">'password'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'TEST'</span>][<span class="string">'vhost'</span>]</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (!$connection-&gt;isConnected()) &#123;</span><br><span class="line">            var_dump(<span class="string">'Connection failed'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $channel = $connection-&gt;channel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        <span class="comment">// type参数: (direct:精准推送 fanout:广播 topic:组播)</span></span><br><span class="line">        $channel-&gt;exchange_declare($exchangeName, <span class="string">'direct'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        $table = <span class="keyword">new</span> AMQPTable();</span><br><span class="line">        $table-&gt;set(<span class="string">'x-queue-mode'</span>, <span class="string">'lazy'</span>);</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        $channel-&gt;queue_declare($queueName, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $table);</span><br><span class="line">        <span class="comment">// 将队列绑定到交换机</span></span><br><span class="line">        $channel-&gt;queue_bind($queueName, $exchangeName, $routingKey);</span><br><span class="line">        $msg = <span class="keyword">new</span> AMQPMessage($message, [</span><br><span class="line">            <span class="string">'delivery_mode'</span> =&gt; AMQPMessage::DELIVERY_MODE_NON_PERSISTENT,</span><br><span class="line">        ]);</span><br><span class="line">        <span class="comment">// 向队列发送消息</span></span><br><span class="line">        $channel-&gt;basic_publish($msg, $exchangeName, $routingKey);</span><br><span class="line">        <span class="comment">// 关闭信道, 关闭连接</span></span><br><span class="line">        $channel-&gt;close();</span><br><span class="line">        $connection-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://tp5.test/api/test/deliver" target="_blank" rel="noopener">http://tp5.test/api/test/deliver</a></p></blockquote><h1 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">api</span>\<span class="title">command</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> APP_PATH . <span class="string">'api.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">console</span>\&#123;</span><br><span class="line">    <span class="title">Command</span>, <span class="title">Input</span>, <span class="title">Output</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Wire</span>\<span class="title">AMQPTable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">configure</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setName(<span class="string">'cmd_test'</span>)</span><br><span class="line">             -&gt;setDescription(<span class="string">'RabbitMQ Consumer Test'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行命令</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Input $input</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Output $output</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int|void|null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \ErrorException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">(Input $input, Output $output)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 交换机</span></span><br><span class="line">        $exchangeName = <span class="string">"test_exchange"</span>;</span><br><span class="line">        <span class="comment">// 队列</span></span><br><span class="line">        $queueName    = <span class="string">"api_test_queue"</span>;</span><br><span class="line">        <span class="comment">// 路由键</span></span><br><span class="line">        $routingKey   = <span class="string">"api_test"</span>;</span><br><span class="line">        <span class="comment">// 创建连接和信道</span></span><br><span class="line">        $connection   = <span class="keyword">new</span> AMQPStreamConnection(</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'host'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'port'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'TEST'</span>][<span class="string">'user'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'TEST'</span>][<span class="string">'password'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'TEST'</span>][<span class="string">'vhost'</span>]</span><br><span class="line">        );</span><br><span class="line">        $channel = $connection-&gt;channel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        $channel-&gt;exchange_declare($exchangeName, <span class="string">'direct'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 设置惰性队列</span></span><br><span class="line">        $table = <span class="keyword">new</span> AMQPTable();</span><br><span class="line">        $table-&gt;set(<span class="string">'x-queue-mode'</span>, <span class="string">"lazy"</span>);</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        $channel-&gt;queue_declare($queueName, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $table);</span><br><span class="line">        <span class="comment">// 将队列绑定到交换机</span></span><br><span class="line">        $channel-&gt;queue_bind($queueName, $exchangeName, $routingKey);</span><br><span class="line"></span><br><span class="line">        $callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO 处理数据</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                $msg-&gt;delivery_info[<span class="string">'channel'</span>]-&gt;basic_ack($msg-&gt;delivery_info[<span class="string">'delivery_tag'</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">                var_dump($e-&gt;getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置consumer同时处理队列数量</span></span><br><span class="line">        $channel-&gt;basic_qos(<span class="keyword">null</span>, <span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 消费队列</span></span><br><span class="line">        $channel-&gt;basic_consume($queueName, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</span><br><span class="line">        <span class="keyword">while</span> (count($channel-&gt;callbacks)) &#123;</span><br><span class="line">            $channel-&gt;wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭信道,关闭连接</span></span><br><span class="line">        $channel-&gt;close();</span><br><span class="line">        $connection-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>php think cmd_test</p></blockquote><ul><li>api.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rabbit配置信息</span></span><br><span class="line">define(<span class="string">'RABBITMQ_CONFIG'</span>, [</span><br><span class="line">    <span class="string">'host'</span> =&gt; <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    <span class="string">'port'</span> =&gt; <span class="number">5672</span>,</span><br><span class="line">    <span class="string">'TEST'</span> =&gt; [  <span class="comment">// 玩法虚拟机</span></span><br><span class="line">        <span class="string">'user'</span>     =&gt; <span class="string">'test'</span> ,</span><br><span class="line">        <span class="string">'password'</span> =&gt; <span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'vhost'</span>    =&gt; <span class="string">'test'</span></span><br><span class="line">    ],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;啊 好久没有写博客了, 我的博客就是总结自己的学习之路&lt;br&gt;加油 重新启程 keep calm and think more.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="RabbitMQ" scheme="http://blog.caoxl.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 邮件发送</title>
    <link href="http://blog.caoxl.com/2020/01/02/Yii2-Send-Mail-Notes/"/>
    <id>http://blog.caoxl.com/2020/01/02/Yii2-Send-Mail-Notes/</id>
    <published>2020-01-02T02:35:11.000Z</published>
    <updated>2020-01-02T03:31:45.661Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Yii2中官方为了解决邮件发送问题，提供了<code>swiftMailer</code>扩展。</p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>官方的包自带了<code>yii2-swiftmailer</code>, 如果需要自行下载可以使用下面这个</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> --prefer-dist yiisoft/yii2-swiftmailer</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><code>config/web.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [ </span><br><span class="line">    <span class="comment">//.... </span></span><br><span class="line">    <span class="string">'components'</span> =&gt; [ </span><br><span class="line">        <span class="string">'mailer'</span> =&gt; [ </span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\swiftmailer\Mailer'</span>, </span><br><span class="line">            <span class="string">'viewPath'</span> =&gt; <span class="string">'@common/mail'</span>, </span><br><span class="line">            <span class="comment">// send all mails to a file by default. You have to set </span></span><br><span class="line">            <span class="comment">// 'useFileTransport' to false and configure a transport </span></span><br><span class="line">            <span class="comment">// for the mailer to send real emails. </span></span><br><span class="line">            <span class="string">'useFileTransport'</span> =&gt; <span class="keyword">false</span>, </span><br><span class="line">            <span class="string">'transport'</span> =&gt; [ </span><br><span class="line">              <span class="comment">//这里如果你是qq的邮箱，可以参考qq客户端设置后再进行配置 http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256</span></span><br><span class="line">                <span class="string">'class'</span>      =&gt; <span class="string">'Swift_SmtpTransport'</span>,</span><br><span class="line">                <span class="string">'host'</span>       =&gt; <span class="string">'smtp.163.com'</span>,</span><br><span class="line">                <span class="string">'username'</span>   =&gt; <span class="string">'******@163.com'</span>,</span><br><span class="line">                <span class="string">'password'</span>   =&gt; <span class="string">'******'</span>,</span><br><span class="line">                <span class="string">'port'</span>       =&gt; <span class="string">'25'</span>,</span><br><span class="line">                <span class="string">'encryption'</span> =&gt; <span class="string">'tls'</span>,</span><br><span class="line">            ], </span><br><span class="line">            <span class="string">'messageConfig'</span>  =&gt; [ </span><br><span class="line">                <span class="string">'charset'</span> =&gt; <span class="string">'UTF-8'</span>, </span><br><span class="line">                <span class="string">'from'</span>    =&gt; [<span class="string">'***@163.com'</span> =&gt; <span class="string">'白狼栈'</span>] </span><br><span class="line">            ], </span><br><span class="line">        ], </span><br><span class="line">    ], </span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionEmail</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $result = \Yii::$app-&gt;mailer-&gt;compose()</span><br><span class="line">                -&gt;setFrom(<span class="string">'******@163.com'</span>)</span><br><span class="line">                -&gt;setTo(<span class="string">'******@163.com'</span>)</span><br><span class="line">                -&gt;setSubject(<span class="string">'测试邮件'</span>)</span><br><span class="line">                -&gt;setTextBody(<span class="string">'测试邮件'</span>)</span><br><span class="line">                -&gt;setHtmlBody(<span class="string">'&lt;b&gt;测试邮件&lt;/b&gt;'</span>)</span><br><span class="line">                -&gt;send();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">            var_dump($e-&gt;getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var_dump(<span class="number">1024</span>);<span class="keyword">die</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量发送"><a href="#批量发送" class="headerlink" title="批量发送"></a>批量发送</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionEmailMulti</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $users = [<span class="string">'***@qq.com'</span>, <span class="string">'******@qq.com'</span>];</span><br><span class="line"></span><br><span class="line">    $messages = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user) &#123;</span><br><span class="line">        $messages[] = Yii::$app-&gt;mailer-&gt;compose()</span><br><span class="line">            -&gt;setTo($user)</span><br><span class="line">            -&gt;setSubject(<span class="string">'测试主题'</span>)</span><br><span class="line">            -&gt;setHtmlBody(<span class="string">'测试内容'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        \Yii::$app-&gt;mailer-&gt;sendMultiple($messages);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        var_dump($e-&gt;getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var_dump(<span class="number">1024</span>);<span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Yii2中官方为了解决邮件发送问题，提供了&lt;code&gt;swiftMailer&lt;/code&gt;扩展。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架相关" scheme="http://blog.caoxl.com/categories/%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Email" scheme="http://blog.caoxl.com/tags/Email/"/>
    
      <category term="Yii2" scheme="http://blog.caoxl.com/tags/Yii2/"/>
    
      <category term="邮件发送" scheme="http://blog.caoxl.com/tags/%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Linux 查看CPU信息</title>
    <link href="http://blog.caoxl.com/2019/12/23/Linux-CPU-Information/"/>
    <id>http://blog.caoxl.com/2019/12/23/Linux-CPU-Information/</id>
    <published>2019-12-23T07:59:39.000Z</published>
    <updated>2019-12-23T08:25:43.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>总核数 = 物理CPU个数 X 每颗物理CPU的核数<br>总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</p></blockquote><a id="more"></a><h2 id="查看物理CPU个数"><a href="#查看物理CPU个数" class="headerlink" title="查看物理CPU个数"></a>查看物理CPU个数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="查看每个物理CPU中core的个数-即核数"><a href="#查看每个物理CPU中core的个数-即核数" class="headerlink" title="查看每个物理CPU中core的个数(即核数)"></a>查看每个物理CPU中core的个数(即核数)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep "cpu cores" | uniq</span></span><br><span class="line">cpu cores: <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="查看逻辑CPU的个数"><a href="#查看逻辑CPU的个数" class="headerlink" title="查看逻辑CPU的个数"></a>查看逻辑CPU的个数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep "processor" | wc -l</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="查看位于相同物理封装的处理器中的逻辑处理器的数量。"><a href="#查看位于相同物理封装的处理器中的逻辑处理器的数量。" class="headerlink" title="查看位于相同物理封装的处理器中的逻辑处理器的数量。"></a>查看位于相同物理封装的处理器中的逻辑处理器的数量。</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep "siblings" | sort | uniq</span></span><br><span class="line">siblings: <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="查看CPU信息（型号）"><a href="#查看CPU信息（型号）" class="headerlink" title="查看CPU信息（型号）"></a>查看CPU信息（型号）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span></span><br><span class="line">      <span class="number">2</span>  Intel(R) Xeon(R) CPU E5<span class="number">-2682</span> v4 @ <span class="number">2.50</span>GHz</span><br></pre></td></tr></table></figure><h2 id="proc-cpuinfo"><a href="#proc-cpuinfo" class="headerlink" title="/proc/cpuinfo"></a><code>/proc/cpuinfo</code></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo</span></span><br><span class="line">processor: <span class="number">0</span></span><br><span class="line">vendor_id: GenuineIntel</span><br><span class="line">cpu family: <span class="number">6</span></span><br><span class="line">model: <span class="number">79</span></span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5<span class="number">-2682</span> v4 @ <span class="number">2.50</span>GHz</span><br><span class="line">stepping: <span class="number">1</span></span><br><span class="line">microcode: <span class="number">0x1</span></span><br><span class="line">cpu MHz: <span class="number">2499.996</span></span><br><span class="line">cache size: <span class="number">40960</span> KB</span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">siblings: <span class="number">2</span></span><br><span class="line">core id: <span class="number">0</span></span><br><span class="line">cpu cores: <span class="number">1</span></span><br><span class="line">apicid: <span class="number">0</span></span><br><span class="line">initial apicid: <span class="number">0</span></span><br><span class="line">fpu: yes</span><br><span class="line">fpu_exception: yes</span><br><span class="line">cpuid level: <span class="number">13</span></span><br><span class="line">wp: yes</span><br><span class="line">flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm <span class="number">3</span>dnowprefetch ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx smap xsaveopt spec_ctrl intel_stibp</span><br><span class="line">bogomips: <span class="number">4999.99</span></span><br><span class="line">clflush size: <span class="number">64</span></span><br><span class="line">cache_alignment: <span class="number">64</span></span><br><span class="line">address sizes: <span class="number">46</span> bits physical, <span class="number">48</span> bits virtual</span><br><span class="line">power management:</span><br><span class="line"></span><br><span class="line">processor: <span class="number">1</span></span><br><span class="line">vendor_id: GenuineIntel</span><br><span class="line">cpu family: <span class="number">6</span></span><br><span class="line">model: <span class="number">79</span></span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5<span class="number">-2682</span> v4 @ <span class="number">2.50</span>GHz</span><br><span class="line">stepping: <span class="number">1</span></span><br><span class="line">microcode: <span class="number">0x1</span></span><br><span class="line">cpu MHz: <span class="number">2499.996</span></span><br><span class="line">cache size: <span class="number">40960</span> KB</span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">siblings: <span class="number">2</span></span><br><span class="line">core id: <span class="number">0</span></span><br><span class="line">cpu cores: <span class="number">1</span></span><br><span class="line">apicid: <span class="number">1</span></span><br><span class="line">initial apicid: <span class="number">1</span></span><br><span class="line">fpu: yes</span><br><span class="line">fpu_exception: yes</span><br><span class="line">cpuid level: <span class="number">13</span></span><br><span class="line">wp: yes</span><br><span class="line">flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm <span class="number">3</span>dnowprefetch ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx smap xsaveopt spec_ctrl intel_stibp</span><br><span class="line">bogomips: <span class="number">4999.99</span></span><br><span class="line">clflush size: <span class="number">64</span></span><br><span class="line">cache_alignment: <span class="number">64</span></span><br><span class="line">address sizes: <span class="number">46</span> bits physical, <span class="number">48</span> bits virtual</span><br><span class="line">power management:</span><br></pre></td></tr></table></figure><ul><li>以上输出项的含义如下：</li></ul><blockquote><p><code>processor</code>　：系统中逻辑处理核的编号。对于单核处理器，则可认为是其CPU编号，对于多核处理器则可以是物理核、或者使用超线程技术虚拟的逻辑核<br><code>vendor_id</code>：CPU制造商<br><code>cpu family</code>：CPU产品系列代号<br><code>model</code>：CPU属于其系列中的哪一代的代号<br><code>model name</code>：CPU属于的名字及其编号、标称主频<br><code>stepping</code>：CPU属于制作更新版本<br><code>cpu MHz</code>：CPU的实际使用主频<br><code>cache size</code>：CPU二级缓存大小<br><code>physical id</code>：单个CPU的标号<br><code>siblings</code>：单个CPU逻辑物理核数<br><code>core id</code>：当前物理核在其所处CPU中的编号，这个编号不一定连续<br><code>cpu cores</code>：该逻辑核所处CPU的物理核数<br><code>apicid</code>：用来区分不同逻辑核的编号，系统中每个逻辑核的此编号必然不同，此编号不一定连续<br><code>fpu</code>：是否具有浮点运算单元（Floating Point Unit）<br><code>fpu_exception</code>：是否支持浮点计算异常<br><code>cpuid level</code>：执行cpuid指令前，eax寄存器中的值，根据不同的值cpuid指令会返回不同的内容<br><code>wp</code>：表明当前CPU是否在内核态支持对用户空间的写保护（Write Protection）<br><code>flags</code>：当前CPU支持的功能<br><code>bogomips</code>：在系统内核启动时粗略测算的CPU速度（Million Instructions Per Second）<br><code>clflush size</code>：每次刷新缓存的大小单位<br><code>cache_alignment</code>：缓存地址对齐单位<br><code>address sizes</code>：可访问地址空间位数<br><code>power management</code>：对能源管理的支持</p></blockquote><h2 id="lscpu命令"><a href="#lscpu命令" class="headerlink" title="lscpu命令"></a><code>lscpu</code>命令</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># lscpu</span></span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        <span class="number">32</span>-bit, <span class="number">64</span>-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                <span class="number">24</span></span><br><span class="line">On-line CPU(s) <span class="keyword">list</span>:   <span class="number">0</span><span class="number">-23</span></span><br><span class="line">Thread(s) per core:    <span class="number">2</span></span><br><span class="line">Core(s) per socket:    <span class="number">12</span></span><br><span class="line">Socket(s):             <span class="number">1</span></span><br><span class="line">NUMA node(s):          <span class="number">1</span></span><br><span class="line">Vendor ID:             GenuineIntel</span><br><span class="line">CPU family:            <span class="number">6</span></span><br><span class="line">Model:                 <span class="number">85</span></span><br><span class="line">Model name:            Intel(R) Xeon(R) Platinum <span class="number">8163</span> CPU @ <span class="number">2.50</span>GHz</span><br><span class="line">Stepping:              <span class="number">4</span></span><br><span class="line">CPU MHz:               <span class="number">2494.132</span></span><br><span class="line">BogoMIPS:              <span class="number">4988.26</span></span><br><span class="line">Hypervisor vendor:     KVM</span><br><span class="line">Virtualization type:   full</span><br><span class="line">L1d cache:             <span class="number">32</span>K</span><br><span class="line">L1i cache:             <span class="number">32</span>K</span><br><span class="line">L2 cache:              <span class="number">1024</span>K</span><br><span class="line">L3 cache:              <span class="number">33792</span>K</span><br><span class="line">NUMA node0 CPU(s):     <span class="number">0</span><span class="number">-23</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;总核数 = 物理CPU个数 X 每颗物理CPU的核数&lt;br&gt;总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.caoxl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.caoxl.com/tags/Linux/"/>
    
      <category term="CPU" scheme="http://blog.caoxl.com/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 速查表</title>
    <link href="http://blog.caoxl.com/2019/12/20/Yii2-Cheat-Sheet/"/>
    <id>http://blog.caoxl.com/2019/12/20/Yii2-Cheat-Sheet/</id>
    <published>2019-12-20T06:21:48.000Z</published>
    <updated>2019-12-20T09:20:40.704Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Yii2 速查表</p></blockquote><a id="more"></a><h2 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h2><ul><li>安装yii程序</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist yiisoft/yii2-app-basic basic</span><br></pre></td></tr></table></figure><ul><li>通过<code>composer.json</code>安装扩展</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer install</span><br></pre></td></tr></table></figure><ul><li>更新本地<code>composer</code>扩展库</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure><ul><li>直接安装某个<code>composer</code>扩展</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> [options] [--] [vendor/packages]...</span><br></pre></td></tr></table></figure><h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><blockquote><p>Yii的数据库读取对象，在PDO之上，DAO后有了Query Builder和AR</p></blockquote><ul><li>获得数据库连接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$conn = Yii::$app-&gt;db;</span><br></pre></td></tr></table></figure><ul><li>执行数据库查询语句</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user`"</span>);</span><br><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user` WHERE uid=:uid"</span>,[<span class="string">":uid"</span>=&gt;<span class="number">1</span>]);</span><br><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user` WHERE uid=:uid"</span>)-&gt;addValue([<span class="string">":uid"</span>=&gt;<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><ul><li>SQL语句插入数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db</span><br><span class="line">-&gt;createCommand(<span class="string">'INSERT INTO user (email, password) VALUES("test3@example.com", "test3");'</span>)-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>数组形式插入数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;insert(<span class="string">'user'</span>, [</span><br><span class="line">    <span class="string">'email'</span> =&gt; <span class="string">'test4@example.com'</span>,</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">'changeme7'</span>,</span><br><span class="line">    <span class="string">'first_name'</span> =&gt; <span class="string">'Test'</span></span><br><span class="line">])-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>批量插入数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;batchInsert(<span class="string">'user'</span>, [<span class="string">'email'</span>, <span class="string">'password'</span>, <span class="string">'first_name'</span>],[</span><br><span class="line">    [<span class="string">'james.franklin@example.com'</span>, <span class="string">'changeme7'</span>, <span class="string">'James'</span>],</span><br><span class="line">    [<span class="string">'linda.marks@example.com'</span>, <span class="string">'changeme7'</span>, <span class="string">'Linda'</span>]</span><br><span class="line">    [<span class="string">'roger.martin@example.com'</span>, <span class="string">'changeme7'</span>]</span><br><span class="line">])-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>更新数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;update(<span class="string">'user'</span>, [<span class="string">'updated_at'</span> =&gt; time()], <span class="string">'id = 2'</span>)-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;delete(<span class="string">'user'</span>, <span class="string">'id = 3'</span>)-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>获取所有数据(数组形式返回)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user`"</span>)-&gt;queryAll();</span><br></pre></td></tr></table></figure><ul><li>获取一条数据（一维数组）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user` WHERE id = 1"</span>)-&gt;queryOne();</span><br></pre></td></tr></table></figure><ul><li>获取一个值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT count(*) AS total FROM `user` WHERE id = 1"</span>)-&gt;queryScalar();</span><br></pre></td></tr></table></figure><ul><li>获取某一列（放到一位数组中）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT username FROM `user`"</span>)-&gt;queryColumn();</span><br></pre></td></tr></table></figure><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><ul><li><code>trace</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::trace($message,$category)</span><br></pre></td></tr></table></figure><ul><li><code>info</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::info($message,$category)</span><br></pre></td></tr></table></figure><ul><li><code>warning</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::warning($message,$category)</span><br></pre></td></tr></table></figure><ul><li><code>error</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::error($message,$category)</span><br></pre></td></tr></table></figure><h2 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h2><blockquote><p>数据验证，最常用于模型的<code>rules()</code>函数</p></blockquote><ul><li><code>required</code> 必须值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"username"</span>,<span class="string">'required'</span>]</span><br><span class="line">[[<span class="string">"username"</span>,<span class="string">"email"</span>],<span class="string">'required'</span>]</span><br><span class="line">[[<span class="string">"username"</span>],<span class="string">'required'</span>,<span class="string">"message"</span>=&gt;<span class="string">"&#123;attribute&#125;必须填写"</span>]</span><br><span class="line">[[<span class="string">"username"</span>],<span class="string">'required'</span>,<span class="string">'requiredValue'</span>=&gt;<span class="string">"abei"</span>] <span class="comment">// 用户填写的值必须等于requiredValue才能通过验证。</span></span><br></pre></td></tr></table></figure><ul><li><code>Email</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"email"</span>,<span class="string">'email'</span>]</span><br><span class="line">[[<span class="string">"email"</span>,<span class="string">"work_email"</span>],<span class="string">'email'</span>]</span><br></pre></td></tr></table></figure><ul><li><code>Boolean</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'sex'</span>, <span class="string">'boolean'</span>, <span class="string">'trueValue'</span> =&gt; <span class="keyword">true</span>, <span class="string">'falseValue'</span> =&gt; <span class="keyword">false</span>, <span class="string">'strict'</span> =&gt; <span class="keyword">true</span>];<span class="comment">// 可以认为置顶 true / false 值。</span></span><br></pre></td></tr></table></figure><ul><li><code>captcha</code>验证码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'verificationCode'</span>, <span class="string">'captcha'</span>];</span><br></pre></td></tr></table></figure><ul><li><code>compare</code>比较</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'username'</span>, <span class="string">'compare'</span>, <span class="string">'compareAttribute'</span> =&gt; <span class="string">'province'</span>,<span class="string">'message'</span>=&gt;<span class="string">'username和province必须一样'</span>] <span class="comment">//错误信息将提示给username</span></span><br><span class="line">[<span class="string">'age'</span>, <span class="string">'compare'</span>, <span class="string">'compareValue'</span> =&gt; <span class="number">30</span>, <span class="string">'operator'</span> =&gt; <span class="string">'&gt;='</span>,<span class="string">'type'</span> =&gt; <span class="string">'number'</span>];<span class="comment">//compareValue:比较常量值 operator:比较操作符 type为值类型，默认为string，会一个每个字符对比，若为number则直接判断数值</span></span><br><span class="line"><span class="comment">// operator 待选值==、===、!=、!==、&gt;、&gt;=、&lt;、&lt;=</span></span><br></pre></td></tr></table></figure><ul><li><code>date</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"birth"</span>,<span class="string">"date"</span>,<span class="string">"format"</span>=&gt;<span class="string">"Y-m-d"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>default</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'age'</span>,<span class="string">'default'</span>,<span class="string">'value'</span>=&gt;<span class="keyword">null</span>] <span class="comment">// 当age为空的时候设置为null</span></span><br><span class="line">[<span class="string">'country'</span>,<span class="string">'default'</span>,<span class="string">'value'</span>=&gt;<span class="string">'USA'</span>] <span class="comment">// 当 country为空时设置为USA</span></span><br><span class="line"><span class="comment">/* 如果from为空，则=今天+3天，如果to为空，则=今天+6天 */</span></span><br><span class="line">[[<span class="string">'from'</span>,<span class="string">'to'</span>],<span class="string">'default'</span>,<span class="string">'value'</span>=&gt;<span class="function"><span class="keyword">function</span><span class="params">($model,$attribute)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date(<span class="string">'Y-m-d'</span>, strtotime($attribute === <span class="string">'to'</span> ? <span class="string">'+3 days'</span> : <span class="string">'+6 days'</span>));</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><ul><li><code>double/number</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'v'</span>,<span class="string">'double'</span>] <span class="comment">// 判断v是否为数字</span></span><br><span class="line">[<span class="string">'v'</span>,<span class="string">'double'</span>,<span class="string">'max'</span>=&gt;<span class="number">90</span>,<span class="string">'min'</span>=&gt;<span class="number">1</span>]<span class="comment">//判断v是否为数字且大于等于1、小于等于90</span></span><br></pre></td></tr></table></figure><ul><li>数组各元素验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 要求验证的元素必须为数组，否则会返回假并报错 */</span></span><br><span class="line">[<span class="string">"categoryIds"</span>,<span class="string">"each"</span>,<span class="string">"rule"</span>=&gt;[<span class="string">'integer'</span>]]</span><br></pre></td></tr></table></figure><ul><li><code>exist</code>是否存在验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 所谓对存在的检查实质为where的与操作，必须同时满足的记录存在方可。兄弟们可以研究下，exist是对sql语句EXISTS的应用*/</span></span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"exist"</span>] <span class="comment">// username输入的值已经存在</span></span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"exist"</span>,<span class="string">"targetAttribute"</span>=&gt;<span class="string">"province"</span>] <span class="comment">// username的输入值必须在province列存在</span></span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"exist"</span>,<span class="string">'targetAttribute'</span> =&gt; [<span class="string">'username'</span>, <span class="string">'province'</span>]] <span class="comment">// username的输入值必须在username和province中存在</span></span><br><span class="line">[[<span class="string">"username"</span>,<span class="string">"province"</span>],<span class="string">"exist"</span>,<span class="string">'targetAttribute'</span> =&gt; [<span class="string">'username'</span>, <span class="string">'province'</span>]] <span class="comment">// username和province的输入值必须在username和province中存在</span></span><br></pre></td></tr></table></figure><ul><li>file验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* maxFiles代表一次最多传几个，mimeTypes代表上传文件类型 */</span></span><br><span class="line">[<span class="string">'primaryImage'</span>, <span class="string">'file'</span>, <span class="string">'extensions'</span> =&gt; [<span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'gif'</span>],<span class="string">'mimeTypes'</span>=&gt;[<span class="string">"image/*"</span>], <span class="string">'maxSize'</span> =&gt; <span class="number">1024</span>*<span class="number">1024</span>,<span class="string">'minSize'</span>=&gt;<span class="number">100</span>*<span class="number">1024</span>,<span class="string">'maxFiles'</span>=&gt;<span class="number">6</span>,<span class="string">'checkExtensionByMimeType'</span>=&gt;<span class="keyword">true</span>],</span><br></pre></td></tr></table></figure><ul><li><code>filter</code>过滤验证函数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">'username'</span>, <span class="string">'email'</span>], <span class="string">'filter'</span>, <span class="string">'filter'</span> =&gt; <span class="string">'trim'</span>, <span class="string">'skipOnArray'</span> =&gt; <span class="keyword">true</span>],</span><br><span class="line">[<span class="string">'phone'</span>, <span class="string">'filter'</span>, <span class="string">'filter'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// normalize phone input here</span></span><br><span class="line">        <span class="keyword">return</span> $value;</span><br><span class="line">&#125;],</span><br></pre></td></tr></table></figure><ul><li><code>image</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 上传png/jpg格式，最大宽度不能超过1000px，最小宽度不能低于100px，最大高度不能高于1000px。最小高度不能低于100px */</span></span><br><span class="line">[<span class="string">'primaryImage'</span>, <span class="string">'image'</span>, <span class="string">'extensions'</span> =&gt; <span class="string">'png, jpg'</span>,<span class="string">'minWidth'</span> =&gt; <span class="number">100</span>, <span class="string">'maxWidth'</span> =&gt; <span class="number">1000</span>,<span class="string">'minHeight'</span> =&gt; <span class="number">100</span>, <span class="string">'maxHeight'</span> =&gt; <span class="number">1000</span>]</span><br></pre></td></tr></table></figure><ul><li><code>ip</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"ip_addess"</span>,<span class="string">"ip"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>in</code>方法验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"level"</span>,<span class="string">"in"</span>,<span class="string">"range"</span>=&gt;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><ul><li><code>integer</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"age"</span>,<span class="string">'integer'</span>];</span><br><span class="line">[<span class="string">"age"</span>,<span class="string">"integer"</span>,<span class="string">"max"</span>=&gt;<span class="number">90</span>,<span class="string">"min"</span>=&gt;<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>正则匹配验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"username"</span>,<span class="string">"match"</span>,<span class="string">"pattern"</span>=&gt;<span class="string">"/^[a-z]\w*$/i"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>in</code>方法验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"level"</span>,<span class="string">"in"</span>,<span class="string">"range"</span>=&gt;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><ul><li><code>safe</code>验证（多用于设置一个model的attribute）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"description"</span>,<span class="string">"safe"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>string</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"username"</span>,<span class="string">"string"</span>,<span class="string">"length"</span>=&gt;[<span class="number">4</span>,<span class="number">24</span>]];</span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"string"</span>,<span class="string">"min"</span>=&gt;<span class="number">4</span>];</span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"string"</span>,<span class="string">"max"</span>=&gt;<span class="number">32</span>];</span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"string"</span>,<span class="string">"encoding"</span>=&gt;<span class="string">"UTF-8"</span>];</span><br></pre></td></tr></table></figure><ul><li><code>unique</code>唯一验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"username"</span>,<span class="string">"unique"</span>]</span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"unique"</span>,<span class="string">"targetAttribute"</span>=&gt;<span class="string">"province"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>url</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"website"</span>,<span class="string">"url"</span>]</span><br><span class="line">[<span class="string">"website"</span>,<span class="string">"url"</span>,<span class="string">"validSchemes"</span>=&gt;[<span class="string">"http"</span>,<span class="string">"https"</span>]]</span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>一个字符串中单词数量</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::countWords(<span class="string">"hello world"</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>返回路径中的文件名部分</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::basename(<span class="string">"/path/hello.txt"</span>,<span class="string">".txt"</span>); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><ul><li>返回路径中的目录名</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::dirname(<span class="string">"/home/path/hello.txt"</span>);<span class="comment">// /home/path</span></span><br></pre></td></tr></table></figure><ul><li>超出内容用…代替(不含HTML)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::truncate(<span class="string">"hello world"</span>,<span class="number">7</span>,<span class="string">'...'</span>); <span class="comment">//hello w...</span></span><br></pre></td></tr></table></figure><ul><li>超出内容用…代替(识别HTML)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::truncate(<span class="string">"hello world"</span>,<span class="number">7</span>,<span class="string">'...'</span>,<span class="keyword">null</span>,<span class="keyword">true</span>); <span class="comment">// hello w...</span></span><br></pre></td></tr></table></figure><ul><li>以单词为单位超出部分用..代替（不解析HTML）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::truncateWords(<span class="string">'This is a test sentance'</span>, <span class="number">4</span>, <span class="string">'...'</span>) <span class="comment">//This is a test ...</span></span><br></pre></td></tr></table></figure><ul><li>以单词为单位超出部分用..代替（解析HTML）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::truncateWords(<span class="string">'This is a test for a sentance'</span>, <span class="number">5</span>, <span class="string">'...'</span>,<span class="keyword">true</span>) <span class="comment">//This is a test for...</span></span><br></pre></td></tr></table></figure><ul><li>一个字符串是否以另一个字符串开始</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::startsWith(<span class="string">"hello world"</span>,<span class="string">"he"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>一个字符串是否以另一个字符串结尾</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::endsWith(<span class="string">"hello world"</span>,<span class="string">"ald"</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li>按照分隔符分隔字符串为数组</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::explode(<span class="string">'It, is, a first, test'</span>));<span class="comment">//['It','is','a first','test']</span></span><br><span class="line">StringHelper::explode(<span class="string">"a@b@c"</span>,<span class="string">"@"</span>);[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">StringHelper::explode(<span class="string">"a, b ,c "</span>);[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br></pre></td></tr></table></figure><h2 id="Session-amp-Cookie"><a href="#Session-amp-Cookie" class="headerlink" title="Session&amp;Cookie"></a>Session&amp;Cookie</h2><blockquote><p><code>Session</code>被封装成一个应用组件，直接通过 <code>Yii::$app-&gt;session</code> 来访问；<br><code>Cookie</code>通过Request和Response来操作。</p></blockquote><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul><li>获得session</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$session = Yii::$app-&gt;session;</span><br></pre></td></tr></table></figure><ul><li>检查session是否开启</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;isActive</span><br></pre></td></tr></table></figure><ul><li>开启一个<code>session</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;open()</span><br></pre></td></tr></table></figure><ul><li>关闭<code>session</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;close();</span><br></pre></td></tr></table></figure><ul><li>销毁<code>session</code>中所有已注册的数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;destroy();</span><br></pre></td></tr></table></figure><ul><li>访问一个<code>session</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以下三种方法效果等同 */</span></span><br><span class="line">$language = $session-&gt;get(<span class="string">'language'</span>);</span><br><span class="line">$language = $session[<span class="string">'language'</span>];</span><br><span class="line">$language = <span class="keyword">isset</span>($_SESSION[<span class="string">'language'</span>]) ? $_SESSION[<span class="string">'language'</span>] : <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><ul><li>设置一个<code>session</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以下三种方法效果等同 */</span></span><br><span class="line">$session-&gt;set(<span class="string">'language'</span>, <span class="string">'en-US'</span>);</span><br><span class="line">$session[<span class="string">'language'</span>] = <span class="string">'en-US'</span>;</span><br><span class="line">$_SESSION[<span class="string">'language'</span>] = <span class="string">'en-US'</span>;</span><br></pre></td></tr></table></figure><ul><li>删除一个<code>session</code>变量</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 下面三种方法效果等同 */</span></span><br><span class="line">$session-&gt;remove(<span class="string">'language'</span>);</span><br><span class="line"><span class="keyword">unset</span>($session[<span class="string">'language'</span>]);</span><br><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">'language'</span>]);</span><br></pre></td></tr></table></figure><ul><li>检查一个<code>session</code>变量是否存在</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以下三种方法效果一致 */</span></span><br><span class="line"><span class="keyword">if</span> ($session-&gt;has(<span class="string">'language'</span>)) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($session[<span class="string">'language'</span>])) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'language'</span>])) ...</span><br></pre></td></tr></table></figure><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li>获取<code>cookie</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cookies = Yii::$app-&gt;request-&gt;cookies;</span><br></pre></td></tr></table></figure><ul><li>设置<code>cookie</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cookies = Yii::$app-&gt;response-&gt;cookies;</span><br></pre></td></tr></table></figure><ul><li>获取一个<code>cookie</code>值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$language = $cookies-&gt;getValue(<span class="string">'language'</span>, <span class="string">'en'</span>);<span class="comment">// 如果获取language失败，则返回"en"代替</span></span><br></pre></td></tr></table></figure><ul><li>另一种获取<code>cookie</code>值方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (($cookie = $cookies-&gt;get(<span class="string">'language'</span>)) !== <span class="keyword">null</span>) &#123;</span><br><span class="line">    $language = $cookie-&gt;value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组方式获取<code>cookie</code>值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($cookies[<span class="string">'language'</span>])) &#123;</span><br><span class="line">    $language = $cookies[<span class="string">'language'</span>]-&gt;value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>检查一个<code>cookie</code>是否存在</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($cookies-&gt;has(<span class="string">'language'</span>)) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($cookies[<span class="string">'language'</span>])) ...</span><br></pre></td></tr></table></figure><ul><li>新增一个<code>cookie</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$cookies-&gt;add(<span class="keyword">new</span> \yii\web\Cookie([</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'language'</span>,</span><br><span class="line">    <span class="string">'value'</span> =&gt; <span class="string">'zh-CN'</span>,</span><br><span class="line">]));</span><br></pre></td></tr></table></figure><ul><li>删除一个<code>cookie</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$cookies-&gt;remove(<span class="string">'language'</span>);</span><br><span class="line"><span class="keyword">unset</span>($cookies[<span class="string">'language'</span>]);</span><br></pre></td></tr></table></figure><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><blockquote><p><code>Request</code> 被配置为一个应用组件，我们可以通过<code>Yii::$app-&gt;request</code>访问它。</p></blockquote><h3 id="URL相关"><a href="#URL相关" class="headerlink" title="URL相关"></a>URL相关</h3><ul><li>获得当前请求的绝对<code>url</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getAbsoluteUrl();</span><br></pre></td></tr></table></figure><ul><li>返回一个请求URL的<code>hostInfo</code>部分</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getHostInfo();</span><br></pre></td></tr></table></figure><ul><li>获得URL问号后的参数字符串</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getQueryString()</span><br></pre></td></tr></table></figure><ul><li>返回服务器端口</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getServerPort();</span><br></pre></td></tr></table></figure><h3 id="HTTP头"><a href="#HTTP头" class="headerlink" title="HTTP头"></a>HTTP头</h3><ul><li>返回用户接受的内容类型</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt; getAcceptableContentTypes (); <span class="comment">// Header Accept</span></span><br></pre></td></tr></table></figure><ul><li>返回用户可接受的语言</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt; getAcceptableLanguages(); <span class="comment">// Header Accept-Language</span></span><br></pre></td></tr></table></figure><ul><li>返回<code>GET</code>/<code>POST</code>请求</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;get();</span><br><span class="line">Yii::$app-&gt;request-&gt;get(<span class="string">"id"</span>);</span><br><span class="line">Yii::$app-&gt;request-&gt;POST();</span><br><span class="line">Yii::$app-&gt;request-&gt;POST(<span class="string">"username"</span>);</span><br></pre></td></tr></table></figure><ul><li>判断请求类型（返回boolean）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;isAjax <span class="comment">// 判断是否为ajax请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isConsoleRequest <span class="comment">// 判断是否为控制发起的请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isDelete <span class="comment">// 判断是否为DELETE请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isGet <span class="comment">// 判断是否为GET请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isPost <span class="comment">// 判断是否为POST请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isPjax <span class="comment">// 判断是否为isPjax请求</span></span><br></pre></td></tr></table></figure><ul><li>返回用户的 IP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getUserIP();</span><br></pre></td></tr></table></figure><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><blockquote><p>和Request一样，Response被封装成Yii的一个组件，你可以通过<code>Yii::$app-&gt;response</code>轻松的访问它。</p></blockquote><h3 id="Status-Code状态码"><a href="#Status-Code状态码" class="headerlink" title="Status Code状态码"></a>Status Code状态码</h3><ul><li>设置一个<code>Status Code</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;statusCode = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><ul><li>Yii内置的通过异常形式返回状态码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yii\web\BadRequestHttpException: status code <span class="number">400.</span></span><br><span class="line">yii\web\ConflictHttpException: status code <span class="number">409.</span></span><br><span class="line">yii\web\ForbiddenHttpException: status code <span class="number">403.</span></span><br><span class="line">yii\web\GoneHttpException: status code <span class="number">410.</span></span><br><span class="line">yii\web\MethodNotAllowedHttpException: status code <span class="number">405.</span></span><br><span class="line">yii\web\NotAcceptableHttpException: status code <span class="number">406.</span></span><br><span class="line">yii\web\NotFoundHttpException: status code <span class="number">404.</span></span><br><span class="line">yii\web\ServerErrorHttpException: status code <span class="number">500.</span></span><br><span class="line">yii\web\TooManyRequestsHttpException: status code <span class="number">429.</span></span><br><span class="line">yii\web\UnauthorizedHttpException: status code <span class="number">401.</span></span><br><span class="line">yii\web\UnsupportedMediaTypeHttpException: status code <span class="number">415.</span></span><br></pre></td></tr></table></figure><h3 id="HTTP-Headers"><a href="#HTTP-Headers" class="headerlink" title="HTTP Headers"></a>HTTP Headers</h3><ul><li>添加设置删除<code>Http Headers</code>内容</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$headers = Yii::$app-&gt;response-&gt;headers;</span><br><span class="line"><span class="comment">// add a Pragma header. Existing Pragma headers will NOT be overwritten.</span></span><br><span class="line">$headers-&gt;add(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"><span class="comment">// set a Pragma header. Any existing Pragma headers will be discarded.</span></span><br><span class="line">$headers-&gt;set(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"><span class="comment">// remove Pragma header(s) and return the removed Pragma header values in an array</span></span><br><span class="line">$values = $headers-&gt;remove(<span class="string">'Pragma'</span>);</span><br></pre></td></tr></table></figure><h3 id="Response-Body"><a href="#Response-Body" class="headerlink" title="Response Body"></a><code>Response Body</code></h3><ul><li>相应主体</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;content = <span class="string">'hello world!'</span>;</span><br></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><blockquote><p>控制器，可在<code>action</code>内直接用<code>$this</code>调用。</p></blockquote><ul><li>渲染一个视图（如果布局有效则使用布局）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;render(<span class="string">'index'</span>, [<span class="string">'model'</span> =&gt; $model])</span><br></pre></td></tr></table></figure><ul><li>渲染视图（不使用布局）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;renderPartial(<span class="string">'index'</span>,[<span class="string">'model'</span>=&gt;$model])</span><br></pre></td></tr></table></figure><ul><li>渲染视图（不使用布局）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入所有注册的JS/CSS脚本和文件,通常使用在响应AJAX网页请求的情况下</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;renderAjax(<span class="string">'index'</span>,[<span class="string">'model'</span>=&gt;$model])</span><br></pre></td></tr></table></figure><ul><li>只渲染布局</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;renderContent($content);</span><br></pre></td></tr></table></figure><h2 id="ActiveForm"><a href="#ActiveForm" class="headerlink" title="ActiveForm"></a>ActiveForm</h2><blockquote><p>重点！列出最常用的ActiveForm方法。</p></blockquote><ul><li>取消客户端规则验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">'enableClientValidation'</span>=&gt;<span class="keyword">false</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>取消<code>yii.js</code>的引入</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">'enableClientScript'</span>=&gt;<span class="keyword">false</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>表单目标地址设置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">"action"</span>=&gt;$url </span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>GET &amp; POST 方法设置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">"method"</span>=&gt;<span class="string">"POST"</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>设置Form的类及自己定义标签属性</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">'options'</span>=&gt;[<span class="string">"class"</span>=&gt;<span class="string">"f"</span>,<span class="string">"data-name"</span>=&gt;<span class="string">"xxx"</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>生成文本框</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model, <span class="string">'date'</span>)-&gt;textInput([<span class="string">"key"</span>=&gt;<span class="string">"value"</span>]);</span><br></pre></td></tr></table></figure><ul><li>生成文本域</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model, <span class="string">'date'</span>)-&gt;textarea([<span class="string">"key"</span>=&gt;<span class="string">"value"</span>]);</span><br></pre></td></tr></table></figure><ul><li>单选列表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">'sex'</span>)-&gt;radioList($arr,[<span class="string">"key"</span>=&gt;<span class="string">"value"</span>]);</span><br></pre></td></tr></table></figure><ul><li>密码框 </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">"password"</span>)-&gt;passwordInput();</span><br></pre></td></tr></table></figure><ul><li>复选框</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">"city_id"</span>)-&gt;checkboxList($arr);</span><br></pre></td></tr></table></figure><ul><li>文件上传</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">"image"</span>)-&gt;fileInput();</span><br></pre></td></tr></table></figure><ul><li>隐藏域</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">"name"</span>)-&gt;hiddenInput();</span><br></pre></td></tr></table></figure><h2 id="FileHelper"><a href="#FileHelper" class="headerlink" title="FileHelper"></a>FileHelper</h2><blockquote><p>几个常用也好用的文件帮助方法</p></blockquote><ul><li>遍历一个文件夹下文件&amp;子文件夹</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::findFiles(<span class="string">'/path/to/search/'</span>);</span><br><span class="line">FileHelper::findFiles(<span class="string">'.'</span>, [<span class="string">'only'</span> =&gt; [<span class="string">'*.php'</span>, <span class="string">'*.txt'</span>]]); <span class="comment">// 只返回php和txt文件</span></span><br><span class="line">FileHelper::findFiles(<span class="string">'.'</span>, [<span class="string">'except'</span> =&gt; [<span class="string">'*.php'</span>, <span class="string">'*.txt'</span>]]); <span class="comment">// 排除php和txt文件</span></span><br></pre></td></tr></table></figure><ul><li>获得指定文件的MIME类型</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::getMimeType(<span class="string">'/path/to/img.jpeg'</span>);</span><br></pre></td></tr></table></figure><ul><li>复制文件夹</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::copyDirectory($src, $dst, $options = [])</span><br></pre></td></tr></table></figure><ul><li>删除一个目录及内容</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::removeDirectory($dir, $options = [])</span><br></pre></td></tr></table></figure><ul><li>生成一个文件夹（同时设置权限）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::createDirectory($path, $mode = <span class="number">0775</span>, $recursive = <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><h2 id="UploadedFile"><a href="#UploadedFile" class="headerlink" title="UploadedFile"></a>UploadedFile</h2><blockquote><p>上传文件帮助类</p></blockquote><ul><li>通过模型的属性获取一个文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file = UploadedFile::getInstance($model,<span class="string">'avatar'</span>)</span><br></pre></td></tr></table></figure><ul><li>通过模型的属性来获取一组文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$files = UploadedFile::getInstances($model,<span class="string">'avatar'</span>)</span><br><span class="line"><span class="comment">//view $form-&gt;field($model,'avatar[]')-&gt;fileInput()</span></span><br></pre></td></tr></table></figure><ul><li>通过名字上传一个文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file = UploadedFile::getInstanceByName(<span class="string">'avatar'</span>);</span><br></pre></td></tr></table></figure><ul><li>通过名字获取一组上传的文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$file = UploadedFile::getInstancesByName(<span class="string">'avatar'</span>);</span><br><span class="line"><span class="comment">// view Html::fileInput('avatar[]')</span></span><br></pre></td></tr></table></figure><ul><li>保存一个文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;saveAs(Yii::getAlias(<span class="string">"@webroot"</span>).<span class="string">'/data/test.jpg'</span>);</span><br></pre></td></tr></table></figure><ul><li>获取上传文件原始名(不含扩展名)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;getBaseName(); <span class="comment">// test.jpg ===&gt; test</span></span><br></pre></td></tr></table></figure><ul><li>获取上传文件的扩展名(已经自动格式化为小写)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;getExtension(); <span class="comment">// 是png、不是image/png</span></span><br></pre></td></tr></table></figure><ul><li>获取文件的原始名</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;name; <span class="comment">// test.jpg</span></span><br></pre></td></tr></table></figure><ul><li>获取文件媒体类型</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;type; <span class="comment">// image/png</span></span><br></pre></td></tr></table></figure><ul><li>获取文件临时名</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;tempName;</span><br></pre></td></tr></table></figure><ul><li>获取文件大小</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;size; <span class="comment">// 21744</span></span><br></pre></td></tr></table></figure><h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><blockquote><p>通过Html类的一些静态方法生成Html标签。</p></blockquote><ul><li>生成一个超级链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::a(<span class="string">'链接的文本'</span>, $url);</span><br></pre></td></tr></table></figure><ul><li>通过Yii2的路由生成一个链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html::a(<span class="string">'链接文本'</span>, Url::to([<span class="string">'/site/index'</span>], <span class="keyword">true</span>));</span><br><span class="line">Html::a(<span class="string">'链接文本'</span>, Yii::$app-&gt;urlManager-&gt;createUrl([<span class="string">'/site/index'</span>]));</span><br></pre></td></tr></table></figure><ul><li>生成一个图片链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::img(<span class="string">"/images/logo.png"</span>,[<span class="string">'class'</span>=&gt;<span class="string">'img'</span>]);</span><br></pre></td></tr></table></figure><ul><li>生成一个按钮</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::button(<span class="string">"按钮文本"</span>,[<span class="string">'class'</span>=&gt;<span class="string">'button-action'</span>]);</span><br></pre></td></tr></table></figure><ul><li>发送邮件链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::mailto(<span class="string">"阿北"</span>,<span class="string">'abei@nai8.me'</span>,$options);</span><br></pre></td></tr></table></figure><ul><li>生成有序列表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$list = [<span class="string">'china'</span>,<span class="string">'usa'</span>];</span><br><span class="line">Html::ol($list);</span><br></pre></td></tr></table></figure><ul><li>生成无须列表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$list = [<span class="string">'china'</span>,<span class="string">'usa'</span>,<span class="string">'japan'</span>];</span><br><span class="line">Html::ul($list);</span><br></pre></td></tr></table></figure><ul><li>生成<code>javascript</code>代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::script(<span class="string">"alert('hello world');"</span>)</span><br></pre></td></tr></table></figure><ul><li>生成<code>style</code>代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html::style(<span class="string">"color:#F60"</span>);</span><br><span class="line">Html::style(<span class="string">".list &#123;background:#FFF;&#125;"</span>);</span><br></pre></td></tr></table></figure><ul><li>生成一个css引用链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::cssFile(<span class="string">"http://baidu.com/style.css"</span>,[]);</span><br></pre></td></tr></table></figure><ul><li>生成一个js文件引用</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::jsFile($url,[]);</span><br></pre></td></tr></table></figure><ul><li>把字符 “&lt;” （小于）和 “&gt;” （大于）转换为HTML实体</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::encode($html);</span><br></pre></td></tr></table></figure><ul><li>将特色的HTML实体转化为&gt;和&lt;</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::decode($string);</span><br></pre></td></tr></table></figure><h2 id="Query-Builder"><a href="#Query-Builder" class="headerlink" title="Query Builder"></a>Query Builder</h2><blockquote><p>主要解决DAO在查询语句上的繁琐问题，无需输入原生SQL语句就可以完成数据库检索。</p></blockquote><ul><li>使用<code>Query Builder</code>需要使用的类</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query = (<span class="keyword">new</span> \yii\db\Query()); <span class="comment">// yii2使用Query对象来采集SQL的各个部分，然后由Query Builder组成SQL语句后由DAO发给数据库获得请求。</span></span><br></pre></td></tr></table></figure><ul><li><code>SELECT</code>方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;select(<span class="string">"id,username"</span>); <span class="comment">// 字符串形式</span></span><br><span class="line">$query-&gt;select([<span class="string">'id'</span>,<span class="string">'username'</span>]); <span class="comment">// 数组形式</span></span><br><span class="line">$query-&gt;select([<span class="string">"userId"</span>=&gt;<span class="string">"id"</span>,<span class="string">"fName"</span>=&gt;<span class="string">"user.frist_name"</span>]); <span class="comment">// 起别名</span></span><br><span class="line">$query-&gt;select([<span class="string">"full_name"</span>=&gt;<span class="string">"CONCAT(id,'-',username)"</span>]); <span class="comment">// 支持MYSQL函数</span></span><br></pre></td></tr></table></figure><ul><li><code>FROM</code>方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;from(<span class="string">"user"</span>); <span class="comment">// 字符串形式</span></span><br><span class="line">$query-&gt;from([<span class="string">"u"</span>=&gt;<span class="string">"user"</span>]); <span class="comment">// 数据表别名</span></span><br></pre></td></tr></table></figure><ul><li>过滤掉重复记录</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;select(<span class="string">"username"</span>)-&gt;distinct()-&gt;from(<span class="string">"user"</span>); <span class="comment">// distinct</span></span><br></pre></td></tr></table></figure><ul><li><code>WHERE</code>函数用法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 传递字符串 */</span></span><br><span class="line">$query-&gt;where(<span class="string">"id = 1"</span>);</span><br><span class="line">$query-&gt;where(<span class="string">"id = :id"</span>)-&gt;addParams([<span class="string">":id"</span>=&gt;<span class="number">1</span>]);</span><br><span class="line">$query-&gt;where(<span class="string">"id = :id"</span>,[<span class="string">":id"</span>=&gt;<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 传递数组 */</span></span><br><span class="line">$query-&gt;where([<span class="string">"username"</span>=&gt;<span class="string">"abei"</span>,<span class="string">"age"</span>=&gt;[<span class="number">20</span>,<span class="number">19</span>,<span class="number">26</span>]])-&gt;from(<span class="string">"user"</span>);<span class="comment">// select * from user where username="abei" AND age in (20,19,26)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作符 */</span></span><br><span class="line">$query-&gt;where([<span class="string">"&gt;"</span>,<span class="string">"id"</span>,<span class="number">10</span>]);<span class="comment">// id &gt; 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"&lt;"</span>,<span class="string">"id"</span>,<span class="number">10</span>]); <span class="comment">// id &lt; 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"&lt;&gt;"</span>,<span class="string">"id"</span>,<span class="number">10</span>]); <span class="comment">// id &lt;&gt; 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"in"</span>,<span class="string">"id"</span>,[<span class="number">10</span>,<span class="number">12</span>]]);<span class="comment">// id in (10,20)</span></span><br><span class="line">$query-&gt;where([<span class="string">"not in"</span>,<span class="string">"id"</span>,[<span class="number">10</span>,<span class="number">12</span>]]);<span class="comment">// id not in (10,20)</span></span><br><span class="line">$query-&gt;where([<span class="string">"and"</span>,<span class="string">"id=1"</span>,<span class="string">"id=2"</span>]); id=<span class="number">1</span> <span class="keyword">AND</span> id=<span class="number">2</span></span><br><span class="line">$query-&gt;where([<span class="string">'or'</span>, [<span class="string">'type'</span> =&gt; [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]], [<span class="string">'id'</span> =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]]); <span class="comment">// (type IN (7, 8, 9) OR (id IN (1, 2, 3)))</span></span><br><span class="line">$query-&gt;where([<span class="string">"between"</span>, <span class="string">'id'</span>, <span class="number">1</span>, <span class="number">10</span>]);<span class="comment">// id between 1 AND 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"not"</span>,[<span class="string">"id"</span>=&gt;<span class="number">5</span>]]);<span class="comment">// not (id=5)</span></span><br><span class="line">$query-&gt;where([<span class="string">"not between"</span>,<span class="string">"id"</span>,<span class="number">1</span>,<span class="number">10</span>]);<span class="comment">// id not between 1 AND 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"like"</span>,<span class="string">"username"</span>,<span class="string">"abei"</span>]); <span class="comment">// username like "%abei%"</span></span><br><span class="line">$query-&gt;where([[<span class="string">'like'</span>, <span class="string">'username'</span>, [<span class="string">'abei'</span>, <span class="string">'liuhuan'</span>]]]); <span class="comment">// username like "%abei%" AND username like "%liuhuan%"</span></span><br><span class="line">$query-&gt;where([<span class="string">'like'</span>, <span class="string">'username'</span>, <span class="string">'%abei'</span>, <span class="keyword">false</span>]); <span class="comment">// username like "%abei"</span></span><br><span class="line">$query-&gt;where([<span class="string">"or like"</span>, <span class="string">'username'</span>, [<span class="string">'abei'</span>, <span class="string">'liuhuan'</span>]]);<span class="comment">// username like "%abei%" OR username like "%liuhuan%"，只作用于范围为数组的形式</span></span><br><span class="line">$query-&gt;where([<span class="string">"not like"</span>,xxxxx]);<span class="comment">// 与like用法一致</span></span><br><span class="line">$query-&gt;where([<span class="string">"or not like"</span>,xxx])<span class="comment">// 与not like用法一致</span></span><br></pre></td></tr></table></figure><ul><li>一个要单独说明的<code>exists</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* EXISTS用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False */</span></span><br><span class="line">$query-&gt;where([<span class="string">'exists'</span>, (<span class="keyword">new</span> Query())-&gt;select(<span class="string">'id'</span>)-&gt;from(<span class="string">'user'</span>)-&gt;where([<span class="string">'id'</span> =&gt; <span class="number">1</span>])]);</span><br></pre></td></tr></table></figure><ul><li><code>ORDER BY</code> 方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;orderBy(<span class="string">"id DESC"</span>);</span><br><span class="line">$query-&gt;orderBy([<span class="string">"id"</span>=&gt;SORT_DESC]);</span><br><span class="line">$query-&gt;orderBy([<span class="string">"id"</span>=&gt;SORT_DESC,<span class="string">'create_time'</span>=&gt;SORT_ASC]);</span><br></pre></td></tr></table></figure><ul><li><code>GROUP BY</code> &amp;&amp; <code>HAVING</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;groupBy([<span class="string">"username"</span>]);</span><br><span class="line">$query-&gt;groupBy([<span class="string">"id"</span>])-&gt;having([<span class="string">"&gt;"</span>,<span class="string">'id'</span>,<span class="number">20</span>]);</span><br></pre></td></tr></table></figure><ul><li>获取生成的SQL语句</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;createCommand()-&gt;sql;</span><br></pre></td></tr></table></figure><h3 id="获得查询结果"><a href="#获得查询结果" class="headerlink" title="获得查询结果"></a>获得查询结果</h3><ul><li>获取所有结果</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;all();<span class="comment">// 二位数组</span></span><br></pre></td></tr></table></figure><ul><li>获取一条记录</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;one();</span><br></pre></td></tr></table></figure><ul><li>检查一个数据库中是否含有某个表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> \yii\db\Query)-&gt;from(<span class="string">'user'</span>)-&gt;exists();</span><br></pre></td></tr></table></figure><ul><li>获取<code>count</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;count();</span><br></pre></td></tr></table></figure><ul><li>获取一个值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;scalar();</span><br></pre></td></tr></table></figure><ul><li>获取一列值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;column();  <span class="comment">// 一位数组</span></span><br></pre></td></tr></table></figure><ul><li>获取一个user表的内容</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$query = <span class="keyword">new</span> \yii\db\Query;</span><br><span class="line">$query-&gt;from(<span class="string">"user"</span>);</span><br><span class="line">$query-&gt;select([<span class="string">"fname"</span>=&gt;<span class="string">"username"</span>]);</span><br><span class="line">$query-&gt;where([<span class="string">"&gt;"</span>,<span class="string">'id'</span>,<span class="number">10</span>]);</span><br><span class="line">$query-&gt;all();</span><br></pre></td></tr></table></figure><h2 id="Migrate"><a href="#Migrate" class="headerlink" title="Migrate"></a>Migrate</h2><ul><li>生成一个迁移文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./yii migrate/create script_name <span class="comment">// script_name为脚本名字（需要英文格式）</span></span><br></pre></td></tr></table></figure><ul><li>执行所有没有迁移的脚本</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./yii migrate</span><br><span class="line">./yii migrate/up</span><br></pre></td></tr></table></figure><ul><li>执行置顶的迁移</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./yii migrate/up 脚本名 <span class="comment">// 不用含有扩展名</span></span><br></pre></td></tr></table></figure><h2 id="Asset-Management"><a href="#Asset-Management" class="headerlink" title="Asset Management"></a>Asset Management</h2><blockquote><p>Asset资源管理</p></blockquote><ul><li>类属性说明</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$basePath <span class="comment">// 资源文件所在的web服务器目录路径，一般为@webroot</span></span><br><span class="line">$baseUrl <span class="comment">// js和css文件相对url基地址</span></span><br><span class="line">$css <span class="comment">// asset bundle 所包含的css文件数组</span></span><br><span class="line">$cssOptions <span class="comment">// 对link标签的属性控制</span></span><br><span class="line">$js <span class="comment">// asset bundle 所包含的js文件数组</span></span><br><span class="line">$jsOptions <span class="comment">// 对script标签的属性控制</span></span><br><span class="line">$publishOptions <span class="comment">// 发布操作</span></span><br><span class="line">$sourcePath <span class="comment">// 当资源网络不可以访问，则必须指定此目录。</span></span><br></pre></td></tr></table></figure><ul><li>去掉浏览器缓存</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'appendTimestamp'</span> =&gt; <span class="keyword">true</span> <span class="comment">// 在web.php里的components - assetManager</span></span><br></pre></td></tr></table></figure><ul><li>发布资源筛选</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $publishOptions = [</span><br><span class="line">    <span class="string">'only'</span> =&gt; [</span><br><span class="line">        <span class="string">'fonts/*'</span>,</span><br><span class="line">        <span class="string">'css/*'</span>,</span><br><span class="line">        <span class="string">'test.js'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'except'</span>=&gt;[</span><br><span class="line">        <span class="string">'img'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>js文件在页面的位置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $jsOptions = [<span class="string">'position'</span> =&gt; \yii\web\View::POS_HEAD];<span class="comment">//js文件发布到head标签内</span></span><br><span class="line"><span class="keyword">public</span> $jsOptions = [<span class="string">'position'</span> =&gt; \yii\web\View::POS_END];<span class="comment">//js文件发布到body标签底部</span></span><br><span class="line"><span class="keyword">public</span> $jsOptions = [<span class="string">'position'</span> =&gt; \yii\web\View::POS_BEGIN];<span class="comment">//js文件放到body标签开始处</span></span><br></pre></td></tr></table></figure><ul><li>浏览器兼容问题</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $cssOptions = [<span class="string">'condition'</span> =&gt; <span class="string">'IE 11'</span>];<span class="comment">// 代表兼容ie11</span></span><br></pre></td></tr></table></figure><ul><li>是否使用符号链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'linkAssets'</span> =&gt; <span class="keyword">true</span> <span class="comment">// 在web.php里的components - assetManager</span></span><br></pre></td></tr></table></figure><ul><li>配置yii自身的asset资源</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在web.php里的components - assetManager，配置自定义的也可以</span></span><br><span class="line"><span class="string">'bundles'</span> =&gt;  [</span><br><span class="line">    <span class="string">'yii/web/YiiAsset'</span>=&gt;[</span><br><span class="line">        <span class="string">'js'</span>=&gt;[],</span><br><span class="line">        ......</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><blockquote><p>有关事件的所有，系统自带事件通通给你。</p></blockquote><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><ul><li>应用处理请求<code>before</code>之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application::EVENT_BEFORE_REQUEST</span><br></pre></td></tr></table></figure><ul><li>应用处理请求<code>after</code>之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application::EVENT_AFTER_REQUEST</span><br></pre></td></tr></table></figure><h3 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h3><ul><li>在每个<code>Action</code>运行之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Controller::EVENT_BEFORE_ACTION</span><br></pre></td></tr></table></figure><ul><li>在每个Action运行之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Controller::EVENT_AFTER_ACTION</span><br></pre></td></tr></table></figure><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><ul><li>在验证Model属性之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model::EVENT_BEFORE_VALIDATE</span><br></pre></td></tr></table></figure><ul><li>在验证Model属性之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model::EVENT_AFTER_VALIDATE</span><br></pre></td></tr></table></figure><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><ul><li>一个模块的Action运行前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module::EVENT_BEFORE_ACTION</span><br></pre></td></tr></table></figure><ul><li>一个模块的Action运行后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module::EVENT_AFTER_ACTION</span><br></pre></td></tr></table></figure><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><ul><li>执行视图的<code>beforePage</code>时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_BEGIN_PAGE</span><br></pre></td></tr></table></figure><ul><li>执行视图的<code>endPage</code>函数时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_END_PAGE</span><br></pre></td></tr></table></figure><ul><li>在<code>renderFile</code>渲染一个视图文件之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_BEFORE_RENDER</span><br></pre></td></tr></table></figure><ul><li>在<code>renderFile</code>渲染一个视图文件之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_AFTER_RENDER</span><br></pre></td></tr></table></figure><ul><li>执行视图的<code>beginBody</code>函数时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_BEGIN_BODY</span><br></pre></td></tr></table></figure><ul><li>执行视图的<code>endBody</code>函数时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_END_BODY</span><br></pre></td></tr></table></figure><h3 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h3><ul><li>Widget初始化时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Widget::EVENT_INIT</span><br></pre></td></tr></table></figure><ul><li>Widget执行前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Widget::EVENT_BEFORE_RUN</span><br></pre></td></tr></table></figure><ul><li>Widget执行之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Widget::EVENT_AFTER_RUN</span><br></pre></td></tr></table></figure><h3 id="ActiveQuery"><a href="#ActiveQuery" class="headerlink" title="ActiveQuery"></a>ActiveQuery</h3><ul><li>由ActiveQuery的init函数触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActiveQuery::EVENT_INIT</span><br></pre></td></tr></table></figure><h3 id="BaseActiveRecord-amp-ActiveRecord"><a href="#BaseActiveRecord-amp-ActiveRecord" class="headerlink" title="BaseActiveRecord &amp; ActiveRecord"></a>BaseActiveRecord &amp; ActiveRecord</h3><ul><li>AR对象被初始化init时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_INIT</span><br></pre></td></tr></table></figure><ul><li>AR执行查询结束时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_FIND</span><br></pre></td></tr></table></figure><ul><li>插入结束时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_BEFORE_INSERT</span><br></pre></td></tr></table></figure><ul><li>插入之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_INSERT</span><br></pre></td></tr></table></figure><ul><li>更新记录之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_BEFORE_UPDATE</span><br></pre></td></tr></table></figure><ul><li>更新记录之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_UPDATE</span><br></pre></td></tr></table></figure><ul><li>删除记录之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_BEFORE_DELETE</span><br></pre></td></tr></table></figure><ul><li>删除记录之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_DELETE</span><br></pre></td></tr></table></figure><ul><li>在数据refresh成功之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_REFRESH</span><br></pre></td></tr></table></figure><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><ul><li>数据库连接被打开后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection::EVENT_AFTER_OPEN</span><br></pre></td></tr></table></figure><ul><li>事务被启动时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection::EVENT_BEGIN_TRANSACTION</span><br></pre></td></tr></table></figure><ul><li>事务被提交后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection::EVENT_COMMIT_TRANSACTION</span><br></pre></td></tr></table></figure><ul><li>事务回滚后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection::EVENT_ROLLBACK_TRANSACTION</span><br></pre></td></tr></table></figure><h3 id="Response-1"><a href="#Response-1" class="headerlink" title="Response"></a>Response</h3><ul><li>Response响应发送之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response::EVENT_BEFORE_SEND</span><br></pre></td></tr></table></figure><ul><li>Response响应发送之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response::EVENT_AFTER_SEND</span><br></pre></td></tr></table></figure><ul><li>Response响应内容准备好之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response::EVENT_AFTER_PREPARE</span><br></pre></td></tr></table></figure><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><ul><li>登陆之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::EVENT_BEFORE_LOGIN</span><br></pre></td></tr></table></figure><ul><li>登陆之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::EVENT_AFTER_LOGIN</span><br></pre></td></tr></table></figure><ul><li>注销之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::EVENT_BEFORE_LOGOUT</span><br></pre></td></tr></table></figure><ul><li>注销之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::EVENT_AFTER_LOGOUT</span><br></pre></td></tr></table></figure><h2 id="Route-amp-UrlManager"><a href="#Route-amp-UrlManager" class="headerlink" title="Route&amp;UrlManager"></a>Route&amp;UrlManager</h2><ul><li>URL美化配置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// conf/web.php</span></span><br><span class="line"><span class="string">'urlManager'</span> =&gt; [</span><br><span class="line">    <span class="string">'enablePrettyUrl'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">'showScriptName'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">'suffix'</span>=&gt;<span class="string">'.html'</span>,<span class="comment">// 统一后缀名，若不需要则无需配置</span></span><br><span class="line">    <span class="string">'enableStrictParsing'</span>=&gt;<span class="keyword">false</span>,<span class="comment">//默认为false，是否采用严格解析</span></span><br><span class="line">    <span class="string">'rules'</span> =&gt; [</span><br><span class="line">    ],        </span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>Apache开启url重写方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Apache需要支持url重写其AllowOverride为all</span></span><br><span class="line">AllowOverride:all</span><br><span class="line"></span><br><span class="line"><span class="comment">//web目录下增加.htaccess，隐藏index.php文件 内容如下</span></span><br><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule . index.php</span><br></pre></td></tr></table></figure><ul><li>Nginx支持url重写</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    <span class="keyword">if</span> (!-e $request_filename)&#123;</span><br><span class="line">        rewrite ^/(.*) /index.php last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Apache开启url重写方法2</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule ^(.*)\?*$ index.php/$<span class="number">1</span> [L,QSA]</span><br></pre></td></tr></table></figure><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><ul><li>分页获得所有的会员</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /users</span><br><span class="line">GET /users?page=<span class="number">2</span></span><br><span class="line">GET /users?fields=id,username,created_at</span><br><span class="line">GET /users?sort=id,-username</span><br></pre></td></tr></table></figure><ul><li>HTTP状态码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span>: OK。一切正常。</span><br><span class="line"><span class="number">201</span>: 响应 POST 请求时成功创建一个资源。Location header 包含的URL指向新创建的资源。</span><br><span class="line"><span class="number">204</span>: 该请求被成功处理，响应不包含正文内容 (类似 DELETE 请求)。</span><br><span class="line"><span class="number">304</span>: 资源没有被修改。可以使用缓存的版本。</span><br><span class="line"><span class="number">400</span>: 错误的请求。可能通过用户方面的多种原因引起的，例如在请求体内有无效的JSON 数据，无效的操作参数，等等。</span><br><span class="line"><span class="number">401</span>: 验证失败。</span><br><span class="line"><span class="number">403</span>: 已经经过身份验证的用户不允许访问指定的 API 末端。</span><br><span class="line"><span class="number">404</span>: 所请求的资源不存在。</span><br><span class="line"><span class="number">405</span>: 不被允许的方法。 请检查 Allow header 允许的HTTP方法。</span><br><span class="line"><span class="number">415</span>: 不支持的媒体类型。 所请求的内容类型或版本号是无效的。</span><br><span class="line"><span class="number">422</span>: 数据验证失败 (例如，响应一个 POST 请求)。 请检查响应体内详细的错误消息。</span><br><span class="line"><span class="number">429</span>: 请求过多。 由于限速请求被拒绝。</span><br><span class="line"><span class="number">500</span>: 内部服务器错误。 这可能是由于内部程序错误引起的。</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.yii-china.com/doc/detail/539#3" target="_blank" rel="noopener">Yii2 速查表</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Yii2 速查表&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架相关" scheme="http://blog.caoxl.com/categories/%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Yii2" scheme="http://blog.caoxl.com/tags/Yii2/"/>
    
      <category term="速查表" scheme="http://blog.caoxl.com/tags/%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 Yes It is</title>
    <link href="http://blog.caoxl.com/2019/12/15/Yii2-Learning-Notes/"/>
    <id>http://blog.caoxl.com/2019/12/15/Yii2-Learning-Notes/</id>
    <published>2019-12-15T02:18:49.000Z</published>
    <updated>2019-12-27T03:34:06.174Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Yii2 Yes It is</p></blockquote><a id="more"></a><h2 id="关于Yii"><a href="#关于Yii" class="headerlink" title="关于Yii"></a>关于Yii</h2><h3 id="Yii-是什么"><a href="#Yii-是什么" class="headerlink" title="Yii 是什么"></a>Yii 是什么</h3><p>Yii 是一个高性能，基于组件的 PHP 框架，用于快速开发现代 Web 应用程序。 名字 Yii （读作 易）在中文里有“极致简单与不断演变”两重含义， 也可看作 <strong>Yes It Is!</strong> 的缩写。</p><h3 id="Yii-版本"><a href="#Yii-版本" class="headerlink" title="Yii 版本"></a>Yii 版本</h3><p>Yii 当前有两个主要版本：1.1 和 2.0。 1.1 版是上代的老版本，现在处于维护状态。 2.0 版是一个完全重写的版本，采用了最新的技术和协议，包括<code>依赖包管理器 Composer</code>、<code>PHP 代码规范 PSR</code>、<code>命名空间</code>、<code>Traits（特质）</code>等等。 2.0 版代表新一代框架，是未来几年中我们的主要开发版本。</p><h2 id="安装-Yii"><a href="#安装-Yii" class="headerlink" title="安装 Yii"></a>安装 Yii</h2><ul><li>通过 Composer 安装</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist yiisoft/yii2-app-basic Yii2</span><br></pre></td></tr></table></figure><h3 id="验证安装的结果"><a href="#验证安装的结果" class="headerlink" title="验证安装的结果"></a>验证安装的结果</h3><p>当安装完成之后， 或配置你的Web服务器(看下面的文章)或使用内置Web Server， 当在项目 web 目录下可以通过下面的命令:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php yii serve</span><br></pre></td></tr></table></figure><h2 id="应用结构"><a href="#应用结构" class="headerlink" title="应用结构"></a>应用结构</h2><blockquote><ul><li>Yii2                  项目根目录<ul><li>assets</li><li>commands            控制台命令类目录</li><li>config              应用配置及其它配置目录<ul><li>console.php       控制台应用配置信息</li><li>web.php           Web 应用配置信息</li></ul></li><li>controllers         控制器类目录</li><li>mail                邮件类目录</li><li>models              模型类目录</li><li>runtime             Yii 在运行时生成的文件，例如日志和缓存文件</li><li>tests               单元测试</li><li>vagrant</li><li>vendor              已经安装的 Composer 包，包括 Yii 框架自身</li><li>views               视图目录</li><li>web                 Web 应用根目录，包含 Web 入口文件<ul><li>assets            Yii 发布的资源文件（javascript 和 css）</li><li>index.php         应用入口文件</li></ul></li><li>widgets</li><li>composer.json       Composer 配置文件, 描述包信息</li><li>composer.lock</li><li>yii  </li></ul></li></ul></blockquote><blockquote><p>一般来说，应用中的文件可被分为两类：在 basic/web 下的和在其它目录下的。 前者可以直接通过 HTTP 访问（例如浏览器），后者不能也不应该被直接访问。一般来说，应用中的文件可被分为两类：在 basic/web 下的和在其它目录下的。 前者可以直接通过 HTTP 访问（例如浏览器），后者不能也不应该被直接访问。</p></blockquote><h2 id="请求生命周期"><a href="#请求生命周期" class="headerlink" title="请求生命周期"></a>请求生命周期</h2><blockquote><ul><li><ol><li>用户提交指向 入口脚本 <code>web/index.php</code>的请求</li></ol></li><li><ol start="2"><li>入口脚本会加载 <code>配置数组</code> 并创建一个 <code>应用</code> 实例用于处理该请求</li></ol></li><li><ol start="3"><li>应用会通过 <code>request(请求)</code> 应用组件解析被请求的 <code>路由</code></li></ol></li><li><ol start="4"><li>应用创建一个 <code>controller(控制器)</code> 实例具体处理请求</li></ol></li><li><ol start="5"><li>控制器会创建一个 <code>action(动作)</code> 实例并为该动作执行相关的 <code>Filters(访问过滤器)</code></li></ol></li><li><ol start="6"><li>如果任何一个过滤器验证失败, 该动作会被取消</li></ol></li><li><ol start="7"><li>如果全部的过滤器都通过, 该动作就会被执行</li></ol></li><li><ol start="8"><li>动作后悔加载一个<code>数据模型</code>, 一般是从数据库中加载</li></ol></li><li><ol start="9"><li>动作后悔渲染一个<code>View(视图)</code>, 并为其提供所需的数据模型</li></ol></li><li><ol start="10"><li>渲染得到的结果会返回给 <code>response(响应)</code> 应用组件</li></ol></li><li><ol start="11"><li>响应组件会把渲染结果发回给用户的浏览器</li></ol></li></ul></blockquote><h2 id="说声-Hello"><a href="#说声-Hello" class="headerlink" title="说声 Hello"></a>说声 Hello</h2><p>这个章节，你将会掌握三件事：</p><ol><li>如何创建一个动作去响应请求，</li><li>如何创建一个视图去构造响应内容，</li><li>以及一个应用如何分派请求给动作。</li></ol><h3 id="创建动作"><a href="#创建动作" class="headerlink" title="创建动作"></a>创建动作</h3><p>操作必须声明在控制器中。为了简单起见， 你可以直接在 <code>SiteController</code> 控制器里声明 <code>say</code> 操作。 这个控制器是由文件 <code>controllers/SiteController.php</code> 定义的。以下是一个操作的声明：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...现存的代码...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionSay</span><span class="params">($message = <span class="string">'Hello'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'say'</span>, [<span class="string">'message'</span> =&gt; $message]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p>视图是你用来生成响应内容的脚本。为了说 “Hello”， 你需要创建一个 <code>say</code> 视图，以便显示从操作方法中传来的 <code>message</code> 参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?</span>= Html::encode($message) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>say</code> 视图应该存为 <code>views/site/say.php</code> 文件。当一个操作中调用了 <code>render()</code> 方法时， 它将会按 <code>views/控制器 ID/视图名.php</code>路径加载 <code>PHP</code> 文件。</p><h3 id="试运行"><a href="#试运行" class="headerlink" title="试运行"></a>试运行</h3><p>创建完动作和视图后，你就可以通过下面的 URL 访问新页面了：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>hostname<span class="regexp">/index.php?r=site/</span>say&amp;message=Hello+World</span><br></pre></td></tr></table></figure><h2 id="使用表单"><a href="#使用表单" class="headerlink" title="使用表单"></a>使用表单</h2><p>这个章节，你将会掌握三件事：</p><ol><li>创建一个模型代表用户通过表单输入的数据</li><li>声明规则去验证输入的数据</li><li>在视图中生成一个 HTML 表单</li></ol><h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>模型类 <code>EntryForm</code> 代表从用户那请求的数据， 该类如下所示并存储在 <code>models/EntryForm.php</code> 文件中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EntryForm</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [[<span class="string">'name'</span>, <span class="string">'email'</span>], <span class="string">'required'</span>],</span><br><span class="line">            [<span class="string">'email'</span>, <span class="string">'email'</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建动作-1"><a href="#创建动作-1" class="headerlink" title="创建动作"></a>创建动作</h3><p>下面你得在 <code>site</code> 控制器中创建一个 <code>entry</code> 操作用于新建的模型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">models</span>\<span class="title">EntryForm</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...现存的代码...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionEntry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $model = <span class="keyword">new</span> EntryForm;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($model-&gt;load(Yii::$app-&gt;request-&gt;post()) &amp;&amp; $model-&gt;validate()) &#123;</span><br><span class="line">            <span class="comment">// 验证 $model 收到的数据</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 做些有意义的事 ...</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'entry-confirm'</span>, [<span class="string">'model'</span> =&gt; $model]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 无论是初始化显示还是数据验证错误</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'entry'</span>, [<span class="string">'model'</span> =&gt; $model]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>表达式 <code>Yii::$app</code> 代表应用实例，它是一个全局可访问的单例。 同时它也是一个服务定位器， 能提供 <code>request</code>，<code>response</code>，<code>db</code> 等等特定功能的组件。 在上面的代码里就是使用 <code>request</code> 组件来访问应用实例收到的 <code>$_POST</code> 数据。</p></blockquote><h3 id="创建视图-1"><a href="#创建视图-1" class="headerlink" title="创建视图"></a>创建视图</h3><p>最后创建两个视图文件 <code>entry-confirm</code> 和 <code>entry</code>。 他们会被刚才创建的 <code>entry</code> 操作渲染。</p><p><code>entry-confirm</code> 视图简单地显示提交的 <code>name</code> 和 <code>email</code> 数据。视图文件应该保存在 <code>views/site/entry-confirm.php</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;p&gt;You have entered the following information:&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;Name&lt;/label&gt;: <span class="meta">&lt;?</span>= Html::encode($model-&gt;name) <span class="meta">?&gt;</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;Email&lt;/label&gt;: <span class="meta">&lt;?</span>= Html::encode($model-&gt;email) <span class="meta">?&gt;</span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><code>entry</code> 视图显示一个 HTML 表单。视图文件应该保存在 <code>views/site/entry.php</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">widgets</span>\<span class="title">ActiveForm</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> $form = ActiveForm::begin(); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?</span>= $form-&gt;field($model, <span class="string">'name'</span>) <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?</span>= $form-&gt;field($model, <span class="string">'email'</span>) <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;div class="form-group"&gt;</span><br><span class="line">        <span class="meta">&lt;?</span>= Html::submitButton(<span class="string">'Submit'</span>, [<span class="string">'class'</span> =&gt; <span class="string">'btn btn-primary'</span>]) <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> ActiveForm::end(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="尝试下"><a href="#尝试下" class="headerlink" title="尝试下"></a>尝试下</h3><p>用浏览器访问下面的 URL 看它能否工作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hostname/index.php?r=site/entry</span></span><br></pre></td></tr></table></figure><h2 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h2><p>这个章节，你将会掌握四件事：</p><ol><li>配置一个数据库连接</li><li>定义一个活动记录类</li><li>使用活动记录从数据库中查询数据</li><li>以分页方式在视图中显示数据</li></ol><h3 id="准备数据库"><a href="#准备数据库" class="headerlink" title="准备数据库"></a>准备数据库</h3><p>首先创建一个名为 <code>yii2</code> 的数据库，应用将从这个数据库中读取数据。</p><p>然后在数据库中创建一个名为 <code>country</code> 的表并插入简单的数据。可以执行下面的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `country` (</span><br><span class="line">  `code` CHAR(2) NOT NULL PRIMARY KEY,</span><br><span class="line">  `name` CHAR(52) NOT NULL,</span><br><span class="line">  `population` INT(11) NOT NULL DEFAULT &apos;0&apos;</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `country` VALUES (&apos;AU&apos;,&apos;Australia&apos;,18886000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;BR&apos;,&apos;Brazil&apos;,170115000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;CA&apos;,&apos;Canada&apos;,1147000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;CN&apos;,&apos;China&apos;,1277558000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;DE&apos;,&apos;Germany&apos;,82164700);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;FR&apos;,&apos;France&apos;,59225700);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;GB&apos;,&apos;United Kingdom&apos;,59623400);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;IN&apos;,&apos;India&apos;,1013662000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;RU&apos;,&apos;Russia&apos;,146934000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;US&apos;,&apos;United States&apos;,278357000);</span><br></pre></td></tr></table></figure><p>此时便有了一个名为 <code>yii2</code> 的数据库，在这个数据库中有一个包含三个字段的数据表 <code>country</code>，表中有十行数据。</p><h3 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h3><p>开始之前，请确保你已经安装了 PHP PDO 扩展和你所使用的数据库的 PDO 驱动（例如 MySQL 的 pdo_mysql）。 对于使用关系型数据库来讲，这是基本要求。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -m <span class="comment">// 查看即可</span></span><br></pre></td></tr></table></figure><p>驱动和扩展安装可用后，打开 <code>config/db.php</code> 修改里面的配置参数对应你的数据库配置。 该文件默认包含这些内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'yii\db\Connection'</span>,</span><br><span class="line">    <span class="string">'dsn'</span> =&gt; <span class="string">'mysql:host=localhost;dbname=yii2'</span>,</span><br><span class="line">    <span class="string">'username'</span> =&gt; <span class="string">'root'</span>,</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>上面配置的数据库连接可以在应用中通过 <code>Yii::$app-&gt;db</code> 表达式访问。</p></blockquote><h3 id="创建活动记录"><a href="#创建活动记录" class="headerlink" title="创建活动记录"></a>创建活动记录</h3><p>创建一个继承自活动记录类的类 <code>Country</code>， 把它放在 <code>models/Country.php</code> 文件，去代表和读取 <code>country</code> 表的数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>Country</code> 类继承自 <code>yii\db\ActiveRecord</code>。你不用在里面写任何代码。 只需要像现在这样，<code>Yii</code> 就能根据类名去猜测对应的数据表名。</p><p>使用 <code>Country</code> 类可以很容易地操作 <code>country</code> 表数据，就像这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">models</span>\<span class="title">Country</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 country 表的所有行并以 name 排序</span></span><br><span class="line">$countries = Country::find()-&gt;orderBy(<span class="string">'name'</span>)-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取主键为 “US” 的行</span></span><br><span class="line">$country = Country::findOne(<span class="string">'US'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 “United States”</span></span><br><span class="line"><span class="keyword">echo</span> $country-&gt;name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 name 为 “U.S.A.” 并在数据库中保存更改</span></span><br><span class="line">$country-&gt;name = <span class="string">'U.S.A.'</span>;</span><br><span class="line">$country-&gt;save();</span><br></pre></td></tr></table></figure><h3 id="创建动作-2"><a href="#创建动作-2" class="headerlink" title="创建动作"></a>创建动作</h3><p>新控制器名为 <code>CountryController</code>，并在其中创建一个 <code>index</code> 操作， 如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">data</span>\<span class="title">Pagination</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">models</span>\<span class="title">Country</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountryController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $query = Country::find();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页</span></span><br><span class="line">        $pagination = <span class="keyword">new</span> Pagination([</span><br><span class="line">            <span class="string">'defaultPageSize'</span> =&gt; <span class="number">5</span>,</span><br><span class="line">            <span class="string">'totalCount'</span> =&gt; $query-&gt;count(),</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        $countries = $query-&gt;orderBy(<span class="string">'name'</span>)</span><br><span class="line">            -&gt;offset($pagination-&gt;offset)</span><br><span class="line">            -&gt;limit($pagination-&gt;limit)</span><br><span class="line">            -&gt;all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 渲染</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'index'</span>, [</span><br><span class="line">            <span class="string">'countries'</span> =&gt; $countries,</span><br><span class="line">            <span class="string">'pagination'</span> =&gt; $pagination,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建视图-2"><a href="#创建视图-2" class="headerlink" title="创建视图"></a>创建视图</h3><p>在 <code>views</code> 目录下先创建一个名为 <code>country</code> 的子目录。 这个目录存储所有由 <code>country</code> 控制器渲染的视图。在 <code>views/country</code> 目录下 创建一个名为 <code>index.php</code> 的视图文件，内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">widgets</span>\<span class="title">LinkPager</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;h1&gt;Countries&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span> ($countries <span class="keyword">as</span> $country): <span class="meta">?&gt;</span></span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        <span class="meta">&lt;?</span>= Html::encode(<span class="string">"&#123;$country-&gt;name&#125; (&#123;$country-&gt;code&#125;)"</span>) <span class="meta">?&gt;</span>:</span><br><span class="line">        <span class="meta">&lt;?</span>= $country-&gt;population <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/li&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>; <span class="meta">?&gt;</span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?</span>= LinkPager::widget([<span class="string">'pagination'</span> =&gt; $pagination]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="试运行-1"><a href="#试运行-1" class="headerlink" title="试运行"></a>试运行</h3><p>浏览器访问下面的 URL 看看能否工作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hostname/index.php?r=country/index</span></span><br></pre></td></tr></table></figure><h3 id="打印SQL"><a href="#打印SQL" class="headerlink" title="打印SQL"></a>打印SQL</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、查询结构</span></span><br><span class="line">$record = Article::find()-&gt;joinWith(<span class="string">'articleClass'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、复制一下查询语句</span></span><br><span class="line">$query = <span class="keyword">clone</span> $record;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、调用createComment()和getSql()方法</span></span><br><span class="line">$sql = $query-&gt;createCommand()-&gt;getSql();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、打印出来</span></span><br><span class="line">var_dump($sql);<span class="keyword">die</span>();</span><br></pre></td></tr></table></figure><h2 id="使用-Gii-生成代码"><a href="#使用-Gii-生成代码" class="headerlink" title="使用 Gii 生成代码"></a>使用 Gii 生成代码</h2><p>本章节， 你将学到：</p><ol><li>在你的应用中开启 Gii</li><li>使用 Gii 去生成活动记录类</li><li>使用 Gii 去生成数据表操作的增查改删（CRUD）代码</li><li>自定义 Gii 生成的代码</li></ol><h3 id="开始-Gii"><a href="#开始-Gii" class="headerlink" title="开始 Gii"></a>开始 Gii</h3><p><code>Gii</code> 是 <code>Yii</code> 中的一个模块。 可以通过配置应用的 <code>modules</code> 属性开启它。通常来讲在 <code>config/web.php</code> 文件中会有以下配置代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$config = [ ... ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (YII_ENV_DEV) &#123;</span><br><span class="line">    $config[<span class="string">'bootstrap'</span>][] = <span class="string">'gii'</span>;</span><br><span class="line">    $config[<span class="string">'modules'</span>][<span class="string">'gii'</span>] = [</span><br><span class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\gii\Module'</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段配置表明，如果当前是开发环境， 应用会包含 <code>gii</code> 模块，模块类是 <code>yii\gii\Module</code>。</p><p>如果你检查应用的入口脚本 <code>web/index.php</code>， 将看到这行代码将 <code>YII_ENV_DEV</code> 设为 <code>true</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defined(<span class="string">'YII_ENV'</span>) <span class="keyword">or</span> define(<span class="string">'YII_ENV'</span>, <span class="string">'dev'</span>);</span><br></pre></td></tr></table></figure><p>鉴于这行代码的定义，应用处于开发模式下，按照上面的配置会打开 <code>Gii</code> 模块。你可以直接通过 <code>URL</code> 访问 <code>Gii</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hostname/index.php?r=gii</span></span><br></pre></td></tr></table></figure><blockquote><p>信息： 如果你通过本机以外的机器访问 Gii，请求会被出于安全原因拒绝。 你可以配置 Gii 为其添加允许访问的 IP 地址：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'gii'</span> =&gt; [</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'yii\gii\Module'</span>,</span><br><span class="line">    <span class="string">'allowedIPs'</span> =&gt; [<span class="string">'127.0.0.1'</span>, <span class="string">'::1'</span>, <span class="string">'192.168.0.*'</span>, <span class="string">'192.168.178.20'</span>] <span class="comment">// 按需调整这里</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="生成活动记录类"><a href="#生成活动记录类" class="headerlink" title="生成活动记录类"></a>生成活动记录类</h3><p>选择 <code>“Model Generator”</code>（点击 <code>Gii</code> 首页的链接）去生成活动记录类。并像这样填写表单：</p><ul><li>Table Name: <code>country</code></li><li>Model Class: <code>Country</code></li></ul><p>然后点击 <code>“Preview”</code> 按钮。你会看到 <code>models/Country.php</code> 被列在将要生成的文件列表中。可以点击文件名预览内容。</p><p>如果你已经创建过同样的文件，使用 <code>Gii</code> 会覆写它， 点击文件名旁边的 <code>diff</code> 能查看现有文件与将要 生成的文件的内容区别。</p><p>想要覆写已存在文件，选中 <code>“overwrite”</code> 下的复选框然后点击 <code>“Generator”</code>。如果是新文件，只点击 <code>“Generator”</code> 就好。</p><p>接下来你会看到一个包含已生成文件的说明页面。如果生成过程中覆写过文件， 还会有一条信息说明代码是重新生成覆盖的。</p><blockquote><p>Generating code using template “/Users/caoxl/WWW/Yii2/vendor/yiisoft/yii2-gii/src/generators/model/default”…<br>  overwrote models/Country.php<br>  done!</p></blockquote><h3 id="生成-CRUD-代码"><a href="#生成-CRUD-代码" class="headerlink" title="生成 CRUD 代码"></a>生成 CRUD 代码</h3><p><code>CRUD</code> 代表增，查，改，删操作，这是绝大多数 <code>Web</code> 站点常用的数据处理方式。选择 <code>Gii</code> 中的 <code>“CRUD Generator”</code> （点击 <code>Gii</code> 首页的链接）去创建 <code>CRUD</code> 功能。本例 <code>“country”</code> 中需要这样填写表单：</p><ul><li>Model Class: <code>app\models\Country</code></li><li>Search Model Class: <code>app\models\CountrySearch</code></li><li>Controller Class: <code>app\controllers\CountryController</code></li></ul><p>如果你之前创建过 <code>controllers/CountryController.php</code> 和 <code>views/country/index.php</code> 文件（在指南的使用数据库章节）， 选中 <code>“overwrite”</code> 下的复选框覆写它们（之前的文件没能全部支持 <code>CRUD</code>）。</p><blockquote><p>Generating code using template “/Users/caoxl/WWW/Yii2/vendor/yiisoft/yii2-gii/src/generators/crud/default”…<br>  overwrote controllers/CountryController.php<br>  generated models/CountrySearch.php<br>  generated views/country/_form.php<br>  generated views/country/_search.php<br>  generated views/country/create.php<br>  overwrote views/country/index.php<br>  generated views/country/update.php<br>  generated views/country/view.php<br>  done!</p></blockquote><h3 id="试运行-2"><a href="#试运行-2" class="headerlink" title="试运行"></a>试运行</h3><p>用浏览器访问下面的 <code>URL</code> 查看生成代码的运行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hostname/index.php?r=country/index</span></span><br></pre></td></tr></table></figure><p>下面列出由 <code>Gii</code> 生成的文件，以便你研习功能和实现， 或修改它们。</p><ul><li>控制器：<code>controllers/CountryController.php</code></li><li>模型：<code>models/Country.php</code> 和 <code>models/CountrySearch.php</code></li><li>视图：<code>views/country/*.php</code></li></ul><h2 id="应用结构-1"><a href="#应用结构-1" class="headerlink" title="应用结构"></a>应用结构</h2><h3 id="入口脚本"><a href="#入口脚本" class="headerlink" title="入口脚本"></a>入口脚本</h3><p>入口脚本主要完成以下工作：</p><ul><li>定义全局常量；</li><li>注册 <code>Composer</code> 自动加载器；</li><li>包含 <code>Yii</code> 类文件；</li><li>加载应用配置；</li><li>创建一个应用实例并配置;</li><li>调用 <code>yii\base\Application::run()</code> 来处理请求。</li></ul><h4 id="Web-应用"><a href="#Web-应用" class="headerlink" title="Web 应用"></a>Web 应用</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">defined(<span class="string">'YII_DEBUG'</span>) <span class="keyword">or</span> define(<span class="string">'YII_DEBUG'</span>, <span class="keyword">true</span>);</span><br><span class="line">defined(<span class="string">'YII_ENV'</span>) <span class="keyword">or</span> define(<span class="string">'YII_ENV'</span>, <span class="string">'dev'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 Composer 自动加载器</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含 Yii 类文件</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../vendor/yiisoft/yii2/Yii.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载应用配置</span></span><br><span class="line">$config = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../config/web.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建、配置、运行一个应用</span></span><br><span class="line">(<span class="keyword">new</span> yii\web\Application($config))-&gt;run();</span><br></pre></td></tr></table></figure><ul><li><p>当运行 <code>入口脚本</code> 处理请求时， 应用主体会经历以下生命周期:</p></li><li><ol><li>入口脚本加载应用主体配置数组。</li></ol></li><li><ol start="2"><li>入口脚本创建一个应用主体实例：</li></ol><ul><li>调用 <code>preInit()</code> 配置几个高级别应用主体属性， 比如 <code>basePath</code>。</li><li>注册 <code>error handler</code> 错误处理方法。</li><li>配置应用主体属性。</li><li>调用 <code>init()</code> 初始化，该函数会调用 <code>bootstrap()</code> 运行引导启动组件。</li></ul></li><li><ol start="3"><li>入口脚本调用 <code>yii\base\Application::run()</code> 运行应用主体:</li></ol><ul><li>触发 <code>EVENT_BEFORE_REQUEST</code> 事件。</li><li>处理请求：解析请求 路由 和相关参数； 创建路由指定的模块、控制器和动作对应的类，并运行动作。</li><li>触发 <code>EVENT_AFTER_REQUEST</code> 事件。</li><li>发送响应到终端用户。</li></ul></li><li><ol start="4"><li>入口脚本接收应用主体传来的退出状态并完成请求的处理。</li></ol></li></ul><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>过滤器是 控制器动作 执行之前或之后执行的对象。</p><h4 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h4><p>过滤器本质上是一类特殊的 <code>行为</code>， 所以<code>使用过滤器</code>和 <code>使用行为</code>一样。 可以在控制器类中覆盖它的 <code>behaviors()</code> 方法来声明过滤器，如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\filters\HttpCache'</span>,</span><br><span class="line">            <span class="string">'only'</span>  =&gt; [<span class="string">'index'</span>, <span class="string">'view'</span>],</span><br><span class="line">            <span class="string">'lastModified'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($action, $params)</span> </span>&#123;</span><br><span class="line">                $q = <span class="keyword">new</span> \yii\db\Query();</span><br><span class="line">                <span class="keyword">return</span> $q-&gt;from(<span class="string">'user'</span>)-&gt;max(<span class="string">'updated_at'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个动作有多个过滤器时，根据以下规则先后执行：</p><ul><li>预过滤<ul><li>按顺序执行应用主体中 <code>behaviors()</code> 列出的过滤器。</li><li>按顺序执行模块中 <code>behaviors()</code> 列出的过滤器。</li><li>按顺序执行控制器中 <code>behaviors()</code> 列出的过滤器。</li><li>如果任意过滤器终止动作执行， 后面的过滤器（包括预过滤和后过滤）不再执行。</li></ul></li><li>成功通过预过滤后执行动作。</li><li>后过滤<ul><li>倒序执行控制器中 <code>behaviors()</code> 列出的过滤器。</li><li>倒序执行模块中 <code>behaviors()</code> 列出的过滤器。</li><li>倒序执行应用主体中 <code>behaviors()</code> 列出的过滤器。</li></ul></li></ul><h4 id="创建过滤器"><a href="#创建过滤器" class="headerlink" title="创建过滤器"></a>创建过滤器</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">components</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">ActionFilter</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionTimeFilter</span> <span class="keyword">extends</span> <span class="title">ActionFilter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_startTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeAction</span><span class="params">($action)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_startTime = microtime(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::beforeAction($action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterAction</span><span class="params">($action, $result)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $time = microtime(<span class="keyword">true</span>) - <span class="keyword">$this</span>-&gt;_startTime;</span><br><span class="line">        Yii::debug(<span class="string">"Action '&#123;$action-&gt;uniqueId&#125;' spent $time second."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::afterAction($action, $result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="核心扩展"><a href="#核心扩展" class="headerlink" title="核心扩展"></a>核心扩展</h4><ul><li><code>yiisoft/yii2-apidoc</code>： 提供了一个可扩展的、高效的 API 文档生成器。核心框架的 API 文档也是用它生成的。</li><li><code>yiisoft/yii2-authclient</code>： 提供了一套常用的认证客户端，例如 Facebook OAuth2 客户端、GitHub OAuth2 客户端。</li><li><code>yiisoft/yii2-bootstrap</code>： 提供了一套挂件，封装了 Bootstrap 的组件和插件。</li><li><code>yiisoft/yii2-codeception</code>： 提供了基于 Codeception 的测试支持。</li><li><code>yiisoft/yii2-debug</code>： 提供了对 Yii 应用的调试支持。当使用该扩展是， 在每个页面的底部将显示一个调试工具条。 该扩展还提供了一个独立的页面，以显示更详细的调试信息。</li><li><code>yiisoft/yii2-elasticsearch</code>： 提供对 Elasticsearch 的使用支持。它包含基本的查询/搜索支持， 并实现了 Active Record 模式让你可以将活动记录 存储在 Elasticsearch 中。</li><li><code>yiisoft/yii2-faker</code>： 提供了使用 Faker 的支持，为你生成模拟数据。</li><li><code>yiisoft/yii2-gii</code>： 提供了一个基于页面的代码生成器，具有高可扩展性，并能用来快速生成模型、 表单、模块、CRUD 等。</li><li><code>yiisoft/yii2-httpclient</code>： 提供 HTTP 客户端。</li><li><code>yiisoft/yii2-imagine</code>： 提供了基于 Imagine 的常用图像处理功能。</li><li><code>yiisoft/yii2-jui</code>： 提供了一套封装 JQuery UI 的挂件以及它们的交互。</li><li><code>yiisoft/yii2-mongodb</code>： 提供了对 MongoDB 的使用支持。它包含基本 的查询、活动记录、数据迁移、缓存、代码生成等特性。</li><li><code>yiisoft/yii2-queue</code>： 通过队列异步提供运行任务的支持。 它支持基于 DB，Redis，RabbitMQ，AMQP，Beanstalk 和 Gearman 的队列。</li><li><code>yiisoft/yii2-redis</code>： 提供了对 redis 的使用支持。它包含基本的 查询、活动记录、缓存等特性。</li><li><code>yiisoft/yii2-shell</code>： 提供基于 psysh 的交互式 shell。</li><li><code>yiisoft/yii2-smarty</code>： 提供了一个基于 Smarty 的模板引擎。</li><li><code>yiisoft/yii2-sphinx</code>： 提供了对 Sphinx 的使用支持。它包含基本的 查询、活动记录、代码生成等特性。</li><li><code>yiisoft/yii2-swiftmailer</code>： 提供了基于 swiftmailer 的邮件发送功能。</li><li><code>yiisoft/yii2-twig</code>： 提供了一个基于 Twig 的模板引擎。</li></ul><p>以下官方扩展适用于 Yii 2.1 及以上版本。 您不需要为 Yii 2.0 安装它们，因为它们包含在核心框架中。</p><ul><li><code>yiisoft/yii2-captcha</code>： 提供 CAPTCHA。</li><li><code>yiisoft/yii2-jquery</code>： 为 jQuery 提供支持。</li><li><code>yiisoft/yii2-maskedinput</code>： 提供基于 jQuery Input Mask plugin 的格式化输入小部件。</li><li><code>yiisoft/yii2-mssql</code>： 提供对使用 MSSQL 的支持。</li><li><code>yiisoft/yii2-oracle</code>： 提供对使用 Oracle 的支持。</li><li><code>yiisoft/yii2-rest</code>： 提供对 REST API 的支持。</li></ul><h2 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h2><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h4><p>要获取请求参数，你可以调用 <code>request</code> 组件的 <code>get()</code> 方法和 <code>post()</code> 方法。 他们分别返回 <code>$_GET</code> 和 <code>$_POST</code> 的值。例如，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$request = Yii::$app-&gt;request;</span><br><span class="line"></span><br><span class="line">$get = $request-&gt;get(); </span><br><span class="line"><span class="comment">// 等价于: $get = $_GET;</span></span><br><span class="line"></span><br><span class="line">$id = $request-&gt;get(<span class="string">'id'</span>);   </span><br><span class="line"><span class="comment">// 等价于: $id = isset($_GET['id']) ? $_GET['id'] : null;</span></span><br><span class="line"></span><br><span class="line">$id = $request-&gt;get(<span class="string">'id'</span>, <span class="number">1</span>);   </span><br><span class="line"><span class="comment">// 等价于: $id = isset($_GET['id']) ? $_GET['id'] : 1;</span></span><br><span class="line"></span><br><span class="line">$post = $request-&gt;post(); </span><br><span class="line"><span class="comment">// 等价于: $post = $_POST;</span></span><br><span class="line"></span><br><span class="line">$name = $request-&gt;post(<span class="string">'name'</span>);   </span><br><span class="line"><span class="comment">// 等价于: $name = isset($_POST['name']) ? $_POST['name'] : null;</span></span><br><span class="line"></span><br><span class="line">$name = $request-&gt;post(<span class="string">'name'</span>, <span class="string">''</span>);   </span><br><span class="line"><span class="comment">// 等价于: $name = isset($_POST['name']) ? $_POST['name'] : '';</span></span><br></pre></td></tr></table></figure><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>你可以通过 <code>Yii::$app-&gt;request-&gt;method</code> 表达式来获取当前请求使用的HTTP方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$request = Yii::$app-&gt;request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isAjax) &#123; <span class="comment">/* 该请求是一个 AJAX 请求 */</span> &#125;</span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isGet)  &#123; <span class="comment">/* 请求方法是 GET */</span> &#125;</span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isPost) &#123; <span class="comment">/* 请求方法是 POST */</span> &#125;</span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isPut)  &#123; <span class="comment">/* 请求方法是 PUT */</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="请求URLs"><a href="#请求URLs" class="headerlink" title="请求URLs"></a>请求URLs</h4><p>假设被请求的 <code>URL</code> 是 <code>http://example.com/admin/index.php/product?id=100</code>， 你可以像下面描述的那样获取 <code>URL</code> 的各个部分：</p><ul><li><code>url</code>：返回 <code>/admin/index.php/product?id=100</code>, 此 <code>URL</code> 不包括主机信息部分。</li><li><code>absoluteUrl</code>：返回 <code>http://example.com/admin/index.php/product?id=100</code>, 包含<code>host info</code>的整个URL。</li><li><code>hostInfo</code>：返回 <code>http://example.com</code>, 只有主机信息部分。</li><li><code>pathInfo</code>：返回 <code>/product</code>， 这个是入口脚本之后，问号之前（查询字符串）的部分。</li><li><code>queryString</code>：返回 <code>id=100</code>，问号之后的部分。</li><li><code>baseUrl</code>：返回 <code>/admin</code>，主机信息之后， 入口脚本之前的部分。</li><li><code>scriptUrl</code>：返回 <code>/admin/index.php</code>，没有路径信息和查询字符串部分。</li><li><code>serverName</code>：返回 <code>example.com</code>，URL 中的主机名。</li><li><code>serverPort</code>：返回 <code>80</code>，这是 <code>web</code> 服务中使用的端口。</li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;statusCode = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><p>尽管如此，大多数情况下不需要明确设置状态码， 因为 <code>yii\web\Response::$statusCode</code> 状态码默认为 <code>200</code>， 如果需要指定请求失败，可抛出对应的 <code>HTTP</code> 异常，如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> \yii\web\NotFoundHttpException;</span><br></pre></td></tr></table></figure><h4 id="HTTP-头部"><a href="#HTTP-头部" class="headerlink" title="HTTP 头部"></a>HTTP 头部</h4><p>可在 <code>response</code> 组件中操控 <code>header collection</code> 来发送 <code>HTTP</code> 头部信息， 例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$headers = Yii::$app-&gt;response-&gt;headers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一个 Pragma 头，已存在的Pragma 头不会被覆盖。</span></span><br><span class="line">$headers-&gt;add(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个Pragma 头. 任何已存在的Pragma 头都会被丢弃</span></span><br><span class="line">$headers-&gt;set(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除Pragma 头并返回删除的Pragma 头的值到数组</span></span><br><span class="line">$values = $headers-&gt;remove(<span class="string">'Pragma'</span>);</span><br></pre></td></tr></table></figure><h4 id="响应主体"><a href="#响应主体" class="headerlink" title="响应主体"></a>响应主体</h4><p>如果已有格式化好的主体字符串，可赋值到响应的 <code>yii\web\Response::$content</code> 属性， 例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;content = <span class="string">'hello world!'</span>;</span><br></pre></td></tr></table></figure><h4 id="发送响应"><a href="#发送响应" class="headerlink" title="发送响应"></a>发送响应</h4><p>在 <code>yii\web\Response::send()</code> 方法调用前响应中的内容不会发送给用户， 该方法默认在 <code>yii\base\Application::run()</code> 结尾自动调用，尽管如此，可以明确调用该方法强制立即发送响应。</p><p><code>yii\web\Response::send()</code> 方法使用以下步骤来发送响应：</p><ol><li>触发 <code>yii\web\Response::EVENT_BEFORE_SEND</code> 事件。</li><li>调用 <code>yii\web\Response::prepare()</code> 来格式化 <code>response data</code> 为 <code>response content</code>。</li><li>触发 <code>yii\web\Response::EVENT_AFTER_PREPARE</code> 事件。</li><li>调用 <code>yii\web\Response::sendHeaders()</code> 来发送注册的HTTP头</li><li>调用 <code>yii\web\Response::sendContent()</code> 来发送响应主体内容</li><li>触发 <code>yii\web\Response::EVENT_AFTER_SEND</code> 事件。</li></ol><h3 id="Sessions-和-Cookies"><a href="#Sessions-和-Cookies" class="headerlink" title="Sessions 和 Cookies"></a>Sessions 和 Cookies</h3><h4 id="Sessions"><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h4><h5 id="开启和关闭-Sessions"><a href="#开启和关闭-Sessions" class="headerlink" title="开启和关闭 Sessions"></a>开启和关闭 Sessions</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$session = Yii::$app-&gt;session;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查session是否开启 </span></span><br><span class="line"><span class="keyword">if</span> ($session-&gt;isActive) ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启session</span></span><br><span class="line">$session-&gt;open();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭session</span></span><br><span class="line">$session-&gt;close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁session中所有已注册的数据</span></span><br><span class="line">$session-&gt;destroy();</span><br></pre></td></tr></table></figure><h5 id="访问-Session-数据"><a href="#访问-Session-数据" class="headerlink" title="访问 Session 数据"></a>访问 Session 数据</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$session = Yii::$app-&gt;session;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取session中的变量值，以下用法是相同的：</span></span><br><span class="line">$language = $session-&gt;get(<span class="string">'language'</span>);</span><br><span class="line">$language = $session[<span class="string">'language'</span>];</span><br><span class="line">$language = <span class="keyword">isset</span>($_SESSION[<span class="string">'language'</span>]) ? $_SESSION[<span class="string">'language'</span>] : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个session变量，以下用法是相同的：</span></span><br><span class="line">$session-&gt;set(<span class="string">'language'</span>, <span class="string">'en-US'</span>);</span><br><span class="line">$session[<span class="string">'language'</span>] = <span class="string">'en-US'</span>;</span><br><span class="line">$_SESSION[<span class="string">'language'</span>] = <span class="string">'en-US'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个session变量，以下用法是相同的：</span></span><br><span class="line">$session-&gt;remove(<span class="string">'language'</span>);</span><br><span class="line"><span class="keyword">unset</span>($session[<span class="string">'language'</span>]);</span><br><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">'language'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查session变量是否已存在，以下用法是相同的：</span></span><br><span class="line"><span class="keyword">if</span> ($session-&gt;has(<span class="string">'language'</span>)) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($session[<span class="string">'language'</span>])) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'language'</span>])) ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有session变量，以下用法是相同的：</span></span><br><span class="line"><span class="keyword">foreach</span> ($session <span class="keyword">as</span> $name =&gt; $value) ...</span><br><span class="line"><span class="keyword">foreach</span> ($_SESSION <span class="keyword">as</span> $name =&gt; $value) ...</span><br></pre></td></tr></table></figure><h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><h5 id="读取-Cookies"><a href="#读取-Cookies" class="headerlink" title="读取 Cookies"></a>读取 Cookies</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 "request" 组件中获取 cookie 集合(yii\web\CookieCollection)</span></span><br><span class="line">$cookies = Yii::$app-&gt;request-&gt;cookies;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取名为 "language" cookie 的值，如果不存在，返回默认值 "en"</span></span><br><span class="line">$language = $cookies-&gt;getValue(<span class="string">'language'</span>, <span class="string">'en'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种方式获取名为 "language" cookie 的值</span></span><br><span class="line"><span class="keyword">if</span> (($cookie = $cookies-&gt;get(<span class="string">'language'</span>)) !== <span class="keyword">null</span>) &#123;</span><br><span class="line">    $language = $cookie-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可将 $cookies 当作数组使用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($cookies[<span class="string">'language'</span>])) &#123;</span><br><span class="line">    $language = $cookies[<span class="string">'language'</span>]-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否存在名为 "language" 的 cookie</span></span><br><span class="line"><span class="keyword">if</span> ($cookies-&gt;has(<span class="string">'language'</span>)) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($cookies[<span class="string">'language'</span>])) ...</span><br></pre></td></tr></table></figure><h5 id="发送-Cookies"><a href="#发送-Cookies" class="headerlink" title="发送 Cookies"></a>发送 Cookies</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 "response" 组件中获取 cookie 集合(yii\web\CookieCollection)</span></span><br><span class="line">$cookies = Yii::$app-&gt;response-&gt;cookies;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在要发送的响应中添加一个新的 cookie</span></span><br><span class="line">$cookies-&gt;add(<span class="keyword">new</span> \yii\web\Cookie([</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'language'</span>,</span><br><span class="line">    <span class="string">'value'</span> =&gt; <span class="string">'zh-CN'</span>,</span><br><span class="line">]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个 cookie</span></span><br><span class="line">$cookies-&gt;remove(<span class="string">'language'</span>);</span><br><span class="line"><span class="comment">// 等同于以下删除代码</span></span><br><span class="line"><span class="keyword">unset</span>($cookies[<span class="string">'language'</span>]);</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p><code>Yii</code> 内置了一个 <code>error handler</code> 错误处理器，它使错误处理更方便， <code>Yii错误处理器</code>做以下工作来提升错误处理效果</p><h4 id="使用错误处理器"><a href="#使用错误处理器" class="headerlink" title="使用错误处理器"></a>使用错误处理器</h4><p><code>error handler</code> 注册成一个名称为<code>errorHandler</code>应用组件， 可以在应用配置中配置它类似如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'components'</span> =&gt; [</span><br><span class="line">        <span class="string">'errorHandler'</span> =&gt; [</span><br><span class="line">            <span class="string">'maxSourceLines'</span> =&gt; <span class="number">20</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="日志消息"><a href="#日志消息" class="headerlink" title="日志消息"></a>日志消息</h4><p>记录日志消息就跟调用下面的日志方法一样简单：</p><ul><li><code>Yii::trace()</code>：记录一条消息去跟踪一段代码是怎样运行的。这主要在开发的时候使用。</li><li><code>Yii::info()</code>：记录一条消息来传达一些有用的信息。</li><li><code>Yii::warning()</code>：记录一个警告消息用来指示一些已经发生的意外。</li><li><code>Yii::error()</code>：记录一个致命的错误，这个错误应该尽快被检查。</li></ul><h2 id="Restful-web-服务"><a href="#Restful-web-服务" class="headerlink" title="Restful web 服务"></a>Restful web 服务</h2><h2 id="助手类"><a href="#助手类" class="headerlink" title="助手类"></a>助手类</h2><h3 id="Array-助手-ArrayHelper"><a href="#Array-助手-ArrayHelper" class="headerlink" title="Array 助手(ArrayHelper)"></a>Array 助手(ArrayHelper)</h3><h4 id="获取值（Getting-Values）"><a href="#获取值（Getting-Values）" class="headerlink" title="获取值（Getting Values）"></a>获取值（Getting Values）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value = ArrayHelper::getValue($array, <span class="string">'foo.bar.name'</span>);</span><br></pre></td></tr></table></figure><h4 id="设定值（Setting-values）"><a href="#设定值（Setting-values）" class="headerlink" title="设定值（Setting values）"></a>设定值（Setting values）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$array = [</span><br><span class="line">    <span class="string">'key'</span> =&gt; [</span><br><span class="line">        <span class="string">'in'</span> =&gt; [<span class="string">'k'</span> =&gt; <span class="string">'value'</span>]</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">ArrayHelper::setValue($array, <span class="string">'key.in'</span>, [<span class="string">'arr'</span> =&gt; <span class="string">'val'</span>]);</span><br><span class="line"><span class="comment">// 在 `$array` 中写入值的路径可以被指定为一个数组</span></span><br><span class="line">ArrayHelper::setValue($array, [<span class="string">'key'</span>, <span class="string">'in'</span>], [<span class="string">'arr'</span> =&gt; <span class="string">'val'</span>]);</span><br></pre></td></tr></table></figure><h4 id="检查键名的存在（Checking-Existence-of-Keys）"><a href="#检查键名的存在（Checking-Existence-of-Keys）" class="headerlink" title="检查键名的存在（Checking Existence of Keys）"></a>检查键名的存在（Checking Existence of Keys）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$data1 = [</span><br><span class="line">    <span class="string">'userName'</span> =&gt; <span class="string">'Alex'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$data2 = [</span><br><span class="line">    <span class="string">'username'</span> =&gt; <span class="string">'Carsten'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ArrayHelper::keyExists(<span class="string">'username'</span>, $data1, <span class="keyword">false</span>) || !ArrayHelper::keyExists(<span class="string">'username'</span>, $data2, <span class="keyword">false</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Please provide username."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多维排序（Multidimensional-Sorting）"><a href="#多维排序（Multidimensional-Sorting）" class="headerlink" title="多维排序（Multidimensional Sorting）"></a>多维排序（Multidimensional Sorting）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$data = [</span><br><span class="line">    [<span class="string">'age'</span> =&gt; <span class="number">30</span>, <span class="string">'name'</span> =&gt; <span class="string">'Alexander'</span>],</span><br><span class="line">    [<span class="string">'age'</span> =&gt; <span class="number">30</span>, <span class="string">'name'</span> =&gt; <span class="string">'Brian'</span>],</span><br><span class="line">    [<span class="string">'age'</span> =&gt; <span class="number">19</span>, <span class="string">'name'</span> =&gt; <span class="string">'Barney'</span>],</span><br><span class="line">];</span><br><span class="line">ArrayHelper::multisort($data, [<span class="string">'age'</span>, <span class="string">'name'</span>], [SORT_ASC, SORT_DESC]);</span><br></pre></td></tr></table></figure><h4 id="对象转换为数组（Converting-Objects-to-Arrays）"><a href="#对象转换为数组（Converting-Objects-to-Arrays）" class="headerlink" title="对象转换为数组（Converting Objects to Arrays）"></a>对象转换为数组（Converting Objects to Arrays）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$posts = Post::find()-&gt;limit(<span class="number">10</span>)-&gt;all();</span><br><span class="line">$data = ArrayHelper::toArray($posts, [</span><br><span class="line">    <span class="string">'app\models\Post'</span> =&gt; [</span><br><span class="line">        <span class="string">'id'</span>,</span><br><span class="line">        <span class="string">'title'</span>,</span><br><span class="line">        <span class="comment">// the key name in array result =&gt; property name</span></span><br><span class="line">        <span class="string">'createTime'</span> =&gt; <span class="string">'created_at'</span>,</span><br><span class="line">        <span class="comment">// the key name in array result =&gt; anonymous function</span></span><br><span class="line">        <span class="string">'length'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($post)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> strlen($post-&gt;content);</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="Html-助手-Html"><a href="#Html-助手-Html" class="headerlink" title="Html 助手(Html)"></a>Html 助手(Html)</h3><h4 id="生成标签（Generating-Tags）"><a href="#生成标签（Generating-Tags）" class="headerlink" title="生成标签（Generating Tags）"></a>生成标签（Generating Tags）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>= Html::tag(<span class="string">'p'</span>, Html::encode($user-&gt;name), [<span class="string">'class'</span> =&gt; <span class="string">'username'</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="生成-CSS-类和样式（Forming-CSS-Classes-and-Styles）"><a href="#生成-CSS-类和样式（Forming-CSS-Classes-and-Styles）" class="headerlink" title="生成 CSS 类和样式（Forming CSS Classes and Styles）"></a>生成 CSS 类和样式（Forming CSS Classes and Styles）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$options = [<span class="string">'class'</span> =&gt; <span class="string">'btn btn-default'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($type === <span class="string">'success'</span>) &#123;</span><br><span class="line">    Html::removeCssClass($options, <span class="string">'btn-default'</span>);</span><br><span class="line">    Html::addCssClass($options, <span class="string">'btn-success'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> Html::tag(<span class="string">'div'</span>, <span class="string">'Pwede na'</span>, $options);</span><br><span class="line"></span><br><span class="line"><span class="comment">// in case of $type of 'success' it will render</span></span><br></pre></td></tr></table></figure><h4 id="创建表单（Creating-Forms）"><a href="#创建表单（Creating-Forms）" class="headerlink" title="创建表单（Creating Forms）"></a>创建表单（Creating Forms）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>= Html::beginForm([<span class="string">'order/update'</span>, <span class="string">'id'</span> =&gt; $id], <span class="string">'post'</span>, [<span class="string">'enctype'</span> =&gt; <span class="string">'multipart/form-data'</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Url-助手-Url"><a href="#Url-助手-Url" class="headerlink" title="Url 助手(Url)"></a>Url 助手(Url)</h3><h4 id="获得通用-URL（Getting-Common-URLs）"><a href="#获得通用-URL（Getting-Common-URLs）" class="headerlink" title="获得通用 URL（Getting Common URLs）"></a>获得通用 URL（Getting Common URLs）</h4><p>有两种获取通用 <code>URLS</code> 的方法 ：当前请求的 <code>home URL</code> 和 <code>base URL</code> 。 </p><ul><li>为了获取 <code>home URL</code> ，使用如下代码：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$relativeHomeUrl = Url::home();</span><br><span class="line">$absoluteHomeUrl = Url::home(<span class="keyword">true</span>);</span><br><span class="line">$httpsAbsoluteHomeUrl = Url::home(<span class="string">'https'</span>);</span><br></pre></td></tr></table></figure><ul><li>如下代码可以获得当前请求的 <code>base URL</code>：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$relativeBaseUrl = Url::base();</span><br><span class="line">$absoluteBaseUrl = Url::base(<span class="keyword">true</span>);</span><br><span class="line">$httpsAbsoluteBaseUrl = Url::base(<span class="string">'https'</span>);</span><br></pre></td></tr></table></figure><h4 id="创建-URLs（Creating-URLs）"><a href="#创建-URLs（Creating-URLs）" class="headerlink" title="创建 URLs（Creating URLs）"></a>创建 URLs（Creating URLs）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$url = Url::toRoute([<span class="string">'product/view'</span>, <span class="string">'id'</span> =&gt; <span class="number">42</span>]);</span><br></pre></td></tr></table></figure><h4 id="记住-URLs（Remember-URLs）"><a href="#记住-URLs（Remember-URLs）" class="headerlink" title="记住 URLs（Remember URLs）"></a>记住 URLs（Remember URLs）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记住当前 URL </span></span><br><span class="line">Url::remember();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记住指定的 URL。参数格式请参阅 Url::to()。</span></span><br><span class="line">Url::remember([<span class="string">'product/view'</span>, <span class="string">'id'</span> =&gt; <span class="number">42</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记住用给定名称指定的 URL</span></span><br><span class="line">Url::remember([<span class="string">'product/view'</span>, <span class="string">'id'</span> =&gt; <span class="number">42</span>], <span class="string">'product'</span>);</span><br></pre></td></tr></table></figure><h4 id="检查相对-URLs（Checking-Relative-URLs）"><a href="#检查相对-URLs（Checking-Relative-URLs）" class="headerlink" title="检查相对 URLs（Checking Relative URLs）"></a>检查相对 URLs（Checking Relative URLs）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$isRelative = Url::isRelative(<span class="string">'test/it'</span>);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.yiichina.com/doc/guide/2.0" target="_blank" rel="noopener">Yii 2.0 权威指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Yii2 Yes It is&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架相关" scheme="http://blog.caoxl.com/categories/%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Yii2" scheme="http://blog.caoxl.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>面试/笔试实战 II</title>
    <link href="http://blog.caoxl.com/2019/12/11/Learning-From-Interview-II/"/>
    <id>http://blog.caoxl.com/2019/12/11/Learning-From-Interview-II/</id>
    <published>2019-12-11T10:17:37.000Z</published>
    <updated>2019-12-23T03:34:41.556Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>从面试中学习，从面试中成长。</p></blockquote><a id="more"></a><h2 id="禁用COOKIE后SESSION还能用吗"><a href="#禁用COOKIE后SESSION还能用吗" class="headerlink" title="禁用COOKIE后SESSION还能用吗 ?"></a>禁用COOKIE后SESSION还能用吗 ?</h2><blockquote><p>客户端禁用<code>cookie</code>采用<strong>url重写</strong>的方式 ，<br>也就是将<code>sessionid</code>写在<code>url</code>上，</p></blockquote><h2 id="抓取远程图片到本地，你会用什么函数"><a href="#抓取远程图片到本地，你会用什么函数" class="headerlink" title="抓取远程图片到本地，你会用什么函数 ?"></a>抓取远程图片到本地，你会用什么函数 ?</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file<span class="emphasis">_get_</span>contents($url);</span><br></pre></td></tr></table></figure><h2 id="什么是CGI-什么是FastCGI-php-fpm-FastCGI-Nginx之间是什么关系"><a href="#什么是CGI-什么是FastCGI-php-fpm-FastCGI-Nginx之间是什么关系" class="headerlink" title="什么是CGI? 什么是FastCGI? php-fpm,FastCGI,Nginx之间是什么关系?"></a>什么是CGI? 什么是FastCGI? php-fpm,FastCGI,Nginx之间是什么关系?</h2><blockquote><ul><li><code>CGI</code>: 公共网关接口（Common Gateway Interface，CGI）是Web 服务器运行时外部程序的规范</li><li><code>FastCGI</code>: 快速通用网关接口（Fast Common Gateway Interface／FastCGI）是一种让交互程序与Web服务器通信的协议。FastCGI是早期通用网关接口（CGI）的增强版本。</li><li><code>php-fpm</code>: PHP-FPM(FastCGI Process Manager：FastCGI进程管理器)是一个PHPFastCGI管理器</li></ul></blockquote><ul><li>关系:</li></ul><blockquote><p>用户的请求通过WEB服务器（如<strong>Nginx</strong>）转发给<strong>FastCGI</strong>进程，<strong>FastCGI</strong>进程再调用应用程序进行处理（如<strong>PHP解析器</strong>），应用程序的处理结果如<code>html</code>返回给<strong>FastCGI</strong>，<strong>FastCGI</strong>返回给<strong>Nginx</strong>进行输出。</p></blockquote><h2 id="简述POST和GET传输的最大容量分别是多少"><a href="#简述POST和GET传输的最大容量分别是多少" class="headerlink" title="简述POST和GET传输的最大容量分别是多少?"></a>简述POST和GET传输的最大容量分别是多少?</h2><ul><li>GET</li></ul><blockquote><p><code>get</code> 是通过URL提交数据，因此GET可提交的数据量就跟URL所能达到的最大长度有直接关系。<strong>很多文章都说GET方式提交的数据最多只能是1024字节</strong>，而 实际上，URL不存在参数上限的问题，HTTP协议规范也没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制 是2083字节(2K+35字节)。对于其他浏览器，如FireFox，Netscape等，则没有长度限制，这个时候其限制取决于服务器的操作系统。即 如果url太长，服务器可能会因为安全方面的设置从而拒绝请求或者发生不完整的数据请求。</p></blockquote><ul><li>POST</li></ul><blockquote><p><code>post</code> 理论上讲是没有大小限制的，HTTP协议规范也没有进行大小限制，但实际上<strong>post所能传递的数据量大小取决于服务器的设置和内存大小</strong>。因为我们一般 post的数据量很少超过MB的，所以我们很少能感觉的到post的数据量限制，但实际中如果你上传文件的过程中可能会发现这样一个问题，即上传个头比较 大的文件到服务器时候，可能上传不上去，以php语言来说，查原因的时候你也许会看到有说PHP上传文件涉及到的参数PHP默认的上传有限定，一般这个值是<strong>2MB</strong>，更改这个值需要更改<code>php.conf</code>的<code>post_max_size</code>这个值。</p></blockquote><h2 id="列出能够使HTML和PHP分离开使用的模板"><a href="#列出能够使HTML和PHP分离开使用的模板" class="headerlink" title="列出能够使HTML和PHP分离开使用的模板"></a>列出能够使HTML和PHP分离开使用的模板</h2><blockquote><p>有<code>Smarty</code>, <code>Dwoo</code>, <code>tinyButStrong</code>, <code>phemplate</code>, <code>XTemplate</code>等模板引擎。</p></blockquote><h2 id="请写一个函数，实现以下功能：-字符串”open-door”转换成”OpenDoor”"><a href="#请写一个函数，实现以下功能：-字符串”open-door”转换成”OpenDoor”" class="headerlink" title="请写一个函数，实现以下功能： 字符串”open_door”转换成”OpenDoor”."></a>请写一个函数，实现以下功能： 字符串”open_door”转换成”OpenDoor”.</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span><span class="params">($string = <span class="string">'open_door'</span>)</span> </span>&#123;</span><br><span class="line">    $array = explode(<span class="string">'_'</span>, $string);</span><br><span class="line">    array_walk($array, <span class="function"><span class="keyword">function</span> <span class="params">(&amp;$v)</span> </span>&#123;</span><br><span class="line">        $v = ucwords($v);</span><br><span class="line">    &#125;);</span><br><span class="line">    $string = implode(<span class="string">''</span>, $array);</span><br><span class="line"></span><br><span class="line">    var_dump($string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">convert();</span><br></pre></td></tr></table></figure><h2 id="echo-print-print-r-的区别"><a href="#echo-print-print-r-的区别" class="headerlink" title="echo(), print(), print_r()的区别?"></a>echo(), print(), print_r()的区别?</h2><ul><li><code>echo()</code>是语言结构(language construct)，而并不是真正的函数，没有返回值。</li><li><code>pirnt()</code>实际上也不是函数（而是语言结构），所以可以不用圆括号包围参数列表。</li><li><code>print_r()</code>可以把字符串和数字简单地打印出来，而数组则以括起来的键和值得列表形式显示，并以Array开头。</li><li><code>printf()</code>函数返回一个格式化后的字符串。</li></ul><h2 id="isset-empty-is-null的区别"><a href="#isset-empty-is-null的区别" class="headerlink" title="isset, empty(), is_null的区别?"></a>isset, empty(), is_null的区别?</h2><ul><li><code>isset</code> 判断变量是否已存在，如果变量存在则返回 TRUE，否则返回 FALSE。</li><li><code>empty</code> 判断变量是否为空，如果变量是非空 或非零 的值，则 empty() 返回 FALSE。</li><li><code>is_null</code> 判断变量是否为NULL</li></ul><h2 id="FILE表示什么意思"><a href="#FILE表示什么意思" class="headerlink" title="FILE表示什么意思?"></a><strong>FILE</strong>表示什么意思?</h2><blockquote><ul><li><code>__FILE__</code>      文件的完整路径和文件名。</li><li><code>__LINE__</code>        文件中的当前行号。</li><li><code>__DIR__</code>        文件所在的目录。</li><li><code>__FUNCTION__</code>    函数名称（PHP 4.3.0 新加）。</li><li><code>__CLASS__</code>        类的名称（PHP 4.3.0 新加）。</li><li><code>__TRAIT__</code>        Trait 的名字（PHP 5.4.0 新加）</li><li><code>__METHOD__</code>    类的方法名（PHP 5.0.0 新加）</li><li><code>__NAMESPACE__</code>    当前命名空间的名称（区分大小写）。</li></ul></blockquote><h2 id="如何获取客户端的IP地址"><a href="#如何获取客户端的IP地址" class="headerlink" title="如何获取客户端的IP地址?"></a>如何获取客户端的IP地址?</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getIp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($_SERVER[<span class="string">"HTTP_X_FORWARDED_FOR"</span>] ?? <span class="keyword">false</span>) &#123;</span><br><span class="line">        $ip  = $_SERVER[<span class="string">"HTTP_X_FORWARDED_FOR"</span>];</span><br><span class="line">        $ips = explode(<span class="string">','</span>, $ip);<span class="comment">//阿里cdn</span></span><br><span class="line">        $ip  = $ips[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($_SERVER[<span class="string">"HTTP_CDN_SRC_IP"</span>] ?? <span class="keyword">false</span>) &#123;</span><br><span class="line">        $ip = $_SERVER[<span class="string">"HTTP_CDN_SRC_IP"</span>];</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_CLIENT_IP'</span>)) &#123;</span><br><span class="line">        $ip = getenv(<span class="string">'HTTP_CLIENT_IP'</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED'</span>)) &#123;</span><br><span class="line">        $ip = getenv(<span class="string">'HTTP_X_FORWARDED'</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>)) &#123;</span><br><span class="line">        $ip = getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED'</span>)) &#123;</span><br><span class="line">        $ip = getenv(<span class="string">'HTTP_FORWARDED'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    $ip = str_replace(<span class="keyword">array</span>(<span class="string">'::ffff:'</span>, <span class="string">'['</span>, <span class="string">']'</span>), <span class="keyword">array</span>(<span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>), $ip);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写出使用header函数跳转页面的语句"><a href="#写出使用header函数跳转页面的语句" class="headerlink" title="写出使用header函数跳转页面的语句"></a>写出使用header函数跳转页面的语句</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Location:http://blog.caoxl.com"</span>);</span><br></pre></td></tr></table></figure><h2 id="写出将一个数组里的空值去掉的函数"><a href="#写出将一个数组里的空值去掉的函数" class="headerlink" title="写出将一个数组里的空值去掉的函数?"></a>写出将一个数组里的空值去掉的函数?</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_filter();</span><br></pre></td></tr></table></figure><h2 id="什么事CSRF攻击-XSS攻击-如何防范"><a href="#什么事CSRF攻击-XSS攻击-如何防范" class="headerlink" title="什么事CSRF攻击? XSS攻击? 如何防范?"></a>什么事CSRF攻击? XSS攻击? 如何防范?</h2><h3 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h3><blockquote><p><strong>跨站请求伪造</strong>（英語：<code>Cross-site request forgery</code>），也被称为<code>one-click attack</code> 或者 <code>session riding</code>，通常缩写为 <strong>CSRF</strong> 或者<strong>XSRF</strong>， 是<strong>一种挟制用户在当前已登录的Web应用程序上执行非本意的操作</strong>的攻击方法。</p></blockquote><ul><li><strong>防范</strong>:</li></ul><ol><li><code>Cookie Hashing</code>(所有表单都包含同一个伪随机值)：</li><li>验证码</li><li><code>One-Time Tokens</code>(不同的表单包含一个不同的伪随机值)</li><li>请求时附带验证信息，比如验证码或者<code>token</code></li></ol><h3 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h3><blockquote><p>人们经常将跨站脚本攻击（<code>Cross Site Scripting</code>）缩写为CSS，但这会与层叠样式表（<code>Cascading Style Sheets，CSS</code>）的缩写混淆。因此，有人将跨站脚本攻击缩写为<strong>XSS</strong>。<br><strong>XSS</strong>攻击通常指的是<strong>通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序</strong>。 这些恶意网页程序通常是<code>JavaScript</code>，但实际上也可以包括<code>Java</code>、 <code>VBScript</code>、<code>ActiveX</code>、 <code>Flash</code> 或者甚至是普通的<code>HTML</code>。</p></blockquote><ul><li><strong>防范</strong>:</li></ul><ol><li><code>Content Security Policy(CSP)</code></li><li>输入内容长度控制</li><li><code>HTTP-only Cookie</code>: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。</li><li>验证码：防止脚本冒充用户提交危险操作。</li></ol><h2 id="简单描述MySQL中，索引，主键，唯一索引，联合索引的区别，对数据的性能有什么影响"><a href="#简单描述MySQL中，索引，主键，唯一索引，联合索引的区别，对数据的性能有什么影响" class="headerlink" title="简单描述MySQL中，索引，主键，唯一索引，联合索引的区别，对数据的性能有什么影响?"></a>简单描述MySQL中，索引，主键，唯一索引，联合索引的区别，对数据的性能有什么影响?</h2><ul><li>索引的遵循原则:<ul><li>1、最左侧原则，表的最左侧的一列，往往数据不会发生改变，不影响其他列的数据；</li><li>2、命名短小原则，索引命名过长会使索引文件变大，损耗内存。</li></ul></li></ul><ul><li><p>普通索引（由关键字KEY或INDEX定义得到索引）：加快数据的查询速度</p></li><li><p>唯一索引（由关键字UNIQUE把它定义为唯一索引）：保证数据记录的唯一性</p></li><li><p>主键：一种特殊的唯一索引，在一张表中只能定义一个主键索引，用来标识唯一一条数据，用PRIMARY KEY创建。</p></li><li><p>联合索引：索引可以覆盖多个数据列，如像INDEX(columnA, columnB)索引，这就是联合索引。</p></li></ul><blockquote><p>索引可以极大的提高查询访问速度，但是会降低插入，删除，更新表的速度，<strong>因为在执行写操作的时候还要操作索引文件</strong>。</p></blockquote><h2 id="简述在MySQL数据库中MyISAM和InnoDB的区别"><a href="#简述在MySQL数据库中MyISAM和InnoDB的区别" class="headerlink" title="简述在MySQL数据库中MyISAM和InnoDB的区别?"></a>简述在MySQL数据库中MyISAM和InnoDB的区别?</h2><ul><li><ol><li>构成上，<code>MyISAM</code>的表在磁盘中有三个文件组成，分别是<strong>表定义文件</strong>(<code>.frm</code>)、<strong>数据文件</strong>(<code>.MYD</code>)、<strong>索引文件</strong>(<code>.MYI</code>)，而<code>InnoDB</code>的表由<strong>表定义文件</strong>(<code>.frm</code>)、表空间数据和日志文件组成。</li></ol></li><li><ol start="2"><li>安全方面，<code>MyISAM</code>强调的是性能，其查询查询效率较高，但<strong>不支持事务和外键</strong>等安全性方面的功能，而<code>InnoDB</code><strong>支持事务和外键</strong>等高级功能，查询效率稍低。</li></ol></li><li><ol start="3"><li>对锁的支持，<code>MyISAM</code>支持表锁，而<code>InnoDB</code>支持行锁。</li></ol></li></ul><h2 id="Memcache和Redis的读写性能如何-两者优缺点"><a href="#Memcache和Redis的读写性能如何-两者优缺点" class="headerlink" title="Memcache和Redis的读写性能如何?  两者优缺点?"></a>Memcache和Redis的读写性能如何?  两者优缺点?</h2><ul><li>读写性能</li></ul><blockquote><p>memcache更加快速，在读取性能上比 Redis 快，缺点是仅支持字符串。<br>Redis支持丰富的数据结构类型，字符串，散列（哈希），集合，有序集合，还支持订阅发布，地理位置等等。<br>实际运用中可以redis，memcache结合，memcache可作为session存储的方式，session都是KV类型键值对</p></blockquote><ul><li>优缺点</li></ul><blockquote><p>Redis 还可以同时使用 <code>AOF</code> 持久化和 <code>RDB</code> 持久化。 在这种情况下， <strong>当 Redis 重启时， 它会优先使用 AOF 文件来还原数据集， 因为 AOF 文件保存的数据集通常比 RDB 文件所保存的数据集更完整。</strong></p></blockquote><h2 id="请写一个函数验证电子邮件的格式是否正确"><a href="#请写一个函数验证电子邮件的格式是否正确" class="headerlink" title="请写一个函数验证电子邮件的格式是否正确?"></a>请写一个函数验证电子邮件的格式是否正确?</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$email = <span class="string">'code08091@163.com'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1: 原生自带验证</span></span><br><span class="line">$is_email = filter_var($email, FILTER_VALIDATE_EMAIL);</span><br><span class="line"></span><br><span class="line">var_dump($is_email);  <span class="comment">// true则返回email, false则返回false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2: 正则验证</span></span><br><span class="line">$regex  = <span class="string">'/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$/'</span>;</span><br><span class="line">$is_email = preg_match($regex, $email);</span><br><span class="line"></span><br><span class="line">var_dump($is_email);</span><br></pre></td></tr></table></figure><ul><li>封装一下</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span><span class="params">($email)</span> </span>&#123;</span><br><span class="line">    $is_email = filter_var($email, FILTER_VALIDATE_EMAIL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($is_email) &#123;</span><br><span class="line">        $regex  = <span class="string">'/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$/'</span>;</span><br><span class="line">        $is_email = preg_match($regex, $email);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $is_email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(checkEmail(<span class="string">'code08091@163.com'</span>));</span><br></pre></td></tr></table></figure><h2 id="使用正则表达式去除其中的所有JS脚本"><a href="#使用正则表达式去除其中的所有JS脚本" class="headerlink" title="使用正则表达式去除其中的所有JS脚本?"></a>使用正则表达式去除其中的所有JS脚本?</h2><h2 id="写一个函数，能够遍历一个文件夹下的所有文件和子文件夹。"><a href="#写一个函数，能够遍历一个文件夹下的所有文件和子文件夹。" class="headerlink" title="写一个函数，能够遍历一个文件夹下的所有文件和子文件夹。"></a>写一个函数，能够遍历一个文件夹下的所有文件和子文件夹。</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scan_dir</span><span class="params">($dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $files = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">if</span> ( $handle = opendir($dir) ) &#123;</span><br><span class="line">        <span class="keyword">while</span> ( ($file = readdir($handle)) !== <span class="keyword">false</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( $file != <span class="string">".."</span> &amp;&amp; $file != <span class="string">"."</span> ) &#123;</span><br><span class="line">                <span class="keyword">if</span> ( is_dir($dir . <span class="string">"/"</span> . $file) ) &#123;</span><br><span class="line">                    $files[$file] = scandir($dir . <span class="string">"/"</span> . $file);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    $files[] = $file;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        closedir($handle);</span><br><span class="line">        <span class="keyword">return</span> $files;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$files = scan_dir(<span class="string">'F:\Code\Hexo'</span>);</span><br><span class="line"></span><br><span class="line">print_r($files);</span><br></pre></td></tr></table></figure><h2 id="函数内部static和global关键字的作用"><a href="#函数内部static和global关键字的作用" class="headerlink" title="函数内部static和global关键字的作用"></a>函数内部static和global关键字的作用</h2><blockquote><p><code>static</code> 是静态变量,在局部函数中存在且只初始化一次,使用过后再次使用会使用上次执行的结果; 作为计数，程序内部缓存，单例模式中都有用到。<br><code>global</code> 关键字,引用全局变量，wordpress中大量用到，如面向过程开发。<br><code>static 静态方法</code>,是类的成员方法,但不需要实例化类可直接使用<br><code>$GLOBAL</code> 在函数内使用具有全局作用域的变量,如<code>$GLOBAL[&#39;a&#39;]</code></p></blockquote><h2 id="子类重写父类的Protected方法有什么限制-或者说有什么要遵守的规则"><a href="#子类重写父类的Protected方法有什么限制-或者说有什么要遵守的规则" class="headerlink" title="子类重写父类的Protected方法有什么限制? 或者说有什么要遵守的规则?"></a>子类重写父类的Protected方法有什么限制? 或者说有什么要遵守的规则?</h2><p>用例子说明，以 Laravel 框架中的控制器作为说明</p><ol><li><code>final</code> 修饰的类方法不可被子类重写</li><li>PHP是否重写父类方法只会根据方法名是否一致判断 (5.3以后重写父类方法参数个数必须一致)</li><li>重写时访问级别只可以等于或者宽松于父类 不可提升访问级别</li></ol><h2 id="PHP文件末尾是否应该加-gt-结束符号，-为什么"><a href="#PHP文件末尾是否应该加-gt-结束符号，-为什么" class="headerlink" title="PHP文件末尾是否应该加 ? &gt;结束符号， 为什么?"></a>PHP文件末尾是否应该加 <code>? &gt;</code>结束符号， 为什么?</h2><ul><li>不应该</li></ul><blockquote><ul><li>主要防止 <code>include</code>，<code>require</code> 引用文件，把文件末尾可能的回车和空格等字符引用进来。</li><li>还有一些函数比如 <code>session_start()</code> 必须在没有任何输出之前调用，就会造成不是期望的结果。</li><li>PHP文件的编码不包含BOM的 <code>UTF8</code>，这也是<code>PSR-2</code>中的规范，<strong>纯PHP代码文件必须省略最后的 ?&gt; 结束标签</strong>。</li></ul></blockquote><h2 id="PHP开源框架CI，ThinkPHP，Laravel的优缺点以及选型依据。"><a href="#PHP开源框架CI，ThinkPHP，Laravel的优缺点以及选型依据。" class="headerlink" title="PHP开源框架CI，ThinkPHP，Laravel的优缺点以及选型依据。"></a>PHP开源框架CI，ThinkPHP，Laravel的优缺点以及选型依据。</h2><ul><li><code>CI</code>非常轻量级，是一个简单的MVC框架，性能也很快。</li><li><code>ThinkPHP</code>国内使用比较多，优点是文档非常多，各种问题解决方案比较多，缺点是代码不够规范，理念落后。</li><li><code>Laravel</code> 是一个现代化的PHP开发框架，代码优雅，使用 <code>composer</code> 方式扩展功能，社区活跃，缺点是比较重，比较适合做后台管理或者应用型WEB系统。</li></ul><h2 id="Ajax中如何执行跨域访问-同子域的情况如何处理-不同子域的情况如何处理"><a href="#Ajax中如何执行跨域访问-同子域的情况如何处理-不同子域的情况如何处理" class="headerlink" title="Ajax中如何执行跨域访问? 同子域的情况如何处理? 不同子域的情况如何处理?"></a>Ajax中如何执行跨域访问? 同子域的情况如何处理? 不同子域的情况如何处理?</h2><blockquote><p>什么是跨域？狭义的理解跨域是指受到浏览器同源策略限制的一类请求，通常我们说的跨域就是指的这一类请求。当协议、域名（包含子域名）、端口号中任意一个不相同时，都属于不同域。不同域之间相互请求资源，就会受到<strong>浏览器的同源策略限制</strong>。</p></blockquote><ul><li><code>CORS</code></li><li><code>script</code>标签解决跨域</li><li><code>jsonp</code>解决跨域</li></ul><h2 id="文件上传时需要在form中加入enctype-multipart-form-data的目的是什么-使用application-x-www-form-urlencoded不能成功的原因是"><a href="#文件上传时需要在form中加入enctype-multipart-form-data的目的是什么-使用application-x-www-form-urlencoded不能成功的原因是" class="headerlink" title="文件上传时需要在form中加入enctype=multipart/form-data的目的是什么? 使用application/x-www,form-urlencoded不能成功的原因是?"></a>文件上传时需要在form中加入<code>enctype=multipart/form-data</code>的目的是什么? 使用<code>application/x-www</code>,<code>form-urlencoded</code>不能成功的原因是?</h2><p>首先知道enctype这个属性管理的是表单的MIME编码。共有三个值可选：</p><ol><li><code>application/x-www-form-urlencoded</code></li><li><code>multipart/form-data</code></li><li><code>text/plain</code></li></ol><p>其中<code>application/x-www-form-urlencoded</code>是默认值，作用是设置表单传输的编码。</p><p>表单中<code>enctype=&quot;multipart/form-data&quot;</code>的意思，是<strong>设置表单的MIME编码</strong>。默认情况，这个编码格式是<code>application/x-www-form-urlencoded</code>，不能用于文件上传；<br><strong>只有使用了<code>multipart/form-data</code>，才能完整的传递文件数据</strong></p><h2 id="设计一个名为car的类，使其拥有color属性、getColor与setColor方法"><a href="#设计一个名为car的类，使其拥有color属性、getColor与setColor方法" class="headerlink" title="设计一个名为car的类，使其拥有color属性、getColor与setColor方法"></a>设计一个名为car的类，使其拥有color属性、getColor与setColor方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getColor</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $color</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColor</span><span class="params">($color)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请写出3种多服务器共享Session的方案"><a href="#请写出3种多服务器共享Session的方案" class="headerlink" title="请写出3种多服务器共享Session的方案"></a>请写出3种多服务器共享Session的方案</h2><ul><li><ol><li>文件方式</li></ol></li></ul><blockquote><p>这种方式，将文件作为一个map，当新增一个数据的时候，就在文件中增加类似这样的一条数据</p></blockquote><ul><li><ol start="2"><li>cache方式</li></ol></li></ul><blockquote><p>memcache可以做分布式，如果没有这功能，他也不能用来做session同步。他可以把web服务器中的内存组合起来，成为一个”内存池”，不管是哪个服务器产生的sessoin都可以放到这个”内存池”中，其他的都可以使用。<br>redis与memcache一样，都是将数据放在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p></blockquote><ul><li><ol start="3"><li>cookie方式</li></ol></li></ul><blockquote><p>把用户访问页面产生的session放到cookie里面，就是以cookie为中转站。</p></blockquote><ul><li><ol start="4"><li>通过数据库<code>mysql</code>共享<code>session</code></li></ol></li></ul><blockquote><p>采用一台专门的mysql服务器来存储所有的session信息。</p></blockquote><ul><li><ol start="5"><li>通过NFS共享Session</li></ol></li></ul><blockquote><p>选择一台公共的NFS服务器（Network File Server）做共享服务器，所有的Web服务器登陆的时候把session数据写到这台服务器上，那么所有的session数据其实都是保存在这台NFS服务器上的，不论用户访问哪台Web服务器，都要来这台服务器获取session数据，那么就能够实现共享session数据了。</p></blockquote><h2 id="假设有10道题，如何从中随机取出5道题"><a href="#假设有10道题，如何从中随机取出5道题" class="headerlink" title="假设有10道题，如何从中随机取出5道题?"></a>假设有10道题，如何从中随机取出5道题?</h2><blockquote><p>rand(), random_bytes(), mt_rand()</p></blockquote><h2 id="谈谈抢红包这种互动活动实现的技术难点及解决方案"><a href="#谈谈抢红包这种互动活动实现的技术难点及解决方案" class="headerlink" title="谈谈抢红包这种互动活动实现的技术难点及解决方案"></a>谈谈抢红包这种互动活动实现的技术难点及解决方案</h2><blockquote><p>高并发,大流量,减少库存问题,锁问题,前后端缓存问题,队列问题</p></blockquote><h2 id="如何保证同时向同一个文件内写入内容的完整性以及准确性"><a href="#如何保证同时向同一个文件内写入内容的完整性以及准确性" class="headerlink" title="如何保证同时向同一个文件内写入内容的完整性以及准确性"></a>如何保证同时向同一个文件内写入内容的完整性以及准确性</h2><blockquote><p>LOCK_EX (独占锁定)</p></blockquote><ul><li><code>process_1.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚本开始</span></span><br><span class="line">$start_time = microtime();</span><br><span class="line"></span><br><span class="line">$filename = <span class="string">'./process_data.txt'</span>;</span><br><span class="line"></span><br><span class="line">$fp = fopen($filename, <span class="string">'a+'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">100</span>; $i++) &#123;</span><br><span class="line">    fwrite($fp, <span class="string">"process_1:"</span> . $i . <span class="string">"\r\n"</span>);</span><br><span class="line">    usleep(<span class="number">100000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚本结束</span></span><br><span class="line">$end_time = microtime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Process_1 Done for"</span> . ($end_time - $start_time) . <span class="string">'seconds'</span>;</span><br></pre></td></tr></table></figure><ul><li><code>process_2.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚本开始</span></span><br><span class="line">$start_time = microtime();</span><br><span class="line"></span><br><span class="line">$filename = <span class="string">'./process_data.txt'</span>;</span><br><span class="line"></span><br><span class="line">$fp = fopen($filename, <span class="string">'a+'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">100</span>; $i++) &#123;</span><br><span class="line">    fwrite($fp, <span class="string">"process_2:"</span> . $i . <span class="string">"\r\n"</span>);</span><br><span class="line">    usleep(<span class="number">100000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚本结束</span></span><br><span class="line">$end_time = microtime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Process_2 Done for "</span> . ($end_time - $start_time) . <span class="string">' seconds'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>多次同时执行，虽然都写了100行，但是<strong>事务1和事务2的数据交错写入</strong>，这并不是我们想要的结果。我们要的是事务完整的执行，此时我们需要有个机制 去保证在第一个事务执行完后再执行第二个。在PHP中，flock函数完成了这一使命。在事物1和事务2的循环前面都加上： <code>flock($fp, LOCK_EX)</code>; 就能 满足我们的需求，将两个事务串行。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚本开始</span></span><br><span class="line">$start_time = microtime();</span><br><span class="line"></span><br><span class="line">$filename = <span class="string">'./process_data.txt'</span>;</span><br><span class="line"></span><br><span class="line">$fp = fopen($filename, <span class="string">'a+'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 独占锁定</span></span><br><span class="line">flock($fp, LOCK_EX);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">100</span>; $i++) &#123;</span><br><span class="line">    fwrite($fp, <span class="string">"process_1:"</span> . $i . <span class="string">"\r\n"</span>);</span><br><span class="line">    usleep(<span class="number">100000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚本结束</span></span><br><span class="line">$end_time = microtime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Process_1 Done for "</span> . ($end_time - $start_time) . <span class="string">' seconds'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>在PHP的<code>fopen</code>函数的实现中，如果我们使用<code>a</code>参数在文件的尾部追加内容，其调用open函数中<code>oflag</code>参数为 <code>O_CREAT</code>|<code>O_APPEND</code>，即我们使用追加操作 不用担心并发追加写入的问题</p></blockquote><h2 id="请简述cookie与session的区别和联系"><a href="#请简述cookie与session的区别和联系" class="headerlink" title="请简述cookie与session的区别和联系"></a>请简述cookie与session的区别和联系</h2><ul><li>区别</li></ul><blockquote><p><strong>cookie保存在客户端</strong>，未设置存储时间的cookie为会话cookie保存在浏览器的进程开辟的内存中，当浏览器关闭后会话cookie也会被删除；设置了存储时间的cookie保存在用户设备的磁盘中直到过期。<br><strong>session保存在服务器端</strong>，存储在IIS的进程开辟的内存中。</p></blockquote><ul><li>联系</li></ul><blockquote><p>当服务器端生成一个<code>session</code>时就会向客户端发送一个<code>cookie</code>保存在客户端，这个<code>cookie</code>保存的是<code>session</code>的<code>sessionId</code>。这样才能保证客户端发起请求后客户端已经登录的用户能够与服务器端成千上万的<code>session</code>中准确匹配到已经保存了该用户信息的<code>session</code>，同时也能够确保不同页面之间传值时的正确匹配。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从面试中学习，从面试中成长。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="笔试题" scheme="http://blog.caoxl.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>PHP面试/笔试题杂记 VII</title>
    <link href="http://blog.caoxl.com/2019/11/25/Interview-Questions-Notes-VII/"/>
    <id>http://blog.caoxl.com/2019/11/25/Interview-Questions-Notes-VII/</id>
    <published>2019-11-25T07:55:59.000Z</published>
    <updated>2019-12-02T02:57:01.558Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>一个PHP高级工程师 需要具备哪些知识?</p></blockquote><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><ol><li>自我介绍: 说上家公司负责的项目或者浓缩简历。</li></ol></li><li><ol start="2"><li>简历项目经验层次</li></ol><ul><li>利用什么技术</li><li>实现了什么功能</li><li>遇到了什么问题</li><li>达到了什么结果</li></ul></li><li><ol start="3"><li>期望薪资</li></ol></li><li><ol start="4"><li>应用型的问题：要记得站高看远、架构分层</li></ol></li><li><ol start="5"><li>及管理经验及自身对项目管理的理解</li></ol></li></ul><h2 id="知识点列表"><a href="#知识点列表" class="headerlink" title="知识点列表"></a>知识点列表</h2><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul><li><strong>代码解释过程(大多的非编译语言)</strong><ul><li><code>lexical</code> 词法分析, 输入为源代码, 输出为<code>token</code></li><li>语法分析工具为文法(<code>LALR</code>), 输出为表达式, 7.0为<code>AST</code>, 涉及<ul><li>注释</li><li>分号 &amp; 分隔符</li><li>变量</li><li>常量</li><li>操作数</li></ul></li><li>类型检查、关键字处理、导入, 输出为中间代码.工具为选定的编译器优化工具<ul><li>中间代码生成(<code>Opcodes</code>)</li><li>机器码生成 (编译语言)</li></ul></li></ul></li><li><strong><code>Session</code>共享配置</strong></li><li><strong><code>PHPUnit</code>用法</strong></li><li><strong><code>Cookie</code>购物车和<code>Session</code>购物车的实现</strong></li><li><strong>弱类型实现</strong><ul><li><code>zval</code>(不仅是变量名) &amp; <code>zend_val</code> 变量值</li></ul></li><li><strong>代码规范</strong><ul><li>自动化: <code>sonarquebe</code>+<code>jenkins</code></li><li>单元测试</li></ul></li><li><strong>PHP进程间如何通信</strong><ul><li>信号量(消息同步|互斥)</li><li>信号(信号触发事件)(<code>pcntl_signal</code>, <code>pcntl_wait*</code>)</li><li>消息队列(<code>msg_*</code>)</li><li>管道(<code>pipe</code>)</li><li><code>socket</code> | <code>unix_*.sock</code></li><li>共享内存(<code>shm_</code>,<code>shmop_</code>)</li></ul></li><li><strong>PHP并发模型</strong></li><li><strong>PHP执行流程</strong></li><li><strong>变量底层存储结构</strong></li><li><strong>常用的数组函数(列出10个)</strong><ul><li><code>array_combine</code>(前面数组作为其键，后面数组做为其值)</li><li><code>array_merge</code>(合并两个数组，后面覆盖前面，但数字索引会重新索引，不会覆盖)</li><li>…</li></ul></li><li><strong>PHP垃圾回收机制(gc)</strong><ul><li><code>zend.enable_gc</code> (<code>php.ini</code>)</li><li><code>gc_enable()</code> (<code>function</code>)</li><li>引入计数(<code>zval</code>指向<code>zend_value</code>个数为<code>0</code>时) + 写时拷贝 (<code>copy on write</code>)</li><li>循环引用问题 (<code>array</code>、<code>object</code>引用自身成员), 垃圾回收器将收集于一个<code>buffer</code>(<code>_zend_gc_global</code> -&gt; <code>gc_root_buffer</code>) 后启动垃圾鉴定程序</li></ul></li><li><strong>把<code>Session</code>放入<code>Redis</code>里面还会触发类似文件的<code>state session</code></strong><ul><li><code>session.gc_probability</code> (default 1)</li><li><code>session.gc_divisor</code> (default 100)</li><li><code>session.gc_maxlifetime</code> (单位秒)</li><li><code>session.cookie_lifetime</code> (单位秒, 0表示直到关闭浏览器)</li><li><code>session.save_path</code></li><li><code>session.write_close</code> (显示关闭, 后期使用需要显示开启)</li></ul></li><li><strong>内存模型</strong><ul><li>整型、浮点、<code>bool</code>、<code>NULL</code>、内部字符串、不可变数组都是通过<code>zval</code>直接保存,不会用到引用计数</li><li><code>string</code>、<code>array</code>都会使用引入计数(支持复制cow), <code>object</code>、<code>resource</code>本身可以理解为引用</li></ul></li><li><strong>fpm三种配置及场景</strong><ul><li><code>dynamic</code><ul><li><code>pm.start_servers</code></li><li><code>pm.max_children</code></li><li><code>pm.max_spare_servers</code></li><li><code>pm.min_spare_servers</code></li></ul></li><li><code>static</code><ul><li><code>pm.max_children</code></li></ul></li><li><code>ondaemon</code><ul><li><code>pm.process_idle_timeout</code></li></ul></li></ul></li><li><strong>数组底层</strong><ul><li>如何保证有序: 又加了一层映射表 (与bucket大小相同)</li><li>如何解决hash冲突: 拉链法(头插)</li><li>扩容: 逻辑删除 (考虑<code>unset</code>内存情况, 是否需要重建索引)</li></ul></li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li><strong>索引</strong><ul><li><strong>物理存储</strong><ul><li>聚簇索引</li><li>非聚簇索引</li></ul></li><li><strong>数据结构</strong><ul><li><code>B + 树</code></li><li><code>hash</code></li><li><code>fulltext</code></li><li><code>R-tree</code></li></ul></li><li><strong>逻辑角度</strong><ul><li>唯一索引 <code>unique</code></li><li>普通索引 <code>index</code></li><li>主键索引 <code>primary key</code></li><li>全文索引 <code>full index</code> (myisam)</li><li>复合索引 (最左前缀原则)<ul><li>类似 where a and b and c a b c 问题</li><li>联合索引(a,b,c) 能够正确使用索引的有 (a=1), (a=1 and b=1), (a=1 and b=1 and c=1) (b=1 and c =1)</li></ul></li></ul></li></ul></li><li><strong>引擎类型</strong><ul><li><code>myisam</code></li><li><code>innodb</code></li><li>区别<ul><li><ol><li>myisam采用非聚簇索引, innodb采用聚簇索引</li></ol></li><li><ol start="2"><li>myisam索引myi与数据myd文件分离, 索引文件仅保存数据记录指针地址</li></ol></li><li><ol start="3"><li>myisam的主索引与辅助索引在结构上没区别, 而innodb不一样: innodb的所有辅助索引都引用主索引为data域</li></ol></li><li><ol start="4"><li>innodb支持事务, 行级锁, myisam不行</li></ol></li><li><ol start="5"><li>innodb必须有主键, 而myisam可以没有</li></ol></li></ul></li></ul></li><li><strong>事务</strong><ul><li>原子性 <code>atomicity</code></li><li>一致性 <code>consistency</code></li><li>隔离性 <code>isolation</code></li><li>持久性 <code>durability</code></li></ul></li><li><strong>分表数量级</strong><ul><li>单表在500w左右, 性能最佳, BTREE索引树在3-5之间</li></ul></li><li><strong>隔离级别</strong><ul><li>事务的隔离性是数据库处理数据的基础之一，隔离级别是提供给用户在性能和可靠性做除选择和权衡的配置项目，以下四种情况都有一个前提（在同一个事务中）<ul><li><code>read_uncommited</code>: 未提交读(脏读)</li><li><code>read_commit</code>: 已提交读 (不可重复读)</li><li><code>repeatable_read</code>: 可重复读</li><li><code>serialize</code>: 可串行化</li></ul></li></ul></li><li><strong>索引机制(算法)</strong><ul><li><code>hash</code></li><li><code>b+tree</code></li><li><code>b-tree</code>(不要念成b减tree，-只是个符号)</li></ul></li><li><strong>锁</strong><ul><li><strong>种类</strong><ul><li><code>optimistic lock</code> 乐观锁<ul><li>特点: 不会真的死锁</li></ul></li><li><code>pessimistic lock</code> 悲观锁<ul><li>为了保证事务的隔离性, 就需要一致性锁定读.读的时候要加锁，防止其他事务再次更改，修改的时候也要加锁，其他事务无法读取。主要就是依靠数据库的锁机制来实现，同时缺点很明显，就是会带来性能的开销，并发的减少</li></ul></li></ul></li><li><code>innodb</code>的MVCC(Multi-Version Concurrency Control)<ul><li>多版本并发控制, 适用于行锁的、事务性的数据库模型</li><li>适用于innodb的<code>rc</code>和<code>rr</code>级别, 因为可串行化涉及到锁表</li><li>实现思想是在每行增加一个<code>create_verison</code>和<code>delete_version</code>字段</li><li><code>update</code> 是插入一个新行，先保存当前版本号到旧行的<code>delete_version</code>,且新建行的<code>new_create_version</code>也就是<code>delete_version</code></li><li><code>delete</code>操作就是直接标记<code>delete_version</code></li><li><code>insert</code>的时候，就是保存至<code>create_version</code></li><li><code>select</code>的时候可以这样<ul><li>读<code>delete_version</code>为空的</li><li>大于当前事务版本号的</li><li>创建版本号 &lt;= 当前事务版本号的</li></ul></li></ul></li><li><strong>粒度划分</strong><ul><li>行锁</li><li>表锁</li></ul></li><li><strong>意向锁 <code>intention lock</code> (表级锁)</strong><ul><li>场景：A对表中一行进行修改，B对整个表修改。如果没有以下的两个锁，B将对全表扫描是否被锁定。反之，A可以对某行添加意向互斥锁（表级），然后再添加互斥锁（行级），然后B只需要等待意向互斥锁释放）</li><li>意向共享锁</li><li>意向互斥锁</li></ul></li><li><strong>共享锁 <code>shard lock</code> 读锁(行锁)</strong></li><li><strong>排它锁 <code>exclusive lock</code> 写锁(行锁)</strong></li><li><strong>关于innodb必须要知道的</strong><ul><li>可以通过 <code>SELECT \* FROM products WHERE id=&#39;3&#39; FOR UPDATE</code> 进行锁，但是必须在事务中</li><li>上述语句必须是命中索引才会行锁，否则是 <code>table lock</code></li></ul></li><li><strong>锁的算法</strong><ul><li><code>record lock</code>：加到索引记录上的锁，如果通过where条件上锁，而不知道具体哪行，这样会锁定整个表</li><li><code>gap lock</code>：间隙锁某个区间的锁定，对索引记录中的一段连续区域的锁。</li><li><code>next-key lock</code>：行锁和GAP（间隙锁）的合并，next-key锁是解决RR级别中 幻读问题的主要方案。可以搜索关键字 快照读（snapshot read）和当前读（current read）去了解</li></ul></li><li><strong>分库分表</strong></li><li><strong>主从复制 读写分离</strong></li><li><strong>ACID</strong></li><li><strong>覆盖索引(复合索引)</strong><ul><li>定义：包含两个或多个属性列的索引称为复合索引。如果查询字段是普通索引，或者是联合索引的最左原则字段，查询结果是联合索引的字段或者是主键。这种就不必通过主键（聚集索引再次查询）</li><li>目的: 减少磁盘IO, 不用回表</li><li>b+树索引</li></ul></li></ul></li></ul><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul><li><code>Nginx</code><ul><li><code>worker_connections</code></li><li><code>upstream weight</code></li><li>负责均衡实现方式<ul><li>轮询</li><li>IP哈希</li><li>指定权重</li><li>第三方<ul><li><code>fair</code></li><li><code>url_hash</code></li></ul></li></ul></li></ul></li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li>Linux<ul><li><code>epoll</code> <code>select</code></li><li><code>netstat</code> 查看<code>tcp</code> <code>udp</code> <code>unixsock</code>网络</li><li>查看负载 <code>cat /proc/loadavg</code> | <code>w</code> | <code>top</code></li><li><code>df</code></li><li><code>lstat</code>: strace的时候常常可见它</li><li><code>top</code>: <code>shift+M</code></li><li><code>free</code></li><li><code>lsof</code>: 查看当前进程ID, 进程名等占用的文件描述符</li><li><code>ipstat</code></li><li><code>strace</code></li><li><code>grep [-A ,-B, -C]&#39;HTTP/1.1&quot; 200&#39; access.log | wc -l</code></li><li><code>socket</code>和管道(<code>pipe</code>)的区别: <code>socket</code>全双工, <code>pipe</code>半双工*2</li><li><code>awk</code> &amp; <code>sed</code><ul><li><code>awk &#39;{print $1}&#39; access.log | sort | uniq | wc -l</code></li></ul></li></ul></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li><strong>类型/应用场景</strong><ul><li><code>string</code>: cache, incr</li><li><code>hash</code>: key为key, value为Hashmap</li><li><code>set</code>: 去重(中奖只一次  <code>sismember</code>), 交/并/差 (如微博社交关系), 内部实现为value为null的hashmap</li><li><code>zset</code>: (sorted set), 既去重又能保证按照score排序, 比如按照帖子的关注个数排序，value为帖子id，个数为score。</li><li><code>list</code>: (阻塞<code>rpop</code>) 消息队列、列表旋转(常用于监控, <code>rpoplpush</code>)</li><li><code>HyperLogLog</code>: 大量统计 (非精确)</li><li><code>bitmaps</code></li></ul></li><li><strong><code>OBJ_ENCODING</code></strong><ul><li><code>string</code><ul><li><code>OBJ_ENCODING_RAW</code>, 代表sds, 原生string类型</li><li><code>OBJ_ENCODING_INT</code>, long类型</li><li><code>OBJ_ENCODING_EMBSTR</code>, 嵌入</li></ul></li><li><code>OBJ_HASH</code><ul><li><code>OBJ_ENCODING_HT</code>, 表示成dict</li><li><code>OBJ_ENCODING_ZPILIST</code>, hash用ziplist表示</li></ul></li><li><code>OBJ_SET</code><ul><li><code>OBJ_ENCODING_INTSET</code>, 表示成intest</li><li>config<ul><li>set-max-intset-entries 512</li></ul></li></ul></li><li><code>OBJ_ZSET</code><ul><li><code>OBJ_ENCODING_SKIPLIST</code>, 表示成skiplist</li></ul></li><li><code>OBJ_LIST</code><ul><li><code>OBJ_ENCODING_QUICKLIST</code></li><li>config<ul><li>list-max-ziplist-size-2</li><li>list-compress-depth 0</li></ul></li></ul></li></ul></li><li><strong>扩展问题</strong><ul><li>zset如何根据两个属性排序? 比如根据id和age<ul><li>可以用位操作, 把两个属性合成一个double</li><li>用zunionstore合并存储为新的key, 再zrange</li></ul></li><li>redis是如何保证原子性操作的?<ul><li>因为它是单线程的! (MySQL是多线程)</li><li>在并发脚本中的 get set 等不是原子的</li><li>在并发的原子命令 incr setnx 等是原子的</li><li>事务是保证批量操作的原子性</li></ul></li><li>主从复制过程<ul><li>从服务器向主服务器发送sync</li><li>主服务器收到sync命令执行BGSAVE, 且在这期间新执行的命令到一个缓冲区</li><li>主执行(BGSAVE) 完毕后,将<code>.rdb</code>文件发送给从服务器, 从服务器将文件载入内存</li><li>BGSAVE期间到缓冲区的命令会以redis命令协议的方式, 将内容发送给从服务器</li></ul></li></ul></li><li><strong>特性</strong><ul><li>单线程, 自实现(event driver库, 见下面四个io多路复用函数)</li><li>io多路复用, 最常用调用函数: select (epoll, kquene, avport等), 同时监控多个文件描述符的可读可写</li><li>reactor方式实现文件处理器 (每一个网络连接对应一个文件描述符), 同时监听多个fd的accept, read (from client), write (to client), close文件事件</li></ul></li><li><strong>备份与持久化</strong><ul><li><code>rdb</code> (fork进程dump到file)<ul><li>手动: <code>save</code>(阻塞) &amp; <code>bgsave</code> (fork 子进程), 但是这两个不会同时进行</li><li>自动触发:  <code>conf:save 900 1 save 300 10 save 60 10000 dbfilename dump.rdb</code></li><li>rdb优点: 对服务进程影响小, 记录原数据文件方式便于管理还原</li><li>rdb缺点: 可能数据不完整</li><li>rdb为纯文本文件, 可以用 <code>od -c dump.rdb</code> 分析</li></ul></li><li><code>aof</code> (类似binlog)<ul><li>三种写入同步方式<ul><li><code>appendfsync no</code></li><li><code>appendfsync everysec</code> (每个事件循环写入缓冲区, 但是每隔一秒同步到磁盘文件)</li><li><code>appendfsync always</code> (每执行一个命令, 每个事件循环都会执行写入aof 缓冲区并同步到磁盘文件，效率最慢，但是最安全)</li></ul></li><li>aof优点: 数据最完整, 可以通过数据重写rewrite来减少体积, 存储内存为redis的纯文本协议</li><li>aof缺点: 文件相对rdb更大, 导入速度比rdb慢</li><li>一般有了aof就不rdb, 因为aof更新频率更高</li></ul></li></ul></li><li><strong>过期策略</strong><ul><li>定时过期: 时间到了立即删除, cpu不友好, 内存友好</li><li>惰性过期: 访问时判断是否过期, cpu友好, 内存不友好</li><li>定期过期: expires dict中scan, 清除已过期的key, cpu和内存最优解</li></ul></li><li><strong>内存淘汰机制</strong><ul><li><code>noeviction</code>: 新写入时会报错</li><li><code>allkeys-lru</code>: 移除最近最少使用的key</li><li><code>allkeys-random</code>: 随机移除某些key</li><li><code>volatile-lru</code>: 设置了过期时间的key中, 移除最近最少使用</li><li><code>volatile-random</code>: 随机移除某些key</li><li><code>volatile-ttl</code>: 设置类过期时间的键中, 有更早过期时间的key优先移除</li></ul></li><li><strong>redis队列特殊关注之处</strong><ul><li>队列可能丢东西<ul><li>比如redis挂了, producer没有停止, 但是队列数据无法写入</li></ul></li><li>队列的consumer需要手动处理commit协议<ul><li>如果consumer处理完, 表示真正完成</li><li>如果没有处理完?放回队列?直接丢弃?</li></ul></li><li>事件重放机制不支持<ul><li>比如consumer消费错了, 那能不能将队列回放呢?再次处理呢?</li></ul></li><li>队列最大长度及过期时间<ul><li>如果producer远大于consumer, 撑爆了怎么办</li><li>如果comsumer一直没有处理, producer的数据如何处理</li></ul></li><li><code>exactly once</code></li><li>单机锁<code>setnx</code>或者基于<code>set</code>众多参数没有问题, 集群下可利用tag机制</li><li>如何保证业务执行时间超过锁的过期时间, 而引起误删除操作, 答案是可以加一个唯一标识</li></ul></li><li><strong><code>vs memcache</code></strong><ul><li><code>memcached</code><ul><li>优势<ul><li>多线程(listen &amp; worker), 利用多核</li><li>round robin</li><li>cas (check and set, compare and swap)</li></ul></li><li>劣势<ul><li>cache coherency、 锁</li><li>key大小有限制 (1M)</li></ul></li><li>特点<ul><li>内存预分配: slab + trunk</li></ul></li></ul></li><li><code>redis</code><ul><li>优势<ul><li>自己封装了一个AEEvent (epoll + select + kqueue), io多路复用</li><li>丰富的数据结构 (对内 + 对外)</li><li>良好的持久化策略 (rdb + aof)</li></ul></li><li>劣势<ul><li>排序、聚会cpu密集操作会影响吞吐量</li><li>key 大小最大为 1g</li></ul></li></ul></li></ul></li><li><strong>redis的事务机制</strong><ul><li>基于乐观锁的watch multi exec</li><li>redis call lua 脚本 (比如get+del一起)</li><li>2.6.12后set命令支持(setnx + expire就不需要写lua script了)</li><li>redis 下的分布式锁，当主从不同步或者主重新被选举需要多想想，主从情况下一般采用从节点的大多数 (es也是这样)</li></ul></li><li><p><strong>redis 主从哨兵配置，copy三份redis.conf文件，以下设置一主二从一哨兵</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">redis01.conf</span></span><br><span class="line"><span class="string">port</span> <span class="number">63791</span></span><br><span class="line"></span><br><span class="line"><span class="string">vim</span> <span class="string">redis02.conf</span></span><br><span class="line"><span class="string">port</span> <span class="number">63792</span></span><br><span class="line"><span class="string">slaveof</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">63791</span></span><br><span class="line"></span><br><span class="line"><span class="string">vim</span> <span class="string">redis03.conf</span></span><br><span class="line"><span class="string">port</span> <span class="number">63793</span></span><br><span class="line"><span class="string">slaveof</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">63791</span></span><br><span class="line"></span><br><span class="line"><span class="string">vim</span> <span class="string">sentinel.conf</span></span><br><span class="line"><span class="string">daemonize</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">port</span> <span class="number">26379</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">monitor</span> <span class="string">mymaster</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">63791</span> <span class="number">1</span>  </span><br><span class="line"><span class="string">//</span> <span class="string">mymaster为自定义命名，127.0.0.1</span> <span class="number">63791</span><span class="string">为master，1为选举主节点的时候投票数目的同意个数，1代表有一个哨兵同意就行。</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>redis cluster</code></strong></p><ul><li>集群会将数据自动按照算法分割在不同节点负责的槽上 (data sharding)</li></ul></li></ul><h3 id="算法-amp-数据结构"><a href="#算法-amp-数据结构" class="headerlink" title="算法&amp;数据结构"></a>算法&amp;数据结构</h3><ul><li><strong>最小堆</strong>: 根节点为最小值, 且节点比其他子节点小</li><li>平衡树 (avl红黑树)</li><li><strong>最大堆</strong>: 根节点为最大值, 且节点比其他子节点大</li><li><strong><code>sikplist</code></strong></li><li><strong><code>hash</code></strong><ul><li><code>hash</code> 碰撞原因</li><li><code>hash</code> 碰撞解决方案<ul><li>拉链, 塞到链表里. 有点是相对简单, 但是需要附加空间</li><li>开发寻址, 有点是空间利用率高, 一直找<ul><li>线性探测</li><li>二次探测再散列函数</li><li>伪随机数</li></ul></li></ul></li></ul></li><li><strong>给定数组n, 判断n是斐波那契数列的第几项? 写算法</strong></li><li><strong>反转列表如A-&gt;B-&gt;C-&gt;D 到 A-&gt;D-&gt;C-&gt;B</strong></li><li><strong>插入排序</strong></li><li><strong>数组与链表区别与联系</strong></li><li><strong>链表操作</strong><ul><li>单链表删除</li><li>单链表插入<ul><li>快慢指针判断环路、找链表中点</li></ul></li></ul></li><li><strong>应用问题</strong><ul><li>如何实现一个LRU功能 (双向链表)</li><li>如何实现浏览器前进后退功能 (两个栈)</li></ul></li></ul><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><ul><li><strong>HTTP</strong><ul><li>构成: 起始行(Get=&gt;200), 首部头(Accept=&gt;Content-Type), 主体(name =&gt; tongbo)</li><li>版本<ul><li>1.0</li><li>1.1</li><li>2.0 多路复用, 流量控制</li></ul></li></ul></li><li><strong>长连接</strong><ul><li>在一个连接上发送多个数据包</li><li>心跳、如何发送心跳</li></ul></li><li><strong>HTTP DNS</strong><ul><li>定义: 用http协议代替元素的udp dns协议, 可以绕过运营商的local dns</li><li>解决问题: 避免local dns造成的域名劫持问题和调度不精确问题</li><li>其他解决方案<ul><li>客户端dns缓存</li><li>热点域名解析</li><li>懒更新策略 (ttl过期后再同步)</li></ul></li></ul></li><li><strong>Post请求分割head和body</strong></li><li><strong>Get vs Post</strong><ul><li>Get<ul><li>安全幂等, 请求实体资源</li><li>参数只能url编码, 且参数长度有限制</li><li>浏览器会自动加cache</li></ul></li><li>Post<ul><li>附加请求实体于服务器</li><li>产生两个TCP数据包</li><li>数据支持多种编码格式</li></ul></li></ul></li><li><strong>Resultful</strong><ul><li><code>get</code>: 获取资源</li><li><code>post</code>: 新建资源</li><li><code>put</code>: 跟新完整资源</li><li><code>delete</code>: 删除资源</li><li><code>patch</code>: 更新部分资源</li></ul></li><li><strong>RPC</strong><ul><li>RPC框架涉及基本组件服务<ul><li>客户端、服务端自动代码生成、多语言支持</li><li>消息序列化、反序列化</li><li>连接池、负载、故障、队列、超时、异步</li></ul></li><li>常见协议<ul><li>soap (http jsonrpc)</li><li>GRPC</li><li>thrift(tcp)</li></ul></li></ul></li><li><strong>TCP</strong><ul><li>面向连接, 先建立(握手), 然后释放(挥手确认拜拜)</li><li>只能点对点</li><li>可靠交付, 全双工, 接收和发送端都设有发送和接收cache</li><li>面向字节流</li></ul></li><li><strong>特性协议</strong><ul><li>停等</li><li>超时重传</li><li>慢启动</li><li>滑动窗口</li><li>快速重传</li></ul></li><li><strong>UDP</strong><ul><li>无连接、best effort、面向报文(不合并、不拆分、保留边界)</li><li>无拥塞控制、流量控制、首部开销小(8个字节, 而TCP有20个首部)</li><li>支持一对一、一对多、多对一</li></ul></li><li><strong>自定义协议</strong></li></ul><h3 id="PHP框架"><a href="#PHP框架" class="headerlink" title="PHP框架"></a>PHP框架</h3><ul><li><strong>laravel</strong><ul><li>AppServerProvider register:服务提供者注册</li><li>IocContainer: (IoC容器, 工厂模式的升华)<ul><li>控制反转 (inversion of control) 可以降低计算机代码直接的耦合, 其中最常见的方式叫做依赖注入 (Dependence Injection), 还有一种方式叫依赖查找</li><li>实现方式<ul><li>基于接口: 实现特定接口以供外部容器注入所依赖类型的对象</li><li>基于Set方法:</li><li>基于构造函数: 实现特定参数的构造函数</li></ul></li><li>管理类依赖</li><li>执行 (依赖注入DI): 通过构造函数或者某些情况下通过Setter方法将类依赖注入到类中, 容器并不需要被告知如何构建对象,因为他会使用PHP的反射服务自动解析出具体的对象</li></ul></li></ul></li><li><strong>swoole</strong></li><li><strong>thinkphp</strong></li><li><strong>ci</strong></li><li><strong>yii</strong></li><li><strong>easyswoole</strong></li></ul><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li><strong>操作系统</strong><ul><li>多线程</li><li>多进程</li><li>协程的理解</li><li>socket和管道的区别</li><li>进程间通信手段<ul><li>共享内存</li><li>rpc</li><li>管道</li></ul></li><li>线程间通信手段<ul><li>读写进程数据段</li></ul></li></ul></li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li><strong>单例模式 (static, construct)</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> $instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> $config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;config = $config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">instance</span><span class="params">($config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">self</span>::$instance <span class="keyword">instanceof</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>::$instance = <span class="keyword">new</span> <span class="keyword">self</span>($config);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>::$instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>简单工厂 (switch case include new return)</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeModule</span><span class="params">($moduleName, $options)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> ($moduleName) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Fight'</span>: </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Fight($options[<span class="number">0</span>], $options[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Force'</span>: </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Force($options[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Shot'</span>: </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Shot($options[<span class="number">0</span>], $options[<span class="number">1</span>], $options[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用工厂方式 001</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $power;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化工厂</span></span><br><span class="line">        $factory = <span class="keyword">new</span> SuperModuleFactory;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过工厂提供的方法制造需要的模块</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;power = $factory-&gt;makeModule(<span class="string">'Fight'</span>, [<span class="number">9</span>, <span class="number">100</span>]);</span><br><span class="line">        <span class="comment">// $this-&gt;power = $factory-&gt;makeModule('Force', [45]);</span></span><br><span class="line">        <span class="comment">// $this-&gt;power = $factory-&gt;makeModule('Shot', [99, 50, 2]);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        $this-&gt;power = array(</span></span><br><span class="line"><span class="comment">            $factory-&gt;makeModule('Force', [45]),</span></span><br><span class="line"><span class="comment">            $factory-&gt;makeModule('Shot', [99, 50, 2])</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用工厂方式 002 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $power;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $modules)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化工厂</span></span><br><span class="line">        $factory = <span class="keyword">new</span> SuperModuleFactory;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过工厂提供的方法制造需要的模块</span></span><br><span class="line">        <span class="keyword">foreach</span> ($modules <span class="keyword">as</span> $moduleName =&gt; $moduleOptions)&#123;</span><br><span class="line">             <span class="keyword">$this</span>-&gt;power[] = $factory-&gt;makeModule($moduleName, $moduleOptions);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建超人</span></span><br><span class="line">$superman = <span class="keyword">new</span> Superman([</span><br><span class="line">    <span class="string">'Fight'</span> =&gt; [<span class="number">9</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">'Shot'</span> =&gt; [<span class="number">99</span>, <span class="number">50</span>, <span class="number">2</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li><strong>门面模式</strong><ul><li>对客户屏蔽子系统组件, 减少子系统与客户之间的松耦合关系</li></ul></li><li><strong>依赖注入(<code>DI</code>) 和 <code>AOP</code>思想</strong></li></ul><h3 id="大前端"><a href="#大前端" class="headerlink" title="大前端"></a>大前端</h3><ul><li><strong>js</strong><ul><li>百度统计的实现<ul><li>基于cookie, 引入js脚本及百度个人账户ID, 读取当前信息, 适当节点发送请求给百度服务</li></ul></li><li>前后端分离</li></ul></li></ul><h3 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h3><ul><li><strong>运维&amp;架构</strong><ul><li>服务器CPU99%如何分析</li><li>MySQL占CPU如何分析</li><li>PHP占CPU较高如何分析</li><li>SSO实现方法</li><li>MySQL优化方法</li><li>如何提高监测数据的准确性</li><li>Dcoker原理及引用及编排管理</li></ul></li></ul><h3 id="分布式-微服务"><a href="#分布式-微服务" class="headerlink" title="分布式|微服务"></a>分布式|微服务</h3><ul><li><strong>分布式</strong><ul><li>redis分布式锁问题</li><li>cap及常见应用关注cap哪两点</li></ul></li><li><strong>微服务</strong><ul><li>优点<ul><li>相对于单体服务更简单, 注重单一功能</li><li>每个服务可以独立开发打包测试部署, 且语言环境无关</li><li>可以水平、高效扩展</li></ul></li><li>缺点<ul><li>运营成本, 服务发现, 治理, 降级, 熔断</li><li>网络信息传输、安全、延迟</li><li>服务调用排查追踪</li></ul></li><li>最佳原则<ul><li>高内聚: 修改了一个功能, 只需要改一个服务</li><li>低耦合: 修改了一个地方, 不需要改其他的地方</li><li>业务内原则<ul><li>新服务用新的微服务, 确定无误后保留推进, 否则调整</li><li>老的保留, 直到新服务稳定再切换</li><li>必须的监控与日志 | 生产 - 订阅 - 消费模型</li><li>尝试对外不可见的服务先做是试点, 错误邮件, 日志, 系统内调用, API内部分成熟接口</li></ul></li></ul></li></ul></li><li><strong>考虑问题</strong><ul><li>分布式数据一致性问题?CAP如何权衡</li><li>调用链追踪(基于OpenTracing协议的JeagerORZipkin)</li></ul></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个PHP高级工程师 需要具备哪些知识?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="笔试题" scheme="http://blog.caoxl.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>PHP面试/笔试题杂记 VI</title>
    <link href="http://blog.caoxl.com/2019/11/25/Interview-Questions-Notes-VI/"/>
    <id>http://blog.caoxl.com/2019/11/25/Interview-Questions-Notes-VI/</id>
    <published>2019-11-25T02:28:12.000Z</published>
    <updated>2019-11-27T03:10:27.708Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h2 id="通过哪一个函数，可以把错误转换为异常处理？"><a href="#通过哪一个函数，可以把错误转换为异常处理？" class="headerlink" title="通过哪一个函数，可以把错误转换为异常处理？"></a>通过哪一个函数，可以把错误转换为异常处理？</h2><ul><li><code>A: set_error_handler</code></li><li><code>B: error_reporting</code></li><li><code>C: error2exception</code></li><li><code>D: catch</code></li></ul><blockquote><p>正确答案：A<br>答案分析：<code>set_error_handler ()</code> 可指定一个回调函数，错误发生时，会自动通过指定的回调函数处理。在回调函数中抛出新的异常即可。</p></blockquote><h2 id="下列哪个-shell-函数的描述是正确的？"><a href="#下列哪个-shell-函数的描述是正确的？" class="headerlink" title="下列哪个 shell 函数的描述是正确的？"></a>下列哪个 shell 函数的描述是正确的？</h2><ul><li><code>A：shell 函数可以先调用后定义</code></li><li><code>shell 函数需使用关键字 function 定义</code></li><li><code>shell 函数内的变量可以声明为局部变量</code></li><li><code>shell 函数只能通过 return 返回值，1 是成功，0 是失败</code></li></ul><blockquote><p>正确答案：C<br>答案分析：shell 函数必须先定义在调用；声明时，无需使用关键字；通过 local 可以定义函数内的局部变量；shell 函数返回值，0 是成功，非 0 是错误，其他选项正确</p></blockquote><h2 id="下列关于全文检索技术的说法，不对的是："><a href="#下列关于全文检索技术的说法，不对的是：" class="headerlink" title="下列关于全文检索技术的说法，不对的是："></a>下列关于全文检索技术的说法，不对的是：</h2><ul><li>A: Solr 是新一代的全文检索组件，它比 Lucene 的搜索效率高很多，还能支持 HTTP 的访问方式，PHP 调用 Solr 也很方便。</li><li>B: MySQL 中把一个字段建立 FULLTEXT 索引，就可以实现全文检索，目前 MyISAM 和 InnoDB 的 table 都支持 FULLTEXT 索引。</li><li>C: Sphinx 是一个基于 SQL 的全文检索引擎，可以结合 MySQL 做全文搜索，它可以提供比数据库本身更专业的搜索功能。</li><li>D: Lucene 附带的二元分词分析器 CJKAnalyzer 切词速度很快，能满足一般的全文检索需要。</li></ul><blockquote><p>正确答案：A<br>答案分析： Solr 是新一代的全文检索组件，它基于 Lucene，所以说它比 Lucene 快就是胡扯 ：）</p></blockquote><h2 id="关于单例模式的说法，错误的是？"><a href="#关于单例模式的说法，错误的是？" class="headerlink" title="关于单例模式的说法，错误的是？"></a>关于单例模式的说法，错误的是？</h2><ul><li>A：单例模式的目的是确保在全局环境中，一个类只能有一个实例存在</li><li>B：单例模式一般要将构造函数设置为 private</li><li>C：只需要将构造函数设置为 private 即可确保全局中只有一个实例</li><li>D：连接数据库的功能通常用单例模式实现</li></ul><blockquote><p>正确答案：C<br>答案分析：构造函数设置为 private，仅能确保无法通过 new 创建新实例，但仍可以通过 clone、反序列化等方式创建多个实例。</p></blockquote><h2 id="正则的引擎表述错误的是？"><a href="#正则的引擎表述错误的是？" class="headerlink" title="正则的引擎表述错误的是？"></a>正则的引擎表述错误的是？</h2><ul><li>A: 正则引擎主要可以分为两大类：一种是 DFA，一种是 NFA。</li><li>B: 一般而论，NFA 引擎则搜索更快一些。但是 DFA 以表达式为主导，更容易操纵，因此一般程序员更偏爱 DFA 引擎！</li><li>C: NFA 表达式主导，DFA 文本主导.</li><li>D: 可以使用是否支持忽略优先量词和分组捕获来判断引擎类型：支持 NFA, 不支持 DFA</li></ul><blockquote><p>正确答案：B<br>答案分析：正确的说法应该是：一般而论，DFA 引擎则搜索更快一些。但是 NFA 以表达式为主导，更容易操纵，因此一般程序员更偏爱 NFA 引擎</p></blockquote><h2 id="下面哪个不是-XSS-漏洞的修复方式？"><a href="#下面哪个不是-XSS-漏洞的修复方式？" class="headerlink" title="下面哪个不是 XSS 漏洞的修复方式？"></a>下面哪个不是 XSS 漏洞的修复方式？</h2><ul><li>A: 对参数进行 htmlspecialchas 过滤</li><li>B: 对参数使用白名单过滤</li><li>C: 不允许输入的内容显示到浏览器</li><li>D: 禁止在 js 标签内输出用户输入的内容</li></ul><blockquote><p>正确答案：A<br>答案分析：这类过滤可以解决尖括号类型的 xss，无法解决 js 标签内的 xss</p></blockquote><h2 id="下列哪一项不是-PHP-SAPI-模式？"><a href="#下列哪一项不是-PHP-SAPI-模式？" class="headerlink" title="下列哪一项不是 PHP SAPI 模式？"></a>下列哪一项不是 PHP SAPI 模式？</h2><ul><li><code>A: ISAPI</code></li><li><code>B: CGI</code></li><li><code>C: FastCGI</code></li><li><code>D: RESTFUL API</code></li></ul><blockquote><p>正确答案：D<br>答案分析：A~C 是最常用的模式，D 是一种接口的组织方式。</p></blockquote><h2 id="对一个大文件进行逐行遍历，如下方法性能较高的是？"><a href="#对一个大文件进行逐行遍历，如下方法性能较高的是？" class="headerlink" title="对一个大文件进行逐行遍历，如下方法性能较高的是？"></a>对一个大文件进行逐行遍历，如下方法性能较高的是？</h2><ul><li>A：写一个实现了 IteratorAggregate 接口的类，通过该类使用 foreach 遍历。</li><li>B：使用 file_get_contents 将文件内容一次性载入内存，然后逐行遍历。</li><li>C：通过 exec 函数，调用 shell 工具遍历</li><li>D：使用别人写的类库</li></ul><blockquote><p>正确答案：A<br>答案分析：使用 IteratorAggregate 可将文件打开后通过移动指针的方式逐行遍历，不受文件大小影响。使用 file_get_contents 处理大文件很容易导致 PHP 内存溢出；调用 exec 会产生额外的进程，影响性能；其他人写的类库质量不一定高。</p></blockquote><h2 id="函数中如果使用了-try-catch-finally-语法结构，return-应该写在哪儿？"><a href="#函数中如果使用了-try-catch-finally-语法结构，return-应该写在哪儿？" class="headerlink" title="函数中如果使用了 try catch finally 语法结构，return 应该写在哪儿？"></a>函数中如果使用了 try catch finally 语法结构，return 应该写在哪儿？</h2><ul><li>A：finally 中</li><li>B：try 中</li><li>C：catch 中</li><li>D：任意位置</li></ul><blockquote><p>正确答案：A<br>答案分析：try 中 return 后 finally 会继续执行，如果 finally 中也有 return，则最终返回值为 finally 中 return 的值</p></blockquote><h2 id="以下关于-NOSQL-的说法，不对的是："><a href="#以下关于-NOSQL-的说法，不对的是：" class="headerlink" title="以下关于 NOSQL 的说法，不对的是："></a>以下关于 NOSQL 的说法，不对的是：</h2><ul><li>A: Redis 支持字符串、哈希、列表、集合、有序集合等数据结构，目前 Redis 不支持事务。</li><li>B: MongoDB 支持 CAP 定理中的 AP，MySQL 支持 CAP 中的 CA，全部都支持不可能存在</li><li>C: MongoDB 不用先创建 Collection 的结构就可以直接插入数据，目前 MongoDB 不支持事务。</li><li>D: Memcache 既支持 TCP 协议，也支持 UDP 协议，我们可以把 PHP 的 Session 存放到 Memcache 中。</li></ul><blockquote><p>正确答案：A<br>答案分析：Redis 支持事务。</p></blockquote><h2 id="Innodb-锁机制说法错误的是？"><a href="#Innodb-锁机制说法错误的是？" class="headerlink" title="Innodb 锁机制说法错误的是？"></a>Innodb 锁机制说法错误的是？</h2><ul><li>A：Innodb 提供了表锁与行锁两种锁机制</li><li>B：Innodb 的表锁所会在表变更的时候触发</li><li>C：Innodb 下 update 时会自动给涉及到的行加上排他锁，并创建出一个镜像副本， 此时进行 select 时查询的是镜像副本的数据</li><li>D：Innodb 行锁状态下读不受影响，写会受影响（涉及到的数据）</li></ul><blockquote><p>正确答案：A</p></blockquote><h2 id="在拆分之前，系统中很多列表和详情页所需的数据是可以通过-sql-join-来完成的。而拆分后，数据库可能是分布式在不同实例和不同的主机上，join-将变得非常麻烦。下面哪种方法不能有效解决这个问题？"><a href="#在拆分之前，系统中很多列表和详情页所需的数据是可以通过-sql-join-来完成的。而拆分后，数据库可能是分布式在不同实例和不同的主机上，join-将变得非常麻烦。下面哪种方法不能有效解决这个问题？" class="headerlink" title="在拆分之前，系统中很多列表和详情页所需的数据是可以通过 sql join 来完成的。而拆分后，数据库可能是分布式在不同实例和不同的主机上，join 将变得非常麻烦。下面哪种方法不能有效解决这个问题？"></a>在拆分之前，系统中很多列表和详情页所需的数据是可以通过 sql join 来完成的。而拆分后，数据库可能是分布式在不同实例和不同的主机上，join 将变得非常麻烦。下面哪种方法不能有效解决这个问题？</h2><ul><li>A: 全局表，系统中所有模块都可能会依赖到的一些表在各个库中都保存。</li><li>B: 字段冗余，“订单表” 中保存 “卖家 Id” 的同时，将卖家的 “Name” 字段也冗余，这样查询订单详情的时候就不需要再去查询 “卖家用户表”。</li><li>C: 主从复制，将数据库的读写分离。</li><li>D: 数据同步，定时 A 库中的 tbl_a 表和 B 库中 tbl_b 关联，可以定时将指定的表做主从同步。</li></ul><blockquote><p>正确答案：C<br>答案分析：主从复制，将数据库的读写分离。只能扩容读并发，并不能缓解跨库 join 的问题。</p></blockquote><h2 id="关于网络-IO-模型，下列哪一项是正确的？"><a href="#关于网络-IO-模型，下列哪一项是正确的？" class="headerlink" title="关于网络 IO 模型，下列哪一项是正确的？"></a>关于网络 IO 模型，下列哪一项是正确的？</h2><ul><li>A: Select 比 Epoll 更快</li><li>B: nginx 使用的是 select 模型</li><li>C: apache 支持 select 和 epoll 两种方式的切换</li><li>D: epoll 能支持更大的并发</li></ul><blockquote><p>正确答案：D<br>答案分析：A epoll 更快一些。B nginx 使用 epoll 模型。C apache 只支持 select</p></blockquote><h2 id="PHP-执行的时候有如下执行过程：Scanning-Lexing-Compilation-Execution-Parsing，其含义分别为："><a href="#PHP-执行的时候有如下执行过程：Scanning-Lexing-Compilation-Execution-Parsing，其含义分别为：" class="headerlink" title="PHP 执行的时候有如下执行过程：Scanning (Lexing) - Compilation - Execution - Parsing，其含义分别为："></a>PHP 执行的时候有如下执行过程：Scanning (Lexing) - Compilation - Execution - Parsing，其含义分别为：</h2><ul><li>A：将 PHP 代码转换为语言片段 (Tokens)、将 Tokens 转换成简单而有意义的表达式、将表达式编译成 Opocdes、顺次执行 Opcodes</li><li>B：将 PHP 代码转换为语言片段 (Tokens)、将 Tokens 转换成简单而有意义的表达式、顺次执行 Opcodes、将表达式编译成 Opocdes</li><li>C：将 PHP 代码转换为语言片段 (Tokens)、将表达式编译成 Opocdes、顺次执行 Opcodes、将 Tokens 转换成简单而有意义的表达式</li><li>D：将 PHP 代码转换为语言片段 (Tokens)、将表达式编译成 Opocdes、将 Tokens 转换成简单而有意义的表达式、顺次执行 Opcodes</li></ul><blockquote><p>正确答案：C<br>答案分析：正确答案为 C，正确的顺序为：Scanning (Lexing)、Parsing、Compilation、Execution</p></blockquote><h2 id="用PHP打印出前一天的时间-格式是-2019-11-26-22-21-21"><a href="#用PHP打印出前一天的时间-格式是-2019-11-26-22-21-21" class="headerlink" title="用PHP打印出前一天的时间; 格式是 2019-11-26 22:21:21"></a>用PHP打印出前一天的时间; 格式是 2019-11-26 22:21:21</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">var_dump(date(<span class="string">'Y-m-d H:i:s'</span>, strtotime(<span class="string">'yesterday'</span>)));</span><br><span class="line">var_dump(date(<span class="string">'Y-m-d H:i:s'</span>, strtotime(<span class="string">'-1 day'</span>)));</span><br></pre></td></tr></table></figure><h2 id="简单描述下Git的开发流程"><a href="#简单描述下Git的开发流程" class="headerlink" title="简单描述下Git的开发流程"></a>简单描述下Git的开发流程</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 初始化Git仓库</span><br><span class="line">git init</span><br><span class="line">// 拉取远程仓库</span><br><span class="line">git pull git@github.com:laravel/laravel.git</span><br><span class="line">// 创建分支</span><br><span class="line">git branch branch_name</span><br><span class="line">// 切换分支</span><br><span class="line">git checkout branch_name</span><br><span class="line">// 提交代码</span><br><span class="line">git add -A</span><br><span class="line">// 提交代码说明</span><br><span class="line">git commit -m '代码更新'</span><br><span class="line">// 查看状态</span><br><span class="line">git status</span><br><span class="line">// 添加远程地址</span><br><span class="line">git remote addorigin git@github.com:laravel/laravel.git</span><br><span class="line">// 同步代码到远程分支</span><br><span class="line">git push origin master</span><br><span class="line">// 查看git日志</span><br><span class="line">git log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'</span><br></pre></td></tr></table></figure><h2 id="var-empty-‘’"><a href="#var-empty-‘’" class="headerlink" title="var $empty = ‘’"></a>var $empty = ‘’</h2><blockquote><p>var $empty = ‘ ‘;<br>var $null = NULL;<br>var $bool = FALSE;<br>var $notSet;<br>var $array = array();</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>. $a = <span class="string">"hello"</span>;$b = &amp;$a; <span class="keyword">unset</span>($b);$b = <span class="string">"world"</span>;</span><br><span class="line">what is $a?</span><br></pre></td></tr></table></figure><blockquote><p>$a = “hello”</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>. $a = <span class="number">1</span>; $x = &amp;$a; $b = $a++;</span><br><span class="line">what is $b?</span><br></pre></td></tr></table></figure><blockquote><p>$b = 1</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>. $x = <span class="keyword">empty</span>($array);</span><br><span class="line">what is $x?</span><br></pre></td></tr></table></figure><blockquote><p>true</p></blockquote><h2 id="索引的作用-索引有什么优点和缺点"><a href="#索引的作用-索引有什么优点和缺点" class="headerlink" title="索引的作用? 索引有什么优点和缺点?"></a>索引的作用? 索引有什么优点和缺点?</h2><ul><li>索引的作用/优点</li></ul><blockquote><ul><li>创建索引可以大大提高系统的性能</li><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性</li><li>可以大大加快 数据的检索速度，这也是创建索引的最主要的原因。</li><li>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</li><li>在使用分组和排序 子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</li><li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ul></blockquote><ul><li>索引缺点</li></ul><blockquote><ul><li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</li><li>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</li></ul></blockquote><h2 id="什么是fpm-简单介绍php-fpm配置文件的相关参数"><a href="#什么是fpm-简单介绍php-fpm配置文件的相关参数" class="headerlink" title="什么是fpm? 简单介绍php-fpm配置文件的相关参数"></a>什么是fpm? 简单介绍php-fpm配置文件的相关参数</h2><blockquote><p>PHP FastCGI Process Manager 进程管理器</p></blockquote><ul><li>php-fpm 重要配置</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启</span><br><span class="line">pid = run/php-fpm.pid</span><br><span class="line"></span><br><span class="line">// 错误日志，默认在安装目录中的var/log/php-fpm.log</span><br><span class="line">error_log = log/php-fpm.log</span><br><span class="line"></span><br><span class="line">// 错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.</span><br><span class="line">log_level = notice</span><br><span class="line"></span><br><span class="line">// 表示在emergency<span class="emphasis">_restart_</span>interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency<span class="emphasis">_restart_</span>threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。</span><br><span class="line">emergency<span class="emphasis">_restart_</span>threshold = 60</span><br><span class="line">emergency<span class="emphasis">_restart_</span>interval = 60s</span><br><span class="line"></span><br><span class="line">// 设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.</span><br><span class="line">process<span class="emphasis">_control_</span>timeout = 0</span><br><span class="line"></span><br><span class="line">// 后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置</span><br><span class="line">daemonize = yes</span><br><span class="line"></span><br><span class="line">// fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: 'ip:port', 'port', '/path/to/unix/socket'. 每个进程池都需要设置.</span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line"></span><br><span class="line">// 启动进程的帐户和组启动进程的帐户和组</span><br><span class="line">user = www</span><br><span class="line">group = www</span><br><span class="line"></span><br><span class="line">// 对于专用服务器，pm可以设置为static。</span><br><span class="line">pm = dynamic</span><br><span class="line">// 如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：</span><br><span class="line">pm.max_children    // 子进程最大数</span><br><span class="line">pm.start_servers   // 启动时的进程数</span><br><span class="line">pm.min<span class="emphasis">_spare_</span>servers // 保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程</span><br><span class="line">pm.max<span class="emphasis">_spare_</span>servers // 保证空闲进程数最大值，如果空闲进程大于此值，此进行清理</span><br><span class="line"></span><br><span class="line">// FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到</span><br><span class="line">pm.status_path = /status</span><br><span class="line"></span><br><span class="line">// 设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的'max<span class="emphasis">_execution_</span>time'因为某些特殊原因没有中止运行的脚本有用. 设置为 '0' 表示 'Off'.当经常出现502错误时可以尝试更改此选项。</span><br><span class="line">request<span class="emphasis">_terminate_</span>timeout = 20  </span><br><span class="line"></span><br><span class="line">// #设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。</span><br><span class="line">rlimit_files = 1024</span><br></pre></td></tr></table></figure><h2 id="如何保证API到后端的幂等性"><a href="#如何保证API到后端的幂等性" class="headerlink" title="如何保证API到后端的幂等性"></a>如何保证API到后端的幂等性</h2><ul><li>什么是幂等性</li></ul><blockquote><p>Methods can also have the property of “idempotence” in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request.<br>– HTTP/1.1规范中幂等性的定义</p></blockquote><blockquote><p>从定义上看，HTTP 方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。说白了就是，<strong>同一个请求，发送一次和发送 N 次效果是一样的!</strong></p></blockquote><ul><li>HTTP的幂等性</li></ul><blockquote><ul><li><code>GET</code> 方法用于获取资源，不应有副作用，所以是幂等的。</li><li><code>DELETE</code> 方法用于删除资源，有副作用，但它应该满足幂等性</li><li><code>POST</code> 方法用于创建资源，所对应的 URI 并非创建的资源本身，而是去执行创建动作的操作者，有副作用，不满足幂等性。</li><li><code>PUT</code> 方法用于创建或更新操作，所对应的 URI 是要创建或更新的资源本身，有副作用，它应该满足幂等性。</li></ul></blockquote><h2 id="什么是CC攻击-如何防止CC攻击"><a href="#什么是CC攻击-如何防止CC攻击" class="headerlink" title="什么是CC攻击? 如何防止CC攻击?"></a>什么是CC攻击? 如何防止CC攻击?</h2><ul><li>什么是CC攻击 ?</li></ul><blockquote><p>CC 攻击是 DDoS 攻击的一种类型，使用代理服务器向受害服务器发送大量貌似合法的请求（通常使用 HTTP GET)。CC（Challenge Collapsar，挑战黑洞）根据其工具命名，攻击者创造性地使用代理机制，利用众多广泛可用的免费代理服务器发动 DDoS 攻击。许多免费代理服务器支持匿名模式，这使追踪变得非常困难。</p></blockquote><ul><li>如何防止CC攻击</li></ul><blockquote><ul><li><ol><li>服务器垂直扩展和水平扩容</li></ol></li><li><ol start="2"><li>数据缓存 (内存级别, 不要用文件)</li></ol></li><li><ol start="3"><li>页面静态化</li></ol></li><li><ol start="4"><li>用户级别的调用频率限制</li></ol></li><li><ol start="5"><li>IP限制</li></ol></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="笔试题" scheme="http://blog.caoxl.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Linux 笔试题 I</title>
    <link href="http://blog.caoxl.com/2019/11/13/Linux-DevOps-Numercal-Test/"/>
    <id>http://blog.caoxl.com/2019/11/13/Linux-DevOps-Numercal-Test/</id>
    <published>2019-11-13T06:13:12.000Z</published>
    <updated>2019-11-13T08:33:43.916Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h2 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h2><h3 id="系统安全"><a href="#系统安全" class="headerlink" title="系统安全"></a>系统安全</h3><blockquote><ul><li><code>sudo</code>  // 超级用户</li><li><code>su</code>  // 用于切换当前用户身份到其他身份，变更时需输入所要变更的用户账号与密码。</li><li><code>chmod</code>  // 用来变更文件或目录的权限</li><li><code>setfacl</code>  // 设置文件访问控制列表</li></ul></blockquote><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><blockquote><ul><li><code>w</code>  // 用于显示已经登陆系统的用户列表，并显示用户正在执行的指令。</li><li><code>top</code> // 可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具。</li><li><code>ps</code>  // 用于报告当前系统的进程状态。</li><li><code>kill</code>  // 可以按照进程名杀死进程。</li><li><code>pstree</code>  // 以树状图的方式展现进程之间的派生关系，显示效果比较直观。</li><li><code>killall</code>  // 使用进程的名称来杀死进程，使用此指令可以杀死一组同名进程。</li></ul></blockquote><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><blockquote><ul><li><code>id</code>  // 可以显示真实有效的用户ID（UID）和组ID（GID）。</li><li><code>usermod</code>  //  用于修改用户的基本信息。</li><li><code>useradd</code>  // 用于 Linux中创建的新的系统用户。</li><li><code>groupadd</code>  // 用于创建一个新的工作组，新工作组的信息将被添加到系统文件中。</li><li><code>userdel</code>  // 用户删除给定的用户，以及与用户相关的文件。</li></ul></blockquote><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><blockquote><ul><li><code>mount</code>  // 用户加载文件系统到指定的加载点。</li><li><code>unmount</code>  // 用于卸载已经加载的文件。</li><li><code>fsck</code>  // 用于检查并且试图修复文件系统中的错误。</li><li><code>df</code>  // 用于显示磁盘分区上的可使用的磁盘空间。</li><li><code>du</code>  // 对文件和目录磁盘使用的空间的查看。</li></ul></blockquote><h3 id="系统关机和重启"><a href="#系统关机和重启" class="headerlink" title="系统关机和重启"></a>系统关机和重启</h3><blockquote><ul><li><code>shutdown</code>  // 关机</li><li><code>reboot</code>  // 重启</li></ul></blockquote><h3 id="网络应用"><a href="#网络应用" class="headerlink" title="网络应用"></a>网络应用</h3><blockquote><ul><li><code>curl</code>  // 是一个利用URL规则在命令行下工作的文件传输工具。</li><li><code>telnet</code>  // 用于登录远程主机，对远程主机进行管理。</li><li><code>mail</code>  // 命令行的电子邮件发送和接收工具。</li><li><code>elinks</code>  // 能实现一个纯文本界面的WWW浏览器</li></ul></blockquote><h3 id="网络测试"><a href="#网络测试" class="headerlink" title="网络测试"></a>网络测试</h3><blockquote><ul><li><code>ping</code>  // 用于测试主机之间网络的连通性。</li><li><code>netstat</code>  // 用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况。</li><li><code>host</code>  // 常用的分析域名查询工具，可以用来测试域名系统工作是否正常。</li></ul></blockquote><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><blockquote><ul><li><code>hostname</code>  // 用于显示和设置系统的主机名称。</li><li><code>ifconfig</code>  //  被用于配置和显示Linux内核中网络接口的网络参数。</li></ul></blockquote><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><blockquote><ul><li><code>ssh</code>  // openssh套件中的客户端连接工具，可以给予ssh加密协议实现安全的远程登录服务器。</li><li><code>screen</code>  // 是一款由GNU计划开发的用于命令行终端切换的自由软件。</li><li><code>clear</code>  // 用于清除当前屏幕终端上的任何信息。</li><li><code>who</code>  // 显示当前登录系统的用户信息。</li><li><code>date</code>  // 显示或设置系统时间与日期。</li></ul></blockquote><h3 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h3><blockquote><ul><li><code>yum</code>  // 提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</li><li><code>rpm</code>  //  rpm软件包的管理工具。</li><li><code>apt-get</code>  // Debian Linux发行版中的APT软件包管理工具。所有基于Debian的发行都使用这个包管理系统。deb包可以把一个应用的文件包在一起，大体如同 Windows上的安装文件。</li></ul></blockquote><h3 id="文件查找和比较"><a href="#文件查找和比较" class="headerlink" title="文件查找和比较"></a>文件查找和比较</h3><blockquote><ul><li><code>locate</code>  // 用来查找文件或目录。</li><li><code>find</code>  // 用来在指定目录下查找文件。</li></ul></blockquote><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><blockquote><ul><li><code>head</code>  // 用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。</li><li><code>tail</code>  // 用于输入文件中的尾部内容。tail命名默认在屏幕上显示指定文件的末尾10行。</li><li><code>more</code>  // 用来浏览文件档案的内容（只能向前浏览）。</li><li><code>less</code>  // 用来浏览文字档案的内容，允许用户向前或向后浏览文件。使用该命令时，用PageUp键向上翻页，用PageDown键向下翻页。要退出less程序，应按Q键。</li></ul></blockquote><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><blockquote><ul><li><code>unlink</code>  // 用于系统调用函数 unlink 去删除指定的文件。</li><li><code>rename</code>  // 用字符串替换的方式批量改变文件名。</li><li><code>cat</code>  // 连接文件并打印到标准输出设备上，cat经常用来显示文件的内容。</li><li><code>touch</code>  // 有两个功能：一是用于把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来；二是用来创建新的空文件。</li><li><code>ln</code>  // 用来为文件创建连接，连接类型分为硬连接和符号连接两种，默认的连接类型是硬连接。如果要创建符号连接必须使用”-s”选项（注意：符号链接文件不是一个独立的文件，它的许多属性依赖于源文件，所以给符号链接文件设置存取权限时没有意义的）</li></ul></blockquote><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><blockquote><ul><li><code>cd</code>  // 用来切换工作目录至 dirname。</li><li><code>mv</code>  // 用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。</li><li><code>rm</code>  // 可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。</li><li><code>pwd</code>  // 以绝对路径的方式显示用户当前工作目录。</li><li><code>tree</code>  // 以树状图列出目录的内容。</li><li><code>cp</code>  // 用来将一个或过个源文件或者目录复制到指定的目的文件或目录</li><li><code>ls</code>  // 用来显示目录列表，在 Linux中是使用率较高的命令。ls命令的输出信息可以进行彩色加亮显示，以区分不同类型的文件。</li></ul></blockquote><h3 id="文件权限属性"><a href="#文件权限属性" class="headerlink" title="文件权限属性"></a>文件权限属性</h3><blockquote><ul><li><code>setfacl</code>  // 用来变更文件或目录的权限。</li><li><code>chmod</code>  // 设置文件访问控制列表。</li><li><code>chgrp</code>  // 用来改变文件或目录所属的用户组。</li><li><code>chown</code>  // 改变某个文件或目录的所有者和所属的组，该命令可以向某个用户授权，使该用户变成指定文件的所有者。</li></ul></blockquote><h3 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h3><blockquote><ul><li><code>ftp</code>  // 用来设置文件系统相关功能。</li><li><code>scp</code>  //  用于在Linux下远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。</li></ul></blockquote><h2 id="Linux系统定时任务"><a href="#Linux系统定时任务" class="headerlink" title="Linux系统定时任务"></a>Linux系统定时任务</h2><h3 id="crontab-命令"><a href="#crontab-命令" class="headerlink" title="crontab 命令"></a><code>crontab</code> 命令</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">contab -e       <span class="comment">// 创建定时任务</span></span><br><span class="line">* * * * * 命令  <span class="comment">// 分、时、日、月、周（每过多长时间去执行，根据我们所设置的分、时、日、月、周）</span></span><br></pre></td></tr></table></figure><h3 id="at-命令"><a href="#at-命令" class="headerlink" title="at 命令"></a><code>at</code> 命令</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># at 2:00 tomorrow  // 在明天的两点去执行</span></span><br><span class="line">at&gt;/home/Jason/do_job <span class="comment">// 执行结果是这种格式的</span></span><br><span class="line">at&gt;Ctrl + D <span class="comment">// 退出</span></span><br><span class="line"></span><br><span class="line">总体意思，明天两点执行 do_job，最终退出</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>at</code> 命令 是一次性执行，不是循环执行，也不是周期性执行。</p></blockquote><h2 id="面试-笔试题"><a href="#面试-笔试题" class="headerlink" title="面试/笔试题"></a>面试/笔试题</h2><h3 id="获取文件行数"><a href="#获取文件行数" class="headerlink" title="获取文件行数"></a>获取文件行数</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc-l filename</span><br></pre></td></tr></table></figure><h3 id="输入文件的最后5行到另一个文件中"><a href="#输入文件的最后5行到另一个文件中" class="headerlink" title="输入文件的最后5行到另一个文件中"></a>输入文件的最后5行到另一个文件中</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -n 5 file1 &gt;&gt; file2</span><br></pre></td></tr></table></figure><h3 id="查找文件中包含hello的行"><a href="#查找文件中包含hello的行" class="headerlink" title="查找文件中包含hello的行"></a>查找文件中包含hello的行</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep hello filename</span><br></pre></td></tr></table></figure><h3 id="查找当前目录下所有目录名为var的子目录的命令"><a href="#查找当前目录下所有目录名为var的子目录的命令" class="headerlink" title="查找当前目录下所有目录名为var的子目录的命令"></a>查找当前目录下所有目录名为<code>var</code>的子目录的命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./var -maxdepth 1 -type d -print</span><br></pre></td></tr></table></figure><h3 id="如何让一个程序在后台运行并把输入定向到指定的文件"><a href="#如何让一个程序在后台运行并把输入定向到指定的文件" class="headerlink" title="如何让一个程序在后台运行并把输入定向到指定的文件"></a>如何让一个程序在后台运行并把输入定向到指定的文件</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup 程序 &gt;&gt; 文件名 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h3 id="如何实时的显示一个文件的输出"><a href="#如何实时的显示一个文件的输出" class="headerlink" title="如何实时的显示一个文件的输出"></a>如何实时的显示一个文件的输出</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用more或者less</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">tail -100f // 实时显示输出的后100行</span><br></pre></td></tr></table></figure><h3 id="查看所有用户"><a href="#查看所有用户" class="headerlink" title="查看所有用户"></a>查看所有用户</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="有mail-log的一个文档，内容为若干邮件地址，其中用’-n’将邮件地址分隔。要求从中"><a href="#有mail-log的一个文档，内容为若干邮件地址，其中用’-n’将邮件地址分隔。要求从中" class="headerlink" title="有mail.log的一个文档，内容为若干邮件地址，其中用’\n’将邮件地址分隔。要求从中"></a>有mail.log的一个文档，内容为若干邮件地址，其中用’\n’将邮件地址分隔。要求从中</h3><blockquote><p>有mail.log的一个文档，内容为若干邮件地址，其中用’\n’将邮件地址分隔。要求从中<br>挑选出sina.com的邮件地址（包括从文件读取、过滤到列印出来）。<br>  mail.log内容如下：<br>  <a href="mailto:james@sina.com.cn" target="_blank" rel="noopener">james@sina.com.cn</a><br>  <a href="mailto:jack@163.com" target="_blank" rel="noopener">jack@163.com</a><br>  <a href="mailto:zhansan@sohu.com" target="_blank" rel="noopener">zhansan@sohu.com</a><br>  <a href="mailto:lisi@hotmail.com" target="_blank" rel="noopener">lisi@hotmail.com</a><br>  <a href="mailto:wangwu@gmail.com" target="_blank" rel="noopener">wangwu@gmail.com</a></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat mail.log | grep sina.com</span><br></pre></td></tr></table></figure><h3 id="请解释下列10个shell命令的用途"><a href="#请解释下列10个shell命令的用途" class="headerlink" title="请解释下列10个shell命令的用途"></a>请解释下列10个shell命令的用途</h3><blockquote><p>top、ps、mv、find、df、cat、chmod、chgrp、grep、wc</p></blockquote><ul><li><code>top</code>: 该命令提供了实时对系统处理器状态的监控，它能够实时显示系统中各个进程的资源占用情况。</li><li><code>ps</code>: 显示系统进程在瞬间的运行动态。</li><li><code>mv</code>: 文件/目录改名或变更存储位置</li><li><code>find</code>: 在指定的路径下查找指定文件。</li><li><code>df</code>: 检查磁盘空间占用情况。</li><li><code>cat</code>: 将文件的内容打印到标准输出。</li><li><code>chmod</code>: 改变文件的权限。</li><li><code>chgrp</code>: 改变文件所属组</li><li><code>grep</code>: 过滤文本，根据指定的字符串，对文件的每一行进行搜索，如找到，则输出该行内容。</li><li><code>wc</code>: 统计指定文件中的字节数、字数、行数，并将统计结果显示输出。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="Linux" scheme="http://blog.caoxl.com/tags/Linux/"/>
    
      <category term="运维笔试题" scheme="http://blog.caoxl.com/tags/%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
