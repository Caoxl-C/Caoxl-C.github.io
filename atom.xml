<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep It Simple And Stupid</title>
  
  <subtitle>Caoxl-Hexo-caoxl.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.caoxl.com/"/>
  <updated>2021-12-24T09:58:25.569Z</updated>
  <id>http://blog.caoxl.com/</id>
  
  <author>
    <name>CAO XIAN LIANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis缓存那点破事</title>
    <link href="http://blog.caoxl.com/2021/12/24/Redis-Something/"/>
    <id>http://blog.caoxl.com/2021/12/24/Redis-Something/</id>
    <published>2021-12-24T08:51:06.000Z</published>
    <updated>2021-12-24T09:58:25.569Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>转载, 原文地址<a href="https://blog.csdn.net/itomge/article/details/122118060" target="_blank" rel="noopener">Redis缓存那点破事 ， 绝杀面试官 25 问</a></p></blockquote><a id="more"></a><h2 id="Redis-有哪些特性？"><a href="#Redis-有哪些特性？" class="headerlink" title="Redis 有哪些特性？"></a>Redis 有哪些特性？</h2><ul><li>性能高， 读的速度是100000次/s，写的速度是80000次/s</li><li>数据持久化，支持RDB 、AOF</li><li>支持事务。通过<code>MULTI</code>和<code>EXEC</code>指令包起来。</li><li>多种数据结构类型</li><li>主从复制</li><li>其他特性：发布/订阅、通知、key过期等</li></ul><h2 id="Redis-为什么这么快？"><a href="#Redis-为什么这么快？" class="headerlink" title="Redis 为什么这么快？"></a>Redis 为什么这么快？</h2><ul><li>完全基于内存，没有磁盘IO上的开销，异步持久化除外</li><li>单线程，避免多个线程切换的性能损耗</li><li>非阻塞的IO多路复用机制</li><li>底层的数据存储结构优化，使用原生的数据结构提升性能。</li></ul><h2 id="Redis-底层的基础数据结构有哪些？"><a href="#Redis-底层的基础数据结构有哪些？" class="headerlink" title="Redis 底层的基础数据结构有哪些？"></a>Redis 底层的基础数据结构有哪些？</h2><ul><li>字符串。没有采用C语言的传统字符串，而是自己实现的一个简单动态字符串SDS的抽象类型，并保存了长度信息。</li><li>链表（linkedlist）。双向无环链表结构，每个链表的节点由一个listNode结构来表示，每个节点都有前置和后置节点的指针</li><li>字典（hashtable）。保存键值对的抽象数据结构，底层使用hash表，每个字典带有两个hash表，供平时使用和rehash时使用。</li><li>跳跃表（skiplist）。跳跃表是有序集合的底层实现之一。redis跳跃表由zskiplist和zskiplistNode组成，zskiplist用于保存跳跃表 信息(表头、表尾节点、⻓度等)，zskiplistNode用于表示表跳跃节点，每个跳跃表的层高都是1- 32的随机数，在同一个跳跃表中，多个节点可以包含相同的分值，但是每个节点的成员对象必须是唯一的，节点按照分值大小排序，如果分值相同，则按照成员对象的大小排序。</li><li>整数集合（intset）。用于保存整数值的集合抽象数据结构，不会出现重复元素，底层实现为数组。</li><li>压缩列表（ziplist）。为节约内存而开发的顺序性数据结构，可以包含多个节点，每个节点可以保存一个字节数组或者整数值。</li></ul><h2 id="Redis-支持哪些数据类型？"><a href="#Redis-支持哪些数据类型？" class="headerlink" title="Redis 支持哪些数据类型？"></a>Redis 支持哪些数据类型？</h2><p>五种常用数据类型：<code>String</code>、<code>Hash</code>、<code>Set</code>、<code>List</code>、<code>SortedSet</code>。三种特殊的数据类型：<code>Bitmap</code>、<code>HyperLogLog</code>、<code>Geospatial</code>，其中<code>Bitmap</code>、<code>HyperLogLog</code>的底层都是 <code>String</code> 数据类型，<code>Geospatial</code> 底层是 <code>Sorted Set</code> 数据类型。</p><ul><li>字符串对象string：int整数、embstr编码的简单动态字符串、raw简单动态字符串</li><li>列表对象list：ziplist、linkedlist</li><li>哈希对象hash：ziplist、hashtable</li><li>集合对象set：intset、hashtable</li><li>有序集合对象zset：ziplist、skiplist</li></ul><h2 id="Redis-常用的-5-种数据结构和应用场景？"><a href="#Redis-常用的-5-种数据结构和应用场景？" class="headerlink" title="Redis 常用的 5 种数据结构和应用场景？"></a>Redis 常用的 5 种数据结构和应用场景？</h2><ul><li><code>String</code>：缓存、计数器、分布式锁等</li><li><code>List</code>：链表、队列、微博关注人时间轴列表等</li><li><code>List</code>：链表、队列、微博关注人时间轴列表等</li><li><code>Set</code>：去重、赞、踩、共同好友等</li><li><code>Zset</code>：访问量排行榜、点击量排行榜等</li></ul><h2 id="为什么采用单线程？"><a href="#为什么采用单线程？" class="headerlink" title="为什么采用单线程？"></a>为什么采用单线程？</h2><p>官方回复，CPU不会成为Redis的制约瓶颈，Redis主要受内存、网络限制。例如，在一个普通的 Linux 系统上，使用pipelining 可以每秒传递 100 万个请求，所以如果您的应用程序主要使用 O(N) 或 O(log(N)) 命令，则几乎不会使用太多 CPU，属于IO密集型系统。</p><h2 id="Redis-6-0-之后又改用多线程呢"><a href="#Redis-6-0-之后又改用多线程呢" class="headerlink" title="Redis 6.0 之后又改用多线程呢?"></a>Redis 6.0 之后又改用多线程呢?</h2><p>Redis的多线程主要是处理数据的读写、协议解析。执行命令还是采用单线程顺序执行。</p><p>主要是因为redis的性能瓶颈在于网络IO而非CPU，使用多线程进行一些周边预处理，提升了IO的读写效率，从而提高了整体的吞吐量。antirez 在 RedisConf 2019 分享时提到，Redis 6 引入的多线程 IO 对性能提升至少一倍以上。</p><h2 id="过期键Key-的删除策略有哪些？"><a href="#过期键Key-的删除策略有哪些？" class="headerlink" title="过期键Key 的删除策略有哪些？"></a>过期键Key 的删除策略有哪些？</h2><p>有3种过期删除策略。惰性删除、定期删除、定时删除</p><ul><li><code>惰性删除</code>。使用key时才进行检查，如果已经过期，则删除。缺点：过期的key如果没有被访问到，一直无法删除，一直占用内存，造成空间浪费。</li><li><code>定期删除</code>。每隔一段时间做一次检查，删除过期的key，每次只是随机取一些key去检查。</li><li><code>定时删除</code>。为每个key设置过期时间，同时创建一个定时器。一旦到期，立即执行删除。缺点：如果过期键比较多时，占用CPU较多，对服务的性能有很大影响。</li></ul><h2 id="如果Redis的内存空间不足，淘汰机制"><a href="#如果Redis的内存空间不足，淘汰机制" class="headerlink" title="如果Redis的内存空间不足，淘汰机制?"></a>如果Redis的内存空间不足，淘汰机制?</h2><ul><li><code>volatile-lru</code>：从已设置过期时间的key中，移出最近最少使用的key进行淘汰</li><li><code>allkeys-lru</code>：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）</li><li><code>volatile-ttl</code>：从已设置过期时间的key中，移出将要过期的key</li><li><code>volatile-random</code>：从已设置过期时间的key中，随机选择key淘汰</li><li><code>allkeys-random</code>：从key中随机选择key进行淘汰</li><li><code>no-eviction</code>：禁止淘汰数据。当内存达到阈值的时候，新写入操作报错</li><li><code>volatile-lfu</code>：从已设置过期时间的数据集(server.db[i].expires)中挑选最不经常使用的数据淘汰(LFU(Least Frequently Used)算法，也就是最频繁被访问的数据将来最有可能被访问到)</li><li><code>allkeys-lfu</code>：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的key。</li></ul><h2 id="Redis-突然挂了怎么解决？"><a href="#Redis-突然挂了怎么解决？" class="headerlink" title="Redis 突然挂了怎么解决？"></a>Redis 突然挂了怎么解决？</h2><ul><li>从系统可用性角度思考，Redis Cluster引入主备机制，当主节点挂了后，自动切换到备用节点，继续提供服务</li><li>Client端引入本地缓存，通过开关切换，避免Redis突然挂掉，高并发流量把数据库打挂。</li></ul><h2 id="Redis-持久化有哪些方式？"><a href="#Redis-持久化有哪些方式？" class="headerlink" title="Redis 持久化有哪些方式？"></a>Redis 持久化有哪些方式？</h2><ul><li>快照<code>RDB</code>。将某个时间点上的数据库状态保存到<code>RDB</code>文件中，<code>RDB</code>文件是一个压缩的二进制文件，保存在磁盘上。当Redis崩溃时，可用于恢复数据。通过<code>SAVE</code>或<code>BGSAVE</code>来生成<code>RDB</code>文件。<ul><li><code>SAVE</code>：会阻塞redis进程，直到RDB文件创建完毕，在进程阻塞期间，redis不能处理任何命令请求。</li><li><code>BGSAVE</code>：会fork出一个子进程，然后由子进程去负责生成RDB文件，父进程还可以继续处理命令请求，不会阻塞进程。</li></ul></li><li>只追加文件<code>AOF</code>。以日志的形式记录每个写操作（非读操作）。当不同节点同步数据时，读取日志文件的内容将写指令从前到后执行一次，即可完成数据恢复。</li></ul><h2 id="Redis-常用场景"><a href="#Redis-常用场景" class="headerlink" title="Redis 常用场景"></a>Redis 常用场景</h2><ul><li>1、缓存，有句话说的好，「性能不够，缓存来凑」</li><li>2、分布式锁，利用Redis 的 <code>setnx</code></li><li>3、分布式session</li><li>4、计数器，通过incr命令</li><li>5、排行榜，Redis 的 有序集合</li><li>6、其他</li></ul><h2 id="Redis-缓存要注意的七大经典问题？"><a href="#Redis-缓存要注意的七大经典问题？" class="headerlink" title="Redis 缓存要注意的七大经典问题？"></a>Redis 缓存要注意的七大经典问题？</h2><p>列举了亿级系统，高访问量情况下Redis缓存可能会遇到哪些问题？以及对应的解决方案。</p><ul><li>1、缓存集中失效</li><li>2、缓存穿透</li><li>3、缓存雪崩</li><li>4、缓存热点</li><li>5、缓存大Key</li><li>6、缓存数据的一致性</li><li>7、数据并发竞争预热</li></ul><h2 id="Redis-集群方案有哪几种？"><a href="#Redis-集群方案有哪几种？" class="headerlink" title="Redis 集群方案有哪几种？"></a>Redis 集群方案有哪几种？</h2><ul><li>主从复制模式</li><li>Sentinel（哨兵）模式</li><li>Redis Cluster模式</li></ul><h2 id="Redis-主从数据同步（主从复制）的过程？"><a href="#Redis-主从数据同步（主从复制）的过程？" class="headerlink" title="Redis 主从数据同步（主从复制）的过程？"></a>Redis 主从数据同步（主从复制）的过程？</h2><ul><li>1、slave启动后，向master发送sync命令</li><li>2、master收到sync之后，执行bgsave保存快照，生成RDB全量文件</li><li>3、master把slave的写命令记录到缓存</li><li>4、bgsave执行完毕之后，发送RDB文件到slave，slave执行</li><li>5、master发送缓冲区的写命令给slave，slave接收命令并执行，完成复制初始化。</li><li>6、此后，master每次执行一个写命令都会同步发送给slave，保持master与slave之间数据的一致性</li></ul><h2 id="主从复制的优缺点？"><a href="#主从复制的优缺点？" class="headerlink" title="主从复制的优缺点？"></a>主从复制的优缺点？</h2><ul><li>优点:<ul><li>master能自动将数据同步到slave，可以进行读写分离，分担master的读压力</li><li>master、slave之间的同步是以非阻塞的方式进行的，同步期间，客户端仍然可以提交查询或更新请求</li></ul></li><li>缺点:<ul><li>不具备自动容错与恢复功能，master 节点宕机后，需要手动指定新的 master</li><li>master宕机，如果宕机前数据没有同步完，则切换IP后会存在数据不一致的问题</li><li>难以支持在线扩容，Redis的容量受限于单机配置</li></ul></li></ul><h2 id="Sentinel（哨兵）模式的优缺点？"><a href="#Sentinel（哨兵）模式的优缺点？" class="headerlink" title="Sentinel（哨兵）模式的优缺点？"></a>Sentinel（哨兵）模式的优缺点？</h2><p>哨兵模式基于主从复制模式，增加了<strong>哨兵来监控</strong>与<strong>自动处理故障</strong>。</p><ul><li>优点:<ul><li>哨兵模式基于主从复制模式，所以主从复制模式有的优点，哨兵模式也有</li><li>master 挂掉可以自动进行切换，系统可用性更高</li></ul></li><li>缺点:<ul><li>Redis的容量受限于单机配置</li><li>需要额外的资源来启动sentinel进程</li></ul></li></ul><h2 id="Redis-Cluster-模式的优缺点？"><a href="#Redis-Cluster-模式的优缺点？" class="headerlink" title="Redis Cluster 模式的优缺点？"></a>Redis Cluster 模式的优缺点？</h2><p>实现了Redis的分布式存储，即每台节点存储不同的内容，来解决在线扩容的问题。</p><ul><li>优点:<ul><li>无中心架构，数据按照slot分布在多个节点</li><li>集群中的每个节点都是平等的，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据。</li><li>可线性扩展到1000多个节点，节点可动态添加或删除</li><li>能够实现自动故障转移，节点之间通过gossip协议交换状态信息，用投票机制完成slave到master的角色转换</li></ul></li><li>缺点<ul><li>数据通过异步复制，不保证数据的强一致性</li><li>slave充当 “冷备”，不对外提供读、写服务，只作为故障转移使用。</li><li>批量操作限制，目前只支持具有相同slot值的key执行批量操作，对mset、mget、sunion等操作支持不友好</li><li>key事务操作支持有限，只支持多key在同一节点的事务操作，多key分布在不同节点时无法使用事务功能</li><li>不支持多数据库空间，一台redis可以支持16个db，集群模式下只能使用一个，即db 0。Redis Cluster模式不建议使用pipeline和multi-keys操作，减少max redirect产生的场景。</li></ul></li></ul><h2 id="Redis-如何做扩容？"><a href="#Redis-如何做扩容？" class="headerlink" title="Redis 如何做扩容？"></a>Redis 如何做扩容？</h2><p>为了避免数据迁移失效，通常使用一致性哈希实现动态扩容缩容，有效减少需要迁移的Key数量。</p><p>但是Cluster 模式，采用固定Slot槽位方式（16384个），对每个key计算CRC16值，然后对16384取模，然后根据slot值找到目标机器，扩容时，我们只需要迁移一部分的slot到新节点即可。</p><h2 id="Redis-的集群原理"><a href="#Redis-的集群原理" class="headerlink" title="Redis 的集群原理?"></a>Redis 的集群原理?</h2><p>一个redis集群由多个节点<code>node</code>组成，而多个<code>node</code>之间通过<code>cluster meet</code>命令来进行连接，组成一个集群。</p><p>数据存储通过分片的形式，整个集群分成了<code>16384</code>个slot，每个节点负责一部分槽位。整个槽位的信息会同步到所有节点中。</p><p>key与slot的映射关系：</p><ul><li>健值对 key，进行 <code>CRC16</code> 计算，计算出一个 16 bit 的值</li><li>将 16 bit 的值对 16384 取模，得到 0 ～ 16383 的数表示 key 对应的哈希槽</li></ul><h2 id="Redis-如何做到高可用？"><a href="#Redis-如何做到高可用？" class="headerlink" title="Redis 如何做到高可用？"></a>Redis 如何做到高可用？</h2><p>哨兵机制。具有自动故障转移、集群监控、消息通知等功能。</p><p>哨兵可以同时监视所有的主、从服务器，当某个master下线时，自动提升对应的slave为master，然后由新master对外提供服务。</p><h2 id="什么是-Redis-事务？"><a href="#什么是-Redis-事务？" class="headerlink" title="什么是 Redis 事务？"></a>什么是 Redis 事务？</h2><p>Redis事务是一组命令的集合，将多个命令打包，然后把这些命令按顺序添加到队列中，并且按顺序执行这些命令。</p><p>Redis事务中没有像Mysql关系型数据库事务隔离级别的概念，不能保证原子性操作，也没有像Mysql那样执行事务失败会进行回滚操作</p><h2 id="Redis-事务执行流程？"><a href="#Redis-事务执行流程？" class="headerlink" title="Redis 事务执行流程？"></a>Redis 事务执行流程？</h2><p>通过<code>MULTI</code>、<code>EXEC</code>、<code>WATCH</code>等命令来实现事务机制，事务执行过程将一系列多个命令按照顺序一次性执行，在执行期间，事务不会被中断，也不会去执行客户端的其他请求，直到所有命令执行完毕。</p><p>具体过程：</p><ul><li>服务端收到客户端请求，事务以<code>MULTI</code>开始</li><li>如果正处于事务状态时，则会把后续命令放入队列同时返回给客户端<code>QUEUED</code>，反之则直接执行这 个命令</li><li>当收到客户端的<code>EXEC</code>命令时，才会将队列里的命令取出、顺序执行，执行完将当前状态从事务状态改为非事务状态</li><li>如果收到 <code>DISCARD</code> 命令，放弃执行队列中的命令，可以理解为Mysql的回滚操作，并且将当前的状态从事务状态改为非事务状态</li></ul><h2 id="如何实现一个分布式锁？"><a href="#如何实现一个分布式锁？" class="headerlink" title="如何实现一个分布式锁？"></a>如何实现一个分布式锁？</h2><ul><li>1、数据库表，性能比较差</li><li>2、使用Lua脚本 (包含 SETNX + EXPIRE 两条指令)</li><li>3、SET的扩展命令（SET key value [EX][PX] [NX|XX]）</li><li>4、Redlock 框架</li><li>5、Zookeeper Curator框架提供了现成的分布式锁</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载, 原文地址&lt;a href=&quot;https://blog.csdn.net/itomge/article/details/122118060&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redis缓存那点破事 ， 绝杀面试官 25 问&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://blog.caoxl.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://blog.caoxl.com/tags/PHP/"/>
    
      <category term="Redis" scheme="http://blog.caoxl.com/tags/Redis/"/>
    
      <category term="缓存" scheme="http://blog.caoxl.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 再深入 II</title>
    <link href="http://blog.caoxl.com/2021/07/07/RabbitMQ-Learn-More-II/"/>
    <id>http://blog.caoxl.com/2021/07/07/RabbitMQ-Learn-More-II/</id>
    <published>2021-07-07T02:00:57.000Z</published>
    <updated>2021-07-07T07:42:04.752Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>之前有多篇RabbitMQ的学习, 实践是检验真理的唯一标准, 所以本篇是实践篇<br><a href="https://blog.caoxl.com/2019/08/07/Message-Queue-RabbitMQ/">消息队列之 RabbitMQ</a><br><a href="https://blog.caoxl.com/2020/04/03/RabbitMq-Actual-Combat-1/">RabbitMQ 实战记录</a><br><a href="https://blog.caoxl.com/2020/04/08/RabbitMQ-Learn-More/">RabbitMq 再深入</a></p></blockquote><a id="more"></a><h1 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.1 建立连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> AMQPStreamConnection($host, $port, $user, $password, $vhost);</span><br></pre></td></tr></table></figure><ul><li><code>$host</code>:  RabbitMQ服务器主机ID地址</li><li><code>$port</code>:  RabbitMQ服务器端口</li><li><code>$user</code>:  连接RabbitMQ服务器的用户名</li><li><code>$password</code>:  连接RabbitMQ服务器的用户密码</li><li><code>$vhost</code>: 连接RabbitMQ服务器的vhost(服务器可以有多个vhost，虚拟主机，类似nginx的vhost)</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 1.2 建立信道</span><br><span class="line">$channel = $conn-&gt;channel($channel_id);</span><br></pre></td></tr></table></figure><ul><li><code>$channel_id</code>:  信道ID, 不传则获取$channel[“”]信道,再无则循环$this-&gt;channel数组，下标从1到最大信道数找第一个不是<code>AMQPChannel</code>对象的下标，实例化并返回<code>AMQPChannel</code>对象，无则抛出异常<code>No free channel ids</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.3 声明交换机</span></span><br><span class="line">$channel-&gt;exchange_declare(</span><br><span class="line">    $exchange_name,</span><br><span class="line">    $type,</span><br><span class="line">    $passive = <span class="keyword">false</span>,</span><br><span class="line">    $durable = <span class="keyword">false</span>,</span><br><span class="line">    $auto_delete = <span class="keyword">false</span>,</span><br><span class="line">    $internal = <span class="keyword">false</span>,</span><br><span class="line">    $nowait = <span class="keyword">false</span>,</span><br><span class="line">    $arguments = <span class="keyword">array</span>(),</span><br><span class="line">    $ticket = <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>$exchange_name</code>:  交换机名称</li><li><code>$type</code>:  交换机类型<ul><li><code>direct</code>: (默认)直接交换器，工作方式类似于单播，<code>exchange</code>会将消息发送完全匹配<code>route_key</code>的<code>queue</code>;</li><li><code>fanout</code>: 广播式交换器，不管消息的<code>route_key</code>设置为什么，<code>exchange</code>都会将消息转发给所有绑定的<code>queue</code>;</li><li><code>topic</code>: 主题交换机, 工作方式类似于组播, <code>exchange</code>会将消息转发和<code>route_key</code>匹配模式相同的所有队列;</li><li><code>headers</code>: 根据消息体的header匹配</li></ul></li><li><code>$passive</code>:  是否检测同名队列</li><li><code>$durable</code>:  交换机是否开启持久化</li><li><code>$auto_delete</code>:  通道关闭后是否删除队列</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.4 声明队列</span></span><br><span class="line">$channel-&gt;queue_declare(</span><br><span class="line">    $queue_name = <span class="string">''</span>,</span><br><span class="line">    $passive = <span class="keyword">false</span>,</span><br><span class="line">    $durable = <span class="keyword">false</span>,</span><br><span class="line">    $exclusive = <span class="keyword">false</span>,</span><br><span class="line">    $auto_delete = <span class="keyword">true</span>,</span><br><span class="line">    $nowait = <span class="keyword">false</span>,</span><br><span class="line">    $arguments = <span class="keyword">array</span>(),</span><br><span class="line">    $ticket = <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>$queue_name</code>:  队列名称</li><li><code>$passive</code>:  是否检测同名队列</li><li><code>$durable</code>:  是否开启队列持久化</li><li><code>$exclusive</code>:  队列是否可以被其他队列访问</li><li><code>$auto_delete</code>: 通道关闭后是否删除队列</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.5 创建要发送的消息, 可以创建多个消息</span></span><br><span class="line">$msg = <span class="keyword">new</span> AMQPMessage($data, $properties);</span><br><span class="line"><span class="comment">// 单个发送</span></span><br><span class="line">$channel-&gt;basic_publish($msg, $exchange = <span class="string">''</span>, $routing_key = <span class="string">''</span>, $mandatory = <span class="keyword">false</span>, $immediate = <span class="keyword">false</span>, $ticket = <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 多个发送</span></span><br><span class="line"><span class="comment">// 1.多次调用 $channel-&gt;batch_basic_publish($msg, $exchange = '', $routing_key = '', $mandatory = false, $immediate = false, $ticket = null)</span></span><br><span class="line"><span class="comment">// 内部实现:往$this-&gt;batch_messages[]塞</span></span><br><span class="line"><span class="comment">// 2.再调用一次$channel-&gt;publish_batch(), 完成发送</span></span><br></pre></td></tr></table></figure><ul><li><code>$data</code>:  要发送的消息</li><li><code>$properties</code>:  设置的属性, 比如设置该消息持久化 <code>[&#39;delivery_mode&#39; =&gt; AMQPMessage::DELIVERY_MODE_PERSISTENT]</code></li><li><code>$msg</code>:  消息内容</li><li><code>$exchange</code>:  交换机</li><li><code>$routing_key</code>:  路由键</li><li><code>$mandatory</code>:  匹配不到队列时,是否立即丢弃消息</li><li><code>$immediate</code>:  队列无消费者时,是否立即丢弃消息</li><li><code>$ticket</code>:  </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.6 路由绑定</span></span><br><span class="line">$channel-&gt;queue_bind(</span><br><span class="line">    $queue,</span><br><span class="line">    $exchange, </span><br><span class="line">    $routing_key = <span class="string">''</span>, </span><br><span class="line">    $nowait = <span class="keyword">false</span>,</span><br><span class="line">    $arguments = <span class="keyword">array</span>(),</span><br><span class="line">    $ticket = <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>$queue</code>:  队列名</li><li><code>$exchange</code>:  交换机名</li><li><code>$routing_key</code>:  路由键</li><li><code>$nowait</code>:  声明队列无需等待</li><li><code>$arguments</code>:  其他参数</li><li><code>$ticket</code>:  </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.7 消费消息</span></span><br><span class="line">$channel-&gt;basic_consume(</span><br><span class="line">    $queue = <span class="string">',</span></span><br><span class="line"><span class="string">    $consumer_tag = '</span>,</span><br><span class="line">    $no_local = <span class="keyword">false</span>,</span><br><span class="line">    $no_ack = <span class="keyword">false</span>,</span><br><span class="line">    $exclusive = <span class="keyword">false</span>,</span><br><span class="line">    $nowait = <span class="keyword">false</span>,</span><br><span class="line">    $callback = <span class="keyword">null</span>,</span><br><span class="line">    $ticket = <span class="keyword">null</span>,</span><br><span class="line">    $arguments = <span class="keyword">array</span>()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>$queue</code>:  被消费队列名称</li><li><code>$consumer_tag</code>:  消费者客户端身份标识，用于区分多个客户端</li><li><code>$no_local</code>:  这个功能属于AMQP的标准，但是RabbitMQ并没有做实现</li><li><code>$no_ack</code>:  收到消息后，是否不需要回复确认即被认为被消费</li><li><code>$exclusive</code>:  收到消息后，是否不需要回复确认即被认为被消费</li><li><code>$nowait</code>:  不返回执行结果，但是如果排他开启的话，则必须需要等待结果的，如果两个一起开就会报错</li><li><code>$callback</code>:  回调逻辑处理函数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.8 手动ack示例</span></span><br><span class="line">$callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">    sleep($msg-&gt;body); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">" [x] Received sleep "</span>, $msg-&gt;body, <span class="string">"\n"</span>;</span><br><span class="line">    $msg-&gt;delivery_info[<span class="string">'channel'</span>]-&gt;basic_ack($msg-&gt;delivery_info[<span class="string">'delivery_tag'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">" [x] Ack "</span>.<span class="string">"\n"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.9 限制分发示例</span></span><br><span class="line"><span class="comment">// 限制RabbitMQ只发不超过1条的消息给同一个消费者。当消息处理完毕后，有了反馈，才会进行第二次发送。</span></span><br><span class="line">$channel-&gt;basic_qos(<span class="keyword">null</span>, <span class="number">1</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h1 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h1><h2 id="无交换机-直接队列"><a href="#无交换机-直接队列" class="headerlink" title="无交换机, 直接队列"></a>无交换机, 直接队列</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line">    $channel = $connection-&gt;channel();</span><br><span class="line">    $channel-&gt;queue_declare(<span class="string">'hello'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    $msg = <span class="keyword">new</span> AMQPMessage(<span class="string">'Hello World!'</span>);</span><br><span class="line">    $channel-&gt;basic_publish($msg, <span class="string">''</span>, <span class="string">'hello'</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">" [x] Sent 'Hello World!'\n"</span>;</span><br><span class="line">    $channel-&gt;close();</span><br><span class="line">    $connection-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">consume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line">    $channel = $connection-&gt;channel();</span><br><span class="line">    $channel-&gt;queue_declare(<span class="string">'hello'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span>, <span class="string">"\n"</span>;</span><br><span class="line">    $callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">" [x] Received "</span>, $msg-&gt;body, <span class="string">"\n"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    $channel-&gt;basic_consume(<span class="string">'hello'</span>, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</span><br><span class="line">    <span class="keyword">while</span> (count($channel-&gt;callbacks)) &#123;</span><br><span class="line">        $channel-&gt;wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工作队列按消费能力分发"><a href="#工作队列按消费能力分发" class="headerlink" title="工作队列按消费能力分发"></a>工作队列按消费能力分发</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产者和消费者均增加</span></span><br><span class="line">$channel-&gt;basic_qos(<span class="keyword">null</span>, <span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 即可。</span></span><br></pre></td></tr></table></figure><h2 id="fanout广播示例-注册行为"><a href="#fanout广播示例-注册行为" class="headerlink" title="fanout广播示例 注册行为"></a><code>fanout</code>广播示例 注册行为</h2><p>例如注册后需要发送欢迎短信和邮件，将注册行为广播至短信和邮件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="comment">// 定义交换机</span></span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'register'</span>, <span class="string">'fanout'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$msg = <span class="keyword">new</span> AMQPMessage(<span class="string">'register event'</span>);</span><br><span class="line">$channel-&gt;basic_publish($msg, <span class="string">'register'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册短信消费者</span></span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'register'</span>, <span class="string">'fanout'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_declare(<span class="string">'register.sms'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_bind(<span class="string">'register.sms'</span>, <span class="string">'register'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册邮件消费者</span></span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'register'</span>, <span class="string">'fanout'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_declare(<span class="string">'register.mail'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_bind(<span class="string">'register.mail'</span>, <span class="string">'register'</span>);</span><br></pre></td></tr></table></figure><h2 id="topic模糊匹配示例-日志分级"><a href="#topic模糊匹配示例-日志分级" class="headerlink" title="topic模糊匹配示例 日志分级"></a><code>topic</code>模糊匹配示例 日志分级</h2><p>例如我想一个消费者接受所有日志，一个消费者只接收error级别日志</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义交换机</span></span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'log'</span>, <span class="string">'topic'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$num = rand(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> ($num%<span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    $level = <span class="string">'error'</span>;</span><br><span class="line">&#125; <span class="keyword">elseif</span> ($num%<span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    $level = <span class="string">'warning'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $level = <span class="string">'common'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$msg = <span class="keyword">new</span> AMQPMessage(<span class="string">'log event '</span> . $level);</span><br><span class="line">$channel-&gt;basic_publish($msg, <span class="string">'log'</span>, <span class="string">'log.'</span>.$level);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全量日志消费者</span></span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'log'</span>, <span class="string">'topic'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_declare(<span class="string">'log.all'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_bind(<span class="string">'log.all'</span>, <span class="string">'log'</span>, <span class="string">'log.*'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error日志消费者</span></span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'log'</span>, <span class="string">'topic'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_declare(<span class="string">'log.error'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_bind(<span class="string">'log.error'</span>, <span class="string">'log'</span>, <span class="string">'log.error'</span>);</span><br></pre></td></tr></table></figure><h2 id="headers匹配示例-日志分级"><a href="#headers匹配示例-日志分级" class="headerlink" title="headers匹配示例 日志分级"></a><code>headers</code>匹配示例 日志分级</h2><p>例如我想一个消费者接受所有日志，一个消费者只接收error级别日志</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="comment">// 定义交换机</span></span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'log2'</span>, <span class="string">'headers'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$num = rand(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> ($num%<span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    $level = <span class="string">'error'</span>;</span><br><span class="line">&#125; <span class="keyword">elseif</span> ($num%<span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    $level = <span class="string">'warning'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $level = <span class="string">'common'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$msg = <span class="keyword">new</span> AMQPMessage(<span class="string">'log2 event '</span>.$level);</span><br><span class="line">$bindArguments = [</span><br><span class="line">    <span class="string">'level'</span> =&gt; $level,</span><br><span class="line">    <span class="string">'type'</span>  =&gt; <span class="string">'log'</span></span><br><span class="line">];</span><br><span class="line">$headers = <span class="keyword">new</span> AMQPTable($bindArguments);</span><br><span class="line">$msg-&gt;set(<span class="string">'application_headers'</span>, $bindArguments);</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_publish($msg, <span class="string">'log2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全量日志消费者</span></span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'log2'</span>, <span class="string">'headers'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_declare(<span class="string">'log2.all'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$bindArguments = [</span><br><span class="line">    <span class="string">'type'</span> =&gt; <span class="string">'log'</span>,</span><br><span class="line">    <span class="comment">//'x-match' =&gt; 'any'</span></span><br><span class="line">];</span><br><span class="line">$headers = <span class="keyword">new</span> AMQPTable($bindArguments);</span><br><span class="line">$channel-&gt;queue_bind(<span class="string">'log2.all'</span>, <span class="string">'log2'</span>, <span class="string">''</span>, <span class="keyword">false</span>, $headers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error日志消费者</span></span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'log2'</span>, <span class="string">'headers'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_declare(<span class="string">'log2.error'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$bindArguments = [</span><br><span class="line">    <span class="string">'type'</span> =&gt; <span class="string">'log'</span>,</span><br><span class="line">    <span class="string">'level'</span> =&gt; <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'x-match'</span> =&gt; <span class="string">'any'</span></span><br><span class="line">];</span><br><span class="line">$headers = <span class="keyword">new</span> AMQPTable($bindArguments);</span><br><span class="line">$channel-&gt;queue_bind(<span class="string">'log2.error'</span>, <span class="string">'log2'</span>, <span class="string">''</span>, <span class="keyword">false</span>, $headers);</span><br></pre></td></tr></table></figure><h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个没有消费者，5s后消息过期的队列</span></span><br><span class="line">$arguments = <span class="keyword">new</span> AMQPTable([</span><br><span class="line">    <span class="string">'x-dead-letter-exchange'</span>    =&gt; <span class="string">'dead'</span>,</span><br><span class="line">    <span class="string">'x-message-tl'</span>              =&gt; <span class="number">5000</span>, <span class="comment">// 消息存活时间(毫秒)</span></span><br><span class="line">    <span class="string">'x-dead-letter-routing-key'</span> =&gt; <span class="string">'dead'</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义队列, 不要交换机</span></span><br><span class="line">$channel-&gt;queue_declare(<span class="string">'no_consume'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$now = time();</span><br><span class="line">$msg = <span class="keyword">new</span> AMQPMessage($now);</span><br><span class="line">$channel-&gt;basic_publish($msg, <span class="string">''</span>, <span class="string">'no_consume'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">" [x] Sent no_consume :"</span>.date(<span class="string">'Y-m-d H:i:s'</span>, $now).<span class="string">"\n"</span>;</span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'dead'</span>, <span class="string">'topic'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_declare(<span class="string">'dead.all'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_bind(<span class="string">'dead.all'</span>, <span class="string">'dead'</span>, <span class="string">'dead'</span>);</span><br><span class="line">$channel-&gt;basic_qos(<span class="keyword">null</span>, <span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span>, <span class="string">"\n"</span>;</span><br><span class="line">$callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">    var_dump(<span class="string">'msg:'</span>.date(<span class="string">'Y-m-d H:i:s'</span>, $msg-&gt;body));</span><br><span class="line">    var_dump(<span class="string">'now:'</span>.date(<span class="string">'Y-m-d H:i:s'</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">" [x] Received log error "</span>, $msg-&gt;body, <span class="string">"\n"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">$channel-&gt;basic_consume(<span class="string">'dead.all'</span>, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</span><br><span class="line"><span class="keyword">while</span>(count($channel-&gt;callbacks)) &#123;</span><br><span class="line">    $channel-&gt;wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="rabbitmq和redis用作消息队列的区别"><a href="#rabbitmq和redis用作消息队列的区别" class="headerlink" title="rabbitmq和redis用作消息队列的区别"></a>rabbitmq和redis用作消息队列的区别</h1><ul><li>可靠性</li></ul><blockquote><p>redis: 没有相应的机制保证消息的可靠消费，如果发布者发布一条消息，而没有对应的订阅者的话，这条消息将丢失，不会存在内存中<br>rabbitmq: 没有相应的机制保证消息的可靠消费，如果发布者发布一条消息，而没有对应的订阅者的话，这条消息将丢失，不会存在内存中</p></blockquote><ul><li>实时性</li></ul><blockquote><p>redis: 实时性高，redis作为高效的缓存服务器，所有数据都存在在服务器中，所以它具有更高的实时性</p></blockquote><ul><li>持久性</li></ul><blockquote><p>redis: redis的持久化是针对于整个redis缓存的内容，它有RDB和AOF两种持久化方式（redis持久化方式，后续更新），可以将整个redis实例持久化到磁盘，以此来做数据备份，防止异常情况下导致数据丢失。<br>rabbitmq: 队列，消息都可以选择性持久化，持久化粒度更小，更灵活；</p></blockquote><ul><li>总结:</li></ul><blockquote><p>redis: 轻量级, 低延迟, 高并发, 低可靠性;<br>rabbitmq: 重量级, 高可靠, 异步, 不保证实时性;</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前有多篇RabbitMQ的学习, 实践是检验真理的唯一标准, 所以本篇是实践篇&lt;br&gt;&lt;a href=&quot;https://blog.caoxl.com/2019/08/07/Message-Queue-RabbitMQ/&quot;&gt;消息队列之 RabbitMQ&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.caoxl.com/2020/04/03/RabbitMq-Actual-Combat-1/&quot;&gt;RabbitMQ 实战记录&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.caoxl.com/2020/04/08/RabbitMQ-Learn-More/&quot;&gt;RabbitMq 再深入&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="消息队列" scheme="http://blog.caoxl.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RabbitMQ" scheme="http://blog.caoxl.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Supervisor 再深入</title>
    <link href="http://blog.caoxl.com/2021/07/05/Supervisor-II/"/>
    <id>http://blog.caoxl.com/2021/07/05/Supervisor-II/</id>
    <published>2021-07-05T09:38:46.000Z</published>
    <updated>2021-07-06T02:16:13.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>之前做过一篇 <a href="http://blog.caoxl.com/2019/11/06/Supervisor-For-Laravels/">http://blog.caoxl.com/2019/11/06/Supervisor-For-Laravels/</a>, 今天更深入的学习下Supervisor</p></blockquote><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install supervisor</span><br></pre></td></tr></table></figure><p>显示如下，就证明安装成功了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ supervisord -v              </span><br><span class="line">4.2.2</span><br></pre></td></tr></table></figure><h1 id="配置-amp-启动"><a href="#配置-amp-启动" class="headerlink" title="配置&amp;启动"></a>配置&amp;启动</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>supervisor</code>的主配置文件在<code>/usr/local/etc/supervisord.conf</code>;<br>配置文件在最后一行可以修改新增子配置文件,默认在 <code>/usr/local/etc/supervisor.d/*.ini</code> 也可以 <code>/usr/local/etc/supervisor.d/*.conf</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /usr/local/etc/supervisor.d/*.conf</span><br></pre></td></tr></table></figure><h2 id="启动supervisord"><a href="#启动supervisord" class="headerlink" title="启动supervisord"></a>启动supervisord</h2><ul><li>手动启动, 需要指定主配置文件</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /usr/local/etc/supervisord.conf</span><br></pre></td></tr></table></figure><ul><li>自动随系统系统 (推荐)</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start supervisor</span><br></pre></td></tr></table></figure><ul><li>查看服务</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep supervisord</span><br><span class="line">501 85725     1   0  5:28PM ??         0:00.78 /usr/local/Cellar/python@3.9/3.9.5/Frameworks/Python.framework/Versions/3.9/Resources/Python.app/Contents/MacOS/Python /usr/local/opt/supervisor/bin/supervisord -c /usr/local/etc/supervisord.conf --nodaemon</span><br></pre></td></tr></table></figure><h2 id="启动supervisorctl"><a href="#启动supervisorctl" class="headerlink" title="启动supervisorctl"></a>启动supervisorctl</h2><ul><li>配置文件立即生效</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl update</span><br><span class="line"></span><br><span class="line"><span class="section"># 或</span></span><br><span class="line">supervisorctl reload</span><br></pre></td></tr></table></figure><ul><li>查看后台进程</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl status</span><br></pre></td></tr></table></figure><ul><li>对进程的控制</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 将all换成相应的program名称，则就是对相应的程序进行启动、关闭和重启</span></span><br><span class="line">supervisorctl start|stop|restart all</span><br></pre></td></tr></table></figure><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>以<code>test_shell</code>为例启动进程</p><ol><li>编辑配置文件 <code>/usr/local/etc/supervisor.d/shell.conf</code></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:test_shell]</span><br><span class="line">process<span class="emphasis">_name=%(program_</span>name)s</span><br><span class="line">command=sh /Users/caoxl/WWW/DNMP/www/test.com/shell/test.sh</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=caoxl</span><br><span class="line">numprocs=1</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout<span class="emphasis">_logfile=/var/log/supervisor/test_</span>shell.log</span><br></pre></td></tr></table></figure><ol start="2"><li>立即生效</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure><ol start="3"><li>查看结果</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl status</span><br><span class="line">test_shell                       RUNNING   pid 86587, uptime 0:00:03</span><br></pre></td></tr></table></figure><h2 id="program配置文件说明"><a href="#program配置文件说明" class="headerlink" title="program配置文件说明"></a>program配置文件说明</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">;*为必须填写项</span><br><span class="line">;*[program:应用名称]</span><br><span class="line">[program:test_shell]</span><br><span class="line"></span><br><span class="line">;当numprocs为1时,process<span class="emphasis">_name=%(program_</span>name)s</span><br><span class="line">;当numprocs&gt;=2时,%(program<span class="emphasis">_name)s_</span>%(process_num)02d</span><br><span class="line">process<span class="emphasis">_name=%(program_</span>name)s</span><br><span class="line"></span><br><span class="line">;*命令路径,如果使用python启动的程序应该为 python /home/test.py,</span><br><span class="line">;不建议放入/home/user/, 对于非user用户一般情况下是不能访问</span><br><span class="line">command=sh /Users/caoxl/WWW/DNMP/www/test.com/shell/test.sh</span><br><span class="line"></span><br><span class="line">;使用supervisor还有一个更大的好处就是，可以快速开启多个进程，配置参数如下：</span><br><span class="line">;进程数量,表示对同一个配置开启1个线程。</span><br><span class="line">numprocs=1</span><br><span class="line"></span><br><span class="line">;执行目录,若有/home/supervisor_test/test1.py</span><br><span class="line">;将directory设置成/home/supervisor_test</span><br><span class="line">;则command只需设置成python test1.py</span><br><span class="line">;否则command必须设置成绝对执行目录</span><br><span class="line">directory=/tmp</span><br><span class="line"></span><br><span class="line">;掩码:--- -w- -w-, 转换后rwx r-x w-x</span><br><span class="line">umask=022</span><br><span class="line"></span><br><span class="line">;优先级,值越高,最后启动,最先被关闭,默认值999</span><br><span class="line">priority=999</span><br><span class="line"></span><br><span class="line">;如果是true,当supervisor启动时,程序将会自动启动</span><br><span class="line">autostart=true</span><br><span class="line"></span><br><span class="line">;*自动重启</span><br><span class="line">autorestart=true</span><br><span class="line"></span><br><span class="line">;启动延时执行,默认1秒</span><br><span class="line">startsecs=10</span><br><span class="line"></span><br><span class="line">;启动尝试次数,默认3次</span><br><span class="line">startretries=3</span><br><span class="line"></span><br><span class="line">;当退出码是0,2时,执行重启,默认值0,2</span><br><span class="line">exitcodes=0,2</span><br><span class="line"></span><br><span class="line">;停止信号,默认TERM</span><br><span class="line">;中断:INT(类似于Ctrl+C)(kill -INT pid),退出后会将写文件或日志(推荐)</span><br><span class="line">;终止:TERM(kill -TERM pid)</span><br><span class="line">;挂起:HUP(kill -HUP pid),注意与Ctrl+Z/kill -stop pid不同</span><br><span class="line">;从容停止:QUIT(kill -QUIT pid)</span><br><span class="line">;KILL, USR1, USR2其他见命令(kill -l),说明1</span><br><span class="line">stopsignal=TERM</span><br><span class="line">stopwaitsecs=10</span><br><span class="line"></span><br><span class="line">;*以root用户执行</span><br><span class="line">user=caoxl</span><br><span class="line"></span><br><span class="line">;有时候用 Supervisor 托管的程序还会有子进程（如 Tornado），如果只杀死主进程，子进程就可能变成孤儿进程。</span><br><span class="line">;通过这两项配置(改为true)来确保所有子进程都能正确停止,默认是false：</span><br><span class="line">stopasgroup=false</span><br><span class="line">killasgroup=false</span><br><span class="line"></span><br><span class="line">;重定向,把stderr重定向到stdout，默认false；</span><br><span class="line">redirect_stderr=true</span><br><span class="line"></span><br><span class="line">;标准日志输出</span><br><span class="line">stdout<span class="emphasis">_logfile=/var/log/supervisor/test_</span>shell.log</span><br><span class="line"></span><br><span class="line">;标准日志文件大小，默认50MB</span><br><span class="line">stdout<span class="emphasis">_logfile_</span>maxbytes=1MB</span><br><span class="line">;标准日志文件大小，默认50MB</span><br><span class="line">stdout<span class="emphasis">_logfile_</span>backups=10</span><br><span class="line">stdout<span class="emphasis">_capture_</span>maxbytes=1MB</span><br><span class="line">;标准日志输出</span><br><span class="line">stderr_logfile=/a/path</span><br><span class="line">stderr<span class="emphasis">_logfile_</span>maxbytes=1MB</span><br><span class="line">stderr<span class="emphasis">_logfile_</span>backups=10</span><br><span class="line">stderr<span class="emphasis">_capture_</span>maxbytes=1MB</span><br><span class="line"></span><br><span class="line">;环境变量设置</span><br><span class="line">environment=A="1",B="2"</span><br><span class="line">serverurl=AUTO</span><br></pre></td></tr></table></figure><h1 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h1><h2 id="ERROR-spawn-error"><a href="#ERROR-spawn-error" class="headerlink" title="ERROR (spawn error)"></a>ERROR (spawn error)</h2><blockquote><p>权限问题,查看下设置的目录权限,日志权限等</p></blockquote><ul><li>使用<code>supervisorctl tail program_name stderr</code>命令查看错误信息</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl tail test_shell stderr</span><br><span class="line">test_shell: ERROR (no log file)</span><br></pre></td></tr></table></figure><h2 id="supervisor-error-class-‘FileNotFoundError’-…"><a href="#supervisor-error-class-‘FileNotFoundError’-…" class="headerlink" title="supervisor error: class ‘FileNotFoundError’ …"></a>supervisor error: class ‘FileNotFoundError’ …</h2><p>一般使用<code>supervisord -c /usr/local/etc/supervisord.conf</code>会出现, 仔细检查<code>supervisord.conf</code>文件里面的子进程配置文件,检查路径有没有问题</p><h2 id="supervisor-提示：xxx-ERROR-no-such-process"><a href="#supervisor-提示：xxx-ERROR-no-such-process" class="headerlink" title="supervisor 提示：xxx: ERROR (no such process)"></a>supervisor 提示：xxx: ERROR (no such process)</h2><p>增加了新的配置文件xxx.conf后，使用<code>supervisorctl start xxx</code> 提示 “xxx: ERROR (no such process)”。</p><p>使用<code>supervisorctl start all</code>也不行。</p><blockquote><p>在新增配置文件后，要使用<code>supervisorctl update</code>命令，使用此命令后会自动加载新的配置，并且启动该进程。</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://segmentfault.com/a/1190000014756941" target="_blank" rel="noopener">Supervisor进程管理工具安装配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前做过一篇 &lt;a href=&quot;http://blog.caoxl.com/2019/11/06/Supervisor-For-Laravels/&quot;&gt;http://blog.caoxl.com/2019/11/06/Supervisor-For-Laravels/&lt;/a&gt;, 今天更深入的学习下Supervisor&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="supervisor" scheme="http://blog.caoxl.com/tags/supervisor/"/>
    
      <category term="supervisord" scheme="http://blog.caoxl.com/tags/supervisord/"/>
    
      <category term="supervisorctl" scheme="http://blog.caoxl.com/tags/supervisorctl/"/>
    
  </entry>
  
  <entry>
    <title>性能测试工具 wrk,ab 压测结果比较</title>
    <link href="http://blog.caoxl.com/2021/06/29/Pressure-Test/"/>
    <id>http://blog.caoxl.com/2021/06/29/Pressure-Test/</id>
    <published>2021-06-29T09:30:13.000Z</published>
    <updated>2021-06-30T06:21:40.249Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>wrk,ab,locust,jmeter 压测结果比较</p></blockquote><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a>wrk</h2><blockquote><p>wrk 是一款针对 Http 协议的基准测试工具，它能够在单机多核 CPU 的条件下，使用系统自带的高性能 I/O 机制，如 epoll，kqueue 等，通过多线程和事件模式，对目标机器产生大量的负载。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">brew install wrk</span><br><span class="line"></span><br><span class="line">wrk -v</span><br><span class="line">wrk  [kqueue] Copyright (C) 2012 Will Glozer</span><br><span class="line">Usage: wrk &lt;options&gt; &lt;url&gt;                            </span><br><span class="line">  Options:                                            </span><br><span class="line">    -c, --connections &lt;N&gt;  Connections <span class="keyword">to</span> keep open   </span><br><span class="line">    -d, --duration    &lt;T&gt;  Duration of test           </span><br><span class="line">    -t, --threads     &lt;N&gt;  Number of threads <span class="keyword">to</span> use   </span><br><span class="line">                                                      </span><br><span class="line">    -s, --script      &lt;S&gt;  Load Lua<span class="built_in"> script </span>file       </span><br><span class="line">    -H, --header      &lt;H&gt;  <span class="builtin-name">Add</span> header <span class="keyword">to</span> request      </span><br><span class="line">        --latency          <span class="builtin-name">Print</span> latency statistics   </span><br><span class="line">        --timeout     &lt;T&gt;  Socket/request timeout     </span><br><span class="line">    -v, --version          <span class="builtin-name">Print</span> version details      </span><br><span class="line">                                                      </span><br><span class="line">  Numeric arguments may include a SI unit (1k, 1M, 1G)</span><br><span class="line">  Time arguments may include a time unit (2s, 2m, 2h)</span><br></pre></td></tr></table></figure><h2 id="ab-Apache-Bench"><a href="#ab-Apache-Bench" class="headerlink" title="ab (Apache Bench)"></a>ab (Apache Bench)</h2><blockquote><p>ab是Apache超文本传输协议(HTTP)的性能测试工具。其设计意图是描绘当前所安装的Apache的执行性能，主要是显示你安装的Apache每秒可以处理多少个请求。</p></blockquote><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">进入httpd目录</span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">ab -V</span><br><span class="line">This <span class="keyword">is</span> ApacheBench, Version <span class="number">2.3</span> &lt;$Revision: <span class="number">655654</span> $&gt;</span><br><span class="line">Copyright <span class="number">1996</span> Adam Twiss, Zeus Technology Ltd, http:<span class="comment">//www.zeustech.net/</span></span><br><span class="line">Licensed to The Apache Software Foundation, http:<span class="comment">//www.apache.org/</span></span><br></pre></td></tr></table></figure><h1 id="wrk-1"><a href="#wrk-1" class="headerlink" title="wrk"></a>wrk</h1><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">% wrk -v</span><br><span class="line">wrk  [kqueue] Copyright (C) <span class="number">2012</span> Will Glozer</span><br><span class="line">Usage: wrk &lt;options&gt; &lt;url&gt;                            </span><br><span class="line">  Options:                                            </span><br><span class="line">    -c, --connections &lt;N&gt;  Connections to keep open   </span><br><span class="line">    -d, --duration    &lt;T&gt;  Duration of test           </span><br><span class="line">    -t, --threads     &lt;N&gt;  Number of threads to use   </span><br><span class="line">                                                      </span><br><span class="line">    -s, --script      &lt;S&gt;  Load Lua script file       </span><br><span class="line">    -H, --header      &lt;H&gt;  <span class="keyword">Add</span><span class="bash"> header to request      </span></span><br><span class="line">        --latency          Print latency statistics   </span><br><span class="line">        --timeout     &lt;T&gt;  Socket/request timeout     </span><br><span class="line">    -v, --version          Print version details      </span><br><span class="line">                                                      </span><br><span class="line">  Numeric arguments may include a SI unit (<span class="number">1</span>k, <span class="number">1</span>M, <span class="number">1</span>G)</span><br><span class="line">  Time arguments may include a time unit (<span class="number">2</span>s, <span class="number">2</span>m, <span class="number">2</span>h)</span><br></pre></td></tr></table></figure><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-c：总的连接数（每个线程处理的连接数=总连接数/线程数）</span><br><span class="line">-d：测试的持续时间，如<span class="number">2</span>s(<span class="number">2</span>second)，<span class="number">2</span>m(<span class="number">2</span>minute)，<span class="number">2</span>h(hour)，默认为s</span><br><span class="line">-t：需要执行的线程总数，默认为<span class="number">2</span>，一般线程数不宜过多. 核数的<span class="number">2</span>到<span class="number">4</span>倍足够了. 多了反而因为线程切换过多造成效率降低</span><br><span class="line">-s：执行Lua脚本，这里写lua脚本的路径和名称，后面会给出案例</span><br><span class="line">-H：需要添加的头信息，注意header的语法，举例，-H “token: abcdef”</span><br><span class="line">—timeout：超时的时间</span><br><span class="line">—latency：显示延迟统计信息</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">% wrk -t <span class="number">5</span> -c <span class="number">300</span> -d <span class="number">60</span> --latency http://localhost:<span class="number">9801</span>/                                         <span class="number">1</span> ↵</span><br><span class="line">Running <span class="number">1</span>m test @ http://localhost:<span class="number">9801</span>/</span><br><span class="line">  <span class="number">5</span> threads and <span class="number">300</span> connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency   <span class="number">288.03</span>ms  <span class="number">140.21</span>ms   <span class="number">1.34</span>s    <span class="number">87.31</span>%</span><br><span class="line">    Req/Sec   <span class="number">221.94</span>     <span class="number">86.65</span>   <span class="number">560.00</span>     <span class="number">70.71</span>%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     <span class="number">50</span>%  <span class="number">257.29</span>ms</span><br><span class="line">     <span class="number">75</span>%  <span class="number">312.34</span>ms</span><br><span class="line">     <span class="number">90</span>%  <span class="number">411.33</span>ms</span><br><span class="line">     <span class="number">99</span>%  <span class="number">920.93</span>ms</span><br><span class="line">  <span class="number">64748</span> requests in <span class="number">1.00</span>m, <span class="number">11.73</span>MB read</span><br><span class="line">  Socket errors: connect <span class="number">0</span>, read <span class="number">173</span>, write <span class="number">15</span>, timeout <span class="number">0</span></span><br><span class="line">Requests/sec:   <span class="number">1078.37</span></span><br><span class="line">Transfer/sec:    <span class="number">200.09</span>KB</span><br></pre></td></tr></table></figure><h2 id="返回结果说明"><a href="#返回结果说明" class="headerlink" title="返回结果说明"></a>返回结果说明</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Latency：响应时间</span><br><span class="line">Req/Sec：每个线程每秒钟的执行的连接数</span><br><span class="line">Avg：平均</span><br><span class="line">Max：最大</span><br><span class="line">Stdev：标准差</span><br><span class="line">+/- Stdev： 正负一个标准差占比</span><br><span class="line">Requests/sec：每秒请求数（也就是QPS），等于总请求数/测试总耗时</span><br><span class="line">Latency Distribution，如果命名中添加了—latency就会出现相关信息</span><br></pre></td></tr></table></figure><blockquote><p>300 个连接数跑 60 秒：Request/sec(每秒请求数)：1078.37</p></blockquote><h1 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h1><h2 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">% ab --help</span><br><span class="line">ab: wrong number of arguments</span><br><span class="line">Usage: ab [options] [http[s]://]hostname[:port]/path</span><br><span class="line">Options are:</span><br><span class="line">    -n requests     Number of requests to perform</span><br><span class="line">    -c concurrency  Number of multiple requests to make</span><br><span class="line">    -t timelimit    Seconds to max. wait for responses</span><br><span class="line">    -b windowsize   Size of TCP send/receive buffer, in bytes</span><br><span class="line">    -p postfile     File containing data to POST. Remember also to set -T</span><br><span class="line">    -u putfile      File containing data to PUT. Remember also to set -T</span><br><span class="line">    -T content-type Content-type header for POSTing, eg.</span><br><span class="line">                    <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">                    Default is <span class="string">'text/plain'</span></span><br><span class="line">    -v verbosity    How much troubleshooting info to print</span><br><span class="line">    -w              Print out results in HTML tables</span><br><span class="line">    -i              Use HEAD instead of GET</span><br><span class="line">    -x attributes   String to insert as table attributes</span><br><span class="line">    -y attributes   String to insert as tr attributes</span><br><span class="line">    -z attributes   String to insert as td or th attributes</span><br><span class="line">    -C attribute    <span class="keyword">Add</span><span class="bash"> cookie, eg. <span class="string">'Apache=1234. (repeatable)</span></span></span><br><span class="line">    -H attribute    <span class="keyword">Add</span><span class="bash"> Arbitrary header line, eg. <span class="string">'Accept-Encoding: gzip'</span></span></span><br><span class="line">                    Inserted after all normal header lines. (repeatable)</span><br><span class="line">    -A attribute    <span class="keyword">Add</span><span class="bash"> Basic WWW Authentication, the attributes</span></span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -P attribute    <span class="keyword">Add</span><span class="bash"> Basic Proxy Authentication, the attributes</span></span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -X proxy:port   Proxyserver and port number to use</span><br><span class="line">    -V              Print version number and exit</span><br><span class="line">    -k              Use HTTP KeepAlive feature</span><br><span class="line">    -d              Do not show percentiles served table.</span><br><span class="line">    -S              Do not show confidence estimators and warnings.</span><br><span class="line">    -g filename     Output collected data to gnuplot format file.</span><br><span class="line">    -e filename     Output CSV file with percentages served</span><br><span class="line">    -r              Don<span class="string">'t exit on socket receive errors.</span></span><br><span class="line"><span class="string">    -h              Display usage information (this message)</span></span><br><span class="line"><span class="string">    -Z ciphersuite  Specify SSL/TLS cipher suite (See openssl ciphers)</span></span><br><span class="line"><span class="string">    -f protocol     Specify SSL/TLS protocol</span></span><br><span class="line"><span class="string">                    (SSL2, SSL3, TLS1, TLS1.1, TLS1.2 or ALL)</span></span><br></pre></td></tr></table></figure><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-n 表示请求总数(与-t参数可任选其一)</span><br><span class="line">-c 表示并发数</span><br><span class="line">-t 标识请求时间</span><br><span class="line">-p:模拟post请求，文件格式为gid=<span class="number">2</span>&amp;status=<span class="number">1</span>,配合-T使用</span><br><span class="line">-T:post数据所使用的Content-Type头信息，如-T <span class="string">'application/x-www-form-urlencoded'</span></span><br></pre></td></tr></table></figure><h2 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">% ab -c <span class="number">300</span> -t <span class="number">60</span> https://hexo.lilis.xin/                                                       <span class="number">54</span> ↵</span><br><span class="line">This is ApacheBench, Version <span class="number">2.3</span> &lt;$Revision: <span class="number">655654</span> $&gt;</span><br><span class="line">Copyright <span class="number">1996</span> Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking hexo.lilis.xin (be patient)</span><br><span class="line">Finished <span class="number">1803</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        GitHub.com      <span class="comment"># 测试服务器的名字</span></span><br><span class="line">Server Hostname:        hexo.lilis.xin  <span class="comment"># 请求的URL主机名</span></span><br><span class="line">Server Port:            <span class="number">443</span>     <span class="comment"># web服务器监听的端口</span></span><br><span class="line">SSL/TLS Protocol:       TLSv1.<span class="number">2</span>,ECDHE-RSA-AES128-GCM-SHA256,<span class="number">2048</span>,<span class="number">128</span></span><br><span class="line"></span><br><span class="line">Document Path:          /       <span class="comment"># 请求的URL中的根绝对路径</span></span><br><span class="line">Document Length:        <span class="number">31290</span> bytes     <span class="comment"># HTTP响应数据的正文长度</span></span><br><span class="line"></span><br><span class="line">Concurrency Level:      <span class="number">300</span>     <span class="comment"># 并发用户数, 这是我们设置的参数之一</span></span><br><span class="line">Time taken for tests:   <span class="number">60.023</span> seconds  <span class="comment"># 所有这些请求被处理完成所花费的总时间</span></span><br><span class="line">Complete requests:      <span class="number">1803</span>    <span class="comment"># 总请求数量, 这是我们设置的参数之一</span></span><br><span class="line">Failed requests:        <span class="number">0</span>       <span class="comment"># 表示失败的请求数量, 这里的失败是指的请求在连接服务器、发送数据等环节发生异常，以及无响应后超时的情况</span></span><br><span class="line">Write errors:           <span class="number">0</span></span><br><span class="line">Total transferred:      <span class="number">60468718</span> bytes  <span class="comment"># 所有请求的响应数据长度总和。包括每个HTTP响应数据的头信息和正文数据的长度</span></span><br><span class="line">HTML transferred:       <span class="number">59089320</span> bytes  <span class="comment"># 所有请求的响应数据中正文数据的总和，也就是减去了Total transferred中HTTP响应数据中的头信息的长度</span></span><br><span class="line">Requests per second:    <span class="number">30.04</span> [<span class="comment">#/sec] (mean)    # 吞吐率, 计算公式: Complete requests/Time taken for tests 总请求数/处理完成这些请求数所花费的时间</span></span><br><span class="line">Time per request:       <span class="number">9987.262</span> [ms] (mean)    <span class="comment"># 用户平均请求等待时间, 计算公式: Time token for tests/（Complete requests/Concurrency Level）。处理完成所有请求数所花费的时间/（总请求数/并发用户数）</span></span><br><span class="line">Time per request:       <span class="number">33.291</span> [ms] (mean, across all concurrent requests)  <span class="comment"># 服务器平均请求等待时间, 计算公式: Time taken for tests/Complete requests，正好是吞吐率的倒数</span></span><br><span class="line">Transfer rate:          <span class="number">983.81</span> [Kbytes/sec] received    <span class="comment"># 表示这些请求在单位时间内从服务器获取的数据长度</span></span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:      <span class="number">486</span> <span class="number">3009</span> <span class="number">3112.2</span>   <span class="number">2212</span>   <span class="number">33168</span></span><br><span class="line">Processing:   <span class="number">220</span> <span class="number">5512</span> <span class="number">4516.1</span>   <span class="number">4517</span>   <span class="number">47154</span></span><br><span class="line">Waiting:      <span class="number">115</span>  <span class="number">503</span> <span class="number">883.0</span>    <span class="number">183</span>   <span class="number">18372</span></span><br><span class="line">Total:        <span class="number">745</span> <span class="number">8521</span> <span class="number">5710.0</span>   <span class="number">7448</span>   <span class="number">47759</span></span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  <span class="number">50</span>%   <span class="number">7447</span></span><br><span class="line">  <span class="number">66</span>%   <span class="number">9253</span></span><br><span class="line">  <span class="number">75</span>%  <span class="number">10799</span></span><br><span class="line">  <span class="number">80</span>%  <span class="number">11569</span></span><br><span class="line">  <span class="number">90</span>%  <span class="number">15143</span></span><br><span class="line">  <span class="number">95</span>%  <span class="number">19453</span></span><br><span class="line">  <span class="number">98</span>%  <span class="number">25129</span></span><br><span class="line">  <span class="number">99</span>%  <span class="number">29527</span></span><br><span class="line"> <span class="number">100</span>%  <span class="number">47759</span> (longest request)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;wrk,ab,locust,jmeter 压测结果比较&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="压力测试" scheme="http://blog.caoxl.com/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
      <category term="wrk" scheme="http://blog.caoxl.com/tags/wrk/"/>
    
      <category term="ab" scheme="http://blog.caoxl.com/tags/ab/"/>
    
  </entry>
  
  <entry>
    <title>聊聊高并发</title>
    <link href="http://blog.caoxl.com/2021/06/29/High-Concurrency/"/>
    <id>http://blog.caoxl.com/2021/06/29/High-Concurrency/</id>
    <published>2021-06-29T02:27:54.000Z</published>
    <updated>2021-06-29T07:39:48.010Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>高并发，几乎是每个程序员都想拥有的经验。原因很简单：随着流量变大，会遇到各种各样的技术问题，比如接口响应超时、CPU load 升高、GC 频繁、死锁、大数据量存储等等，这些问题能推动我们在技术深度上不断精进。</p></blockquote><a id="more"></a><h1 id="什么是高并发"><a href="#什么是高并发" class="headerlink" title="什么是高并发 ?"></a>什么是高并发 ?</h1><blockquote><p>高并发 (High Concurrency): 高并发意味着大流量，需要运用技术手段抵抗流量的冲击，这些手段好比操作流量，能让流量更平稳地被系统所处理，带给用户更好的体验。</p></blockquote><p>我们常见的高并发场景有：淘宝的双11、春运时的抢票、微博大V的热点新闻等。除了这些典型事情，每秒几十万请求的秒杀系统、每天千万级的订单系统、每天亿级日活的信息流系统等，都可以归为高并发。</p><p>高并发相关常用的一些指标有响应时间（Response Time），吞吐量（Throughput），每秒查询率QPS（Query Per Second），并发用户数等</p><h2 id="那到底多大并发才算高并发呢"><a href="#那到底多大并发才算高并发呢" class="headerlink" title="那到底多大并发才算高并发呢 ?"></a>那到底多大并发才算高并发呢 ?</h2><ol><li><p>不能只看数字,要看具体的业务场景.不能说 10W QPS 的秒杀是高并发，而 1W QPS 的信息流就不是高并发。信息流场景涉及复杂的推荐模型和各种人工策略，它的业务逻辑可能比秒杀场景复杂 10 倍不止。因此，不在同一个维度，没有任何比较意义。</p></li><li><p>业务都是从 0 到 1 做起来的，并发量和 QPS 只是参考指标，最重要的是：在业务量逐渐变成原来的 10 倍、100 倍的过程中，你是否用到了高并发的处理方法去严谨你的系统，从架构设计、编码实现、甚至产品方案等维度去预防和解决高并发引起的问题？</p></li></ol><h1 id="如何提升系统的并发能力"><a href="#如何提升系统的并发能力" class="headerlink" title="如何提升系统的并发能力 ?"></a>如何提升系统的并发能力 ?</h1><p>互联网分布式架构设计，提高系统并发能力的方式，方法论上主要有两种：垂直扩展（Scale Up）与水平扩展（Scale Out）。</p><h2 id="垂直扩展"><a href="#垂直扩展" class="headerlink" title="垂直扩展"></a>垂直扩展</h2><ul><li>垂直扩展：提升单机处理能力。垂直扩展的方式又有两种：<ul><li><ol><li>增强单机硬件性能，例如：增加CPU核数如32核，升级更好的网卡如万兆，升级更好的硬盘如SSD，扩充硬盘容量如2T，扩充系统内存如128G;</li></ol></li><li><ol start="2"><li>提升单机架构性能，例如：使用Cache来减少IO次数，使用异步来增加单服务吞吐量，使用无锁数据结构来减少响应时间；</li></ol></li></ul></li></ul><h2 id="水平扩展"><a href="#水平扩展" class="headerlink" title="水平扩展"></a>水平扩展</h2><ul><li>水平扩展：只要增加服务器数量，就能线性扩充系统性能。</li></ul><h1 id="实践方案"><a href="#实践方案" class="headerlink" title="实践方案"></a>实践方案</h1><h2 id="高性能的实践方案"><a href="#高性能的实践方案" class="headerlink" title="高性能的实践方案"></a>高性能的实践方案</h2><ol><li>集群部署, 通过负载均衡减轻单机压力</li><li>多级缓存, 包括静态数据使用CDN,本地缓存,分布式缓存等, 以及对缓存场景中的热点 key、缓存穿透、缓存并发、数据一致性等问题的处理。</li><li>分库分表和索引优化, 以及借助搜索引擎解决复杂查询问题</li><li>考虑 NoSQL 数据库的使用，比如 HBase、TiDB 等，但是团队必须熟悉这些组件，且有较强的运维能力。</li><li>异步化, 将次要流程通过多线程, MQ, 甚至延迟任务进行异步处理</li><li>限流, 需要先考虑业务是否允许限流,比如秒杀场景是允许的），包括前端限流、Nginx 接入层的限流、服务端的限流。</li><li>对流量进行削峰填谷，通过 MQ 承接流量。</li><li>并发处理，通过多线程将串行逻辑并行化</li><li>预计算，比如抢红包场景，可以提前计算好红包金额缓存起来，发红包时直接使用即可。</li><li>缓存预热，通过异步任务提前预热数据到本地缓存或者分布式缓存中。</li><li>减少 IO 次数，比如数据库和缓存的批量读写、RPC 的批量接口支持、或者通过冗余数据的方式干掉 RPC 调用。</li><li>减少 IO 时的数据包大小，包括采用轻量级的通信协议、合适的数据结构、去掉接口中的多余字段、减少缓存 key 的大小、压缩缓存 value 等。</li><li>程序逻辑优化，比如将大概率阻断执行流程的判断逻辑前置、For 循环的计算逻辑优化，或者采用更高效的算法。</li><li>各种池化技术的使用和池大小的设置，包括 HTTP 请求池、线程池（考虑 CPU 密集型还是 IO 密集型设置核心参数）、数据库和 Redis 连接池等。</li><li>JVM 优化，包括新生代和老年代的大小、GC 算法的选择等，尽可能减少 GC 频率和耗时。</li><li>锁选择，读多写少的场景用乐观锁，或者考虑通过分段锁的方式减少锁冲突。</li></ol><h2 id="高可用的实践方案"><a href="#高可用的实践方案" class="headerlink" title="高可用的实践方案"></a>高可用的实践方案</h2><ol><li>对等节点的故障转移，Nginx 和服务治理框架均支持一个节点失败后访问另一个节点。</li><li>非对等节点的故障转移，通过心跳检测并实施主备切换（比如 redis 的哨兵模式或者集群模式、MySQL 的主从切换等）。</li><li>接口层面的超时设置、重试策略和幂等设计。</li><li>降级处理：保证核心服务，牺牲非核心服务，必要时进行熔断；或者核心链路出问题时，有备选链路。</li><li>限流处理：对超过系统处理能力的请求直接拒绝或者返回错误码。</li><li>MQ 场景的消息可靠性保证，包括 producer 端的重试机制、broker 侧的持久化、consumer 端的 ack 机制等</li><li>灰度发布，能支持按机器维度进行小流量部署，观察系统日志和业务指标，等运行平稳后再推全量。</li><li>监控报警：全方位的监控体系，包括最基础的 CPU、内存、磁盘、网络的监控，以及 Web 服务器、JVM、数据库、各类中间件的监控和业务指标的监控。</li><li>灾备演练：类似当前的“混沌工程”，对系统进行一些破坏性手段，观察局部故障是否会引起可用性问题。</li></ol><h2 id="高扩展的实践方案"><a href="#高扩展的实践方案" class="headerlink" title="高扩展的实践方案"></a>高扩展的实践方案</h2><ol><li>合理的分层架构：比如上面谈到的互联网最常见的分层架构，另外还能进一步按照数据访问层、业务逻辑层对微服务做更细粒度的分层（但是需要评估性能，会存在网络多一跳的情况）。</li><li>存储层的拆分：按照业务维度做垂直拆分、按照数据特征维度进一步做水平拆分（分库分表）。</li><li>业务层的拆分：最常见的是按照业务维度拆（比如电商场景的商品服务、订单服务等），也可以按照核心接口和非核心接口拆，还可以按照请求去拆（比如 To C 和 To B，APP 和 H5）。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;高并发，几乎是每个程序员都想拥有的经验。原因很简单：随着流量变大，会遇到各种各样的技术问题，比如接口响应超时、CPU load 升高、GC 频繁、死锁、大数据量存储等等，这些问题能推动我们在技术深度上不断精进。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://blog.caoxl.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://blog.caoxl.com/tags/PHP/"/>
    
      <category term="高并发" scheme="http://blog.caoxl.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>大厂面试题 II</title>
    <link href="http://blog.caoxl.com/2021/06/24/Interview-Questions-For-BAT-II/"/>
    <id>http://blog.caoxl.com/2021/06/24/Interview-Questions-For-BAT-II/</id>
    <published>2021-06-24T04:06:35.000Z</published>
    <updated>2021-06-25T03:44:53.137Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>保持学习, 保持警惕, 居安思危, 走出舒适区.</p></blockquote><a id="more"></a><h1 id="来自鸡哥的面试-百度"><a href="#来自鸡哥的面试-百度" class="headerlink" title="来自鸡哥的面试 (百度)"></a>来自鸡哥的面试 (百度)</h1><h2 id="FAST-CGI工作原理"><a href="#FAST-CGI工作原理" class="headerlink" title="FAST-CGI工作原理 ?"></a>FAST-CGI工作原理 ?</h2><ul><li>首先理解什么是CGI</li></ul><blockquote><p>CGI(Common Gateway Interface: 通用网关接口)<br>是Web 服务器运行时外部程序的规范,按CGI 编写的程序可以扩展服务器功能。</p></blockquote><ul><li>CGI协议的缺陷</li></ul><blockquote><p>每次处理用户请求，都需要重新 fork CGI 子进程、销毁 CGI 子进程。<br>一系列的 I/O 开销降低了网络的吞吐量，造成了资源的浪费，在大并发时会产生严重的性能问题。</p></blockquote><ul><li>什么是Fast-CGI</li></ul><blockquote><p>常驻型CGI协议;协议采用 进程间通信(IPC) 来处理用户的请求</p></blockquote><h3 id="FastCGI协议运行原理"><a href="#FastCGI协议运行原理" class="headerlink" title="FastCGI协议运行原理"></a>FastCGI协议运行原理</h3><ul><li>FastCGI 进程管理器启动时会创建一个 主（Master） 进程和多个 CGI 解释器进程（Worker 进程），然后等待 Web 服务器的连接。</li><li>Web 服务器接收 HTTP 请求后，将 CGI 报文通过 套接字（UNIX 或 TCP Socket）进行通信，将环境变量和请求数据写入标准输入,转发到 CGI 解释器进程。</li><li>CGI 解释器进程完成处理后将标准输出和错误信息从同一连接返回给 Web 服务器。</li><li>CGI 解释器进程等待下一个 HTTP 请求的到来。</li></ul><h3 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM ?"></a>PHP-FPM ?</h3><blockquote><p>php-fpm (PHP-FastCGI Process Manager:  FastCGI 进程管理器)<br>php-fpm是FastCGI的实现，并提供了进程管理的功能。<br>php-fpm进程管理器有两种进程组成，一个 Master 进程和多个 Worker 进程。Master 进程负责监听端口，接收来自 Web 服务器的请求，然后指派具体的 Worker 进程处理请求；worker 进程则一般有多个 (依据配置决定进程数)，每个进程内部都嵌入了一个 PHP 解释器，用来执行 PHP 代码。</p></blockquote><h3 id="Nginx-服务器如何与-FastCGI-协同工作"><a href="#Nginx-服务器如何与-FastCGI-协同工作" class="headerlink" title="Nginx 服务器如何与 FastCGI 协同工作"></a>Nginx 服务器如何与 FastCGI 协同工作</h3><blockquote><p>Nginx 服务器无法直接与 FastCGI 服务器进行通信，需要启用 ngx_http_fastcgi_module 模块进行代理配置，才能将请求发送给 FastCGI 服务。</p></blockquote><h2 id="tcp怎么保障可靠性"><a href="#tcp怎么保障可靠性" class="headerlink" title="tcp怎么保障可靠性 ?"></a>tcp怎么保障可靠性 ?</h2><p>TCP 是通过下面几个特性保证数据传输的可靠性：</p><ul><li>序列号和确认应答信号</li><li>超时重发控制</li><li>连接管理</li><li>滑动窗口控制</li><li>流量控制</li><li>拥塞控制 </li></ul><p><a href="https://cloud.tencent.com/developer/article/1591989" target="_blank" rel="noopener">TCP协议可靠性是如何保证之滑动窗口，超时重发，序列号确认应答信号</a></p><h2 id="HTTP状态码502、504的区别"><a href="#HTTP状态码502、504的区别" class="headerlink" title="HTTP状态码502、504的区别 ?"></a>HTTP状态码502、504的区别 ?</h2><h3 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h3><p>此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</p><blockquote><p>nginx无法与php-fpm进行连接。<br>nginx在连接php-fpm一段时间后发现与php-fpm的连接被断开。</p></blockquote><h3 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h3><p>服务器没有准备好处理请求。 常见原因是服务器因维护或重载而停机。 请注意，与此响应一起，应发送解释问题的用户友好页面。</p><h3 id="504-Gateway-Timeout"><a href="#504-Gateway-Timeout" class="headerlink" title="504 Gateway Timeout"></a>504 Gateway Timeout</h3><p>当服务器作为网关，不能及时得到响应时返回此错误代码</p><blockquote><p>504即nginx超过了自己设置的超时时间，不等待php-fpm的返回结果，直接给客户端返回504错误。但是此时php-fpm依然还在处理请求（在没有超出自己的超时时间的情况下）。</p></blockquote><h2 id="http响应头connection的作用"><a href="#http响应头connection的作用" class="headerlink" title="http响应头connection的作用 ?"></a>http响应头connection的作用 ?</h2><blockquote><p>当client和server通信时对于长链接如何进行处理<br>在http1.1中，client和server都是默认对方支持长链接的， 如果client使用http1.1协议，但又不希望使用长链接，则需要在header中指明connection的值为close；如果server方也不想支持长链接，则在response中也需要明确说明connection的值为close.</p></blockquote><p>HTTP Connection的close设置允许客户端或服务器中任何一方关闭底层的连接双方都会要求在处理请求后关闭它们的TCP连接。</p><h2 id="top里面的参数"><a href="#top里面的参数" class="headerlink" title="top里面的参数 ?"></a>top里面的参数 ?</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">top</span> <span class="bullet">-</span> <span class="number">15</span><span class="string">:29:38</span> <span class="string">up</span> <span class="number">21</span> <span class="string">min,</span>  <span class="number">1</span> <span class="string">user,</span>  <span class="attr">load average:</span> <span class="number">0.34</span><span class="string">,</span> <span class="number">0.36</span><span class="string">,</span> <span class="number">0.42</span></span><br><span class="line"><span class="attr">Tasks:</span> <span class="number">151</span> <span class="string">total,</span>   <span class="number">2</span> <span class="string">running,</span> <span class="number">149</span> <span class="string">sleeping,</span>   <span class="number">0</span> <span class="string">stopped,</span>   <span class="number">0</span> <span class="string">zombie</span></span><br><span class="line"><span class="string">%Cpu(s):</span>  <span class="number">0.0</span> <span class="string">us,</span>  <span class="number">0.0</span> <span class="string">sy,</span>  <span class="number">0.0</span> <span class="string">ni,100.0</span> <span class="string">id,</span>  <span class="number">0.0</span> <span class="string">wa,</span>  <span class="number">0.0</span> <span class="string">hi,</span>  <span class="number">0.0</span> <span class="string">si,</span>  <span class="number">0.0</span> <span class="string">st</span></span><br><span class="line"><span class="attr">KiB Mem :</span>  <span class="number">3880924</span> <span class="string">total,</span>   <span class="number">393196</span> <span class="string">free,</span>  <span class="number">2112048</span> <span class="string">used,</span>  <span class="number">1375680</span> <span class="string">buff/cache</span></span><br><span class="line"><span class="attr">KiB Swap:</span>  <span class="number">2097148</span> <span class="string">total,</span>  <span class="number">2097148</span> <span class="string">free,</span>        <span class="number">0</span> <span class="string">used.</span>  <span class="number">1439300</span> <span class="string">avail</span> <span class="string">Mem</span></span><br></pre></td></tr></table></figure><ul><li>第一行是任务队列信息</li><li>第二行是进程信息</li><li>第三行是CPU信息</li><li>第四,五行是内存信息</li></ul><h2 id="lsof-ps-netstat-的区别"><a href="#lsof-ps-netstat-的区别" class="headerlink" title="lsof ps netstat 的区别 ?"></a>lsof ps netstat 的区别 ?</h2><ul><li><code>lsof</code>:（列出打开文件lists openfiles）能看到pid和用户(有权限控制，只能看到本用户)，可以找到哪个进程占用了这个端口</li><li><code>ps</code>:（process）查看有终端控制的所有进程</li><li><code>netstat</code>: 用于显示各种网络相关信息，如网络连接，路由表，接口状态</li></ul><h2 id="php脚本解析流程"><a href="#php脚本解析流程" class="headerlink" title="php脚本解析流程 ?"></a>php脚本解析流程 ?</h2><p>抛开各个SAPI实现上的差异，PHP程序的执行流程可以简单归结如下：</p><ol><li>程序启动, Zend引擎和核心组件初始化</li><li>扩展初始化(MINT)</li><li>收到请求,扩展激活(RINIT)</li><li>解析,执行PHP脚本</li><li>请求结束, 扩展停用 (RSHUTDOWN)</li><li>卸载扩展 (MSHUTDOWN)</li><li>程序关闭</li></ol><h2 id="php的引用是怎么实现的"><a href="#php的引用是怎么实现的" class="headerlink" title="php的引用是怎么实现的 ?"></a>php的引用是怎么实现的 ?</h2><blockquote><p>在PHP中引用意味着用不同的名字访问同一个变量的内容；</p></blockquote><h2 id="destruct-触发机制"><a href="#destruct-触发机制" class="headerlink" title="__destruct() 触发机制 ?"></a>__destruct() 触发机制 ?</h2><p>当销毁一个对象时才会调用对象的析构函数，一般情况下，销毁一个对象的触发时机为</p><ol><li>主动调用<code>unset($obj)</code></li><li>主动调用<code>$obj = null</code></li><li>程序自动结束</li></ol><h2 id="应用进程和内核的关系"><a href="#应用进程和内核的关系" class="headerlink" title="应用进程和内核的关系 ?"></a>应用进程和内核的关系 ?</h2><ul><li>应用进程即用户态进程，运行于操作系统之上，通过系统调用与操作系统进行交互</li><li>内核即操作系统内核，用于控制计算机硬件。</li></ul><h2 id="普通索引的查询流程"><a href="#普通索引的查询流程" class="headerlink" title="普通索引的查询流程 ?"></a>普通索引的查询流程 ?</h2><h3 id="查询过程"><a href="#查询过程" class="headerlink" title="查询过程"></a>查询过程</h3><ul><li>普通索引: 查找到满足条件的第一个记录后，需要查找下一个记录， 直到碰到第一个不满足条件的记录。</li><li>唯一索引: 由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索</li></ul><h3 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h3><ul><li>普通索引: 唯一索引的更新就不能使用 change buffer，只有普通索引可以使用</li><li>唯一索引: 对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。</li></ul><h3 id="插入过程"><a href="#插入过程" class="headerlink" title="插入过程"></a>插入过程</h3><ul><li>普通索引: 对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</li><li>唯一索引: 对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束</li></ul><h3 id="change-buffer"><a href="#change-buffer" class="headerlink" title="change buffer"></a>change buffer</h3><blockquote><p>写缓存（Change Buffer） 是一种特殊的数据结构，用于在对数据变更时，如果数据所在的数据页没有在 buffer pool 中的话，在不影响数据一致性的前提下，InnoDB 引擎会将对数据的操作缓存在 Change Buffer 中，这样就省去了从磁盘中读入这个数据页。</p></blockquote><h2 id="Docker网段冲突"><a href="#Docker网段冲突" class="headerlink" title="Docker网段冲突 ?"></a>Docker网段冲突 ?</h2><p>docker默认网段是172.17，和公司的网段冲突，因此解决的办法其实也挺简单的，要么换公司网段，要么换docker网段，是个正常人都会选择换docker网段</p><h3 id="方案一：不改docker网段，创建不和公司网段冲突的docker子网段"><a href="#方案一：不改docker网段，创建不和公司网段冲突的docker子网段" class="headerlink" title="方案一：不改docker网段，创建不和公司网段冲突的docker子网段"></a>方案一：不改docker网段，创建不和公司网段冲突的docker子网段</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver=bridge --subnet=<span class="number">192.161</span>.<span class="number">0.0</span>/<span class="number">16</span> monitor_net</span><br></pre></td></tr></table></figure><p>docker network create –driver=bridge –subnet=192.161.0.0/16 monitor_net</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -it --name &lt;容器名&gt; ---network monitor_net  &lt;镜像名</span></span><br></pre></td></tr></table></figure><p>在docker-compose同样通过networks指定，形如下</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">    version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="symbol">networks:</span></span><br><span class="line"><span class="symbol">   monitor:</span></span><br><span class="line">   <span class="meta">#使用已经存在的网络</span></span><br><span class="line"><span class="symbol">     external:</span></span><br><span class="line"><span class="symbol">       name:</span> monitor_net  </span><br><span class="line"></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">    prometheus:</span></span><br><span class="line"><span class="symbol">        image:</span> prom/prometheus</span><br><span class="line"><span class="symbol">        container_name:</span> prometheus</span><br><span class="line"><span class="symbol">        hostname:</span> prometheus</span><br><span class="line"><span class="symbol">        privileged:</span> true</span><br><span class="line"><span class="symbol">        restart:</span> always</span><br><span class="line"><span class="symbol">        volumes:</span></span><br><span class="line">            - <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/src/</span>config/prometheus.yml:<span class="meta-keyword">/etc/</span>prometheus/prometheus.yml</span><br><span class="line">            - <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/src/</span>config/node_down.yml:<span class="meta-keyword">/etc/</span>prometheus/node_down.yml</span><br><span class="line"><span class="symbol">        ports:</span></span><br><span class="line">            - <span class="string">"9091:9090"</span></span><br><span class="line"><span class="symbol">        networks:</span></span><br><span class="line">            - monitor</span><br><span class="line"><span class="symbol">        links:</span></span><br><span class="line">            - alertmanager</span><br><span class="line">            - node-exporter</span><br></pre></td></tr></table></figure><h3 id="方案二：修改docker默认网段"><a href="#方案二：修改docker默认网段" class="headerlink" title="方案二：修改docker默认网段"></a>方案二：修改docker默认网段</h3><ol><li>停止docker</li></ol><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><ol start="2"><li>删除原有网桥</li></ol><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link del docker0 down</span><br></pre></td></tr></table></figure><ol start="3"><li>vim /etc/docker/daemon.json，添加形如下内容</li></ol><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"bip"</span>:<span class="string">"192.161.20.1/24"</span></span><br></pre></td></tr></table></figure><ol start="4"><li>重启docker服务</li></ol><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Docker-for-mac"><a href="#Docker-for-mac" class="headerlink" title="Docker for mac"></a>Docker for mac</h3><p>如果本地环境是 Docker for mac，依次打开 Preferences -&gt; Daemon -&gt; Advanced ，增加配置 <code>&quot;bip&quot; : &quot;172.16.10.1/24&quot;</code>，从而避免网段冲突的问题。</p><h3 id="docker-machine"><a href="#docker-machine" class="headerlink" title="docker-machine"></a>docker-machine</h3><p>编辑文件<code>/etc/docker/daemon.json</code>，增加 <code>{&quot;bip&quot; : &quot;172.16.10.1/24&quot;}</code>，然后退出虚拟机，重启docker-machine即可成功修改网段。</p><h1 id="来自鸡哥的面试-SHEIN"><a href="#来自鸡哥的面试-SHEIN" class="headerlink" title="来自鸡哥的面试 (SHEIN)"></a>来自鸡哥的面试 (SHEIN)</h1><h2 id="进程-线程-协程的区别"><a href="#进程-线程-协程的区别" class="headerlink" title="进程, 线程, 协程的区别 ?"></a>进程, 线程, 协程的区别 ?</h2><h3 id="进程是什么？"><a href="#进程是什么？" class="headerlink" title="进程是什么？"></a>进程是什么？</h3><p>进程就是应用程序的启动实例。<br>例如：打开一个软件，就是开启了一个进程。<br>进程拥有代码和打开的文件资源，数据资源，独立的内存空间。</p><h3 id="线程是什么"><a href="#线程是什么" class="headerlink" title="线程是什么?"></a>线程是什么?</h3><p>线程属于进程，是程序的执行者。<br>一个进程至少包含一个主线程，也可以有更多的子线程。<br>线程有两种调度策略，一是：分时调度，二是：抢占式调度。</p><h3 id="协程是什么？"><a href="#协程是什么？" class="headerlink" title="协程是什么？"></a>协程是什么？</h3><p>协程是轻量级线程，协程的创建、切换、挂起、销毁全部为内存操作，消耗是非常低的。<br>协程是属于线程，协程是在线程里执行的。<br>协程的调度是用户手动切换的，所以又叫用户空间线程。<br>协程的调度策略是：协作式调度。</p><h2 id="什么是缓存雪崩-缓存穿透-缓存击穿"><a href="#什么是缓存雪崩-缓存穿透-缓存击穿" class="headerlink" title="什么是缓存雪崩,缓存穿透,缓存击穿 ?"></a>什么是缓存雪崩,缓存穿透,缓存击穿 ?</h2><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote><p>缓存在某一个时刻出现大规模的key失效<br>那么就会导致大量的请求打在了数据库上面，导致数据库压力巨大，如果在高并发的情况下，可能瞬间就会导致数据库宕机。</p></blockquote><ul><li>解决方案</li></ul><p>(1): 事前</p><ol><li>设置不同的过期时间，让缓存失效的时间尽量均匀，避免相同的过期时间导致缓存雪崩，造成大量数据库的访问。</li><li>分级缓存：第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。</li><li>热点数据缓存永远不过期。</li><li>保证Redis缓存的高可用，防止Redis宕机导致缓存雪崩的问题。可以使用 主从+ 哨兵，Redis集群来避免 Redis 全盘崩溃的情况。</li></ol><p>(2): 事中</p><ol><li>互斥锁：在缓存失效后，通过互斥锁或者队列来控制读数据写缓存的线程数量，比如某个key只允许一个线程查询数据和写缓存，其他线程等待。这种方式会阻塞其他的线程，此时系统的吞吐量会下降</li><li>使用熔断机制，限流降级。当流量达到一定的阈值，直接返回“系统拥挤”之类的提示，防止过多的请求打在数据库上将数据库击垮，至少能保证一部分用户是可以正常使用，其他用户多刷新几次也能得到结果。</li></ol><p>(3): 事后</p><ol><li>开启Redis持久化机制，尽快恢复缓存数据，一旦重启，就能从磁盘上自动加载数据恢复内存中的数据。</li></ol><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><blockquote><p>缓存击穿跟缓存雪崩有点类似，缓存雪崩是大规模的key失效，而缓存击穿是某个热点的key失效，大并发集中对其进行请求，就会造成大量请求读缓存没读到数据，从而导致高并发访问数据库，引起数据库压力剧增。这种现象就叫做缓存击穿。</p></blockquote><ul><li>解决方案</li></ul><ol><li>在缓存失效后，通过互斥锁或者队列来控制读数据写缓存的线程数量，比如某个key只允许一个线程查询数据和写缓存，其他线程等待。这种方式会阻塞其他的线程，此时系统的吞吐量会下降</li><li>热点数据缓存永远不过期。</li></ol><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><blockquote><p>缓存穿透是指用户请求的数据在缓存中不存在即没有命中，同时在数据库中也不存在，导致用户每次请求该数据都要去数据库中查询一遍。如果有恶意攻击者不断请求系统中不存在的数据，会导致短时间大量请求落在数据库上，造成数据库压力过大，甚至导致数据库承受不住而宕机崩溃。</p></blockquote><ul><li>解决方案</li></ul><ol><li>将无效的key存放进Redis中</li><li>使用布隆过滤器</li></ol><h3 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h3><blockquote><p>缓存预热是指系统上线后，提前将相关的缓存数据加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题，用户直接查询事先被预热的缓存数据。</p></blockquote><h3 id="缓存降级"><a href="#缓存降级" class="headerlink" title="缓存降级"></a>缓存降级</h3><p>缓存降级是指缓存失效或缓存服务器挂掉的情况下，不去访问数据库，直接返回默认数据或访问服务的内存数据。降级一般是有损的操作，所以尽量减少降级对于业务的影响程度。</p><p>在项目实战中通常会将部分热点数据缓存到服务的内存中，这样一旦缓存出现异常，可以直接使用服务的内存数据，从而避免数据库遭受巨大压力。</p><h2 id="B-tree是什么-优缺点"><a href="#B-tree是什么-优缺点" class="headerlink" title="B+tree是什么 ? 优缺点?"></a>B+tree是什么 ? 优缺点?</h2><p>首先注意：B树就是B-树，”-“是个连字符号，不是减号。</p><p>B-树是一种平衡的多路查找(又称排序)树，在文件系统中有所应用。主要用作文件的索引。其中的B就表示平衡(Balance)</p><p>B+树有一个最大的好处，方便扫库，B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了。</p><ul><li>优点</li></ul><ol><li>单次请求涉及的磁盘IO次数少（出度d大，且非叶子节点不包含表数据，树的高度小）</li><li>查询效率稳定（任何关键字的查询必须走从根结点到叶子结点，查询路径长度相同）</li><li>遍历效率高（从符合条件的某个叶子节点开始遍历即可）</li></ol><ul><li>缺点</li></ul><ol><li>B+树最大的性能问题在于会产生大量的随机IO，主要存在以下两种情况<ul><li>主键不是有序递增的，导致每次插入数据产生大量的数据迁移和空间碎片；</li><li>即使主键是有序递增的，大量写请求的分布仍是随机的；</li></ul></li></ol><h2 id="什么是死信队列"><a href="#什么是死信队列" class="headerlink" title="什么是死信队列 ?"></a>什么是死信队列 ?</h2><blockquote><p>死信队列：没有被及时消费的消息存放的队列</p></blockquote><ul><li>消息被拒绝（basic.reject/ basic.nack）并且不再重新投递 requeue=false</li><li>TTL(time-to-live) 消息超时未消费</li><li>达到最大队列长度</li></ul><blockquote><p>消息变成死信后，会被重新投递（publish）到另一个交换机上（Exchange）,这个交换机往往被称为DLX(dead-letter-exchange)“死信交换机”，然后交换机根据绑定规则转发到对应的队列上，监听该队列就可以被重新消费。</p><p>生产者–&gt;发送消息–&gt;交换机–&gt;队列–&gt;变成死信队列–&gt;DLX交换机–&gt;队列–&gt;监听–&gt;消费者</p></blockquote><h2 id="Redis的过期策略"><a href="#Redis的过期策略" class="headerlink" title="Redis的过期策略 ?"></a>Redis的过期策略 ?</h2><ul><li>定时过期: 每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除<ul><li>优点: 该策略可以立即清除过期的数据，对内存很友好</li><li>缺点 但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。</li></ul></li><li>惰性过期: 只有当访问一个key时，才会判断该key是否已过期，过期则清除。<ul><li>优点: 该策略可以最大化地节省CPU资源，却对内存非常不友好。</li><li>缺点: 极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。</li></ul></li><li>定期过期: 每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。<ul><li>优点: 通过限制删除操作的时长和频率，来减少删除操作对CPU时间的占用–处理”定时删除”的缺点 定期删除过期key–处理”惰性删除”的缺点。</li><li>缺点: 在内存友好方面，不如”定时删除”，因为是随机遍历一些key，因此存在部分key过期，但遍历key时，没有被遍历到，过期的key仍在内存中。在CPU时间友好方面，不如”惰性删除”，定期删除也会暂用CPU性能消耗。</li></ul></li></ul><blockquote><p>Redis中同时使用了惰性过期和定期过期两种过期策略。</p></blockquote><h3 id="Redis的内存淘汰策略"><a href="#Redis的内存淘汰策略" class="headerlink" title="Redis的内存淘汰策略"></a>Redis的内存淘汰策略</h3><ul><li><code>noeviction</code>：当内存不足以容纳新写入数据时，新写入操作会报错。</li><li><code>allkeys-lru</code>：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。</li><li><code>allkeys-random</code>：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</li><li><code>volatile-lru</code>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</li><li><code>volatile-random</code>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</li><li><code>volatile-ttl</code>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除</li></ul><h2 id="Laravel的队列实现原理"><a href="#Laravel的队列实现原理" class="headerlink" title="Laravel的队列实现原理 ?"></a>Laravel的队列实现原理 ?</h2><blockquote><p>redis的延迟队列一般是通过有序集合zset实现的</p></blockquote><h1 id="更早的一些面试题"><a href="#更早的一些面试题" class="headerlink" title="更早的一些面试题"></a>更早的一些面试题</h1><h2 id="Mysql负载均衡-主从复制问题"><a href="#Mysql负载均衡-主从复制问题" class="headerlink" title="Mysql负载均衡,主从复制问题"></a>Mysql负载均衡,主从复制问题</h2><h2 id="非关系型数据库的优缺点"><a href="#非关系型数据库的优缺点" class="headerlink" title="非关系型数据库的优缺点?"></a>非关系型数据库的优缺点?</h2><ul><li>先说说关系型数据库优点</li></ul><ol><li>都是使用表结构，格式一致，易于维护。</li><li>使用通用的 SQL 语言操作，使用方便，可用于复杂查询。</li><li>数据存储在磁盘中，安全。</li></ol><ul><li>非关系型数据库优点</li></ul><ol><li>非关系型数据库存储数据的格式可以是 key-value 形式、文档形式、图片形式等。使用灵活，应用场景广泛，而关系型数据库则只支持基础类型。</li><li>速度快，效率高。 NoSQL 可以使用硬盘或者随机存储器作为载体，而关系型数据库只能使用硬盘。</li><li>海量数据的维护和处理非常轻松。</li><li>非关系型数据库具有扩展简单、高并发、高稳定性、成本低廉的优势。</li><li>可以实现数据的分布式处理。</li></ol><ul><li>非关系型数据库缺点</li></ul><ol><li>非关系型数据库暂时不提供 SQL 支持，学习和使用成本较高。</li><li>非关系数据库没有事务处理，没有保证数据的完整性和安全性。适合处理海量数据，但是不一定安全。</li><li>功能没有关系型数据库完善。</li></ol><h2 id="Redis的类型以及应用场景"><a href="#Redis的类型以及应用场景" class="headerlink" title="Redis的类型以及应用场景"></a>Redis的类型以及应用场景</h2><ul><li><a href="https://laravelacademy.org/books/high-performance-redis" target="_blank" rel="noopener">高性能 Redis 实战</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;保持学习, 保持警惕, 居安思危, 走出舒适区.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="笔试题" scheme="http://blog.caoxl.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 通过binlog恢复数据</title>
    <link href="http://blog.caoxl.com/2021/03/24/MySQL-Restore-By-Binlog/"/>
    <id>http://blog.caoxl.com/2021/03/24/MySQL-Restore-By-Binlog/</id>
    <published>2021-03-24T09:19:17.000Z</published>
    <updated>2021-03-25T09:18:09.991Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>日常开发，运维中，经常会出现误删数据的情况。误删数据的类型大致可分为以下几类：</p><ul><li>使用 <code>delete</code> 误删行</li><li>使用 <code>drop table</code> 或 <code>truncate table</code> 误删表</li><li>使用 <code>drop database</code> 语句误删数据库</li><li>使用 <code>rm</code> 命令误删整个 MySQL 实例。</li></ul><a id="more"></a><h1 id="本文目的"><a href="#本文目的" class="headerlink" title="本文目的"></a>本文目的</h1><p>通过了解 binlog 日志的相关配置，简单掌握通过 binlog 对数据库进行数据恢复操作；</p><h1 id="mysql-日志文件"><a href="#mysql-日志文件" class="headerlink" title="mysql 日志文件"></a>mysql 日志文件</h1><p>mysql 主要有以下几种日志：</p><ul><li>错误日志：记录 mysql 运行过程中的错误信息</li><li>一般查询日志：记录 mysql 正在运行的语句，包括查询、修改、更新等的每条 sql</li><li>慢查询日志：记录查询比较耗时的 SQL 语句</li><li>binlog 日志：记录数据修改记录，包括创建表、数据更新等</li></ul><p>这些日志均需要在 my.cnf 文件进行配置，如果不知道 mysql 的配置文件路径，可以使用 mysql 命令进行查找，</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="params">--verbose</span> <span class="params">--help</span> | grep -A 1 'Default options’ <span class="comment">#该命令会罗列出my.cnf顺序查找的路径。</span></span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[WWW] mysql --verbose --help | grep -A 1 <span class="string">'Default options'</span></span><br><span class="line">Default options are read <span class="keyword">from</span> the following files <span class="keyword">in</span> the given order:</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf /Applications/MAMP/conf/my.cnf ~/.my.cnf</span><br></pre></td></tr></table></figure><h1 id="binlog-日志"><a href="#binlog-日志" class="headerlink" title="binlog 日志"></a>binlog 日志</h1><p><code>binlog</code> 就是 <code>binary log</code>，二进制日志文件，记录所有数据库更新语句，包括表更新和记录更新，即数据操纵语言 (DML)，<code>binlog</code> 主要用于数据恢复和配置主从复制等；</p><blockquote><ul><li>数据恢复：当数据库误删或者发生不可描述的事情时，可以通过 binlog 恢复到某个时间点的数据。</li><li>主从复制：当有数据库更新之后，主库通过 binlog 记录并通知从库进行更新，从而保证主从数据库数据一致；</li></ul></blockquote><p>mysql 按照功能分为服务层模块和存储引擎层模块，服务层负责客户端连接、SQL 语句处理优化等操作，存储引擎层负责数据的存储和查询；</p><p>binlog 属于服务层模块的日志，即引擎无关性，所有数据引擎的数据更改都会记录 binlog 日志。</p><p>当数据库发生崩溃时，如果使用 InnoDB 引擎，binlog 日志还可以检验 InnoDB 的 redo 日志的 commit 情况。</p><h1 id="binlog-日志开启"><a href="#binlog-日志开启" class="headerlink" title="binlog 日志开启"></a>binlog 日志开启</h1><h2 id="日志开启方式"><a href="#日志开启方式" class="headerlink" title="日志开启方式"></a>日志开启方式</h2><ol><li>添加配置</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log_bin</span>=<span class="literal">ON</span></span><br><span class="line"><span class="attr">log_bin_basename</span>=/path/bin-log</span><br><span class="line"><span class="attr">log_bin_index</span>=/path/bin-log.index</span><br></pre></td></tr></table></figure><ol start="2"><li>仅仅设置log-bin参数</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span>-bin=/<span class="built_in">path</span>/bin-<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>当开启 binlog 日志之后，mysql 会创建一个 log_bin_index 指定的 .index 文件和多个二进制日志文件，index 中按顺序记录了 mysql 使用的所有 binlog 文件。binlog 日志则会以指定的名称 (或默认值) 加自增的数字作为后缀，ex：<code>bin-log.000001</code>，当发生下述三种情况时，binlog 日志便会进行重建</p><blockquote><p>文件大小达到 <code>max_binlog_size</code> 参数的值<br>执行 flush logs 命令<br>重启 mysql 服务</p></blockquote><p>实例:</p><ul><li>设置log-bin参数</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log-bin</span> = /Users/caoxl/WWW/mysqlbinlog/mysql-binlog</span><br><span class="line"><span class="attr">binlog_format</span> = row</span><br></pre></td></tr></table></figure><ul><li>查看log-bin是否开启</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="emphasis">'log_bin'</span>;</span><br><span class="line"><span class="code">+---------------+</span>-------+</span><br><span class="line">| Variable<span class="emphasis">_name | Value |</span></span><br><span class="line"><span class="emphasis">+---------------+-------+</span></span><br><span class="line"><span class="emphasis">| log_</span>bin       | OFF   |</span><br><span class="line"><span class="code">+---------------+</span>-------+</span><br><span class="line">1 row in set (0.20 sec)</span><br><span class="line"><span class="code"> </span></span><br><span class="line">mysql&gt; show variables like <span class="emphasis">'log_bin'</span>;</span><br><span class="line"><span class="code">+---------------+</span>-------+</span><br><span class="line">| Variable<span class="emphasis">_name | Value |</span></span><br><span class="line"><span class="emphasis">+---------------+-------+</span></span><br><span class="line"><span class="emphasis">| log_</span>bin       | ON    |</span><br><span class="line"><span class="code">+---------------+</span>-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><h2 id="binlog日志格式"><a href="#binlog日志格式" class="headerlink" title="binlog日志格式"></a>binlog日志格式</h2><p>通过参数 <code>binlog_format</code> 参数的值，可以设置 <code>binlog</code> 的格式，可选值有 <code>statement</code>、<code>row</code>、<code>mixed</code></p><ul><li><code>statement</code> 格式：记录数据库执行的原始 SQL 语句</li><li><code>row</code> 格式：记录具体的行的修改，这个为目前默认值</li><li><code>mixed</code> 格式：因为上边两种格式各有优缺点，所以就出现了 mixed 格式</li></ul><h1 id="binlog-日志查看工具：mysqlbinlog"><a href="#binlog-日志查看工具：mysqlbinlog" class="headerlink" title="binlog 日志查看工具：mysqlbinlog"></a>binlog 日志查看工具：mysqlbinlog</h1><p>因为 binlog 是二进制文件，不能像其他文件一样，直接打开查看。但 mysql 提供了 binlog 查看工具 mysqlbinlog，可以解析二进制文件。当然不同格式的日志解析结果是不一样的；</p><ol><li>statement 格式日志，执行 <code>mysqlbinlog /path/bin-log.000001</code>，可以直接看到原始执行的 SQL 语句</li><li>row 格式日志，则可读性没有那么好，但仍可通过参数使文档更加可读 <code>mysqlbinlog -v /path/bin-log.000001</code></li></ol><p><code>mysqlbinlog</code> 两对非常重要的参数</p><ol><li><code>--start-datetime</code> &amp; <code>--stop-datetime</code> 解析某一个时间段内的 binlog；</li><li><code>--start-position</code> &amp; <code>--stop-position</code> 解析在两个 position 之间的 binlog；</li></ol><h1 id="使用-binlog-恢复数据"><a href="#使用-binlog-恢复数据" class="headerlink" title="使用 binlog 恢复数据"></a>使用 binlog 恢复数据</h1><p>使用 <code>binlog</code> 恢复数据，本质上就是通过 <code>binlog</code> 找到所有 DML 操作，去掉错误的 SQL 语句，然后重走一遍长征路，就可以将数据恢复；</p><h2 id="通过-MySQL-Cli-查询-BINLOG-信息"><a href="#通过-MySQL-Cli-查询-BINLOG-信息" class="headerlink" title="通过 MySQL Cli 查询 BINLOG 信息"></a>通过 MySQL Cli 查询 BINLOG 信息</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># 查询 BINLOG 格式</span><br><span class="line">mysql&gt; show variables like <span class="emphasis">'binlog_format'</span>;</span><br><span class="line"><span class="code">+---------------+</span>-------+</span><br><span class="line">| Variable<span class="emphasis">_name | Value |</span></span><br><span class="line"><span class="emphasis">+---------------+-------+</span></span><br><span class="line"><span class="emphasis">| binlog_</span>format | ROW   |</span><br><span class="line"><span class="code">+---------------+</span>-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 查询当前数据库中 BINLOG 名称及大小</span><br><span class="line">mysql&gt; show binary logs;</span><br><span class="line"><span class="code">+---------------------+</span>-----------+</span><br><span class="line">| Log<span class="emphasis">_name            | File_</span>size |</span><br><span class="line"><span class="code">+---------------------+</span>-----------+</span><br><span class="line">| mysql-binlog.000001 |       177 |</span><br><span class="line">| mysql-binlog.000002 |       177 |</span><br><span class="line">| mysql-binlog.000003 |      2120 |</span><br><span class="line">| mysql-binlog.000004 |       154 |</span><br><span class="line"><span class="code">+---------------------+</span>-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 查看 master 正在写入的 BINLOG 信息</span><br><span class="line">mysql&gt; show master status\G;</span><br><span class="line"><span class="bullet">*************************** </span>1. row **************************<span class="strong">*</span></span><br><span class="line"><span class="strong">             File: mysql-binlog.000004</span></span><br><span class="line"><span class="strong">         Position: 154</span></span><br><span class="line"><span class="strong">     Binlog_Do_DB: </span></span><br><span class="line"><span class="strong"> Binlog_Ignore_DB: </span></span><br><span class="line"><span class="strong">Executed_Gtid_Set: </span></span><br><span class="line"><span class="strong">1 row in set (0.00 sec)</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">ERROR: </span></span><br><span class="line"><span class="strong">No query specified</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"># 通过 offset 查看 BINLOG 信息</span></span><br><span class="line"><span class="strong">mysql&gt; show BINLOG events in 'mysql-binlog.000004' limit 1,  10;</span></span><br><span class="line"><span class="strong">+---------------------+-----+----------------+-----------+-------------+------+</span></span><br><span class="line"><span class="strong">| Log_name            | Pos | Event_type     | Server_id | End_log_pos | Info |</span></span><br><span class="line"><span class="strong">+---------------------+-----+----------------+-----------+-------------+------+</span></span><br><span class="line"><span class="strong">| mysql-binlog.000004 | 123 | Previous_gtids |         1 |         154 |      |</span></span><br><span class="line"><span class="strong">+---------------------+-----+----------------+-----------+-------------+------+</span></span><br><span class="line"><span class="strong">1 row in set (0.00 sec)</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"># 通过 position 查看 binlog 信息</span></span><br><span class="line"><span class="strong">mysql&gt; show BINLOG events in 'mysql-binlog.000004' from 1 limit 10;</span></span><br><span class="line"><span class="strong">+---------------------+-----+----------------+-----------+-------------+---------------------------------------+</span></span><br><span class="line"><span class="strong">| Log_name            | Pos | Event_type     | Server_id | End_log_pos | Info                                  |</span></span><br><span class="line"><span class="strong">+---------------------+-----+----------------+-----------+-------------+---------------------------------------+</span></span><br><span class="line"><span class="strong">| mysql-binlog.000004 |   4 | Format_desc    |         1 |         123 | Server ver: 5.7.26-log, Binlog ver: 4 |</span></span><br><span class="line"><span class="strong">| mysql-binlog.000004 | 123 | Previous_gtids |         1 |         154 |                                       |</span></span><br><span class="line"><span class="strong">+---------------------+-----+----------------+-----------+-------------+---------------------------------------+</span></span><br><span class="line"><span class="strong">2 rows in set (0.00 sec)</span></span><br></pre></td></tr></table></figure><h2 id="通过-mysqlbinlog-查询-BINLOG-信息"><a href="#通过-mysqlbinlog-查询-BINLOG-信息" class="headerlink" title="通过 mysqlbinlog 查询 BINLOG 信息"></a>通过 mysqlbinlog 查询 BINLOG 信息</h2><p>在介绍 <code>mysqlbinlog</code> 工具使用前，先来看下 BINLOG 文件的内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 BINLOG 的信息</span></span><br><span class="line"><span class="attribute">mysqlbinlog</span> --<span class="literal">no</span>-defaults mysql-binlog.<span class="number">000004</span> | less</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># at <span class="number">219</span></span><br><span class="line">#<span class="number">210325</span> <span class="number">15</span>:<span class="number">43</span>:<span class="number">01</span> server id <span class="number">1</span>  end_log_pos <span class="number">293</span> CRC32 <span class="number">0x1ccf5f28</span> Querythread_id=<span class="number">149</span>exec_time=<span class="number">0</span>error_code=<span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><code>at</code> 表示 offset 或者说事件开始的起始位置</li><li><code>210325 15:43:01 server id 1</code> 表示 server 1 开始执行事件的日期</li><li><code>end_log_pos 293</code> 表示事件的结束位置 + 1，或者说是下一个事件的起始位置。</li><li><code>exec_time</code> 表示在 master 上花费的时间，在 salve 上，记录的时间是从 Master 记录开始，一直到 Slave 结束完成所花费的时间。</li><li><code>error_code=0</code> 表示没有错误发生。</li></ul><h2 id="导出-BINLOG-日志，用于分析和排查-sql-语句："><a href="#导出-BINLOG-日志，用于分析和排查-sql-语句：" class="headerlink" title="导出 BINLOG 日志，用于分析和排查 sql 语句："></a>导出 BINLOG 日志，用于分析和排查 sql 语句：</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog <span class="params">--no-defaults</span> <span class="params">--base64-output=decode-rows</span> -v \</span><br><span class="line"> <span class="params">--start-datetime</span>  <span class="string">"2021-03-25 14:00:00"</span> \</span><br><span class="line"> mysql-binlog.000004 &gt; <span class="string">/path/binlog_raw.sql</span></span><br></pre></td></tr></table></figure><h1 id="数据实操"><a href="#数据实操" class="headerlink" title="数据实操"></a>数据实操</h1><p>恢复的大致流程如下:</p><blockquote><ol><li>创建数据库和表，并插入数据。</li><li>误删一条数据</li><li>继续插入数据。</li><li>误删表。</li><li>最后将原来以及之后插入的数据进行恢复。</li></ol></blockquote><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><ul><li>准备数据库，表及数据：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建临时数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test_binlog \</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">charset</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sync_test`</span> (<span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) \</span><br><span class="line"><span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT, <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  \</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) ) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sync_test (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="literal">null</span>, <span class="string">'xiaoa'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sync_test (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="literal">null</span>, <span class="string">'xiaob'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sync_test (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="literal">null</span>, <span class="string">'xiaoc'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看添加的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sync_test;</span><br></pre></td></tr></table></figure><h2 id="删除表或者数据"><a href="#删除表或者数据" class="headerlink" title="删除表或者数据"></a>删除表或者数据</h2><ul><li>误删操作</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 name=xiaoc 的数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> sync_test <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入几条数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sync_test (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="literal">null</span>, <span class="string">'xiaod'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sync_test (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="literal">null</span>, <span class="string">'xiaoe'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sync_test (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="literal">null</span>, <span class="string">'xiaof'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> sync_test;</span><br></pre></td></tr></table></figure><h2 id="数据的恢复"><a href="#数据的恢复" class="headerlink" title="数据的恢复"></a>数据的恢复</h2><p>在执行数据恢复前，如果操作的是生产环境，会有如下的建议：</p><ul><li>使用 <code>flush logs</code> 命令，替换当前主库中正在使用的 <code>binlog</code> 文件，好处如下：<ul><li>可将误删操作，定位在一个 BINLOG 文件中，便于之后的数据分析和恢复。</li><li>避免操作正在被使用的 BINLOG 文件，防止发生意外情况。</li></ul></li><li>数据的恢复不要在生产库中执行，先在临时库恢复，确认无误后，再倒回生产库。防止对数据的二次伤害。</li></ul><p>通常来说，恢复主要有两个步骤：</p><ol><li>在临时库中，恢复定期执行的全量备份数据。</li><li>然后基于全量备份的数据点，通过 BINLOG 来恢复误操作和正常的数据。</li></ol><h3 id="使用-BINLOG-做数据恢复前"><a href="#使用-BINLOG-做数据恢复前" class="headerlink" title="使用 BINLOG 做数据恢复前"></a>使用 BINLOG 做数据恢复前</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 查看正在使用的 Binlog 文件</span></span><br><span class="line">mysql&gt; show master status\G;</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">** 1. row **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line"><span class="code">             File: mysql-binlog.000004</span></span><br><span class="line"><span class="code">         Position: 3325</span></span><br><span class="line"><span class="code">     Binlog_Do_DB: </span></span><br><span class="line"> Binlog<span class="emphasis">_Ignore_</span>DB: </span><br><span class="line">Executed<span class="emphasis">_Gtid_</span>Set: </span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"><span class="section"># 显示结果是: mysql-binlog.000004</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 执行 flush logs 操作，生成新的 BINLOG</span></span><br><span class="line">mysql&gt; flush logs;</span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br><span class="line"></span><br><span class="line"><span class="section"># 查看正在使用的 Binlog 文件</span></span><br><span class="line">mysql&gt; show master status\G;</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">** 1. row **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line"><span class="code">             File: mysql-binlog.000005</span></span><br><span class="line"><span class="code">         Position: 154</span></span><br><span class="line"><span class="code">     Binlog_Do_DB: </span></span><br><span class="line"> Binlog<span class="emphasis">_Ignore_</span>DB: </span><br><span class="line">Executed<span class="emphasis">_Gtid_</span>Set: </span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"><span class="section"># 显示结果是: mysql-binlog.000005</span></span><br></pre></td></tr></table></figure><h3 id="确定恢复数据的步骤"><a href="#确定恢复数据的步骤" class="headerlink" title="确定恢复数据的步骤"></a>确定恢复数据的步骤</h3><p>这里主要是有两条误删的操作，数据行的误删和表的误删。有两种方式进行恢复。</p><ul><li>方式一：首先恢复到删除表操作之前的位置，然后再单独恢复误删的数据行。</li><li>方式二：首先恢复到误删数据行的之前的位置，然后跳过误删事件再恢复数据表操作之前的位置。</li></ul><p>这里采用方式一的方案进行演示，由于是演示，就不额外找一个临时库进行全量恢复了，直接进行操作。</p><h3 id="查询创建表的事件位置和删除表的事件位置"><a href="#查询创建表的事件位置和删除表的事件位置" class="headerlink" title="查询创建表的事件位置和删除表的事件位置"></a>查询创建表的事件位置和删除表的事件位置</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据时间确定位置信息</span></span><br><span class="line">mysqlbinlog <span class="params">--no-defaults</span> <span class="params">--base64-output=decode-rows</span> -v \</span><br><span class="line"> <span class="params">--start-datetime</span>  <span class="string">"2021-03-25 14:00:00"</span> \</span><br><span class="line"> <span class="params">--database</span> test_binlog  mysql-binlog.000005 | less</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出SQL,方便分析</span></span><br><span class="line">mysqlbinlog <span class="params">--no-defaults</span> <span class="params">--base64-output=decode-rows</span> -v \</span><br><span class="line"> <span class="params">--start-datetime</span>  <span class="string">"2021-03-25 14:00:00"</span> \</span><br><span class="line"> mysql-binlog.000001 &gt; <span class="string">/your-path/binlog_raw.sql</span></span><br></pre></td></tr></table></figure><h4 id="创建表的开始位置"><a href="#创建表的开始位置" class="headerlink" title="创建表的开始位置:"></a>创建表的开始位置:</h4><p><img src="https://caoxl.com/imgs/create_table.png" alt="创建表的开始位置"></p><h4 id="创建表的结束位置"><a href="#创建表的结束位置" class="headerlink" title="创建表的结束位置:"></a>创建表的结束位置:</h4><p><img src="https://caoxl.com/imgs/drop_table.png" alt="创建表的结束位置"></p><h4 id="插入-name-39-xiaoc-39-的位置："><a href="#插入-name-39-xiaoc-39-的位置：" class="headerlink" title="插入 name=&#39;xiaoc&#39; 的位置："></a>插入 <code>name=&#39;xiaoc&#39;</code> 的位置：</h4><p><img src="https://caoxl.com/imgs/insert_table.png" alt="插入 `name=&#39;xiaoc&#39;` 的位置"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据位置导出 SQL 文件</span></span><br><span class="line">mysqlbinlog <span class="params">--no-defaults</span> <span class="params">--base64-output=decode-rows</span> -v \</span><br><span class="line"> <span class="params">--start-position</span> <span class="string">"398"</span> <span class="params">--stop-position</span> <span class="string">"2699"</span> \</span><br><span class="line"> <span class="params">--database</span> test_binlog  mysql-binlog.000005 \</span><br><span class="line"> &gt; <span class="string">/your-path/test_binlog_step1.sql</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">mysqlbinlog <span class="params">--no-defaults</span> <span class="params">--base64-output=decode-rows</span> -v \</span><br><span class="line"> <span class="params">--start-position</span> <span class="string">"1279"</span> <span class="params">--stop-position</span> <span class="string">"1563"</span> \</span><br><span class="line"> <span class="params">--database</span> test_binlog  mysql-binlog.000005 \</span><br><span class="line"> &gt; <span class="string">/your-path/test_binlog_step2.sql</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 mysql 进行恢复</span></span><br><span class="line">mysql -u root -p &lt; <span class="string">/your-path//test_binlog_step1.sql</span></span><br><span class="line">mysql -u root -p &lt; <span class="string">/your-path//test_binlog_step2.sql</span></span><br></pre></td></tr></table></figure><blockquote><p>MySQL 5.7 中无论是否打开 GTID 的配置，在每次事务开启时，都首先会出 GTID 的一个事务，用于并行复制。所以在确定导出开始事务位置时，要算上这个事件。<br>在使用 –stop-position 导出时，会导出在指定位置的前一个事件，所以这里要推后一个事务。<br>对于 DML 的语句，主要结束位置要算上 COMMIT 的位置。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常开发，运维中，经常会出现误删数据的情况。误删数据的类型大致可分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;delete&lt;/code&gt; 误删行&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;drop table&lt;/code&gt; 或 &lt;code&gt;truncate table&lt;/code&gt; 误删表&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;drop database&lt;/code&gt; 语句误删数据库&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;rm&lt;/code&gt; 命令误删整个 MySQL 实例。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="MySQL" scheme="http://blog.caoxl.com/tags/MySQL/"/>
    
      <category term="Binlog" scheme="http://blog.caoxl.com/tags/Binlog/"/>
    
  </entry>
  
  <entry>
    <title>梁超 作品集</title>
    <link href="http://blog.caoxl.com/2020/12/23/Liangchao-UI-PM-Resume/"/>
    <id>http://blog.caoxl.com/2020/12/23/Liangchao-UI-PM-Resume/</id>
    <published>2020-12-23T02:54:40.000Z</published>
    <updated>2020-12-23T02:59:31.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>梁超 2019-2020作品集</p></blockquote><a id="more"></a><p><img src="https://caoxl.oss-cn-shenzhen.aliyuncs.com/%E4%B9%90%E4%B9%90/lc_hd.jpg" alt="作品集"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;梁超 2019-2020作品集&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="caoxl" scheme="http://blog.caoxl.com/categories/caoxl/"/>
    
    
      <category term="梁超" scheme="http://blog.caoxl.com/tags/%E6%A2%81%E8%B6%85/"/>
    
      <category term="UI" scheme="http://blog.caoxl.com/tags/UI/"/>
    
      <category term="产品" scheme="http://blog.caoxl.com/tags/%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>大厂面试题 I</title>
    <link href="http://blog.caoxl.com/2020/11/12/Interview-Questions-For-BAT-I/"/>
    <id>http://blog.caoxl.com/2020/11/12/Interview-Questions-For-BAT-I/</id>
    <published>2020-11-12T02:19:14.000Z</published>
    <updated>2020-11-12T07:36:07.853Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>保持学习, 保持警惕, 居安思危, 走出舒适区.</p></blockquote><a id="more"></a><h1 id="字节一面"><a href="#字节一面" class="headerlink" title="字节一面"></a>字节一面</h1><h2 id="在面对未知的流量暴增，可以预先怎么处理"><a href="#在面对未知的流量暴增，可以预先怎么处理" class="headerlink" title="在面对未知的流量暴增，可以预先怎么处理"></a>在面对未知的流量暴增，可以预先怎么处理</h2><p>如果流量突然飙大，总有一个资源会遇到瓶颈。按照经验大概出问题地方是DB，磁盘IO、CPU、带宽、连接数、内存其中的一个或几个。</p><h3 id="流量暴涨的原因"><a href="#流量暴涨的原因" class="headerlink" title="流量暴涨的原因"></a>流量暴涨的原因</h3><p>一般情况下，引起网站流量暴增大致为以下两种情况</p><ul><li>不可预测流量（网站被恶意刷量；CDN回源抓取数据；合作业务平台调取平台数据等）</li><li>可预测流量（突然爆发的社会热点，营销活动的宣传；）</li></ul><p>不管是可预测流量还是不可预测流量都会表现在带宽和网站整体架构的应对方案上</p><p>如果由于带宽原因引起，由于网站的并发量太高，达到服务器的吞吐极限，导致服务器宕机，这时需要做<strong>临时申请加大带宽，然后负载均衡分流</strong>。</p><p>如果由于外网请求数据库，导致数据库频繁读写，数据库处理能力低，导致大量请求积压；如果是这种情况，就需要优化SQL，存储过程等，如果是请求过大，就要考虑做集群等。</p><p>可预测流量的暴增也会拖慢网页的打开速度，甚至导致网站服务器宕机。要应对正常流量暴增，在流量高峰期到来之前就可以适当的调整，一般针对应用服务器的调整可以防止单点，负载均衡，高可用，增加后端web<br>应用服务器数量，数据库读写分离，分库分表等，防止流量暴增导致服务器挂掉</p><h3 id="防止流量暴涨预备方案"><a href="#防止流量暴涨预备方案" class="headerlink" title="防止流量暴涨预备方案"></a>防止流量暴涨预备方案</h3><h4 id="流量估算"><a href="#流量估算" class="headerlink" title="流量估算"></a>流量估算</h4><blockquote><p>作为一个经验充足的老运维，可以把设计流量<em>3作为系统压力的下限，即实现完了要压测，压测得到的结果要达到设计流量 </em> 3（ <em> 4， </em> 5都可以），比如服务器在IDC机房，在签合同之前就可以说明当流量异常的时候，提供一定的缓冲带宽，如果是云服务器，可以临时加带宽。<br>关键是要给系统留些缓冲。一旦发生了什么，不至于挂的太惨。此时，一般会得到一个带缓存的业务服务系统。考虑到缓存高于后台服务2～3个数量级的性能优势，多撑几倍流量一般不成问题。</p></blockquote><h4 id="降级方案"><a href="#降级方案" class="headerlink" title="降级方案"></a>降级方案</h4><h4 id="限流方案"><a href="#限流方案" class="headerlink" title="限流方案"></a>限流方案</h4><ul><li><strong>参考</strong>: <a href="https://www.cnblogs.com/dadonggg/p/8651909.html" target="_blank" rel="noopener">如何应对网站流量暴增</a></li></ul><h2 id="如何限流，限流算法，对于ddos攻击怎么处理"><a href="#如何限流，限流算法，对于ddos攻击怎么处理" class="headerlink" title="如何限流，限流算法，对于ddos攻击怎么处理"></a>如何限流，限流算法，对于ddos攻击怎么处理</h2><h3 id="如何限流"><a href="#如何限流" class="headerlink" title="如何限流"></a>如何限流</h3><ul><li>计数器</li><li>滑动窗口</li><li>漏桶</li><li><p>令牌</p></li><li><p><strong>参考</strong>: <a href="https://www.cnblogs.com/dadonggg/p/8651909.html" target="_blank" rel="noopener">如何应对网站流量暴增</a></p></li></ul><h3 id="ddos处理"><a href="#ddos处理" class="headerlink" title="ddos处理"></a>ddos处理</h3><blockquote><p>遇到1G以下的攻击，使用防火墙就可以搞定（或者使用一些免费的云防御产品）；流量1G—10G时可以选择机房进行流量迁移和清洗；大于10G时使用高防CDN（云防御）是相对最靠谱并且价钱最能接受的。</p></blockquote><ul><li><p><strong>参考</strong>: <a href="https://blog.csdn.net/higeek/article/details/83143897" target="_blank" rel="noopener">一次从遭遇DDoS攻击到解决的亲身经历</a></p></li><li><p><strong>参考</strong>: <a href="https://www.cnblogs.com/viter/archive/2018/11/14/9957214.html" target="_blank" rel="noopener">记一次DDOS攻击防御实录</a></p></li></ul><h2 id="PHP数组的底层实现"><a href="#PHP数组的底层实现" class="headerlink" title="PHP数组的底层实现"></a>PHP数组的底层实现</h2><blockquote><p>PHP 数组的底层实现是散列表（也叫 hashTable )，散列表是根据键（Key）直接访问内存存储位置的数据结构，它的key - value 之间存在一个映射函数，可以根据 key 通过映射函数得到的散列值直接索引到对应的 value 值，无需通过关键字比较，在理想情况下，不考虑散列冲突，散列表的查找效率是非常高的，时间复杂度是 O(1)。</p></blockquote><ul><li><strong>参考</strong>: <a href="https://segmentfault.com/a/1190000020175662" target="_blank" rel="noopener">PHP7 数组的底层实现</a></li></ul><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><blockquote><p>分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。<br>  简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。<br>  本质上来说，分布式事务就是为了保证不同数据库的数据一致性。</p></blockquote><ul><li><strong>参考</strong>: <a href="https://developer.51cto.com/art/201808/581174.htm" target="_blank" rel="noopener">收藏 | 第一次有人把“分布式事务”讲的这么简单明了</a></li></ul><h2 id="RPC相对于传统的API调用的优点"><a href="#RPC相对于传统的API调用的优点" class="headerlink" title="RPC相对于传统的API调用的优点"></a>RPC相对于传统的API调用的优点</h2><p>REST（HTTP-Based）、RPC（Socket-Based）</p><table><thead><tr><th style="text-align:left">接口类型</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td style="text-align:left">REST</td><td>RESTful API充分利用了HTTP协议的设计,使用了面向资源的接口设计,相对于传统RPC降低了接口设计的复杂度</td><td>RESTful API面向资源设计接口,而对于一些复杂操作来说,接口设计难度将大于RPC形式</td></tr><tr><td style="text-align:left">RPC</td><td>1) 方便使用RPC来调用远程函数,冰得到对应的结果,就像调用本地方法一样 2) 编写分布式应用程序更加简单容易,因为RPC将所有的网络代码都隐藏到了存根函数中,开发人员不必关注通信等细节 3) RPC是跨语言的</td><td>1) 交互方式单一,不能进行复杂多模块之间的协议交互 2) 开发难度,RPC框架肯定高于基于简单HTTP协议的REST接口</td></tr></tbody></table><ul><li><strong>参考</strong>: <a href="https://blog.csdn.net/weixin_43185598/article/details/88537824" target="_blank" rel="noopener">Rest和RPC接口区别</a></li></ul><h2 id="服务调度中心的感知与动态上下线"><a href="#服务调度中心的感知与动态上下线" class="headerlink" title="服务调度中心的感知与动态上下线"></a>服务调度中心的感知与动态上下线</h2><ul><li><p>zookeeper</p></li><li><p><strong>参考</strong>: <a href="https://www.cnblogs.com/dengpengbo/p/10443547.html" target="_blank" rel="noopener">zookeeper实现动态感知服务器上下线</a></p></li><li><strong>参考</strong>: <a href="https://www.cnblogs.com/GodHeng/p/8797100.html" target="_blank" rel="noopener">分布式服务动态上下线感知</a></li></ul><h2 id="MySQL的索引，为什么是B-而不是平衡二叉树"><a href="#MySQL的索引，为什么是B-而不是平衡二叉树" class="headerlink" title="MySQL的索引，为什么是B+而不是平衡二叉树"></a>MySQL的索引，为什么是B+而不是平衡二叉树</h2><ul><li><strong>参考</strong>: <a href="https://www.cnblogs.com/tiancai/p/9024351.html" target="_blank" rel="noopener">为什么MySQL数据库索引选择使用B+树？</a></li><li><strong>参考</strong>: <a href="https://blog.csdn.net/jacke121/article/details/78268602" target="_blank" rel="noopener">快速理解平衡二叉树、B-tree、B+tree、B*tree</a></li></ul><h2 id="索引查找在Linux的磁盘上是怎么操作的"><a href="#索引查找在Linux的磁盘上是怎么操作的" class="headerlink" title="索引查找在Linux的磁盘上是怎么操作的"></a>索引查找在Linux的磁盘上是怎么操作的</h2><ul><li><strong>参考</strong>: <a href="https://blog.csdn.net/qq_38410730/article/details/81416195" target="_blank" rel="noopener">【Linux】Linux根据文件路径查找索引节点</a></li></ul><h2 id="聚簇索引相对于B-索引的优点"><a href="#聚簇索引相对于B-索引的优点" class="headerlink" title="聚簇索引相对于B+索引的优点"></a>聚簇索引相对于B+索引的优点</h2><ul><li><strong>参考</strong>: <a href="https://my.oschina.net/xiaoyoung/blog/3046779" target="_blank" rel="noopener">浅谈聚簇索引和非聚簇索引的区别</a></li></ul><h2 id="如何分析SQL执行慢的原因"><a href="#如何分析SQL执行慢的原因" class="headerlink" title="如何分析SQL执行慢的原因"></a>如何分析SQL执行慢的原因</h2><h2 id="Redis连接时的connect与pconnect的区别"><a href="#Redis连接时的connect与pconnect的区别" class="headerlink" title="Redis连接时的connect与pconnect的区别"></a>Redis连接时的<code>connect</code>与<code>pconnect</code>的区别</h2><ul><li><code>connect</code>：脚本结束之后连接就释放了</li><li><p><code>pconnect</code>：脚本结束之后连接不释放，连接保持在php-fpm进程中。</p></li><li><p><strong>参考</strong>: <a href="https://www.cnblogs.com/lovebing/p/6250281.html" target="_blank" rel="noopener">Redis中connect与pconnect区别？</a></p></li></ul><h2 id="Redis有哪些结构时间复杂度较高"><a href="#Redis有哪些结构时间复杂度较高" class="headerlink" title="Redis有哪些结构时间复杂度较高"></a>Redis有哪些结构时间复杂度较高</h2><ul><li><strong>参考</strong>: <a href="https://blog.csdn.net/andy86869/article/details/88366513" target="_blank" rel="noopener">Redis基础 常用类型 时间复杂度</a></li></ul><h2 id="Redis-hash的实现"><a href="#Redis-hash的实现" class="headerlink" title="Redis hash的实现"></a>Redis hash的实现</h2><ul><li><strong>参考</strong>: <a href="https://www.cnblogs.com/ourroad/p/4891648.html" target="_blank" rel="noopener">Redis之Hash数据结构</a></li></ul><h2 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h2><blockquote><p>在1个10G大小的文件中，存储的都是int型的数据，如何在内存使用小于8M的情况下进行排序</p></blockquote><ul><li><strong>参考</strong>: <a href="https://www.cnblogs.com/dream-of-cambridge/articles/8042311.html" target="_blank" rel="noopener">归并排序，外排序，10G文件500M内存的排序</a></li><li><strong>参考</strong>: <a href="https://www.cnblogs.com/Vae1990Silence/p/4423450.html" target="_blank" rel="noopener">腾讯面试题：10G 个整数，乱序排列，要求找出中位数。内存限制为 2G。</a></li></ul><h2 id="设计题"><a href="#设计题" class="headerlink" title="设计题"></a>设计题</h2><blockquote><p>以微博为例，有1个亿的用户，同时用户之间有关注和粉丝，用户的关注和取关操作比较频繁，如何设计架构和API接口</p></blockquote><ul><li><strong>参考</strong>: <a href="https://blog.csdn.net/bigtree_3721/article/details/79779249" target="_blank" rel="noopener">新浪微博技术架构分析和设计</a></li></ul><h1 id="字节二面"><a href="#字节二面" class="headerlink" title="字节二面"></a>字节二面</h1><h2 id="守护进程是什么，怎么实现"><a href="#守护进程是什么，怎么实现" class="headerlink" title="守护进程是什么，怎么实现"></a>守护进程是什么，怎么实现</h2><blockquote><p>守护进程（Daemon）是运行在后台的一种特殊进程，也称为精灵进程。是生存期较长的一种进程，常常在系统自举时启动，仅在系统关闭时终止。没有控制终端，仅仅在后台运行，Linux有很多守护进程执行日常事务活动，是不受终端控制的进程。</p></blockquote><ul><li><strong>参考</strong>: <a href="https://blog.csdn.net/m0_37925202/article/details/80214095" target="_blank" rel="noopener">守护进程详解及其代码实现</a></li></ul><h2 id="PHP是否适合做守护进程，为什么（内存管理这一块）"><a href="#PHP是否适合做守护进程，为什么（内存管理这一块）" class="headerlink" title="PHP是否适合做守护进程，为什么（内存管理这一块）"></a>PHP是否适合做守护进程，为什么（内存管理这一块）</h2><p>不适合,因为PHP本身不是常驻内存</p><h2 id="PHP的垃圾回收机制"><a href="#PHP的垃圾回收机制" class="headerlink" title="PHP的垃圾回收机制"></a>PHP的垃圾回收机制</h2><ul><li><strong>参考</strong>: <a href="https://m.php.cn/topic/php7/425508.html" target="_blank" rel="noopener">php7 垃圾回收机制详解</a></li></ul><h2 id="进程间通信方式"><a href="#进程间通信方式" class="headerlink" title="进程间通信方式"></a>进程间通信方式</h2><ul><li><p>IPC的方式通常有管道（包括无名管道和命名管道）、消息队列、信号量、共享存储、Socket、Streams等。其中 Socket和Streams支持不同主机上的两个进程IPC</p></li><li><p><strong>参考</strong>: <a href="https://blog.csdn.net/wm12345645/article/details/82381407" target="_blank" rel="noopener">Liunx 六大进程间通信方式</a></p></li></ul><h2 id="共享内存是怎么实现的"><a href="#共享内存是怎么实现的" class="headerlink" title="共享内存是怎么实现的"></a>共享内存是怎么实现的</h2><blockquote><p>共享内存（Shared Memory），指两个或多个进程共享一个给定的存储区。</p></blockquote><ul><li><strong>参考</strong>: <a href="https://www.cnblogs.com/zgq0/p/8780893.html" target="_blank" rel="noopener">进程间的五种通信方式介绍</a></li></ul><h2 id="怎么查看Linux服务器的负载，及判断哪些操作引起的负载过高"><a href="#怎么查看Linux服务器的负载，及判断哪些操作引起的负载过高" class="headerlink" title="怎么查看Linux服务器的负载，及判断哪些操作引起的负载过高"></a>怎么查看Linux服务器的负载，及判断哪些操作引起的负载过高</h2><ul><li><strong>参考</strong>: <a href="https://blog.csdn.net/truelove12358/article/details/50502248" target="_blank" rel="noopener">linux 下查看系统资源和负载,以及性能监控</a></li></ul><h2 id="MySQL的IO过高怎么优化，分库分表及分区"><a href="#MySQL的IO过高怎么优化，分库分表及分区" class="headerlink" title="MySQL的IO过高怎么优化，分库分表及分区"></a>MySQL的IO过高怎么优化，分库分表及分区</h2><ul><li><strong>参考</strong>: <a href="https://blog.csdn.net/designer01/article/details/82772620" target="_blank" rel="noopener">mysql分区、分表、分库、数据分片</a></li></ul><h2 id="MySQL的索引结构，myisam的索引结构，-innodb的索引结构，innodb为什么必须要有主键索引"><a href="#MySQL的索引结构，myisam的索引结构，-innodb的索引结构，innodb为什么必须要有主键索引" class="headerlink" title="MySQL的索引结构，myisam的索引结构， innodb的索引结构，innodb为什么必须要有主键索引"></a>MySQL的索引结构，myisam的索引结构， innodb的索引结构，innodb为什么必须要有主键索引</h2><ul><li>MyISAM: 使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址</li><li><p>InnoDB: 也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同</p></li><li><p><strong>参考</strong>: <a href="https://www.cnblogs.com/olinux/p/5217186.html" target="_blank" rel="noopener">MySQL中myisam和innodb的主键索引有什么区别？</a></p></li></ul><h2 id="添加索引，为什么可以减少io操作（磁盘页）"><a href="#添加索引，为什么可以减少io操作（磁盘页）" class="headerlink" title="添加索引，为什么可以减少io操作（磁盘页）"></a>添加索引，为什么可以减少io操作（磁盘页）</h2><blockquote><p>首先明白为什么索引会增加速度，DB在执行一条Sql语句的时候，默认的方式是根据搜索条件进行全表扫描，遇到匹配条件的就加入搜索结果集合。如果我们对某一字段增加索引，查询时就会先去索引列表中一次定位到特定值的行数，大大减少遍历匹配的行数，所以能明显增加查询的速度。</p></blockquote><ul><li><strong>参考</strong>: <a href="https://blog.csdn.net/m0_38128121/article/details/79663261" target="_blank" rel="noopener">数据库添加索引为什么能加快查询速度</a></li></ul><h2 id="nginx的负载均衡算法"><a href="#nginx的负载均衡算法" class="headerlink" title="nginx的负载均衡算法"></a>nginx的负载均衡算法</h2><ul><li><code>round robin(默认)</code>: 轮询方式，依次将请求分配到各个后台服务器中，默认的负载均衡方式。 </li><li><code>weight</code>: 根据权重来分发请求到不同的机器中，指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。  </li><li><code>ip_hash</code>: 根据请求者ip的hash值将请求发送到后台服务器中，可以保证来自同一ip的请求被打到固定的机器上，可以解决session问题。</li><li><code>url_hash</code>: 根据请求的url的hash值将请求分到不同的机器中，当后台服务器为缓存的时候效率高。</li><li><p><code>fair</code>: 根据后台响应时间来分发请求，响应时间短的分发的请求多。</p></li><li><p><strong>参考</strong>: <a href="https://www.cnblogs.com/DarrenChan/p/8967412.html" target="_blank" rel="noopener">nginx负载均衡的五种算法</a></p></li></ul><h2 id="算法题-1"><a href="#算法题-1" class="headerlink" title="算法题"></a>算法题</h2><blockquote><p>查找一个字符串中最长的无重复字串</p></blockquote><h1 id="字节三面"><a href="#字节三面" class="headerlink" title="字节三面"></a>字节三面</h1><h2 id="在一个横向和纵向都是递增的有界二维坐标轴中，如何快速判断某个数是否存在于这个二维坐标中"><a href="#在一个横向和纵向都是递增的有界二维坐标轴中，如何快速判断某个数是否存在于这个二维坐标中" class="headerlink" title="在一个横向和纵向都是递增的有界二维坐标轴中，如何快速判断某个数是否存在于这个二维坐标中"></a>在一个横向和纵向都是递增的有界二维坐标轴中，如何快速判断某个数是否存在于这个二维坐标中</h2><ul><li><strong>参考</strong>: <a href="https://blog.csdn.net/qq_32169593/article/details/80987070" target="_blank" rel="noopener">从一字符串中找出其无重复最长子串字符及长度</a></li></ul><h2 id="设计一个定时任务管理器"><a href="#设计一个定时任务管理器" class="headerlink" title="设计一个定时任务管理器"></a>设计一个定时任务管理器</h2><ul><li><strong>参考</strong>: <a href="https://studygolang.com/articles/9523" target="_blank" rel="noopener">golang实践-如何实现高性能的定时任务管理器</a></li></ul><h1 id="滴滴2020PHP面试题"><a href="#滴滴2020PHP面试题" class="headerlink" title="滴滴2020PHP面试题"></a>滴滴2020PHP面试题</h1><h2 id="处理算法题，最大无重复子串，链表的值交换"><a href="#处理算法题，最大无重复子串，链表的值交换" class="headerlink" title="处理算法题，最大无重复子串，链表的值交换"></a>处理算法题，最大无重复子串，链表的值交换</h2><h2 id="遇到过线上服务器CPU飙高的情况没有，如何处理"><a href="#遇到过线上服务器CPU飙高的情况没有，如何处理" class="headerlink" title="遇到过线上服务器CPU飙高的情况没有，如何处理"></a>遇到过线上服务器CPU飙高的情况没有，如何处理</h2><blockquote><p>登录服务器，执行top命令，查看CPU占用情况；定位线程；定位代码，解决问题</p></blockquote><h2 id="对线程池的理解，项目中哪个地方使用了，如何使用的，用的框架中的哪个实现类，为什么用这个"><a href="#对线程池的理解，项目中哪个地方使用了，如何使用的，用的框架中的哪个实现类，为什么用这个" class="headerlink" title="对线程池的理解，项目中哪个地方使用了，如何使用的，用的框架中的哪个实现类，为什么用这个"></a>对线程池的理解，项目中哪个地方使用了，如何使用的，用的框架中的哪个实现类，为什么用这个</h2><ul><li>1)创建/销毁线程伴随着系统开销，过于频繁的创建/销毁线程，会很大程度上影响处理效率</li><li>2)线程并发数量过多，抢占系统资源从而导致阻塞</li><li>3)对线程进行一些简单的管理, 延时执行 定时循环执行</li></ul><h2 id="对MySQL索引的理解、对组合索引的理解、索引的最佳实践"><a href="#对MySQL索引的理解、对组合索引的理解、索引的最佳实践" class="headerlink" title="对MySQL索引的理解、对组合索引的理解、索引的最佳实践"></a>对MySQL索引的理解、对组合索引的理解、索引的最佳实践</h2><ul><li>普通索引：即一个索引只包含单个列，一个表可以有多个单列索引</li><li>唯一索引：索引列的值必须唯一，但允许有空值</li><li>复合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</li><li>聚簇索引(聚集索引)：并不是一种单独的索引类型，而是一种数据存储方式。具体细节取决于不同的实现，InnoDB的聚簇索引其实就是在同一个结构中保存了B-Tree索引(技术上来说是B+Tree)和数据行。</li><li>非聚簇索引：不是聚簇索引，就是非聚簇索引</li></ul><h2 id="分布式锁的实现、对比Redis分布式锁-amp-ZK分布式锁"><a href="#分布式锁的实现、对比Redis分布式锁-amp-ZK分布式锁" class="headerlink" title="分布式锁的实现、对比Redis分布式锁 &amp; ZK分布式锁"></a>分布式锁的实现、对比Redis分布式锁 &amp; ZK分布式锁</h2><ul><li>基于数据库实现；</li><li>基于缓存（Redis等）实现；</li><li>基于Zookeeper实现；</li></ul><h2 id="怎么理解微服务，服务如何划分，可以从哪几个方面去划分，为什么这样划分，微服务带来了哪些好处，哪些坏处，如何看待这个问题？"><a href="#怎么理解微服务，服务如何划分，可以从哪几个方面去划分，为什么这样划分，微服务带来了哪些好处，哪些坏处，如何看待这个问题？" class="headerlink" title="怎么理解微服务，服务如何划分，可以从哪几个方面去划分，为什么这样划分，微服务带来了哪些好处，哪些坏处，如何看待这个问题？"></a>怎么理解微服务，服务如何划分，可以从哪几个方面去划分，为什么这样划分，微服务带来了哪些好处，哪些坏处，如何看待这个问题？</h2><ul><li>服务间调用,服务发现,服务容错,服务部署,数据调用</li></ul><h2 id="如何理解网关，网关带来的好处和坏处，如何解决"><a href="#如何理解网关，网关带来的好处和坏处，如何解决" class="headerlink" title="如何理解网关，网关带来的好处和坏处，如何解决"></a>如何理解网关，网关带来的好处和坏处，如何解决</h2><ul><li>高性能，可横向扩展</li><li>高可靠，业务不中断</li><li>插件化的API安全控制</li><li>灵活的数据编排</li><li>精细化流控</li><li>API版本管理</li><li>API数据分析</li><li>高效插件化路由算法</li><li>安全认证，防攻击</li><li>API访问控制</li><li>Swagger导入导出</li></ul><h2 id="掌握哪些设计模式，常用哪些，项目中如何使用的，为什么用这个，不用那个？手写一个线程安全的单例模式"><a href="#掌握哪些设计模式，常用哪些，项目中如何使用的，为什么用这个，不用那个？手写一个线程安全的单例模式" class="headerlink" title="掌握哪些设计模式，常用哪些，项目中如何使用的，为什么用这个，不用那个？手写一个线程安全的单例模式"></a>掌握哪些设计模式，常用哪些，项目中如何使用的，为什么用这个，不用那个？手写一个线程安全的单例模式</h2><blockquote><p>单例模式，工程模式，注册模式，适配器模式，观察者模式，策略模式</p></blockquote><h2 id="如何设计一个秒杀系统？"><a href="#如何设计一个秒杀系统？" class="headerlink" title="如何设计一个秒杀系统？"></a>如何设计一个秒杀系统？</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li>nginx负载均衡，将请求分发到各个服务器，减轻压力。</li><li>js、css压缩，减少流量以及请求次数。</li><li>js、css压缩，减少流量以及请求次数。</li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul><li>采用redis缓存，可以提前将某些秒杀的数据加载到缓存。如库存先加载到缓存，判断缓存里的库存，成功后再继续，同时为了防止大量访问redis，可以用共享变量标识是否卖完，如卖完了，则直接返回，不用访问redis。</li><li>页面缓存，即将页面直接缓存到redis，或者页面静态化，即前后端分离。</li><li>开启浏览器缓存。</li></ul><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><ul><li>使用消息队列，例rabbitmq进行消峰。</li><li>利用验证码防止恶意刷单，可以有效降低单位时间内访问次数。</li><li>地址隐藏，防止知道地址后提前购买以及多刷。</li><li>一定时间内限制url访问次数。</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>利用行级锁，先扣库存，成功后再创建订单，防止超卖。</li><li>唯一索引，防止重复购买。</li><li>数据库读写分离，如mycat。</li></ul><h2 id="假设现在双十一零点，大量下单请求，如何对这些订单进行分库分表，为什么？"><a href="#假设现在双十一零点，大量下单请求，如何对这些订单进行分库分表，为什么？" class="headerlink" title="假设现在双十一零点，大量下单请求，如何对这些订单进行分库分表，为什么？"></a>假设现在双十一零点，大量下单请求，如何对这些订单进行分库分表，为什么？</h2><blockquote><p>分布式ID</p></blockquote><p>将订单数据划分成两大类型：分别是热数据和冷数据。</p><p>热数据：3个月内的订单数据，查询实时性较高。</p><p>冷数据A：3个月 ~ 12个月前的订单数据，查询频率不高。</p><p>冷数据B：1年前的订单数据，几乎不会查询，只有偶尔的查询需求。</p><h2 id="MySQL事务隔离级别、MVCC？"><a href="#MySQL事务隔离级别、MVCC？" class="headerlink" title="MySQL事务隔离级别、MVCC？"></a>MySQL事务隔离级别、MVCC？</h2><ul><li>数据库事务的隔离级别ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）。</li><li>SQL标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。</li></ul><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>分布式架构、高可扩展、高性能、高并发、服务器性能调优、Laravel、TP6、Yii2、Redis、Swoole、Swoft、RabbitMQ、Kafka、Mysql优化、shell脚本、Docker、微服务、Nginx</p><h1 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h1><ul><li><a href="https://www.nowcoder.com/discuss/356733?type=2" target="_blank" rel="noopener">字节PHP/Golang社招面经</a></li><li><a href="https://my.oschina.net/u/4178721/blog/4423526" target="_blank" rel="noopener">2020面试题之滴滴后端PHP职位</a></li><li><a href="https://www.php.cn/toutiao-415522.html" target="_blank" rel="noopener">2020腾讯PHP面试题（附答案）</a></li><li><a href="https://www.lagou.com/lgeduarticle/31777.html" target="_blank" rel="noopener">2019腾讯PHP面试题（附答案）</a></li><li><a href="https://gitee.com/OSCYuanChuangHui/2018_lecturer_ppt/raw/master/2019.12.15%20%E6%B7%B1%E5%9C%B3%E5%B9%B4%E7%BB%88%E7%9B%9B%E5%85%B8/%E4%B8%BB%E4%BC%9A%E5%9C%BA/3.%202020%20%E5%B9%B4%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%20PHP%E2%80%94%E2%80%94%E9%9F%A9%E5%A4%A9%E5%B3%B0.pdf" target="_blank" rel="noopener">2020 年如何正确使用 PHP——韩天峰</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;保持学习, 保持警惕, 居安思危, 走出舒适区.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="笔试题" scheme="http://blog.caoxl.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>PHP单元测试 (一) 基础</title>
    <link href="http://blog.caoxl.com/2020/10/29/PHP-Unit-I-Basic/"/>
    <id>http://blog.caoxl.com/2020/10/29/PHP-Unit-I-Basic/</id>
    <published>2020-10-29T06:12:49.000Z</published>
    <updated>2020-10-29T09:02:02.918Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。</p></blockquote><a id="more"></a><h1 id="测试DEMO"><a href="#测试DEMO" class="headerlink" title="测试DEMO"></a>测试DEMO</h1><ul><li><code>Transfer.php</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">Controller</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Transfer</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">private</span> $accountA = <span class="number">100</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">private</span> $accountB = <span class="number">100</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aToB</span><span class="params">(int $money)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;accountA -= $money;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;accountB += $money;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bToA</span><span class="params">(int $money)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;accountB -= $money;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;accountA += $money;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAccountA</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;accountA;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAccountB</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;accountB;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>TransferTest.php</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">Test</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Controller</span>\<span class="title">Transfer</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">TransferTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">private</span> $transferObj;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span> : <span class="title">void</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;transferObj = <span class="keyword">new</span> Transfer();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testAtoB</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $originalA = <span class="keyword">$this</span>-&gt;transferObj-&gt;getAccountA();</span></span><br><span class="line"><span class="php">        $originalB = <span class="keyword">$this</span>-&gt;transferObj-&gt;getAccountB();</span></span><br><span class="line"></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;transferObj-&gt;aToB(<span class="number">10</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;assertEquals($originalA - <span class="number">10</span>, <span class="keyword">$this</span>-&gt;transferObj-&gt;getAccountA());</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;assertEquals($originalB + <span class="number">10</span>, <span class="keyword">$this</span>-&gt;transferObj-&gt;getAccountB());</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>执行测试:</li></ul><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit 9.5-gd3b55c36f by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line">.                                                                   1 / 1 (100%)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Time:</span> 00:00.029, Memory: 8.00 MB</span><br><span class="line"></span><br><span class="line">OK (1 test, 2 assertions)</span><br></pre></td></tr></table></figure><h1 id="详细使用"><a href="#详细使用" class="headerlink" title="详细使用"></a>详细使用</h1><h2 id="基境"><a href="#基境" class="headerlink" title="基境"></a>基境</h2><blockquote><p><a href="https://phpunit.readthedocs.io/en/9.3/fixtures.html" target="_blank" rel="noopener">https://phpunit.readthedocs.io/en/9.3/fixtures.html</a></p></blockquote><p>PHPUnit 支持共享建立基境的代码。</p><p>提供了以下几个模板方法：</p><ul><li><code>setUpBeforeClass</code>: 测试用例类的第一个测试运行之前执行</li><li><code>tearDownAfterClass</code>:  测试用例类的最后一个测试运行之后执行</li><li><code>setUp</code>: 每个测试方法运行之前执行</li><li><code>tearDown</code>: 每个测试方法运行之后执行</li></ul><p><strong>注意：每个测试方法都是在一个全新的测试类实例上运行的</strong></p><h3 id="全局状态"><a href="#全局状态" class="headerlink" title="全局状态"></a>全局状态</h3><blockquote><p><a href="https://phpunit.readthedocs.io/en/9.3/fixtures.html#global-state" target="_blank" rel="noopener">https://phpunit.readthedocs.io/en/9.3/fixtures.html#global-state</a></p></blockquote><ul><li>全局变量：有时候测试代码中用到了全局变量（$_GLOBALS），但是如果对这里面的变量进行了修改，可能会导致其他测试方法出现问题，那么怎么保证每个测试方法都使用的是一样的全局变量呢？ 通过：<code>@backupGlobals disabled|enabled</code> 它可标注在：<ul><li>测试类: 作用范围为整个测试类</li><li>测试方法: 作用范围为这个方法</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">Test</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @backupGlobals disabled</span><br><span class="line"><span class="php"> */</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * @backupGlobals enabled</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testThatInteractsWithGlobalVariables</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><p>支持设置 “全局变量黑名单” 黑名单中的全局变量将被排除于备份与还原操作之外：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @backupGlobals disabled</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $backupGlobalsBlacklist = [<span class="symbol">'globalVariabl</span>e'];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @backupGlobals enabled</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public function testThatInteractsWithGlobalVariables()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于全局变量的备份和还原的原理是使用了：<code>serialize()</code> 与 <code>unserialize()</code>。</p><ul><li><p><strong>注意</strong>：</p><ul><li>对于无法被序列化的对象放入 <code>$GLOBALS</code> 数组内时，备份操作就会出问题。比如：<code>PDO</code></li><li>在方法（例如 <code>setUp()</code>）内对 <code>$backupGlobalsBlacklist</code> 属性进行设置是无效的</li></ul></li><li><p>类的静态属性 。对于类的静态属性的备份和还原可以通过：<code>@backupStaticAttributes enabled|disabled</code><br>作用对象：在测试开始时已声明的所有类（而不仅是测试类自身），且只作用于静态类属性，不作用于函数内声明的静态变量。<br>使用位置和 <code>backupGlobals</code> 一致：</p><ul><li>测试类</li><li>测试方法<br>只有启用了 <code>@backupStaticAttributes</code> 的测试方法才会在方法之前执行此操作。如果在此之前运行的某个没有启用 <code>@backupStaticAttributes</code> 的测试方法改变了静态属性的值，那么被备份及还原的将会是这个改变后的值</li></ul></li></ul><p>同样提供了黑名单支持：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $backupStaticAttributesBlacklist = [</span><br><span class="line">      <span class="symbol">'classNam</span>e' =&gt; [<span class="symbol">'attributeNam</span>e']</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h2><p>使用 <code>@depends</code> 声明测试方法所依赖的其他测试方法。 依赖方法的返回值，会作为被依赖方法的参数，其顺序和 <code>@depends</code> 的顺序一致，但是不会影响代码的执行顺序。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testOne</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertTrue(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"depends1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testTwo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertTrue(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"depends2"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@depends</span> testOne</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@depends</span> testTwo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testDepends</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertEquals([<span class="string">'depends1'</span>, <span class="string">'depends2'</span>], func_get_args());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Time:</span> 00:00.315, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (3 tests, 3 assertions)</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：<ul><li>当被依赖的测试方法失败时，不会再执行依赖方法的测试。</li><li>如果被依赖方法返回的是对象，默认是引用传递，如果希望传递对象的副本时，使用： <code>@depends clone</code></li></ul></li></ul><h2 id="数据供给器"><a href="#数据供给器" class="headerlink" title="数据供给器"></a>数据供给器</h2><p>使用 <code>@dataProvider</code> 声明数据供给器。 对应的方法需要返回：</p><ul><li>数组（每个元素也是数组）</li><li>可遍历的对象（实现了迭代接口）</li></ul><p>然后测试时，会将每次迭代器提供的一组数据进行测试，直到全部遍历完毕。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $sum</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dataProvider</span> additionProvider</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSum</span><span class="params">($a, $b, $sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertEquals($sum, $a + $b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">additionProvider</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Failed</span> <span class="string">asserting</span> <span class="string">that</span> <span class="number">2</span> <span class="string">matches</span> <span class="string">expected</span> <span class="number">3</span><span class="string">.</span></span><br><span class="line"><span class="string">Expected</span> <span class="string">:3</span></span><br><span class="line"><span class="string">Actual</span>   <span class="string">:2</span></span><br><span class="line"><span class="string">&lt;Click</span> <span class="string">to</span> <span class="string">see</span> <span class="string">difference&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="string">/Users/caoxl/WWW/test.com/tests/MyTest.php:56</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Time:</span> <span class="number">00</span><span class="string">:00.403,</span> <span class="attr">Memory:</span> <span class="number">8.00</span> <span class="string">MB</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">FAILURES!</span></span><br><span class="line"><span class="attr">Tests:</span> <span class="number">3</span><span class="string">,</span> <span class="attr">Assertions:</span> <span class="number">3</span><span class="string">,</span> <span class="attr">Failures:</span> <span class="number">1</span><span class="string">.</span></span><br></pre></td></tr></table></figure><ul><li>注意:<ul><li>和 <code>@depends</code> 同时使用时，<code>@provider</code> 提供的参数会优先于 <code>@depends</code> 提供的参数，并且，依赖关系提供的参数不会变化。</li></ul></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testOne</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertTrue(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Depends1'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@depends</span> testOne</span></span><br><span class="line"><span class="comment">* <span class="doctag">@dataProvider</span> additionProvider</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertEquals([<span class="string">'Provider1'</span>, <span class="string">'Depends1'</span>], func_get_args());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//会测试两次，第一此传递：Provider1，第二次传递：Provider2</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">additionProvider</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      [<span class="string">'Provider1'</span>],</span><br><span class="line">      [<span class="string">'Provider2'</span>],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">PHPUnit</span> <span class="number">9.5</span><span class="string">-gd3b55c36f</span> <span class="string">by</span> <span class="string">Sebastian</span> <span class="string">Bergmann</span> <span class="string">and</span> <span class="string">contributors.</span></span><br><span class="line"></span><br><span class="line"><span class="string">Failed</span> <span class="string">asserting</span> <span class="string">that</span> <span class="string">two</span> <span class="string">arrays</span> <span class="string">are</span> <span class="string">equal.</span></span><br><span class="line"><span class="string">&lt;Click</span> <span class="string">to</span> <span class="string">see</span> <span class="string">difference&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="string">/Users/caoxl/WWW/test.com/tests/MyTest.php:57</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Time:</span> <span class="number">00</span><span class="string">:00.378,</span> <span class="attr">Memory:</span> <span class="number">8.00</span> <span class="string">MB</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">FAILURES!</span></span><br><span class="line"><span class="attr">Tests:</span> <span class="number">3</span><span class="string">,</span> <span class="attr">Assertions:</span> <span class="number">3</span><span class="string">,</span> <span class="attr">Failures:</span> <span class="number">1</span><span class="string">.</span></span><br></pre></td></tr></table></figure><h2 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h2><p>异常测试有两种方式：</p><ul><li>在代码中使用: <code>$this-&gt;expectException(InvalidArgumentException::class);</code></li><li>使用标注：<code>@expectException</code></li></ul><p>断言方法/标注：</p><ul><li><code>expectException</code></li><li><code>expectExceptionCode</code></li><li><code>expectExceptionMessage</code></li><li><code>expectExceptionMessageRegExp</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testException1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;expectException(InvalidArgumentException::class);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;expectExceptionMessage(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@expectedException</span> InvalidArgumentException</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@expectedExceptionMessage</span> hi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testException2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：不允许对 ：<code>Exception</code> 类进行测试，异常类越明确越好。</p><h2 id="错误调试"><a href="#错误调试" class="headerlink" title="错误调试"></a>错误调试</h2><p>默认情况下，在测试过程中如果触发到了 <code>PHP</code> 的错误/警告，<code>PHPUnit</code> 会将其转换为异常：</p><ul><li><code>PHPUnit\Framework\Error\Notice</code></li><li><code>PHPUnit\Framework\Error\Warning</code></li><li><code>PHPUnit\Framework\Error\Error</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testError</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;expectException(Error::class);</span><br><span class="line">    <span class="comment">// 触发一个错误</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">'file_not_existing_file.php'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果:</li></ul><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Time:</span> 00:00.319, Memory: 8.00 MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FAILURES!</span><br><span class="line">Tests: 1, Assertions: 1, Failures: 1.</span><br></pre></td></tr></table></figure><h2 id="输出内容测试"><a href="#输出内容测试" class="headerlink" title="输出内容测试"></a>输出内容测试</h2><p>有时候，想要断言 某方法的运行过程中生成了预期的输出（例如，通过 <code>echo</code> 或 <code>print</code>）。<code>PHPUnit\Framework\TestCase</code> 类使用 PHP 的 输出缓冲 特性来为此提供必要的功能支持。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testOutput1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;expectOutputString(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testOutput2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;expectOutputRegex(<span class="string">"/\d+/"</span>);</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// testOutput2</span><br><span class="line">Failed asserting that 'Hello World' matches PCRE pattern "/\d+/".</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Time:</span> 00:00.368, Memory: 8.00 MB</span><br><span class="line"></span><br><span class="line">FAILURES!</span><br><span class="line">Tests: 1, Assertions: 1, Failures: 1.</span><br></pre></td></tr></table></figure><h2 id="标记未完成-与-跳过"><a href="#标记未完成-与-跳过" class="headerlink" title="标记未完成 与 跳过"></a>标记未完成 与 跳过</h2><ul><li>标记未完成</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testMark</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertTrue(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 在这里停止</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;markTestIncomplete(<span class="string">"后续还未完成"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果:</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">PHPUnit</span> <span class="number">9.5</span><span class="string">-gd3b55c36f</span> <span class="string">by</span> <span class="string">Sebastian</span> <span class="string">Bergmann</span> <span class="string">and</span> <span class="string">contributors.</span></span><br><span class="line"></span><br><span class="line"><span class="string">后续还未完成</span></span><br><span class="line"></span><br><span class="line"> <span class="string">/Users/caoxl/WWW/test.com/tests/MyTest.php:114</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">Time:</span> <span class="number">00</span><span class="string">:00.393,</span> <span class="attr">Memory:</span> <span class="number">8.00</span> <span class="string">MB</span></span><br><span class="line"></span><br><span class="line"><span class="string">OK,</span> <span class="string">but</span> <span class="string">incomplete,</span> <span class="string">skipped,</span> <span class="string">or</span> <span class="string">risky</span> <span class="string">tests!</span></span><br><span class="line"><span class="attr">Tests:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">Assertions:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">Incomplete:</span> <span class="number">1</span><span class="string">.</span></span><br></pre></td></tr></table></figure><ul><li>跳过测试</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span>: void</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!extension_loaded(<span class="string">'mysqli'</span>)) &#123;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;markTestSkipped(<span class="string">"MySQLi 扩展不可用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果:</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">PHPUnit</span> <span class="number">9.5</span><span class="string">-gd3b55c36f</span> <span class="string">by</span> <span class="string">Sebastian</span> <span class="string">Bergmann</span> <span class="string">and</span> <span class="string">contributors.</span></span><br><span class="line"></span><br><span class="line"><span class="string">MySQLi</span> <span class="string">扩展不可用</span></span><br><span class="line"></span><br><span class="line"> <span class="string">/Users/caoxl/WWW/test.com/tests/MyTest.php:24</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Time:</span> <span class="number">00</span><span class="string">:00.425,</span> <span class="attr">Memory:</span> <span class="number">8.00</span> <span class="string">MB</span></span><br><span class="line"></span><br><span class="line"><span class="string">OK,</span> <span class="string">but</span> <span class="string">incomplete,</span> <span class="string">skipped,</span> <span class="string">or</span> <span class="string">risky</span> <span class="string">tests!</span></span><br><span class="line"><span class="attr">Tests:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">Assertions:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">Skipped:</span> <span class="number">1</span><span class="string">.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://blog.caoxl.com/categories/PHP/"/>
    
    
      <category term="PHPUnit" scheme="http://blog.caoxl.com/tags/PHPUnit/"/>
    
      <category term="单元测试" scheme="http://blog.caoxl.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>PHP 单元测试</title>
    <link href="http://blog.caoxl.com/2020/10/27/PHP-Unit-Test/"/>
    <id>http://blog.caoxl.com/2020/10/27/PHP-Unit-Test/</id>
    <published>2020-10-27T08:30:20.000Z</published>
    <updated>2020-10-27T08:47:00.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>朋友，你听说过安。。。不是，写过单元测试吗。</p><p>单元测试是开发过程中必不可少的一环，一个项目有良好的单元测试代码，重构的勇气都大很多。这次写一篇小文来介绍一下 PHP 的单元测试工具 PHPUnit 的使用。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装 PHPUnit 的方式很简单，使用 composer 可以一行代码就可以安装。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require --dev phpunit/phpunit</span><br></pre></td></tr></table></figure><p>安装之后，在 <code>vendor/bin</code> 目录下有一个 <code>phpunit</code> 的可执行文件，这个就是 <code>phpunit</code> 本体了</p><p>假设我们项目的目录结构如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  phpunit tree .</span><br><span class="line"></span><br><span class="line">├── controller</span><br><span class="line">├── model</span><br><span class="line">├── service</span><br><span class="line">├── test</span><br><span class="line">└── vendor</span><br><span class="line">├── composer.json</span><br></pre></td></tr></table></figure><p>其中我们的单元测试代码都放在 test 目录下。使用 composer 来为我们解决 autoload 的问题</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"autoload"</span>: &#123;</span><br><span class="line">    <span class="attr">"psr-4"</span>: &#123;</span><br><span class="line">      <span class="attr">"Controller\\"</span>: <span class="string">"controller/"</span>,</span><br><span class="line">      <span class="attr">"Model\\"</span>: <span class="string">"model/"</span>,</span><br><span class="line">      <span class="attr">"Service\\"</span>: <span class="string">"service/"</span>,</span><br><span class="line">      <span class="attr">"Test\\"</span>: <span class="string">"test/"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>好了，假设我们现在进行开发，在 service 目录中添加了一个 CalculateService 的文件，并且编写了一个 abs 的函数。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">Service</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">CalculateService</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abs</span><span class="params">($num)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> abs($num);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><p>现在我们对 abs 函数进行单元测试，PHPUnit 规定了一个测试类必须遵守如下的规定：</p><ul><li>单元测试类名必须以 <code>Test</code> 结尾，必须继承 <code>\PHPUnit\Framework\TestCase</code> 基类。</li><li>每个测试函数必须以 <code>test</code> 开头。</li></ul><p>上面的规定是必须遵守的，如果代码没有遵守规定 PHPUnit 不会把他当做单元测试代码。除了以上的两条，还有一些良好的编码习惯可以参考：</p><ul><li>单元测试代码都放在 <code>test</code> 目录下。</li><li>每个单元测试类以被测试的类名开头。例如被测试类为 <code>CalculateService</code>，那么单元测试类应该为 <code>CalculateServiceTest</code>。</li><li>每个单元测试函数应该为被测试函数名结尾。例如被测试函数为 <code>abs</code>，那么单元测试函数应该为 <code>testAbs</code>。</li></ul><p>根据上面的规范，编写单元测试代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">Test</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Service</span>\<span class="title">CalculateService</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">CalculateServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testAbs</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $calculateService = <span class="keyword">new</span> CalculateService();</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="number">4</span>, $calculateService-&gt;abs(<span class="number">4</span>));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><p>在上面的测试代码中，调用了我们要测试的函数 <code>abs</code>，然后断言 <code>$calculateService-&gt;abs(4)</code> 的结果为 <code>4</code>。在 phpstorm 中直接在 <code>testAbs</code> 函数处右键选择 <code>run CalculateServiceTest</code> 执行：</p><p>发现在控制台会输出如下内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Time: <span class="number">00</span>:<span class="number">00.068</span>, Memory: <span class="number">6.00</span> MB</span><br><span class="line"> </span><br><span class="line">OK (<span class="number">1</span> test, <span class="number">1</span> assertion)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>表明 <code>abs</code> 通过了 <code>$calculateService-&gt;abs(4) == 4</code> 的测试用例。<strong>这里注意一点，这里并不表明 abs 函数已经通过测试，一个良好的测试应该包含多个测试用例来覆盖尽可能多的可能性</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;朋友，你听说过安。。。不是，写过单元测试吗。&lt;/p&gt;
&lt;p&gt;单元测试是开发过程中必不可少的一环，一个项目有良好的单元测试代码，重构的勇气都大很多。这次写一篇小文来介绍一下 PHP 的单元测试工具 PHPUnit 的使用。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://blog.caoxl.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://blog.caoxl.com/tags/PHP/"/>
    
      <category term="单元测试" scheme="http://blog.caoxl.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>做一顿饭来理解协程</title>
    <link href="http://blog.caoxl.com/2020/10/26/Learn-Swoole-Coroutine/"/>
    <id>http://blog.caoxl.com/2020/10/26/Learn-Swoole-Coroutine/</id>
    <published>2020-10-26T07:06:04.000Z</published>
    <updated>2020-10-26T07:15:10.915Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><blockquote><p>协程可以简单理解为线程，只不过这个线程是用户态的，不需要操作系统参与，创建销毁和切换的成本非常低，和线程不同的是协程没法利用多核 cpu 的，想利用多核 cpu 需要依赖 <code>Swoole</code> 的多进程模型。—— swoole 协程一章</p></blockquote><a id="more"></a><h1 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h1><p>可以把协程看成一道小学数学的一道题目：“合理安排时间”，来我们先做一道题目：</p><blockquote><p>小明下班后回家煮饭，煲汤需要 10 分钟，煮饭需要 8 分钟， 炒菜需要 5 分钟，，请问小明最少需要多少分钟能煮好饭？</p></blockquote><blockquote><p>下面用 <code>sleep()</code> 模拟 IO 操作</p></blockquote><h1 id="同步版煮饭"><a href="#同步版煮饭" class="headerlink" title="同步版煮饭"></a>同步版煮饭</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncCook</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cook</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $startTime = time();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"开始煲汤..."</span> . PHP_EOL;</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"汤好了..."</span> . PHP_EOL;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"开始煮饭..."</span> . PHP_EOL;</span><br><span class="line">        sleep(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"饭熟了..."</span> . PHP_EOL;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"放油..."</span> . PHP_EOL;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"煎鱼..."</span> . PHP_EOL;</span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"放盐..."</span> . PHP_EOL;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"出锅..."</span> . PHP_EOL;</span><br><span class="line"></span><br><span class="line">        var_dump(<span class="string">'总耗时：'</span> . (time() - $startTime) . <span class="string">' 分钟'</span>);<span class="keyword">die</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sync = <span class="keyword">new</span> SyncCook();</span><br><span class="line">$sync-&gt;cook();</span><br></pre></td></tr></table></figure><blockquote><p>总耗时：23 分钟</p></blockquote><p>代码很容易看懂，等待汤煮好之后再煮饭，然后再等待饭煮好再炒菜，生活中不会这样操作吧？这就要引入协程来解决这个问题了。</p><h1 id="协程版煮饭"><a href="#协程版煮饭" class="headerlink" title="协程版煮饭"></a>协程版煮饭</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Swoole</span>\<span class="title">Coroutine</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Swoole</span>\<span class="title">Coroutine</span>\<span class="title">WaitGroup</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwooleCook</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cook</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $startTime = time();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启一键协程化: https://wiki.swoole.com/#/runtime?id=swoole_hook_all</span></span><br><span class="line">        Swoole\Runtime::enableCoroutine($flags = SWOOLE_HOOK_ALL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个协程容器: https://wiki.swoole.com/#/coroutine/scheduler</span></span><br><span class="line">        <span class="comment">// 相当于进入厨房</span></span><br><span class="line">        Co\run(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 等待结果: https://wiki.swoole.com/#/coroutine/wait_group?id=waitgroup</span></span><br><span class="line">            <span class="comment">// 记录哪道菜做好了，哪道菜还需要多长时间</span></span><br><span class="line">            $wg = <span class="keyword">new</span> WaitGroup();</span><br><span class="line">            <span class="comment">// 保存数据的结果</span></span><br><span class="line">            <span class="comment">// 装好的菜</span></span><br><span class="line">            $result = [];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录一下煲汤(记录一个任务)</span></span><br><span class="line">            $wg-&gt;add();</span><br><span class="line">            <span class="comment">// 创建一个煲汤任务(开启一个新的协程)</span></span><br><span class="line">            Coroutine::create(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($wg, &amp;$result)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"开始煲汤..."</span> . PHP_EOL;</span><br><span class="line">                <span class="comment">// 煲汤需要6分钟，所以我们也不用在这里等汤煮好，</span></span><br><span class="line">                <span class="comment">// 直接去做下一个任务：炒菜(协程切换)</span></span><br><span class="line">                sleep(<span class="number">8</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"汤好了..."</span> . PHP_EOL;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 装盘</span></span><br><span class="line">                $result[<span class="string">'soup'</span>] = <span class="string">'一锅汤'</span>;</span><br><span class="line">                $wg-&gt;done(); <span class="comment">// 标记任务完成</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录一下煮饭(记录一个任务)</span></span><br><span class="line">            $wg-&gt;add();</span><br><span class="line">            <span class="comment">// 创建一个煮饭任务(开启一个新的协程)</span></span><br><span class="line">            Coroutine::create(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($wg, &amp;$result)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"开始煮饭..."</span> . PHP_EOL;</span><br><span class="line">                <span class="comment">// 煮饭需要5分钟，所以我们不用在这里等饭煮熟，放在这里一会再来看看好了没有</span></span><br><span class="line">                <span class="comment">// 我们先去煲汤(协程切换)</span></span><br><span class="line">                sleep(<span class="number">10</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"饭熟了..."</span> . PHP_EOL;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 装盘</span></span><br><span class="line">                $result[<span class="string">'rice'</span>] = <span class="string">'一锅米饭'</span>;</span><br><span class="line">                $wg-&gt;done(); <span class="comment">// 标记任务完成</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录一下炒菜</span></span><br><span class="line">            $wg-&gt;add();</span><br><span class="line">            <span class="comment">// 创建一个炒菜任务(再开启一个新的协程)</span></span><br><span class="line">            Coroutine::create(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($wg, &amp;$result)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 煎鱼的过程必须放在一个协程里面执行，如果不是的话可能鱼还没煎好就出锅了</span></span><br><span class="line">                <span class="comment">// 因为开启协程后，IO全是异步了，在此demo中每次遇到sleep都会挂起当前协程</span></span><br><span class="line">                <span class="comment">// 切换到下一个协程执行。</span></span><br><span class="line">                <span class="comment">// 例如把出锅这一步开启一个新协程执行，则在煎鱼的时候鱼，鱼就出锅了。</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"放油..."</span> . PHP_EOL;</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"煎鱼..."</span> . PHP_EOL;</span><br><span class="line">                sleep(<span class="number">3</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"放盐..."</span> . PHP_EOL;</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"出锅..."</span> . PHP_EOL;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 装盘</span></span><br><span class="line">                $result[<span class="string">'food'</span>] = <span class="string">'鱼香肉丝'</span>;</span><br><span class="line">                $wg-&gt;done();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待全部任务完成</span></span><br><span class="line">            $wg-&gt;wait();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回数据(上菜！)</span></span><br><span class="line">            var_dump($result);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        var_dump(<span class="string">'总耗时：'</span> . (time() - $startTime) . <span class="string">' 分钟'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$swoole = <span class="keyword">new</span> SwooleCook();</span><br><span class="line">$swoole-&gt;cook();</span><br></pre></td></tr></table></figure><blockquote><p>总耗时：10 分钟</p></blockquote><p>答：小明最少需要 10 分钟能煮好饭。</p><ul><li><a href="https://learnku.com/articles/44836" target="_blank" rel="noopener">原文地址: https://learnku.com/articles/44836</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;协程&quot;&gt;&lt;a href=&quot;#协程&quot; class=&quot;headerlink&quot; title=&quot;协程&quot;&gt;&lt;/a&gt;协程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;协程可以简单理解为线程，只不过这个线程是用户态的，不需要操作系统参与，创建销毁和切换的成本非常低，和线程不同的是协程没法利用多核 cpu 的，想利用多核 cpu 需要依赖 &lt;code&gt;Swoole&lt;/code&gt; 的多进程模型。—— swoole 协程一章&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Swoole" scheme="http://blog.caoxl.com/categories/Swoole/"/>
    
    
      <category term="Swoole" scheme="http://blog.caoxl.com/tags/Swoole/"/>
    
      <category term="协程" scheme="http://blog.caoxl.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="Coroutine" scheme="http://blog.caoxl.com/tags/Coroutine/"/>
    
  </entry>
  
  <entry>
    <title>PHP与Go的语法对比</title>
    <link href="http://blog.caoxl.com/2020/10/26/PHP-vs-Go-Syntax-Comparison/"/>
    <id>http://blog.caoxl.com/2020/10/26/PHP-vs-Go-Syntax-Comparison/</id>
    <published>2020-10-26T03:01:10.000Z</published>
    <updated>2020-10-26T03:50:31.229Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>PHP</code> 是一种动态类型语言，它使新手更容易编写代码。现在的问题是，PHP 开发人员能否从动态类型语言切换到像 Go 这样的静态类型语言？为了找到答案，让我们对比一下 Go 和 PHP 之间的语法差异。</p><p><code>Go</code> 是由 Google 设计的一门静态类型的编译型语言。它有点类似于 C，但是它包含了更多的优点，比如垃圾回收、内存安全、结构类型和并发性。它的并发机制使多核和网络机器能够发挥最大的作用。这是 GoLang 的最佳卖点之一。此外，Go 速度快，表现力强，干净且高效。这也是 Go 如此吸引开发者学习的原因。</p><a id="more"></a><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li><code>Go</code> 同时支持有符号和无符号整数，而 <code>PHP</code> 只支持有符号整数。</li><li>另一个主要区别是数组。<code>Go</code> 对 <code>array</code> 和 <code>map</code> 有单独的类型，而 <code>PHP</code> 数组实际上是有序的 <code>map</code>。</li><li><code>Go</code> 与 <code>PHP</code> 相比没有对象。但是，Go 有一个类似于 <code>object</code> 的 <code>struct</code> 类型。</li></ul><h2 id="PHP-数据类型"><a href="#PHP-数据类型" class="headerlink" title="PHP 数据类型:"></a>PHP 数据类型:</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">boolean</span><br><span class="line">string</span><br><span class="line">integer // Signed integer, PHP does<span class="built_in"> not </span>support unsigned integers.</span><br><span class="line">float (also known as <span class="string">"floats"</span>, <span class="string">"doubles"</span>,<span class="built_in"> or </span><span class="string">"real numbers"</span>)</span><br><span class="line">array</span><br><span class="line">object</span><br><span class="line">null</span><br><span class="line">resource</span><br></pre></td></tr></table></figure><h2 id="Go-数据类型"><a href="#Go-数据类型" class="headerlink" title="Go 数据类型:"></a>Go 数据类型:</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span></span><br><span class="line"><span class="keyword">bool</span></span><br><span class="line"><span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span> <span class="comment">// Signed integer</span></span><br><span class="line"><span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span> <span class="comment">// Unsigned integers</span></span><br><span class="line"><span class="keyword">byte</span> <span class="comment">// alias for uint8</span></span><br><span class="line"><span class="keyword">rune</span> <span class="comment">// alias for int32</span></span><br><span class="line"><span class="keyword">float32</span> <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">complex64</span> <span class="keyword">complex128</span></span><br><span class="line">array</span><br><span class="line">slices</span><br><span class="line"><span class="keyword">map</span></span><br><span class="line"><span class="keyword">struct</span></span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>Go 使用 <code>var</code> 声明全局变量和函数变量。但是，它也支持带有初始化程序的简写语法，但只能在函数内部使用。另一方面，PHP 仅支持带有初始化程序的变量声明。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量声明</span></span><br><span class="line"><span class="comment">// Go               // PHP</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">i</span> int           <span class="variable">$i</span> = <span class="number">0</span>      <span class="comment">// integer</span></span><br><span class="line"><span class="selector-tag">var</span> f float64       <span class="variable">$f</span> = <span class="number">0.0</span>    <span class="comment">// float</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> bool          <span class="variable">$b</span> = false  <span class="comment">// boolean</span></span><br><span class="line"><span class="selector-tag">var</span> s string        <span class="variable">$s</span> = <span class="string">""</span>     <span class="comment">// string</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> [<span class="number">2</span>]string     <span class="variable">$a</span> = []     <span class="comment">// array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简短的变量声明</span></span><br><span class="line"><span class="comment">// Go                      // PHP</span></span><br><span class="line"><span class="selector-tag">i</span> := <span class="number">0</span>                     <span class="variable">$i</span> = <span class="number">0</span>      <span class="comment">// integer</span></span><br><span class="line">f := <span class="number">0.0</span>                   <span class="variable">$f</span> = <span class="number">0.0</span>    <span class="comment">// float</span></span><br><span class="line"><span class="selector-tag">b</span> := false                 <span class="variable">$b</span> = false  <span class="comment">// boolean</span></span><br><span class="line">s := <span class="string">""</span>                    <span class="variable">$s</span> = <span class="string">""</span>     <span class="comment">// string</span></span><br><span class="line"><span class="selector-tag">a</span> := [<span class="number">1</span>]string&#123;<span class="string">"hello"</span>&#125;    <span class="variable">$a</span> = []     <span class="comment">// array</span></span><br></pre></td></tr></table></figure><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><ul><li>Go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span>             <span class="comment">// Signed integer</span></span><br><span class="line">f := <span class="keyword">float64</span>(i)     <span class="comment">// Float</span></span><br><span class="line">u := <span class="keyword">uint</span>(f)        <span class="comment">// Unsigned integer</span></span><br></pre></td></tr></table></figure><ul><li>PHP</li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$i = <span class="number">1</span>;</span><br><span class="line">$f = (<span class="keyword">float</span>) $i;    <span class="comment">// 1.0</span></span><br><span class="line">$b = (bool) $f      <span class="comment">// true</span></span><br><span class="line">$s = (<span class="keyword">string</span>) $b    <span class="comment">// "1"</span></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li>Go</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> [<span class="number">2</span>]string</span><br><span class="line"><span class="selector-tag">a</span>[<span class="number">0</span>] = <span class="string">"Hello"</span></span><br><span class="line"><span class="selector-tag">a</span>[<span class="number">1</span>] = <span class="string">"World"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"><span class="selector-tag">a</span> := [<span class="number">2</span>]string&#123;<span class="string">"hello"</span>, <span class="string">"world"</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>PHP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PHP</span></span><br><span class="line">$a = [</span><br><span class="line">    <span class="string">"hello"</span>,</span><br><span class="line">    <span class="string">"world"</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h1 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h1><ul><li>Go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">    <span class="string">"first_name"</span>: <span class="string">"Foo"</span>,</span><br><span class="line">    <span class="string">"last_name"</span>: <span class="string">"Bar"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PHP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PHP</span></span><br><span class="line">$m = [</span><br><span class="line">    <span class="string">"first_name"</span> =&gt; <span class="string">"Foo"</span>,</span><br><span class="line">    <span class="string">"last_name"</span> =&gt; <span class="string">"Bar"</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h1 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h1><p>Go 不支持对象。但是，您可以使用 <code>structs</code> 实现 <code>object</code> 之类的语法。</p><ul><li>Go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Address <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    person := Person&#123;<span class="string">"Foo bar"</span>, <span class="string">"Sydney, Australia"</span>&#125;</span><br><span class="line">    fmt.Println(person.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PHP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PHP</span></span><br><span class="line">$person = <span class="keyword">new</span> stdClass;</span><br><span class="line">$person-&gt;Name = <span class="string">"Foo bar"</span>;</span><br><span class="line">$person-&gt;Address = <span class="string">"Sydney, Australia"</span>;</span><br><span class="line"><span class="keyword">echo</span> $person-&gt;Name;</span><br><span class="line"><span class="comment">// 或使用类型转换</span></span><br><span class="line">$person = (object) [</span><br><span class="line">    <span class="string">'Name'</span> =&gt; <span class="string">"Foo bar"</span>,</span><br><span class="line">    <span class="string">'Address'</span> =&gt; <span class="string">"Sydney, Australia"</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">echo</span> $person-&gt;Name;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>Go 和 PHP 函数之间的主要区别是； <strong>Go 函数可以返回任意数量的结果，而 PHP 函数只能返回一个结果。</strong> 但是，PHP 可以通过返回数组来模拟相同的功能。</p><ul><li>Go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fullname</span><span class="params">(firstName <span class="keyword">string</span>, lastName <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := fullname(<span class="string">"Foo"</span>, <span class="string">"Bar"</span>)</span><br><span class="line">    fmt.Println(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PHP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PHP</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fullname</span><span class="params">(string $firstName, string $lastName)</span> : <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $firstName . <span class="string">" "</span> . $lastName;</span><br><span class="line">&#125;</span><br><span class="line">$name = fullname(<span class="string">"Foo"</span>, <span class="string">"Bar"</span>);</span><br><span class="line"><span class="keyword">echo</span> $name;</span><br></pre></td></tr></table></figure><h2 id="返回多个结果"><a href="#返回多个结果" class="headerlink" title="返回多个结果"></a>返回多个结果</h2><ul><li>Go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a, b := swap(<span class="string">"hello"</span>, <span class="string">"world"</span>)</span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PHP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PHP</span></span><br><span class="line"><span class="comment">// 返回一个数组以获得多个结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span><span class="params">(string $x, string $y)</span>: <span class="title">array</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [$y, $x];</span><br><span class="line">&#125;</span><br><span class="line">[$a, $b] = swap(<span class="string">'hello'</span>, <span class="string">'world'</span>);</span><br><span class="line"><span class="keyword">echo</span> $a, $b;</span><br></pre></td></tr></table></figure><h1 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h1><h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a><code>if-else</code></h2><ul><li>Go</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        fmt.Println(<span class="string">"a is bigger than b"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"a is NOT greater than b"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    compare(<span class="number">12</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PHP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span><span class="params">(int $a, int $b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($a &gt; $b) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"a is bigger than b"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"a is NOT greater than b"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">compare(<span class="number">12</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a><code>switch</code></h2><p>根据 Golang 官方教程文档:</p><blockquote><p>Go 的 switch 与 C，C+，Java，JavaScript 和 PHP 中的类似，除了 Go 只运行选中的 case，而不是随后的所有 case。 实际上， <code>break</code> 语句在这些语言中的每个 case<br>后都是必需的，而在 Go 中则是自动补充的。另一个重要的区别是 Go 的 switch cases 不需要是常量，并且涉及的值也不必是整数。</p></blockquote><ul><li>Go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Print(<span class="string">"Go runs on "</span>)</span><br><span class="line"></span><br><span class="line">    os := runtime.GOOS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> os &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"darwin"</span>:</span><br><span class="line">        fmt.Println(<span class="string">"OS X."</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"linux"</span>:</span><br><span class="line">        fmt.Println(<span class="string">"Linux."</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"%s.\n"</span>, os)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PHP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"PHP runs on "</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (PHP_OS) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"darwin"</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"OS X."</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"linux"</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Linux."</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> PHP_OS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><ul><li>Go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        sum += i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PHP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">10</span>; $i++) &#123;</span><br><span class="line">    $sum += $i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $sum;</span><br></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>Go 自身没有 while 循环的语法。相应的，Go 使用 for 循环代替实现 <code>while</code> 循环.</p><ul><li>Go</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line">func main() &#123;</span><br><span class="line">    <span class="built_in">sum</span> := <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    for <span class="built_in">sum</span> &lt; <span class="number">100</span> &#123;</span><br><span class="line">        <span class="built_in">sum</span> += <span class="built_in">sum</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fmt</span>.Println(<span class="built_in">sum</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PHP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$sum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ($sum &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    $sum += $sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $sum;</span><br></pre></td></tr></table></figure><h2 id="foreach-range"><a href="#foreach-range" class="headerlink" title="foreach/range"></a>foreach/range</h2><p>PHP 使用 <code>foreach</code> 迭代数组和对象。与之对应，Go 使用 <code>range</code> 迭代 slice 或 map。</p><ul><li>Go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    colours := []<span class="keyword">string</span>&#123;<span class="string">"Maroon"</span>, <span class="string">"Red"</span>, <span class="string">"Green"</span>, <span class="string">"Blue"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, colour := <span class="keyword">range</span> colours &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"index: %d, colour: %s\n"</span>, index, colour)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PHP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$colours = [<span class="string">"Maroon"</span>, <span class="string">"Red"</span>, <span class="string">"Green"</span>, <span class="string">"Blue"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($colours <span class="keyword">as</span> $index =&gt; $color) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"index: &#123;$index&#125;, color: &#123;$color&#125;\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://engineering.carsguide.com.au/go-vs-php-syntax-comparison-c1465380b8ff" target="_blank" rel="noopener">原文地址</a></li><li><a href="https://learnku.com/php/t/39590" target="_blank" rel="noopener">译文地址</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;PHP&lt;/code&gt; 是一种动态类型语言，它使新手更容易编写代码。现在的问题是，PHP 开发人员能否从动态类型语言切换到像 Go 这样的静态类型语言？为了找到答案，让我们对比一下 Go 和 PHP 之间的语法差异。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Go&lt;/code&gt; 是由 Google 设计的一门静态类型的编译型语言。它有点类似于 C，但是它包含了更多的优点，比如垃圾回收、内存安全、结构类型和并发性。它的并发机制使多核和网络机器能够发挥最大的作用。这是 GoLang 的最佳卖点之一。此外，Go 速度快，表现力强，干净且高效。这也是 Go 如此吸引开发者学习的原因。&lt;/p&gt;
    
    </summary>
    
      <category term="Caoxl" scheme="http://blog.caoxl.com/categories/Caoxl/"/>
    
    
      <category term="PHP" scheme="http://blog.caoxl.com/tags/PHP/"/>
    
      <category term="Go" scheme="http://blog.caoxl.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>PHP面试/笔试题杂记 IX</title>
    <link href="http://blog.caoxl.com/2020/09/23/Interview-Questions-Notes-IX/"/>
    <id>http://blog.caoxl.com/2020/09/23/Interview-Questions-Notes-IX/</id>
    <published>2020-09-23T01:47:07.000Z</published>
    <updated>2020-09-23T06:58:23.376Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>从问题中思考,从解答中成长</p></blockquote><a id="more"></a><h1 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h1><h1 id="网络篇"><a href="#网络篇" class="headerlink" title="网络篇"></a>网络篇</h1><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">计算机网络体系结构</a></li></ul><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#12-http-%E6%8A%A5%E6%96%87%E7%BB%84%E6%88%90" target="_blank" rel="noopener">HTTP 报文组成</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#13-http-%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">HTTP 状态码</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#14-%E5%B8%B8%E8%A7%81%E7%9A%84-http-%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">常见的 HTTP 方法</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#16-http-%E4%BC%98%E7%BC%BA%E7%82%B9" target="_blank" rel="noopener">HTTP 优缺点</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#17-https-%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86" target="_blank" rel="noopener">HTTPS 通信原理</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#18-http-20" target="_blank" rel="noopener">HTTP 2.0</a></li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#tcp-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="noopener">TCP 适用场景</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#3-tcp-%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E7%82%B9" target="_blank" rel="noopener">TCP 的主要特点</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#4-%E7%AE%80%E8%BF%B0%E4%B8%89%E6%8A%A5%E6%96%87%E6%8F%A1%E6%89%8B%E5%BB%BA%E7%AB%8B-tcp-%E8%BF%9E%E6%8E%A5" target="_blank" rel="noopener">简述三报文握手建立 TCP 连接</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#5-%E5%BB%BA%E7%AB%8B-tcp-%E8%BF%9E%E6%8E%A5%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%80%E5%90%8E%E8%BF%98%E8%A6%81%E5%8F%91%E9%80%81%E7%A1%AE%E8%AE%A4" target="_blank" rel="noopener">建立 TCP 连接为什么最后还要发送确认</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#6-%E7%AE%80%E8%BF%B0-tcp-%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%87%8A%E6%94%BE" target="_blank" rel="noopener">简述 TCP 连接的释放</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#7-time-wait-%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E7%AD%89%E5%BE%85-2mls" target="_blank" rel="noopener">TIME-WAIT 是什么，为什么必须等待 2MLS</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#8-tcp-%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">TCP 粘包问题</a></li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#udp-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="noopener">UDP 适用场景</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#2-udp-%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E7%82%B9" target="_blank" rel="noopener">UDP 的主要特点</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#9-udptcp-%E5%8C%BA%E5%88%AB%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="noopener">UDP、TCP 区别，适用场景</a></li></ul><h2 id="IPv4-amp-IPv6"><a href="#IPv4-amp-IPv6" class="headerlink" title="IPv4&amp;IPv6"></a>IPv4&amp;IPv6</h2><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#20-ipv6-%E4%B8%8E-ipv4-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8F%98%E5%8C%96" target="_blank" rel="noopener">IPv6 与 IPv4 有什么变化</a></li></ul><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#10-%E5%BB%BA%E7%AB%8B-socket-%E9%9C%80%E8%A6%81%E5%93%AA%E4%BA%9B%E6%AD%A5%E9%AA%A4" target="_blank" rel="noopener">建立 socket 需要哪些步骤</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#19-websocket" target="_blank" rel="noopener">WebSocket</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#22-%E4%BB%80%E4%B9%88%E6%98%AF%E9%95%BF%E8%BF%9E%E6%8E%A5" target="_blank" rel="noopener">什么是长连接</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#15-get-%E4%B8%8E-post-%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">GET 与 POST 请求方式区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/01.%E7%BD%91%E7%BB%9C.md#21-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6" target="_blank" rel="noopener">什么是心跳机制</a></li></ul><h1 id="数据机构与算法篇"><a href="#数据机构与算法篇" class="headerlink" title="数据机构与算法篇"></a>数据机构与算法篇</h1><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.md#1-%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener">概述</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.md#2-%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80" target="_blank" rel="noopener">实现基础</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.md#3-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">线性结构</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.md#4-%E6%A0%91" target="_blank" rel="noopener">树</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.md#5-%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE" target="_blank" rel="noopener">散列查找</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.md#6-%E5%9B%BE" target="_blank" rel="noopener">图</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.md#7-%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">排序</a></li></ul><h1 id="PHP篇"><a href="#PHP篇" class="headerlink" title="PHP篇"></a>PHP篇</h1><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#echoprintprint_rvar_dump-%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">echo、print、print_r、var_dump 区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#%E5%8D%95%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8F%8C%E5%BC%95%E5%8F%B7%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">单引号和双引号的区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#staticselfthis-%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">static、self、$this 的区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#includerequireinclude_oncerequire_once-%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">include、require、include_once、require_once 的区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#publicprotectedprivatefinal-%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">public、protected、private、final 区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#mysqlmysqlipdo-%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">MySQL、MySQLi、PDO 区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#%E5%8F%91%E8%B5%B7-http-%E8%AF%B7%E6%B1%82%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%83%E4%BB%AC%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">发起 HTTP 请求有哪几种方式，它们有何区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#%E5%B8%B8%E8%A7%81%E6%95%B0%E7%BB%84%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">常见数组函数</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#cookie-%E5%92%8C-session" target="_blank" rel="noopener">Cookie 和 Session</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F" target="_blank" rel="noopener">预定义变量</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#%E4%BC%A0%E5%80%BC%E5%92%8C%E4%BC%A0%E5%BC%95%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">传值和传引用的区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">构造函数和析构函数</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E8%B0%83%E7%94%A8%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">类的静态调用和实例化调用</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#phpini-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9" target="_blank" rel="noopener">php.ini 配置选项</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#502504-%E9%94%99%E8%AF%AF%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener">502、504 错误产生原因及解决方式</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#%E4%B8%BB%E6%B5%81-php-%E6%A1%86%E6%9E%B6%E7%89%B9%E7%82%B9" target="_blank" rel="noopener">主流 PHP 框架特点</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/03.PHP/QA.md#%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84orm" target="_blank" rel="noopener">对象关系映射/ORM</a></li></ul><h1 id="Web篇"><a href="#Web篇" class="headerlink" title="Web篇"></a>Web篇</h1><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#seo-%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84" target="_blank" rel="noopener">SEO 有哪些需要注意的</a></li></ul><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#javascript-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">JavaScript 数据类型</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8A%8A-javascript-%E6%96%87%E4%BB%B6%E6%94%BE%E5%9C%A8-html-%E5%BA%95%E9%83%A8" target="_blank" rel="noopener">为什么把 JavaScript 文件放在 Html 底部</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#javascript-%E6%93%8D%E4%BD%9C-dom-%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noopener">JavaScript 操作 DOM 的方法有哪些</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#javascript-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noopener">JavaScript 字符串方法有哪些</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#javascript-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">JavaScript 字符串截取方法有哪些？有什么区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-ajax-%E8%AF%B7%E6%B1%82" target="_blank" rel="noopener">如何实现 ajax 请求</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noopener">同源策略是什么</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">如何解决跨域问题</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#%E5%BC%95%E8%B5%B7%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E6%93%8D%E4%BD%9C%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noopener">引起内存泄漏的操作有哪些</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E7%BD%91%E9%A1%B5%E4%B8%AD%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%88%90%E5%8A%9F%E6%88%96%E8%80%85%E5%A4%B1%E8%B4%A5" target="_blank" rel="noopener">如何判断网页中图片加载成功或者失败</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%87%92%E5%8A%A0%E8%BD%BD" target="_blank" rel="noopener">如何实现懒加载</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#jsonp-%E5%8E%9F%E7%90%86" target="_blank" rel="noopener">JSONP 原理</a></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB" target="_blank" rel="noopener">CSS 选择器的分类</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#css-sprite-%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%BC%BA%E7%82%B9" target="_blank" rel="noopener">CSS sprite 是什么，有什么优缺点</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#display-none-%E4%B8%8E-visibility-hidden-%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">display: none 与 visibility: hidden 的区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#display-block-%E5%92%8C-display-inline-%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">display: block 和 display: inline 的区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#css-%E6%96%87%E4%BB%B6style-%E6%A0%87%E7%AD%BE%E8%A1%8C%E5%86%85-style-%E5%B1%9E%E6%80%A7%E4%BC%98%E5%85%88%E7%BA%A7" target="_blank" rel="noopener">CSS 文件、style 标签、行内 style 属性优先级</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#link-%E4%B8%8E-import-%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">link 与 @import 的区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#flex-%E4%B8%8E-css-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">flex 与 CSS 盒子模型有什么区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#pnggifjpg-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%A6%82%E4%BD%95%E9%80%89" target="_blank" rel="noopener">PNG,GIF,JPG 的区别及如何选</a></li></ul><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/04.Web/QA.md#vuejs-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86" target="_blank" rel="noopener">Vue.js 双向绑定原理</a></li></ul><h1 id="MySQL篇"><a href="#MySQL篇" class="headerlink" title="MySQL篇"></a>MySQL篇</h1><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">体系结构</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C" target="_blank" rel="noopener">基础操作</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F" target="_blank" rel="noopener">数据库设计范式</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">数据库设计原则</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#char-%E5%92%8C-varchar-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">char 和 varchar 数据类型区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#left-join-right-joininner-join" target="_blank" rel="noopener">LEFT JOIN 、RIGHT JOIN、INNER JOIN</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#unionunion-all" target="_blank" rel="noopener">UNION、UNION ALL</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#%E5%B8%B8%E7%94%A8-mysql-%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">常用 MySQL 函数</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#%E9%94%81" target="_blank" rel="noopener">锁</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#%E4%BA%8B%E5%8A%A1" target="_blank" rel="noopener">事务</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#%E5%B8%B8%E8%A7%81%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E" target="_blank" rel="noopener">常见存储引擎</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#%E5%B8%B8%E8%A7%81%E7%B4%A2%E5%BC%95" target="_blank" rel="noopener">常见索引</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#%E8%81%9A%E6%97%8F%E7%B4%A2%E5%BC%95%E4%B8%8E%E9%9D%9E%E8%81%9A%E6%97%8F%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">聚族索引与非聚族索引的区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#btree-%E4%B8%8E-btree-btree-%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86" target="_blank" rel="noopener">BTree 与 BTree-/BTree+ 索引原理</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#%E5%88%86%E8%A1%A8%E6%95%B0%E9%87%8F%E7%BA%A7" target="_blank" rel="noopener">分表数量级</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/05.MySQL/QA.md#explain-%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">EXPLAIN 输出格式</a></li></ul><h1 id="Redis篇"><a href="#Redis篇" class="headerlink" title="Redis篇"></a>Redis篇</h1><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/06.Redis/QA.md#redis-%E7%89%B9%E7%82%B9" target="_blank" rel="noopener">Redis 特点</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/06.Redis/QA.md#redis-%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">Redis 支持哪些数据结构</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/06.Redis/QA.md#redis-%E4%B8%8E-memcache-%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">Redis 与 Memcache 区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/06.Redis/QA.md#%E6%8C%81%E4%B9%85%E5%8C%96%E7%AD%96%E7%95%A5" target="_blank" rel="noopener">持久化策略</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/06.Redis/QA.md#redis-%E4%BA%8B%E5%8A%A1" target="_blank" rel="noopener">Redis 事务</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/06.Redis/QA.md#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81" target="_blank" rel="noopener">如何实现分布式锁</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/06.Redis/QA.md#redis-%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E5%8F%8A%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E6%9C%BA%E5%88%B6" target="_blank" rel="noopener">Redis 过期策略及内存淘汰机制</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/06.Redis/QA.md#%E4%B8%BA%E4%BB%80%E4%B9%88-redis-%E6%98%AF%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%9A%84" target="_blank" rel="noopener">为什么 Redis 是单线程的</a></li></ul><h1 id="Linux篇"><a href="#Linux篇" class="headerlink" title="Linux篇"></a>Linux篇</h1><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/07.Linux/QA.md#linux-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">Linux 目录结构</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/07.Linux/QA.md#linux-%E5%9F%BA%E7%A1%80" target="_blank" rel="noopener">Linux 基础</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/07.Linux/QA.md#%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE" target="_blank" rel="noopener">命令与文件查找</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/07.Linux/QA.md#%E6%95%B0%E6%8D%AE%E6%B5%81%E9%87%8D%E5%AE%9A%E5%90%91" target="_blank" rel="noopener">数据流重定向</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/07.Linux/QA.md#%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1" target="_blank" rel="noopener">计划任务</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/07.Linux/QA.md#vim" target="_blank" rel="noopener">Vim</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/07.Linux/QA.md#%E8%B4%9F%E8%BD%BD%E6%9F%A5%E7%9C%8B" target="_blank" rel="noopener">负载查看</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/07.Linux/QA.md#linux-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">Linux 内存管理</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/07.Linux/QA.md#%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">进程、线程、协程区别</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/07.Linux/QA.md#%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B8%8E%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6" target="_blank" rel="noopener">进程间通信与信号机制</a></li></ul><h1 id="安全篇"><a href="#安全篇" class="headerlink" title="安全篇"></a>安全篇</h1><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/08.%E5%AE%89%E5%85%A8/QA.md#%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BBxss" target="_blank" rel="noopener">跨站脚本攻击(XSS)</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/08.%E5%AE%89%E5%85%A8/QA.md#%E8%B7%A8%E7%AB%99%E7%82%B9%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0csrf" target="_blank" rel="noopener">跨站点请求伪造(CSRF)</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/08.%E5%AE%89%E5%85%A8/QA.md#sql-%E6%B3%A8%E5%85%A5" target="_blank" rel="noopener">SQL 注入</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/08.%E5%AE%89%E5%85%A8/QA.md#%E5%BA%94%E7%94%A8%E5%B1%82%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">应用层拒绝服务攻击</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/08.%E5%AE%89%E5%85%A8/QA.md#php-%E5%AE%89%E5%85%A8" target="_blank" rel="noopener">PHP 安全</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/08.%E5%AE%89%E5%85%A8/QA.md#%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%92%8C%E7%9C%9F%E9%9A%8F%E6%9C%BA%E6%95%B0" target="_blank" rel="noopener">伪随机数和真随机数</a></li></ul><h1 id="设计模式篇"><a href="#设计模式篇" class="headerlink" title="设计模式篇"></a>设计模式篇</h1><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/09.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.md#%E4%BB%80%E4%B9%88%E6%98%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">什么是设计模式</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/09.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.md#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%A1%86%E6%9E%B6" target="_blank" rel="noopener">如何理解框架</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/09.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.md#%E4%B8%BB%E8%A6%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">主要设计模式</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/09.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.md#%E6%80%8E%E6%A0%B7%E9%80%89%E6%8B%A9%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">怎样选择设计模式</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/09.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.md#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">单例模式</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/09.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.md#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">抽象工厂模式</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/09.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.md#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">工厂方法模式</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/09.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.md#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">适配器模式</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/09.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.md#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">策略模式</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/09.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.md#%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC" target="_blank" rel="noopener">控制反转</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/09.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.md#%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5" target="_blank" rel="noopener">依赖注入</a></li></ul><h1 id="架构篇"><a href="#架构篇" class="headerlink" title="架构篇"></a>架构篇</h1><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/10.%E6%9E%B6%E6%9E%84/QA.md#oauth-20" target="_blank" rel="noopener">OAuth 2.0</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/10.%E6%9E%B6%E6%9E%84/QA.md#%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95" target="_blank" rel="noopener">单点登录</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/10.%E6%9E%B6%E6%9E%84/QA.md#rest" target="_blank" rel="noopener">REST</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/10.%E6%9E%B6%E6%9E%84/QA.md#api-%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9" target="_blank" rel="noopener">API 版本兼容</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/10.%E6%9E%B6%E6%9E%84/QA.md#jwt" target="_blank" rel="noopener">JWT</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/10.%E6%9E%B6%E6%9E%84/QA.md#lvs" target="_blank" rel="noopener">LVS</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/10.%E6%9E%B6%E6%9E%84/QA.md#ngnix" target="_blank" rel="noopener">Ngnix</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/10.%E6%9E%B6%E6%9E%84/QA.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB" target="_blank" rel="noopener">数据库读写分离</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/10.%E6%9E%B6%E6%9E%84/QA.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8B%86%E5%88%86" target="_blank" rel="noopener">数据库拆分</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/10.%E6%9E%B6%E6%9E%84/QA.md#%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C" target="_blank" rel="noopener">一致性哈希</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/10.%E6%9E%B6%E6%9E%84/QA.md#redis-%E9%9B%86%E7%BE%A4" target="_blank" rel="noopener">Redis 集群</a></li><li><a href="https://github.com/colinlet/PHP-Interview-QA/blob/master/docs/10.%E6%9E%B6%E6%9E%84/QA.md#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97" target="_blank" rel="noopener">消息队列</a></li></ul><h1 id="职业规划篇"><a href="#职业规划篇" class="headerlink" title="职业规划篇"></a>职业规划篇</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从问题中思考,从解答中成长&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="笔试题" scheme="http://blog.caoxl.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>他写出了 Vue，却做不对这十道 Vue 笔试题</title>
    <link href="http://blog.caoxl.com/2020/09/10/Vue-The-Test/"/>
    <id>http://blog.caoxl.com/2020/09/10/Vue-The-Test/</id>
    <published>2020-09-10T07:17:23.000Z</published>
    <updated>2020-09-10T07:43:56.026Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>原文地址: <a href="https://juejin.im/post/6870737289736093710" target="_blank" rel="noopener">他写出了 Vue，却做不对这十道 Vue 笔试题</a></p></blockquote><a id="more"></a><p>这里搬运过来只是方便自己学习.</p><p>上题:</p><ul><li><ol><li><code>Vue</code> 实例的 <code>data</code> 属性，可以在哪些生命周期中获取到？<br>A. <code>beforeCreate</code><br>B. <code>created</code><br>C. <code>beforeMount</code><br>D. <code>mounted</code></li></ol></li></ul><ul><li><ol start="2"><li>下列对 <code>Vue</code> 原理的叙述，哪些是正确的？<br>A. <code>Vue</code> 中的数组变更通知，通过拦截数组操作方法而实现<br>B. 编译器目标是创建渲染函数，渲染函数执行后将得到 <code>VNode</code> 树<br>C. 组件内 <code>data</code> 发生变化时会通知其对应 <code>watcher</code>，执行异步更新<br>D. <code>patching</code> 算法首先进行同层级比较，可能执行的操作是节点的增加、删除和更新</li></ol></li></ul><ul><li><ol start="3"><li>对于 <code>Vue</code> 中响应式数据原理的说法，下列哪项是不正确的？<br>A. 采用数据劫持方式，即 <code>Object.defineProperty()</code> 劫持 <code>data</code> 中各属性，实现响应式数据<br>B. 视图中的变化会通过 <code>watcher</code> 更新 <code>data</code> 中的数据<br>C. 若 <code>data</code> 中某属性多次发生变化，<code>watcher</code> 仅会进入更新队列一次<br>D. 通过编译过程进行依赖收集</li></ol></li></ul><ul><li><ol start="4"><li>下列说法不正确的是哪项？<br>A. <code>key</code> 的作用主要是为了高效地更新虚拟 <code>DOM</code><br>B. 若指定了组件的 <code>template</code> 选项，<code>render</code> 函数不会执行<br>C. 使用 <code>vm.$nextTick</code> 可以确保获得 <code>DOM</code> 异步更新的结果<br>D. 若没有 <code>el</code> 选项，<code>vm.$mount(dom)</code> 可将 <code>Vue</code> 实例挂载于指定元素上</li></ol></li></ul><ul><li><ol start="5"><li>下列关于 <code>Vuex</code> 的描述，不正确的是哪项？<br>A. <code>Vuex</code> 通过 <code>Vue</code> 实现响应式状态，因此只能用于 <code>Vue</code><br>B. <code>Vuex</code> 是一个状态管理模式<br>C. <code>Vuex</code> 主要用于多视图间状态全局共享与管理<br>D. 在 <code>Vuex</code> 中改变状态，可以通过 <code>mutations</code> 和 <code>actions</code></li></ol></li></ul><ul><li><ol start="6"><li>关于 <code>Vue</code> 组件间的参数传递，下列哪项是不正确的？<br>A. 若子组件给父组件传值，可使用 <code>$emit</code> 方法<br>B. 祖孙组件之间可以使用 <code>provide</code> 和 <code>inject</code> 方式跨层级相互传值<br>C. 若子组件使用 <code>$emit(&#39;say&#39;)</code> 派发事件，父组件可使用 <code>@say</code> 监听<br>D. 若父组件给子组件传值，子组件可通过 <code>props</code> 接受数据</li></ol></li></ul><ul><li><ol start="7"><li>下列关于 <code>vue-router</code> 的描述，不正确的是哪项？<br>A. <code>vue-router</code> 的常用模式有 <code>hash</code> 和 <code>history</code> 两种<br>B. 可通过 <code>addRoutes</code> 方法动态添加路由<br>C. 可通过 <code>beforeEnter</code> 对单个组件进行路由守卫<br>D. <code>vue-router</code> 借助 <code>Vue</code> 实现响应式的路由，因此只能用于 <code>Vue</code></li></ol></li></ul><ul><li><ol start="8"><li>下列说法不正确的是哪项？<br>A. 可通过 <code>this.$parent</code> 查找当前组件的父组件<br>B. 可使用 <code>this.$refs</code> 查找命名子组件<br>C. 可使用 <code>this.$children</code> 按顺序查找当前组件的直接子组件<br>D. 可使用 <code>$root</code> 查找根组件，并可配合 <code>children</code> 遍历全部组件</li></ol></li></ul><ul><li><ol start="9"><li>下列关于 <code>v-model</code> 的说法，哪项是不正确的？<br>A. <code>v-model</code> 能实现双向绑定<br>B. <code>v-model</code> 本质上是语法糖，它负责监听用户的输入事件以更新数据<br>C. <code>v-model</code> 是内置指令，不能用在自定义组件上<br>D. 对 <code>input</code> 使用 <code>v-model</code>，实际上是指定其 <code>:value</code> 和 <code>:input</code></li></ol></li></ul><ul><li><ol start="10"><li>关于 <code>Vue</code> 的生命周期，下列哪项是不正确的？<br>A. <code>DOM</code> 渲染在 <code>mounted</code> 中就已经完成了<br>B. <code>Vue</code> 实例从创建到销毁的过程，就是生命周期<br>C. <code>created</code> 表示完成数据观测、属性和方法的运算和初始化事件，此时 <code>$el</code> 属性还未显示出来<br>D. 页面首次加载过程中，会依次触发 <code>beforeCreate</code>，<code>created</code>，<code>beforeMount</code>，<code>mounted</code>，<code>beforeUpdate</code>，<code>updated</code></li></ol></li></ul><ul><li>参考答案</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> BCD</span><br><span class="line"><span class="number">2.</span> ABCD</span><br><span class="line"><span class="number">3.</span> BD</span><br><span class="line"><span class="number">4.</span> B</span><br><span class="line"><span class="number">5.</span> C</span><br><span class="line"><span class="number">6.</span> B</span><br><span class="line"><span class="number">7.</span> C</span><br><span class="line"><span class="number">8.</span> C</span><br><span class="line"><span class="number">9.</span> C</span><br><span class="line"><span class="number">10.</span> D</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.zhihu.com/question/393825440/answer/1214828265" target="_blank" rel="noopener">逐条判定为什么 Dan Abramov 配不上阿里 P7</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址: &lt;a href=&quot;https://juejin.im/post/6870737289736093710&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;他写出了 Vue，却做不对这十道 Vue 笔试题&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.caoxl.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://blog.caoxl.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue CLI 3.x 与 2.x的区别</title>
    <link href="http://blog.caoxl.com/2020/09/09/Vue-2x-3x-Diff/"/>
    <id>http://blog.caoxl.com/2020/09/09/Vue-2x-3x-Diff/</id>
    <published>2020-09-09T04:03:30.000Z</published>
    <updated>2020-09-09T07:56:32.250Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Vue CLI 3.x 与 2.x的区别</p><a id="more"></a><h1 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h1><ul><li>安装与项目构建</li><li>项目目录变化</li><li>项目配置变化</li></ul><h1 id="安装-amp-项目构建"><a href="#安装-amp-项目构建" class="headerlink" title="安装&amp;项目构建"></a>安装&amp;项目构建</h1><h2 id="CLI安装"><a href="#CLI安装" class="headerlink" title="CLI安装"></a>CLI安装</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cli 2.x </span></span><br><span class="line"><span class="built_in">npm</span> install -g vue-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># cli 3.x </span></span><br><span class="line"><span class="comment"># 3.x 安装时，如果之前安装了2.x需要卸载2.x再安装</span></span><br><span class="line"><span class="built_in">npm</span> install -g @vue/cli</span><br></pre></td></tr></table></figure><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><h3 id="cli2-x"><a href="#cli2-x" class="headerlink" title="cli2.x"></a>cli2.x</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue init &lt;template-<span class="built_in">name</span>&gt; &lt;project-<span class="built_in">name</span>&gt;</span><br><span class="line">npm i </span><br><span class="line">npm <span class="built_in">run</span> dev</span><br></pre></td></tr></table></figure><h3 id="cli3-x"><a href="#cli3-x" class="headerlink" title="cli3.x"></a>cli3.x</h3><blockquote><ul><li>安装新增TypeScript配置选项</li><li>新增图形化安装方法</li><li>保留了2.x之前的安装方法</li></ul></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vue</span> <span class="string">create hello-world</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">i</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">run serve</span></span><br><span class="line"><span class="comment"># 使用vue ui创建新项目(3.x新增)</span></span><br><span class="line"><span class="attr">vue</span> <span class="string">ui</span></span><br><span class="line"><span class="comment"># 使用旧版（2.X）创建</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install -g @vue/cli-init</span></span><br><span class="line"><span class="comment"># 'vue init'的运行效果与‘vue-cli@2.x’相同</span></span><br><span class="line"><span class="attr">vue</span> <span class="string">init webpack projectname</span></span><br></pre></td></tr></table></figure><h1 id="3-x后目录结构变化-替换2-x功能的新特性"><a href="#3-x后目录结构变化-替换2-x功能的新特性" class="headerlink" title="3.x后目录结构变化[替换2.x功能的新特性]"></a>3.x后目录结构变化[替换2.x功能的新特性]</h1><h2 id="config目录删除，使用模式的-env文件代替-模式"><a href="#config目录删除，使用模式的-env文件代替-模式" class="headerlink" title="config目录删除，使用模式的.env文件代替[模式]"></a>config目录删除，使用模式的.env文件代替[模式]</h2><p><code>cli3</code>新增模式概念，每个模式在项目中都有对应的配置文件，项目启动时，对应的文件就会加载，与环境变量不同，一个模式可以包括多个环境变量</p><ul><li><p><code>Vue CLI</code> 项目默认有三个模式：</p><ul><li><code>development</code> 模式用于 <code>vue-cli-service serve</code></li><li><code>production</code> 模式用于 <code>vue-cli-service build</code> 和 <code>vue-cli-service test:e2e</code></li><li><code>test</code> 模式用于 <code>vue-cli-service test:unit</code></li></ul></li><li><p>模式需要在启动项目时使用–mode指定</p></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NODE_ENV</span>=development npm <span class="builtin-name">run</span> serve --mode mymode # 模式包含多个环境变量</span><br></pre></td></tr></table></figure><ul><li>每个模式有多个环境变量，<code>cli3.x</code>为模式与环境变量指定了一个<code>.env</code>配置文件</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.env</span> # 所有环境</span><br><span class="line"><span class="selector-class">.env</span><span class="selector-class">.mode</span> # <span class="selector-tag">mode</span>模式加载的配置文件<span class="selector-attr">[优先级高于.env]</span></span><br><span class="line"><span class="selector-class">.env</span><span class="selector-class">.mode</span><span class="selector-class">.development</span> # <span class="selector-tag">mode</span>模式下，<span class="selector-tag">development</span>环境所加载的配置文件<span class="selector-attr">[优先级最高]</span></span><br></pre></td></tr></table></figure><ul><li><code>.env</code>文件详细信息<ul><li>这些文件是用来代替<code>config</code>目录的</li><li>以<code>VUE_APP_</code>开头的变量可以再代码中通过<code>process.env</code>访问，其他的变量不可访问</li><li><code>process.env</code>始终含有两个特殊变量<code>NODE_ENV</code>和<code>BASE_URL</code></li></ul></li></ul><h2 id="删除static目录-新增public目录"><a href="#删除static目录-新增public目录" class="headerlink" title="删除static目录[新增public目录]"></a>删除static目录[新增public目录]</h2><p>删除了<code>static</code>目录，它的静态资源转移到<code>public</code>目录中，通过<code>/xx.xx</code>可以直接访问</p><h3 id="public详细信息"><a href="#public详细信息" class="headerlink" title="public详细信息"></a><code>public</code>详细信息</h3><ul><li><p><code>index.html</code>入口文件从根目录转到<code>public</code>目录下，它拥有3个特殊插值</p><ul><li><code>&lt;%= VALUE %&gt;</code> 用来做不转义插值；</li><li><code>&lt;%- VALUE %&gt;</code> 用来做 HTML 转义插值；</li><li><code>&lt;% expression %&gt;</code> 用来描述 JavaScript 流程控制</li></ul></li><li><p>静态资源被转移到public目录存放</p></li><li><p><code>cli3</code>项目的静态资源有两种处理方式</p><ul><li>在<code>JavaScript</code>或<code>template/css(vue)</code>中通过相对路径导入。这类资源会被<code>webpack</code>处理（不在public目录）</li><li>放在<code>public</code>目录或者使用绝对路径被导入的静态资源。这类资源会被直接拷贝，不会经过<code>webpack</code>处理</li></ul></li></ul><h2 id="cli3-x项目配置的不同（build目录删除）"><a href="#cli3-x项目配置的不同（build目录删除）" class="headerlink" title="cli3.x项目配置的不同（build目录删除）"></a><code>cli3.x</code>项目配置的不同（<code>build</code>目录删除）</h2><p><code>2.x</code>版本的项目配置是在<code>config</code>和<code>build</code>中完成，但是，到了<code>3.x</code>版本，这两个目录都被删除，如果需要自定义配置，需要自己新建<code>vue.config.js</code>文件</p><ul><li><p><code>publicPath</code></p><ul><li>部署应用包时的基本URL，即<code>webpack</code>的<code>output.publicPath</code></li><li>但，<code>vue</code>项目中其他地方会用到<code>publicPath</code>，所以不要修改<code>webpack</code>的<code>output.publicPath</code></li></ul></li><li><p><code>outputDir</code></p><ul><li><code>build</code>构建的文件存放的目录</li><li>即<code>output.path</code>，但只能修改<code>outputDir</code>，不能修改<code>output.path</code></li></ul></li><li><p><code>assetsDir</code> 编译后，在<code>outputDir</code>目录中存放静态资源的目录</p></li><li><p><code>lintOnSave</code> 配置<code>eslint</code>后，是否每次保存<code>lint</code>代码，默认启动</p></li><li><p><code>runtimeCompiler</code> 是否使用包含运行时编译器的 <code>Vue</code> 构建版本，默认不启动</p></li><li><p><code>configureWebpack</code> &amp; <code>chainWebpack</code></p><ul><li>这两个选项是用来配置<code>webpack</code>内容的，前者是合并对象，后者是链式调用</li><li><code>[cli3.6]webpack</code>的<code>build</code>代码压缩默认不开启，需要设置环境变量为<code>production</code>才会开启</li></ul></li><li><p><code>devServer</code> 支持所有<code>webpack-dev-server</code>选项</p><ul><li>配置项目端口、域名 <code>host、port、https</code></li><li>配置项目跨域代理 <code>proxy</code></li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8100</span><span class="string">,</span></span><br><span class="line">  <span class="attr">devServer:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">proxy:</span> <span class="string">'http://localhost:4000'</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="新增功能特性"><a href="#新增功能特性" class="headerlink" title="新增功能特性"></a>新增功能特性</h1><h2 id="快速原型开发"><a href="#快速原型开发" class="headerlink" title="快速原型开发"></a>快速原型开发</h2><p>在<code>cli3.x</code>中可以使用<code>vue serve</code> 和<code>vue build</code>命令对单个<code>*.vue</code> 文件进行快速原型开发</p><h3 id="安装全局依赖"><a href="#安装全局依赖" class="headerlink" title="安装全局依赖"></a>安装全局依赖</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g @vue/cli-service-<span class="built_in">global</span></span><br></pre></td></tr></table></figure><h3 id="vue-serve-运行文件"><a href="#vue-serve-运行文件" class="headerlink" title="vue serve 运行文件"></a><code>vue serve</code> 运行文件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vue</span> <span class="selector-tag">serve</span> <span class="selector-tag">myComponent</span><span class="selector-class">.vue</span> </span><br><span class="line"><span class="selector-tag">Usage</span>: <span class="selector-tag">serve</span> <span class="selector-attr">[options]</span> <span class="selector-attr">[entry]</span></span><br><span class="line">在开发环境模式下零配置为 <span class="selector-class">.js</span> 或 <span class="selector-class">.vue</span> 文件启动一个服务器</span><br><span class="line"><span class="selector-tag">Options</span>:</span><br><span class="line">  <span class="selector-tag">-o</span>, <span class="selector-tag">--open</span>  打开浏览器</span><br><span class="line">  <span class="selector-tag">-c</span>, <span class="selector-tag">--copy</span>  将本地 <span class="selector-tag">URL</span> 复制到剪切板</span><br><span class="line">  <span class="selector-tag">-h</span>, <span class="selector-tag">--help</span>  输出用法信息</span><br></pre></td></tr></table></figure><h3 id="vue-build-编译文件"><a href="#vue-build-编译文件" class="headerlink" title="vue build 编译文件"></a><code>vue build</code> 编译文件</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vue build myComponent.vue </span><br><span class="line"><span class="symbol">Usage:</span> build [options] [entry]</span><br><span class="line">在生产环境模式下零配置构建一个 .js 或 .vue 文件</span><br><span class="line"><span class="symbol">Options:</span></span><br><span class="line">  -t, --target &lt;target&gt;  构建目标 (app | <span class="class"><span class="keyword">lib</span> | <span class="title">wc</span> | <span class="title">wc</span>-<span class="title">async</span>, 默认值：<span class="title">app</span>)</span></span><br><span class="line">  -n, --name &lt;name&gt;      库的名字或 Web Components 组件的名字 (默认值：入口文件名)</span><br><span class="line">  -d, --dest &lt;dir&gt;       输出目录 (默认值：dist)</span><br><span class="line">  -h, --help             输出用法信息</span><br></pre></td></tr></table></figure><h2 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h2><p><code>vue cli3</code> 新增一个UI图形化管理页面，可以通过它新建项目、管理原有项目的插件</p><h3 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> ui <span class="comment"># 启动图形化界面</span></span><br></pre></td></tr></table></figure><h3 id="管理原有项目（包括2-X项目）"><a href="#管理原有项目（包括2-X项目）" class="headerlink" title="管理原有项目（包括2.X项目）"></a>管理原有项目（包括2.X项目）</h3><ul><li>插件管理（更新，查看）（3.x）</li><li>依赖（module）管理（删除、安装、更新、查看）（2.x、3.x）</li><li>项目配置修改 （3.x）</li><li>项目任务（项目script命令启动、停止操作）（2.x、3.x）</li></ul><h2 id="cli插件"><a href="#cli插件" class="headerlink" title="cli插件"></a><code>cli</code>插件</h2><h3 id="什么是插件"><a href="#什么是插件" class="headerlink" title="什么是插件"></a>什么是插件</h3><ul><li><code>vue cli3.x</code>使用了一套基于插件的架构，cli的相关依赖都是以<code>@vue/cli-plugin-</code>开头的</li><li>插件可以修改内部的 <code>webpack</code> 配置，也可以向 <code>vue-cli-service</code> 注入命令</li><li>在项目创建的过程中列出的特性，绝大部分都是通过插件来实现的</li></ul><h3 id="vue-add-插件的安装"><a href="#vue-add-插件的安装" class="headerlink" title="vue add 插件的安装"></a><code>vue add</code> 插件的安装</h3><p><code>cli3.x</code>项目提供了<code>vue add</code>命令来安装插件</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue <span class="keyword">add</span> @vue/<span class="keyword">cli</span>-plugin-eslint</span><br></pre></td></tr></table></figure><h3 id="特殊的vue-router和vuex"><a href="#特殊的vue-router和vuex" class="headerlink" title="特殊的vue-router和vuex"></a>特殊的<code>vue-router</code>和<code>vuex</code></h3><p>它们没有对应的插件，但是依旧可以使用<code>vue add</code>在项目中添加它们</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue <span class="keyword">add</span><span class="bash"> router</span></span><br><span class="line">vue <span class="keyword">add</span><span class="bash"> vuex</span></span><br></pre></td></tr></table></figure><h2 id="配置文件样例"><a href="#配置文件样例" class="headerlink" title="配置文件样例"></a>配置文件样例</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">const path = require(<span class="string">'path'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span> <span class="params">(dir)</span> &#123;</span></span><br><span class="line">  <span class="keyword">return</span> path.<span class="keyword">join</span>(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'/'</span>,</span><br><span class="line">  assetsDir: <span class="string">'static'</span>,</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  configureWebpack: config =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.VUE_APP_NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      // 为生产环境修改配置...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      // 为开发环境修改配置...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 解析别名处理</span><br><span class="line">  chainWebpack: config =&gt; &#123;</span><br><span class="line">    config.<span class="built_in">resolve</span>.alias</span><br><span class="line">      .<span class="keyword">set</span>(<span class="string">'@img'</span>, <span class="built_in">resolve</span>(<span class="string">'src/assets/img'</span>))</span><br><span class="line">      .<span class="keyword">set</span>(<span class="string">'@c'</span>, <span class="built_in">resolve</span>(<span class="string">'src/components'</span>))</span><br><span class="line">      .<span class="keyword">set</span>(<span class="string">'@m'</span>, <span class="built_in">resolve</span>(<span class="string">'src/mixins'</span>))</span><br><span class="line">      .<span class="keyword">set</span>(<span class="string">'@v'</span>, <span class="built_in">resolve</span>(<span class="string">'src/views'</span>))</span><br><span class="line">      .<span class="keyword">set</span>(<span class="string">'@s'</span>, <span class="built_in">resolve</span>(<span class="string">'src/store'</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  // 配置高于chainWebpack中关于 css loader 的配置</span><br><span class="line">  <span class="keyword">cs</span><span class="variable">s:</span> &#123;</span><br><span class="line">    // 是否开启支持 foo.module.css 样式</span><br><span class="line">    module<span class="variable">s:</span> false,</span><br><span class="line">    // 是否使用 css 分离插件 ExtractTextPlugin，采用独立样式文件载入，不采用 <span class="symbol">&lt;style&gt;</span> 方式内联至 html 文件中</span><br><span class="line">    extrac<span class="variable">t:</span> true,</span><br><span class="line">    // 是否构建样式地图，false 将提高构建速度</span><br><span class="line">    sourceMap: false,</span><br><span class="line">    // css预设器配置项</span><br><span class="line">    loaderOption<span class="variable">s:</span> &#123;</span><br><span class="line">      <span class="keyword">cs</span><span class="variable">s:</span> &#123;</span><br><span class="line">        // <span class="keyword">options</span> here will <span class="keyword">be</span> passed <span class="keyword">to</span> css-loader</span><br><span class="line">      &#125;,</span><br><span class="line">      postcs<span class="variable">s:</span> &#123;</span><br><span class="line">        // <span class="keyword">options</span> here will <span class="keyword">be</span> passed <span class="keyword">to</span> postcss-loader</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    por<span class="variable">t:</span> <span class="number">8010</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://juejin.im/post/6844903911808040967#heading-20" target="_blank" rel="noopener">Vue CLI 3.x 与 2.x的区别</a></li><li><a href="https://juejin.im/post/6844904176187605000" target="_blank" rel="noopener">Vue 3教程（适用于Vue 2用户）</a></li><li><a href="https://juejin.im/post/6869521076771094536" target="_blank" rel="noopener">使用Vue3.0，我收获了哪些知识点</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue CLI 3.x 与 2.x的区别&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.caoxl.com/categories/Vue/"/>
    
    
      <category term="前端" scheme="http://blog.caoxl.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://blog.caoxl.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>SQL诊断与优化</title>
    <link href="http://blog.caoxl.com/2020/07/28/MySQL-Explain-Notes/"/>
    <id>http://blog.caoxl.com/2020/07/28/MySQL-Explain-Notes/</id>
    <published>2020-07-28T02:16:35.000Z</published>
    <updated>2020-12-23T03:02:57.655Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Explain-诊断"><a href="#Explain-诊断" class="headerlink" title="Explain 诊断"></a>Explain 诊断</h1><a id="more"></a><p>Explain各参数的含义如下：</p><table><thead><tr><th style="text-align:left">列名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>id</code></td><td style="text-align:left">执行编号，标识select所属的行。如果在语句中没有子查询或关联查询，只有唯一的select，每行都将显示1.否则，内层的select语句一般会顺序编号，对应于其在原始语句中的位置</td></tr><tr><td style="text-align:left"><code>select_type</code></td><td style="text-align:left">显示本行是简单或复杂select，如果查询有任何复杂的子查询，则最外层标记为PRIMARY（DERIVED、UNION、UNION RESUIT</td></tr><tr><td style="text-align:left"><code>table</code></td><td style="text-align:left">访问引用哪个表（引用某个查询，如“derived3”</td></tr><tr><td style="text-align:left"><code>type</code></td><td style="text-align:left">数据访问/读取操作类型（All、index、range、ref、eq_ref、const/system、NULL）</td></tr><tr><td style="text-align:left"><code>possible_key</code></td><td style="text-align:left">揭示哪一些索引可能有利于高效的查找</td></tr><tr><td style="text-align:left"><code>key</code></td><td style="text-align:left">显示mysql实际决定采用哪个索引来优化查询</td></tr><tr><td style="text-align:left"><code>key_len</code></td><td style="text-align:left">显示mysql在索引里使用的字节数</td></tr><tr><td style="text-align:left"><code>ref</code></td><td style="text-align:left">显示了之前的表在key列记录的索引中查找值所用的列或常量</td></tr><tr><td style="text-align:left"><code>rows</code></td><td style="text-align:left">为了找到所需要的行而需要读取的行数，估算值</td></tr><tr><td style="text-align:left"><code>Extra</code></td><td style="text-align:left">额外信息，如using index、filesort等</td></tr></tbody></table><h2 id="select-type-常见类型及其含义"><a href="#select-type-常见类型及其含义" class="headerlink" title="select_type 常见类型及其含义"></a>select_type 常见类型及其含义</h2><ul><li><strong>SIMPLE</strong>: 不包含子查询或者 UNION 操作的查询</li><li><strong>PRIMARY</strong>: 查询中如果包含任何子查询，那么最外层的查询则被标记为 PRIMARY</li><li><strong>SUBQUERY</strong>: 子查询中第一个 SELECT</li><li><strong>DEPENDENT SUBQUERY</strong>: 子查询中的第一个 SELECT，取决于外部查询</li><li><strong>UNION</strong>: UNION 操作的第二个或者之后的查询</li><li><strong>DEPENDENT UNION</strong>: UNION 操作的第二个或者之后的查询,取决于外部查询</li><li><strong>UNION RESULT</strong>: UNION 产生的结果集</li><li><strong>DERIVED</strong>: 出现在 FROM 字句中的子查询</li></ul><h2 id="type常见类型及其含义"><a href="#type常见类型及其含义" class="headerlink" title="type常见类型及其含义"></a>type常见类型及其含义</h2><ul><li><strong>system</strong>: 这是 const 类型的一个特例，只会出现在待查询的表只有一行数据的情况下</li><li><strong>consts</strong>: 常出现在主键或唯一索引与常量值进行比较的场景下，此时查询性能是最优的</li><li><strong>eq_ref</strong>: 当连接使用的是完整的索引并且是 PRIMARY KEY 或 UNIQUE NOT NULL INDEX 时使用它</li><li><strong>ref</strong>：当连接使用的是前缀索引或连接条件不是 PRIMARY KEY 或 UNIQUE INDEX 时则使用它</li><li><strong>ref_or_null</strong>: 类似于 ref 类型的查询，但是附加了对 NULL 值列的查询</li><li><strong>index_merge</strong>: 该联接类型表示使用了索引进行合并优化</li><li><strong>range</strong>: 使用索引进行范围扫描，常见于 between、&gt; 、&lt; 这样的查询条件</li><li><strong>index</strong>: 索引连接类型与 ALL 相同，只是扫描的是索引树，通常出现在索引是该查询的覆盖索引的情况</li><li><strong>ALL</strong>: 全表扫描，效率最差的查找方式</li></ul><p>阿里编码规范要求：<code>至少要达到 range 级别，要求是 ref 级别，如果可以是 consts 最好</code></p><h2 id="key列"><a href="#key列" class="headerlink" title="key列"></a>key列</h2><p>实际在查询中是否使用到索引的标志字段</p><h2 id="Extra列"><a href="#Extra列" class="headerlink" title="Extra列"></a>Extra列</h2><p>Extra 列主要用于显示额外的信息，常见信息及其含义如下:</p><ul><li><strong>Using where</strong>: MySQL 服务器会在存储引擎检索行后再进行过滤</li><li><strong>Using filesort</strong>: 通常出现在 GROUP BY 或 ORDER BY<br>语句中，且排序或分组没有基于索引，此时需要使用文件在内存中进行排序，因为使用索引排序的性能好于使用文件排序，所以出现这种情况可以考虑通过添加索引进行优化</li><li><strong>Using index</strong>: 使用了覆盖索引进行查询，此时不需要访问表，从索引中就可以获取到所需的全部数据</li><li><strong>Using index condition</strong>: 查找使用了索引，但是需要回表查询数据</li><li><strong>Using temporary</strong>: 表示需要使用临时表来处理查询，常出现在 GROUP BY 或 ORDER BY 语句中</li></ul><h1 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h1><h2 id="超大分页场景解决方案"><a href="#超大分页场景解决方案" class="headerlink" title="超大分页场景解决方案"></a>超大分页场景解决方案</h2><p>如表中数据需要进行深度分页，如何提高效率？在阿里出品的Java编程规范中写道：</p><blockquote><p>利用延迟关联或者子查询优化超多分页场景</p></blockquote><p>说明：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 反例（耗时129.570s）</span><br><span class="line">select * from task_result LIMIT 20000000, 10;</span><br><span class="line"></span><br><span class="line"># 正例（耗时5.114s）</span><br><span class="line">SELECT a.* FROM task_result a, (select id from task_result LIMIT 20000000, 10) b where a.id = b.id;</span><br></pre></td></tr></table></figure><blockquote><p>说明<br>task_result表为生产环境的一个表，总数据量为3400万，id为主键，偏移量达到2000万</p></blockquote><h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 反例</span></span><br><span class="line">INSERT into person(name,age) values('A',24)</span><br><span class="line">INSERT into person(name,age) values('B',24)</span><br><span class="line">INSERT into person(name,age) values('C',24)</span><br><span class="line"></span><br><span class="line"><span class="section"># 正例</span></span><br><span class="line">INSERT into person(name,age) values('A',24),('B',24),('C',24);</span><br></pre></td></tr></table></figure><blockquote><p>说明<br>比较常规，就不多做说明了</p></blockquote><h2 id="like语句的优化"><a href="#like语句的优化" class="headerlink" title="like语句的优化"></a>like语句的优化</h2><p>like语句一般业务要求都是 <code>&#39;%关键字%&#39;</code> 这种形式，但是依然要思考能否考虑使用右模糊的方式去替代产品的要求，其中阿里的编码规范提到:</p><blockquote><p>页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 反例（耗时78.843s）</span></span><br><span class="line">EXPLAIN select * from task_result where taskid LIKE '%tt600e6b601677b5cbfe516a013b8e46%' LIMIT 1;</span><br><span class="line"></span><br><span class="line"><span class="section"># 正例（耗时0.986s）</span></span><br><span class="line">select * from task_result where taskid LIKE 'tt600e6b601677b5cbfe516a013b8e46%' LIMIT 1</span><br><span class="line"></span><br><span class="line"><span class="section">##########################################################################</span></span><br><span class="line"><span class="section"># 对正例的Explain</span></span><br><span class="line">1SIMPLEtask<span class="emphasis">_resultrangeadapt_</span>idadapt_id9899100.00Using index condition</span><br><span class="line"></span><br><span class="line"><span class="section"># 对反例的Explain</span></span><br><span class="line">1SIMPLEtask_resultALL                    3362855411.11Using where</span><br></pre></td></tr></table></figure><blockquote><p>说明<br>task_result表为生产环境的一个表，总数据量为3400万，taskid是一个普通索引列，可见%%这种匹配方式完全无法使用索引，从而进行全表扫描导致效率极低，而正例通过索引查找数据只需要扫描99条数据即可</p></blockquote><h2 id="避免SQL中对where字段进行函数转换或表达式计算"><a href="#避免SQL中对where字段进行函数转换或表达式计算" class="headerlink" title="避免SQL中对where字段进行函数转换或表达式计算"></a>避免SQL中对where字段进行函数转换或表达式计算</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 反例</span><br><span class="line">select * from task_result where id + 1 = 15551;</span><br><span class="line"></span><br><span class="line"># 正例</span><br><span class="line">select * from task_result where id = 15550;</span><br><span class="line"></span><br><span class="line">##########################################################################</span><br><span class="line"># 对正例的Explain</span><br><span class="line">1SIMPLEtask_resultconstPRIMARYPRIMARY8const1100.00</span><br><span class="line"></span><br><span class="line"># 对反例的Explain</span><br><span class="line">1SIMPLEtask_resultALL                33631512  100.00Using where</span><br></pre></td></tr></table></figure><blockquote><p> 说明<br>其实在知道了有SQL优化器之后，我个人感觉这种普通的表达式转换应该可以提前进行处理再进行查询，这样一来就可以用到索引了，但是问题又来了，如果mysql优化器可以提前计算出结果，那么写sql语句的人也一定可以提前计算出结果，所以矛盾点在这个地方，导致5.7版本以前的此种情况都无法使用索引吧，未来可能会对其进行优化</p></blockquote><h2 id="使用-ISNULL-来判断是否为-NULL-值"><a href="#使用-ISNULL-来判断是否为-NULL-值" class="headerlink" title="使用 ISNULL()来判断是否为 NULL 值"></a>使用 ISNULL()来判断是否为 NULL 值</h2><p>说明：NULL 与任何值的直接比较都为 NULL</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1） NULL &lt;&gt; NULL 的返回结果是 NULL，而不是 false。 </span></span><br><span class="line"><span class="section"># 2） NULL = NULL 的返回结果是 NULL，而不是 true。 </span></span><br><span class="line"><span class="section"># 3） NULL &lt;&gt; 1 的返回结果是 NULL，而不是 true。</span></span><br></pre></td></tr></table></figure><h2 id="明明有索引为什么还走全表扫描"><a href="#明明有索引为什么还走全表扫描" class="headerlink" title="明明有索引为什么还走全表扫描"></a>明明有索引为什么还走全表扫描</h2><blockquote><p>MYSQL查询优化器针对查询的数据行占总数据量过多时会转化成全表查询</p></blockquote><h2 id="count-还是-count-id"><a href="#count-还是-count-id" class="headerlink" title="count(*) 还是 count(id)"></a>count(*) 还是 count(id)</h2><blockquote><p>【强制】不要使用 count(列名) 或 count(常量) 来替代 count(*)</p></blockquote><p>count(*) 是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。</p><p>说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行</p><h2 id="字段类型不同导致索引失效"><a href="#字段类型不同导致索引失效" class="headerlink" title="字段类型不同导致索引失效"></a>字段类型不同导致索引失效</h2><blockquote><p>【推荐】防止因字段类型不同造成的隐式转换，导致索引失效</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 正例</span></span><br><span class="line">EXPLAIN SELECT * FROM <span class="code">`user_coll`</span> where pid = '1';</span><br><span class="line">type：ref</span><br><span class="line">ref：const</span><br><span class="line">rows:1</span><br><span class="line">Extra:Using index condition</span><br><span class="line"></span><br><span class="line"><span class="section"># 反例</span></span><br><span class="line">EXPLAIN SELECT * FROM <span class="code">`user_coll`</span> where pid = 1;</span><br><span class="line">type：index</span><br><span class="line">ref：NULL</span><br><span class="line">rows:3(总记录数)</span><br><span class="line">Extra:Using where; Using index</span><br></pre></td></tr></table></figure><blockquote><p>说明<br>pid字段有相应索引，且格式为varchar</p></blockquote><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li>自建数据表进行测试</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `student` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;主键&apos;,</span><br><span class="line">  `name` varchar(255) NOT NULL,</span><br><span class="line">  `class` varchar(255) DEFAULT NULL,</span><br><span class="line">  `page` bigint(20) DEFAULT NULL,</span><br><span class="line">  `status` tinyint(3) unsigned NOT NULL COMMENT &apos;状态：0 正常，1 冻结，2 删除&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8mb4</span><br></pre></td></tr></table></figure><ul><li>插入数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER ;;</span><br><span class="line">    CREATE PROCEDURE insertData()</span><br><span class="line">    BEGIN</span><br><span class="line">        declare i int;</span><br><span class="line">        set i = 1 ;</span><br><span class="line">        WHILE (i &lt; 1000000) DO</span><br><span class="line">            INSERT INTO student(`name`,class,`page`,`status`)</span><br><span class="line">                VALUES(CONCAT(&apos;class_&apos;, i),</span><br><span class="line">                    CONCAT(&apos;class_&apos;, i),</span><br><span class="line">                i, (SELECT FLOOR(RAND() * 2)));</span><br><span class="line">            set i = i + 1;</span><br><span class="line">        END WHILE;</span><br><span class="line">        commit;</span><br><span class="line">END;;</span><br><span class="line">CALL insertData();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Explain-诊断&quot;&gt;&lt;a href=&quot;#Explain-诊断&quot; class=&quot;headerlink&quot; title=&quot;Explain 诊断&quot;&gt;&lt;/a&gt;Explain 诊断&lt;/h1&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="MySQL" scheme="http://blog.caoxl.com/tags/MySQL/"/>
    
      <category term="Explain" scheme="http://blog.caoxl.com/tags/Explain/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下编译安装PHP8</title>
    <link href="http://blog.caoxl.com/2020/06/28/Install-PHP8-In-CentOS7/"/>
    <id>http://blog.caoxl.com/2020/06/28/Install-PHP8-In-CentOS7/</id>
    <published>2020-06-28T08:31:14.000Z</published>
    <updated>2020-06-28T09:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>CentOS7下编译安装PHP8</p></blockquote><a id="more"></a><h1 id="下载-amp-解压缩"><a href="#下载-amp-解压缩" class="headerlink" title="下载&amp;解压缩"></a>下载&amp;解压缩</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://downloads.php.net/~pollita/php-8.0.0alpha1.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf php-8.0.0alpha1.tar.gz</span><br><span class="line"></span><br><span class="line">cd php-8.0.0alpha1/</span><br></pre></td></tr></table></figure><h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/php/php8 \</span><br><span class="line">--with-config-file-path=/usr/local/php/php8 \</span><br><span class="line">--enable-mbstring  \</span><br><span class="line">--enable-ftp  \</span><br><span class="line">--enable-gd   \</span><br><span class="line">--enable-gd-jis-conv \</span><br><span class="line">--enable-mysqlnd \</span><br><span class="line">--enable-pdo   \</span><br><span class="line">--enable-sockets   \</span><br><span class="line">--enable-fpm   \</span><br><span class="line">--enable-xml  \</span><br><span class="line">--enable-soap  \</span><br><span class="line">--enable-pcntl   \</span><br><span class="line">--enable-cli   \</span><br><span class="line">--with-openssl  \</span><br><span class="line">--with-mysqli=mysqlnd   \</span><br><span class="line">--with-pdo-mysql=mysqlnd   \</span><br><span class="line">--with-pear   \</span><br><span class="line">--with-zlib  \</span><br><span class="line">--with-iconv  \</span><br><span class="line">--with-curl  \</span><br><span class="line">;</span><br></pre></td></tr></table></figure><ul><li>输出:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| License:                                                           |</span><br><span class="line">| This software is subject to the PHP License, available in this     |</span><br><span class="line">| distribution in the file LICENSE. By continuing this installation  |</span><br><span class="line">| process, you are bound by the terms of this license agreement.     |</span><br><span class="line">| If you do not agree with the terms of this license, you must abort |</span><br><span class="line">| the installation process at this point.                            |</span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">Thank you for using PHP.</span><br></pre></td></tr></table></figure><blockquote><p>编译错误, 谷歌一下.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>复制配置文件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp php.ini-production /usr/local/php/php8/php.ini</span><br></pre></td></tr></table></figure><ul><li>打开错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vim /usr/local/php/php8/php.ini</span><br><span class="line">display_errors = On</span><br></pre></td></tr></table></figure><ul><li>复制fpm的启动脚本：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ./sapi/fpm/init.d.php-fpm /usr/local/php/php8/bin/php-fpm-8</span><br></pre></td></tr></table></figure><ul><li>增加执行权限</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><ul><li>设置软连接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># php-fpm</span><br><span class="line">ln -s /usr/local/php/php8/bin/php-fpm-8 /etc/init.d/php-fpm-8</span><br><span class="line"># php.ini</span><br><span class="line">ln -s /usr/local/php/php8/etc/php.ini /etc/php/php8.ini</span><br></pre></td></tr></table></figure><ul><li>修改php-fpm配置文件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/php/php8/etc</span><br><span class="line">cp php-fpm.conf/default php-fpm.conf</span><br><span class="line">vim php-fpm.conf</span><br><span class="line"># 去掉 pid = run/php-fpm.pid 前面的分号</span><br><span class="line"># 修改启动用户：</span><br><span class="line">user=www-www</span><br><span class="line">group=www-www</span><br></pre></td></tr></table></figure><h1 id="编译错误"><a href="#编译错误" class="headerlink" title="编译错误"></a>编译错误</h1><h2 id="No-package-39-oniguruma-39-found"><a href="#No-package-39-oniguruma-39-found" class="headerlink" title="No package &#39;oniguruma&#39; found"></a><code>No package &#39;oniguruma&#39; found</code></h2><ul><li><ol><li>yum安装rpm包</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/o/oniguruma-5.9.5-3.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">yum install https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/o/oniguruma-devel-5.9.5-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>备用下载</p><ul><li><code>oniguruma</code>：<code>http://down.24kplus.com/linux/oniguruma/oniguruma-6.7.0-1.el7.x86_64.rpm</code></li><li><code>oniguruma-devel</code>：<code>http://down.24kplus.com/linux/oniguruma/oniguruma-devel-6.7.0-1.el7.x86_64.rpm</code></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.24kplus.com/linux/1614.html" target="_blank" rel="noopener">CentOS 7/8 安装 oniguruma 和 oniguruma-devel</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CentOS7下编译安装PHP8&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://blog.caoxl.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://blog.caoxl.com/tags/PHP/"/>
    
      <category term="PHP8" scheme="http://blog.caoxl.com/tags/PHP8/"/>
    
  </entry>
  
  <entry>
    <title>深入MySQL锁</title>
    <link href="http://blog.caoxl.com/2020/06/23/Deep-Going-MySQL-Lock/"/>
    <id>http://blog.caoxl.com/2020/06/23/Deep-Going-MySQL-Lock/</id>
    <published>2020-06-23T03:16:11.000Z</published>
    <updated>2020-06-23T07:26:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>高并发场景下锁机制是怎么保证数据的一致性的和事务隔离性的?</p></blockquote><a id="more"></a><h1 id="锁种类"><a href="#锁种类" class="headerlink" title="锁种类"></a>锁种类</h1><blockquote><ul><li>按照<strong>锁的粒度</strong>划分：<code>表锁</code>、<code>页锁</code>、<code>行锁</code>；</li><li>按照<strong>使用的方式</strong>划分：<code>共享锁</code>和<code>排它锁</code>；</li><li>按照<strong>思想</strong>划分：<code>乐观锁</code>和<code>悲观锁</code>。</li></ul></blockquote><h2 id="按锁的粒度划分"><a href="#按锁的粒度划分" class="headerlink" title="按锁的粒度划分"></a>按锁的粒度划分</h2><ul><li><code>「表锁」</code>是粒度最大的锁，开销小，加锁快，不会出现死锁，但是由于粒度太大，因此造成锁的冲突几率大，并发性能低。</li></ul><p>Mysql中<code>「MyISAM储存引擎就支持表锁」</code>，MyISAM的表锁模式有两种：<code>「表共享读锁」</code>和<code>「表独占写锁」</code>。</p><p>当一个线程获取到MyISAM表的读锁的时候，会阻塞其他用户对该表的写操作，但是不会阻塞其它用户对该用户的读操作。</p><p>相反的，当一个线程获取到MyISAM表的写锁的时候，就会阻塞其它用户的读写操作对其它的线程具有排它性。</p><ul><li><p><code>「页锁」</code>的粒度是介于行锁和表锁之间的一种锁，因为页锁是在BDB中支持的一种锁机制，也很少被人提及和使用，所以这里制作概述，不做详解。</p></li><li><p><code>「行锁」</code>是粒度最小的锁机制，行锁的加锁开销性能大，加锁慢，并且会出现死锁，但是行锁的锁冲突的几率低，并发性能高。</p></li></ul><p>行锁是InnoDB默认的支持的锁机制，MyISAM不支持行锁，这个也是InnoDB和MyISAM的区别之一。</p><h2 id="按锁的使用方式划分"><a href="#按锁的使用方式划分" class="headerlink" title="按锁的使用方式划分"></a>按锁的使用方式划分</h2><blockquote><p>行锁在使用的方式上可以划分为：「<code>共享读锁（S锁）</code>「和」<code>排它写锁（X锁）</code>」。</p></blockquote><p>当一个事务对Mysql中的一条数据行加上了<code>S锁</code>，当前事务不能修改该行数据只能执行度操作，其他事务只能对该行数据加S锁不能加X锁。</p><p>若是一个事务对一行数据加了<code>X锁</code>，该事物能够对该行数据执行读和写操作，其它事务不能对该行数据加任何的锁，既不能读也不能写。</p><h2 id="按锁的思想划分"><a href="#按锁的思想划分" class="headerlink" title="按锁的思想划分"></a>按锁的思想划分</h2><p>「悲观锁和乐观锁是在很多框架都存在的一种思想，不要狭义地认为它们是某一种框架的锁机制」。</p><p>数据库管理系统中为了控制并发，保证在多个事务执行时的数据一致性以及事务的隔离性，使用悲观锁和乐观锁来解决并发场景下的问题。</p><p>Mysql中「<strong>悲观锁的实现是基于Mysql自身的锁机制实现，而乐观锁需要程序员自己去实现的锁机制</strong>」，最常见的乐观锁实现就锁机制是「<strong>使用版本号实现</strong>」。</p><h1 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h1><p>MyISAM中默认支持的表级锁有两种：<strong>「共享读锁」</strong> 和 <strong>「独占写锁」</strong>。表级锁在MyISAM和InnoDB的存储引擎中都支持，但是InnoDB默认支持的是行锁。</p><p>Mysql中平时读写操作都是隐式的进行加锁和解锁操作，Mysql已经自动帮我们实现加锁和解锁操作了，若是想要测试锁机制，我们就要显示的自己控制锁机制。</p><p>Mysql中可以通过以下sql来显示的在事务中显式的进行加锁和解锁操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 显式的添加表级读锁</span><br><span class="line">LOCK TABLE 表名 READ</span><br><span class="line"></span><br><span class="line">// 显示的添加表级写锁</span><br><span class="line">LOCK TABLE 表名 WRITE</span><br><span class="line"></span><br><span class="line">// 显式的解锁（当一个事务commit的时候也会自动解锁）</span><br><span class="line">unlock tables;</span><br></pre></td></tr></table></figure><p>下面我们就来测试一下MyISAM中的表级锁机制，首先创建一个测试表<code>employee</code> ，这里要指定存储引擎为MyISAM，并插入两条测试数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 创建一个测试表</span><br><span class="line">CREATE TABLE IF NOT EXISTS employee (</span><br><span class="line">    id INT PRIMARY KEY auto_increment,</span><br><span class="line">    name VARCHAR(40),</span><br><span class="line">    money INT</span><br><span class="line">)ENGINE MyISAM;</span><br><span class="line"></span><br><span class="line">-- 插入两条测试数据</span><br><span class="line">INSERT INTO employee(name, money) VALUES(&apos;caoxl&apos;, 8888);</span><br><span class="line">INSERT INTO employee(name, money) VALUES(&apos;lc&apos;, 9999);</span><br></pre></td></tr></table></figure><p>查看一下，表结果如下图所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from employee;</span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | name  | money |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  1 | caoxl |  8888 |</span><br><span class="line">|  2 | lc    |  9999 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h2 id="MyISAM表级写锁"><a href="#MyISAM表级写锁" class="headerlink" title="MyISAM表级写锁"></a>MyISAM表级写锁</h2><ul><li><ol><li>与此同时再开启一个session窗口，然后在第一个窗口执行下面的sql，在session1中给表添加写锁：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; LOCK TABLE employee WRITE;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>可以在session2中进行查询或者插入、更新该表数据，可以发现都会处于等待状态，也就是session1锁住了整个表，导致session2只能等待：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from employee;</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>在session1中进行查询、插入、更新数据，都可以执行成功：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 插入</span><br><span class="line">MariaDB [test]&gt; INSERT INTO employee(name, money) VALUES(&apos;caolx&apos;, 1111);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line">-- 更新</span><br><span class="line">MariaDB [test]&gt; UPDATE employee set name=&apos;caoxllc&apos; where id=1; </span><br><span class="line">Query OK, 1 row affected (0.14 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line">-- 查询</span><br><span class="line">MariaDB [test]&gt; SELECT * FROM employee;</span><br><span class="line">+----+---------+-------+</span><br><span class="line">| id | name    | money |</span><br><span class="line">+----+---------+-------+</span><br><span class="line">|  1 | caoxllc |  8888 |</span><br><span class="line">|  2 | lc      |  9999 |</span><br><span class="line">|  3 | caolx   |  1111 |</span><br><span class="line">+----+---------+-------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p><strong>「总结：」</strong> 从上面的测试结果显示 <strong>「当一个线程获取到表级写锁后，只能由该线程对表进行读写操作，别的线程必须等待该线程释放锁以后才能操作」</strong>。</p><h2 id="MyISAM表级共享读锁"><a href="#MyISAM表级共享读锁" class="headerlink" title="MyISAM表级共享读锁"></a>MyISAM表级共享读锁</h2><ul><li><ol><li>接下来测试一下表级共享读锁，同样还是利用上面的测试数据，第一步还是在session1给表加读锁。</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; LOCK TABLE employee read;</span><br><span class="line">Query OK, 0 rows affected (0.11 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>然后在session1中尝试进行插入、更新数据，发现都会报错，只能查询数据。</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 查询</span><br><span class="line">MariaDB [test]&gt; select * from employee;</span><br><span class="line">+----+---------+-------+</span><br><span class="line">| id | name    | money |</span><br><span class="line">+----+---------+-------+</span><br><span class="line">|  1 | caoxllc |  8888 |</span><br><span class="line">|  2 | lc      |  9999 |</span><br><span class="line">|  3 | caolx   |  1111 |</span><br><span class="line">+----+---------+-------+</span><br><span class="line">3 rows in set (7 min 12.28 sec)</span><br><span class="line">-- 插入</span><br><span class="line">MariaDB [test]&gt; INSERT INTO employee(name, money) VALUES(&apos;lxlc&apos;, 2222);</span><br><span class="line">ERROR 1099 (HY000): Table &apos;employee&apos; was locked with a READ lock and can&apos;t be updated</span><br><span class="line">-- 更新</span><br><span class="line">MariaDB [test]&gt; UPDATE employee set name=&apos;lxlc&apos; where id=1;</span><br><span class="line">ERROR 1099 (HY000): Table &apos;employee&apos; was locked with a READ lock and can&apos;t be updated</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>最后在session2中尝试进行插入、更新数据，程序都会进入等待状态，只能查询数据，直到session1解锁表session2才能插入、更新数据。</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; INSERT INTO employee(name, money) VALUES(&apos;lxlc&apos;, 2222);</span><br></pre></td></tr></table></figure><p><strong>「总结：」</strong> 从上面的测试结果显示 <strong>「当一个线程获取到表级读锁后，该线程只能读取数据不能修改数据，其它线程也只能加读锁，不能加写锁」</strong>。</p><h2 id="MyISAM表级锁竞争情况"><a href="#MyISAM表级锁竞争情况" class="headerlink" title="MyISAM表级锁竞争情况"></a>MyISAM表级锁竞争情况</h2><p>MyISAM存储引擎中，可以通过查询变量来查看并发场景锁的争夺情况，具体执行下面的sql语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; show status like &apos;table%&apos;;</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Table_locks_immediate | 37    |</span><br><span class="line">| Table_locks_waited    | 2     |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">2 rows in set (0.27 sec)</span><br></pre></td></tr></table></figure><p>主要是查看<code>table_locks_waited</code>和<code>table_locks_immediate</code>的值的大小分析锁的竞争情况。</p><ul><li><code>Table_locks_immediate</code>: 表示能够立即获得表级锁的锁请求次数；</li><li><code>Table_locks_waited</code>: 表示不能立即获取表级锁而需要等待的锁请求次数分析，<strong>「值越大竞争就越严重」</strong>。</li></ul><h2 id="并发插入"><a href="#并发插入" class="headerlink" title="并发插入"></a>并发插入</h2><p>通过上面的操作演示，详细的说明了表级共享锁和表级写锁的特点。但是在平时的执行sql的时候，这些 <strong>「解锁和释放锁都是Mysql底层隐式的执行的」</strong>。</p><p>上面的演示只是为了证明显式的执行事务的过程共享锁和表级写锁的加锁和解锁的特点，实际并不会这么做的。</p><p>在我们平时执行select语句的时候就会隐式的加读锁，执行增、删、改的操作时就会隐式的执行加写锁。<br>MyISAM存储引擎中，虽然读写操作是串行化的，但是它也支持并发插入，这个需要设置内部变量<code>concurrent_insert</code>的值。</p><p>它的值有三个值<code>0</code>、<code>1</code>、<code>2</code>。可以通过以下的sql查看<code>concurrent_insert</code>的默认值为 <strong>「AUTO(或者1)」</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; show variables like &quot;%concurrent_insert&quot;;</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| concurrent_insert | AUTO  |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">1 row in set (0.25 sec)</span><br></pre></td></tr></table></figure><p><code>concurrent_insert</code>的值为:</p><ul><li><code>NEVER (or 0)</code>表示不支持比并发插入；</li><li><code>AUTO(或者1）</code>表示在MyISAM表中没有被删除的行，运行另一个线程从表尾插入数据；</li><li><code>ALWAYS (or 2)</code>表示不管是否有删除的行，都允许在表尾插入数据。</li></ul><h2 id="锁调度"><a href="#锁调度" class="headerlink" title="锁调度"></a>锁调度</h2><p>MyISAM存储引擎中，<strong>「假如同时一个读请求，一个写请求过来的话，它会优先处理写请求」</strong>，因为MyISAM存储引擎中认为<strong>写请求比读请求重要</strong>。</p><p>这样就会导致，<strong>「假如大量的读写请求过来，就会导致读请求长时间的等待，或者”线程饿死”，因此MyISAM不适合运用于大量读写操作的场景」</strong>，这样会导致长时间读取不到用户数据，用户体验感极差。</p><p>当然可以通过设置<code>low-priority-updates</code>参数，设置请求链接的优先级，使得Mysql优先处理读请求。</p><h1 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h1><blockquote><p>InnoDB和MyISAM不同的是，<strong>InnoDB支持「行锁」和「事务」</strong></p></blockquote><p>InnoDB中除了有<code>「表锁」</code>和<code>「行级锁」</code>的概念，还有<code>Gap Lock（间隙锁）</code>、<code>Next-key Lock锁</code>，<strong>「间隙锁主要用于范围查询的时候，锁住查询的范围，并且间隙锁也是解决幻读的方案」</strong>。</p><p>InnoDB中的行级锁是 <strong>「对索引加的锁，在不通过索引查询数据的时候，InnoDB就会使用表锁」</strong>。</p><p><strong>「但是通过索引查询的时候是否使用索引，还要看Mysql的执行计划」</strong>，Mysql的优化器会判断是一条sql执行的最佳策略。</p><p>若是Mysql觉得执行索引查询还不如全表扫描速度快，那么Mysql就会使用全表扫描来查询，这是即使sql语句中使用了索引，最后还是执行为全表扫描，加的是表锁。</p><h2 id="InnoDB行锁和表锁"><a href="#InnoDB行锁和表锁" class="headerlink" title="InnoDB行锁和表锁"></a>InnoDB行锁和表锁</h2><p>InnoDB的行锁也是分为行级 <strong>「共享读锁（S锁）「和」排它写锁（X锁）」</strong>，原理特点和MyISAM的表级锁两种模式是一样的。</p><p>若想显式的给表加行级读锁和写锁，可以执行下面的sql语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 给查询sql显示添加读锁</span><br><span class="line">select ... lock in share mode;</span><br><span class="line"></span><br><span class="line">// 给查询sql显示添加写锁</span><br><span class="line">select ... for update；</span><br></pre></td></tr></table></figure><ul><li><ol><li>下面我们直接进入锁机制的测试阶段，还是创建一个测试表，并插入两条数据：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 先把原来的MyISAM表给删除了</span><br><span class="line">DROP TABLE IF EXISTS employee;</span><br><span class="line">CREATE TABLE IF NOT EXISTS employee (</span><br><span class="line">    id INT PRIMARY KEY auto_increment,</span><br><span class="line">    name VARCHAR(40),</span><br><span class="line">    money INT</span><br><span class="line">)ENGINE INNODB;</span><br><span class="line"></span><br><span class="line">// 插入测试数据</span><br><span class="line">INSERT INTO employee(name, money) VALUES(&apos;caoxl&apos;, 1000);</span><br><span class="line">INSERT INTO employee(name, money) VALUES(&apos;lc&apos;, 2000);</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>创建的表中可以看出对表中的字段只有id添加了主键索引，接着就是在session1窗口执行<code>begin</code>开启事务，并执行下面的sql语句：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select * from employee where name=&apos;caoxl&apos; for update;</span><br><span class="line">MariaDB [test]&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">-- 使用非索引字段查询，并显式的添加写锁</span><br><span class="line">MariaDB [test]&gt; select * from employee where name=&apos;caolx&apos; for update;</span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | name  | money |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  1 | caolx |  1000 |</span><br><span class="line">|  2 | caolx |  2000 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>然后在session2中执行update语句，上面查询的式id=1的数据行，下面update的是id=1的数据行，会发现程序也会进入等待状态：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; update employee set name=&apos;caoxl&apos; where id = 1;</span><br></pre></td></tr></table></figure><p>可见若是 <strong>「使用非索引查询，直接就是使用的表级锁」</strong>，锁住了整个表。</p><ul><li><ol start="4"><li>若是session1使用的是id来查询，如下所示：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from employee where id=&apos;1&apos; for update;  </span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | name  | money |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  1 | caolx |  1000 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">1 row in set (0.14 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li>那么session2是可以成功update其它数据行的，但是这里我建议使用数据量大的表进行测试，因为前面我说过了 <strong>「是否执行索引还得看Mysql的执行计划，对于一些小表的操作，可能就直接使用全表扫描」</strong>。</li></ol></li></ul><ul><li><ol start="6"><li>还有一种情况就是：假如我们给name字段也加上了普通索引，那么通过普通索引来查询数据，并且查询到多行数据，拿它是锁这多行数据还是锁整个表呢？</li></ol></li></ul><p>下面我们来测试一下，首先给「name字段添加普通索引」，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; alter table employee add index index_name(name);</span><br><span class="line">Query OK, 0 rows affected (0.22 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><ul><li><ol start="7"><li>并插入一条新的数据name值与id=2的值相同，并显式的加锁，如下所示：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; INSERT INTO employee(name, money) VALUES(&apos;caoxl&apos;, 3000);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from employee;                        </span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | name  | money |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  1 | caolx |  1000 |</span><br><span class="line">|  2 | caoxl |  2000 |</span><br><span class="line">|  3 | caoxl |  3000 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from employee where name=&apos;caoxl&apos; for update;</span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | name  | money |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  2 | caoxl |  2000 |</span><br><span class="line">|  3 | caoxl |  3000 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">2 rows in set (0.03 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="8"><li>当update其它数据行name值不是<code>caoxl</code>的也会进入等待状态，并且通过explain来查看是否name=’caoxl’有执行索引，可以看到sql语句是有执行索引条件的。</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; MariaDB [test]&gt; explain update employee set name=&apos;lc&apos; where id = 1;</span><br><span class="line">+------+-------------+----------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">| id   | select_type | table    | type  | possible_keys | key     | key_len | ref  | rows | Extra       |</span><br><span class="line">+------+-------------+----------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">|    1 | SIMPLE      | employee | range | PRIMARY       | PRIMARY | 4       | NULL |    1 | Using where |</span><br><span class="line">+------+-------------+----------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>执行非索引条件查询执行的是表锁。</li><li>执行索引查询是否是加行锁，还得看Mysql的执行计划，可以通过explain关键字来查看。</li><li>用普通键索引的查询，遇到索引值相同的，也会对其他的操作数据行的产生影响。</li></ul><h2 id="InnoDB间隙锁"><a href="#InnoDB间隙锁" class="headerlink" title="InnoDB间隙锁"></a>InnoDB间隙锁</h2><p>当我们使用范围条件查询而不是等值条件查询的时候，InnoDB就会给符合条件的范围索引加锁，在条件范围内并不存的记录就叫做”间隙（GAP）”</p><p>大家大概都知道在事务的四大隔离级别中，不可重复读会产生幻读的现象，只能通过提高隔离级别到串行化来解决幻读现象。</p><p>但是Mysql中的不可重复是已经解决了幻读问题，它通过引入间隙锁的实现来解决幻读，通过给符合条件的间隙加锁，防止再次查询的时候出现新数据产生幻读的问题。</p><p>例如我们执行下面的sql语句，就会对id大于100的记录加锁，在id&gt;100的记录中肯定是有不存在的间隙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from  employee where id &gt; 100 for update;</span><br></pre></td></tr></table></figure><ul><li><ol><li>接着来测试间隙锁，新增一个字段num，并将num添加为普通索引、修改之前的数据使得num之间的值存在间隙，操作如下sql所示：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alter table employee add num int not null default 0;</span><br><span class="line">update employee set num = 1 where id = 1;</span><br><span class="line">update employee set num = 1 where id = 2;</span><br><span class="line">update employee set num = 3 where id = 3;</span><br><span class="line">insert into employee values(4,&apos;kris&apos;,4000,5);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from employee;                        </span><br><span class="line">+----+-------+-------+-----+</span><br><span class="line">| id | name  | money | num |</span><br><span class="line">+----+-------+-------+-----+</span><br><span class="line">|  1 | caolx |  1000 |   1 |</span><br><span class="line">|  2 | caoxl |  2000 |   1 |</span><br><span class="line">|  3 | caoxl |  3000 |   3 |</span><br><span class="line">|  4 | kris  |  4000 |   5 |</span><br><span class="line">+----+-------+-------+-----+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>接着在session1的窗口开启事务，并执行下面操作：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from employee where num=3 for update;</span><br><span class="line">+----+-------+-------+-----+</span><br><span class="line">| id | name  | money | num |</span><br><span class="line">+----+-------+-------+-----+</span><br><span class="line">|  3 | caoxl |  3000 |   3 |</span><br><span class="line">+----+-------+-------+-----+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>同时打开窗口session2，并执行新增语句：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into employee values(5,&apos;ceshi&apos;,5000,2);  // 程序出现等待</span><br><span class="line">insert into employee values(5,&apos;ceshi&apos;,5000,4);  // 程序出现等待</span><br><span class="line">insert into employee values(5,&apos;ceshi&apos;,5000,6);  // 新增成功</span><br><span class="line">insert into employee values(6,&apos;ceshi&apos;,5000,0);  // 新增成功</span><br></pre></td></tr></table></figure><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>死锁在InnoDB中才会出现死锁，MyISAM是不会出现死锁，因为MyISAM支持的是表锁，一次性获取了所有得锁，其它的线程只能排队等候。</p><p>而InnoDB默认支持行锁，获取锁是分步的，并不是一次性获取所有得锁，因此在锁竞争的时候就会出现死锁的情况。</p><p>虽然InnoDB会出现死锁，但是并不影响InnoDB最受欢成为迎的存储引擎，MyISAM可以理解为串行化操作，读写有序，因此支持的并发性能低下。</p><h2 id="死锁的解决方案"><a href="#死锁的解决方案" class="headerlink" title="死锁的解决方案"></a>死锁的解决方案</h2><p>首先要解决死锁问题，在程序的设计上，当发现程序有高并发的访问某一个表时，尽量对该表的执行操作串行化，或者锁升级，一次性获取所有的锁资源。</p><p>然后也可以设置参数<code>innodb_lock_wait_timeout</code>，超时时间，并且将参数<code>innodb_deadlock_detect</code>打开，当发现死锁的时候，自动回滚其中的某一个事务。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面详细的介绍了<code>MyISAM</code>和<code>InnoDB</code>两种存储引擎的锁机制的实现，并进行了测试。</p><p><code>MyISAM</code>的表锁分为两种模式：<strong>「共享读锁」</strong> 和 <strong>「排它写锁」</strong>。获取的读锁的线程对该数据行只能读，不能修改，其它线程也只能对该数据行加读锁。</p><p>获取到写锁的线程对该数据行既能读也能写，对其他线程对该数据行的读写具有排它性。</p><p><strong>MyISAM中默认写优先于读操作</strong>，因此<code>MyISAM</code>一般不适合运用于大量读写操作的程序中。</p><p><code>InnoDB</code>的行锁虽然会出现死锁的可能，但是<code>InnoDB</code>的支持的并发性能比<code>MyISAM</code>好，行锁的粒度最小，一定的方法和措施可以解决死锁的发生，极大的发挥<code>InnoDB</code>的性能。</p><p><code>InnoDB</code>中引入了<strong>间隙锁</strong>的概念来决解出现幻读的问题，也引入事务的特性，通过事务的四种隔离级别，来降低锁冲突，提高并发性能。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;高并发场景下锁机制是怎么保证数据的一致性的和事务隔离性的?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="MySQL锁" scheme="http://blog.caoxl.com/tags/MySQL%E9%94%81/"/>
    
      <category term="共享锁" scheme="http://blog.caoxl.com/tags/%E5%85%B1%E4%BA%AB%E9%94%81/"/>
    
      <category term="排他锁" scheme="http://blog.caoxl.com/tags/%E6%8E%92%E4%BB%96%E9%94%81/"/>
    
      <category term="行锁" scheme="http://blog.caoxl.com/tags/%E8%A1%8C%E9%94%81/"/>
    
      <category term="表锁" scheme="http://blog.caoxl.com/tags/%E8%A1%A8%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 面试题 II</title>
    <link href="http://blog.caoxl.com/2020/06/18/MySQL-Interview-Questions-II/"/>
    <id>http://blog.caoxl.com/2020/06/18/MySQL-Interview-Questions-II/</id>
    <published>2020-06-18T06:19:56.000Z</published>
    <updated>2020-06-18T08:47:15.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="非关系型数据库和关系型数据库区别，优势比较"><a href="#非关系型数据库和关系型数据库区别，优势比较" class="headerlink" title="非关系型数据库和关系型数据库区别，优势比较"></a>非关系型数据库和关系型数据库区别，优势比较</h1><a id="more"></a><h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><p>非关系型数据库（感觉翻译不是很准确）称为 <code>NoSQL</code>，也就是 Not Only SQL，不仅仅是 SQL。非关系型数据库不需要写一些复杂的 SQL 语句，其内部存储方式是以 <code>key-value</code> 的形式存在可以把它想象成电话本的形式，每个人名（key）对应电话（value）。常见的非关系型数据库主要有 <strong>Hbase</strong>、<strong>Redis</strong>、<strong>MongoDB</strong> 等。非关系型数据库不需要经过 SQL 的重重解析，所以性能很高；非关系型数据库的可扩展性比较强，数据之间没有耦合性，遇见需要新加字段的需求，就直接增加一个 <code>key-value</code> 键值对即可。</p><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>关系型数据库以<code>表格</code>的形式存在，以<code>行</code>和<code>列</code>的形式存取数据，关系型数据库这一系列的行和列被称为表，无数张表组成了<code>数据库</code>，常见的关系型数据库有 <strong>Oracle</strong>、<strong>DB2</strong>、<strong>Microsoft SQL Server</strong>、<strong>MySQL</strong>等。关系型数据库能够支持复杂的 SQL 查询，能够体现出数据之间、表之间的关联关系；关系型数据库也支持事务，便于提交或者回滚。</p><h1 id="MySQL-事务四大特性"><a href="#MySQL-事务四大特性" class="headerlink" title="MySQL 事务四大特性"></a>MySQL 事务四大特性</h1><p>一说到 MySQL 事务，你肯定能想起来四大特性：<code>原子性</code>、<code>一致性</code>、<code>隔离性</code>、<code>持久性</code>，下面再对这事务的四大特性做一个描述</p><ul><li><code>原子性(Atomicity)</code>: 原子性指的就是 MySQL 中的包含事务的操作要么<code>全部成功</code>、要么全部<code>失败回滚</code>，因此事务的操作如果成功就必须要全部应用到数据库，如果操作失败则不能对数据库有任何影响。</li><li><code>一致性(Consistency)</code>：一致性指的是一个事务在执行前后其状态一致。比如 A 和 B 加起来的钱一共是 1000 元，那么不管 A 和 B 之间如何转账，转多少次，事务结束后两个用户的钱加起来还得是 1000，这就是事务的一致性。</li><li><code>持久性(Durability)</code>: 持久性指的是一旦事务提交，那么发生的改变就是永久性的，即使数据库遇到特殊情况比如故障的时候也不会产生干扰。</li><li><code>隔离性(Isolation)</code>：隔离性需要重点说一下，当多个事务同时进行时，就有可能出现<code>脏读(dirty read)</code>、<code>不可重复读(non-repeatable read)</code>、<code>幻读(phantom read)</code> 的情况，为了解决这些并发问题，提出了隔离性的概念。</li></ul><h1 id="MySQL-常见存储引擎的区别"><a href="#MySQL-常见存储引擎的区别" class="headerlink" title="MySQL 常见存储引擎的区别"></a>MySQL 常见存储引擎的区别</h1><p>MySQL 常见的存储引擎，可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW ENGINES;</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |</span><br><span class="line">| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |</span><br><span class="line">| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |</span><br><span class="line">| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |</span><br><span class="line">| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |</span><br><span class="line">| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |</span><br><span class="line">| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">9 rows in set (0.07 sec)</span><br></pre></td></tr></table></figure><p>可以看到，InnoDB 是 MySQL 默认支持的存储引擎，支持<strong>事务、行级锁定和外键</strong>。</p><h2 id="MyISAM-存储引擎的特点"><a href="#MyISAM-存储引擎的特点" class="headerlink" title="MyISAM 存储引擎的特点"></a>MyISAM 存储引擎的特点</h2><p>在 5.1 版本之前，MyISAM 是 MySQL 的默认存储引擎，MyISAM 并发性比较差，使用的场景比较少，主要特点是</p><ul><li>不支持<code>事务</code>操作，ACID 的特性也就不存在了，这一设计是为了性能和效率考虑的。</li><li>不支持<code>外键</code>操作，如果强行增加外键，MySQL 不会报错，只不过外键不起作用。</li><li>MyISAM 默认的锁粒度是<code>表级锁</code>，所以并发性能比较差，加锁比较快，锁冲突比较少，不太容易发生死锁的情况。</li><li>MyISAM 会在磁盘上存储三个文件，文件名和表名相同，扩展名分别是 <code>.frm(存储表定义)</code>、<code>.MYD(MYData,存储数据)</code>、<code>MYI(MyIndex,存储索引)</code>。这里需要特别注意的是 MyISAM 只缓存<code>索引文件</code>，并不缓存数据文件。</li><li>MyISAM 支持的索引类型有 <code>全局索引(Full-Text)</code>、<code>B-Tree 索引</code>、<code>R-Tree 索引</code><ul><li><code>Full-Text 索引</code>：它的出现是为了解决针对文本的模糊查询效率较低的问题。</li><li><code>B-Tree 索引</code>：所有的索引节点都按照平衡树的数据结构来存储，所有的索引数据节点都在叶节点</li><li><code>R-Tree索引</code>：它的存储方式和 B-Tree 索引有一些区别，主要设计用于存储空间和多维数据的字段做索引,目前的 MySQL 版本仅支持 geometry 类型的字段作索引，相对于 BTREE，RTREE 的优势在于范围查找。</li></ul></li><li>数据库所在主机如果宕机，MyISAM 的数据文件容易损坏，而且难以恢复。</li><li>增删改查性能方面：SELECT 性能较高，适用于查询较多的情况</li></ul><h2 id="InnoDB-存储引擎的特点"><a href="#InnoDB-存储引擎的特点" class="headerlink" title="InnoDB 存储引擎的特点"></a>InnoDB 存储引擎的特点</h2><p>自从 MySQL 5.1 之后，默认的存储引擎变成了 InnoDB 存储引擎，相对于 MyISAM，InnoDB 存储引擎有了较大的改变，它的主要特点是</p><ul><li>支持事务操作，具有事务 ACID 隔离特性，默认的隔离级别是<code>可重复读(repetable-read)</code>、通过MVCC（并发版本控制）来实现的。能够解决<code>脏读</code>和<code>不可重复读</code>的问题。</li><li>InnoDB 支持外键操作。</li><li>InnoDB 默认的锁粒度<code>行级锁</code>，并发性能比较好，会发生死锁的情况。</li><li>和 MyISAM 一样的是，InnoDB 存储引擎也有 <code>.frm</code>文件存储表结构 定义，但是不同的是，InnoDB 的表数据与索引数据是存储在一起的，都位于 B+ 数的叶子节点上，而 MyISAM 的表数据和索引数据是分开的。</li><li>InnoDB 有安全的日志文件，这个日志文件用于恢复因数据库崩溃或其他情况导致的数据丢失问题，保证数据的一致性。</li><li>InnoDB 和 MyISAM 支持的索引类型相同，但具体实现因为文件结构的不同有很大差异。</li><li>增删改查性能方面，如果执行大量的增删改操作，推荐使用 InnoDB 存储引擎，它在删除操作时是对行删除，不会重建表。</li></ul><h2 id="MyISAM-和-InnoDB-存储引擎的对比"><a href="#MyISAM-和-InnoDB-存储引擎的对比" class="headerlink" title="MyISAM 和 InnoDB 存储引擎的对比"></a>MyISAM 和 InnoDB 存储引擎的对比</h2><ul><li><code>锁粒度方面</code>：由于锁粒度不同，InnoDB 比 MyISAM 支持更高的并发；InnoDB 的锁粒度为行锁、MyISAM 的锁粒度为表锁、行锁需要对每一行进行加锁，所以锁的开销更大，但是能解决脏读和不可重复读的问题，相对来说也更容易发生死锁</li><li><code>可恢复性上</code>：由于 InnoDB 是有事务日志的，所以在产生由于数据库崩溃等条件后，可以根据日志文件进行恢复。而 MyISAM 则没有事务日志。</li><li><code>查询性能上</code>：MyISAM 要优于 InnoDB，因为 InnoDB 在查询过程中，是需要维护数据缓存，而且查询过程是先定位到行所在的数据块，然后在从数据块中定位到要查找的行；而 MyISAM 可以直接定位到数据所在的内存地址，可以直接找到数据。</li><li><code>表结构文件上</code>： MyISAM 的表结构文件包括：<code>.frm</code>(表结构定义),<code>.MYI</code>(索引),<code>.MYD</code>(数据)；而 InnoDB 的表数据文件为:<code>.ibd</code>和<code>.frm</code>(表结构定义)；</li></ul><h1 id="MySQL-基础架构"><a href="#MySQL-基础架构" class="headerlink" title="MySQL 基础架构"></a>MySQL 基础架构</h1><p><img src="http://caoxl.com/imgs/mysql.jpg" alt="mysql"></p><p>大致上来说，MySQL 可以分为<code>Server</code>层和<code>存储引擎</code>层。</p><p>Server 层包括连接器、查询缓存、分析器、优化器、执行器，包括大多数 MySQL 中的核心功能，所有跨存储引擎的功能也在这一层实现，包括<strong>存储过程、触发器、视图</strong>等。</p><p>存储引擎层包括 MySQL 常见的存储引擎，包括 <strong>MyISAM、InnoDB 和 Memory</strong> 等，最常用的是 InnoDB，也是现在 MySQL 的默认存储引擎。存储引擎也可以在创建表的时候手动指定，比如下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t (i INT) ENGINE = &lt;Storage Engine&gt;;</span><br></pre></td></tr></table></figure><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h2><p>首先需要在 MySQL 客户端登陆才能使用，所以需要一个<code>连接器</code>来连接用户和 MySQL 数据库，我们一般是使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u 用户名 -p 密码</span><br></pre></td></tr></table></figure><p>来进行 MySQL 登陆，和服务端建立连接。在完成 <code>TCP 握手</code> 后，连接器会根据你输入的用户名和密码验证你的登录身份。如果用户名或者密码错误，MySQL 就会提示 <strong>Access denied for user</strong>，来结束执行。如果登录成功后，MySQL 会根据权限表中的记录来判定你的权限。</p><h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><p>连接完成后，你就可以执行 SQL 语句了，这行逻辑就会来到第二步：<code>查询缓存</code>。</p><p>MySQL 在得到一个执行请求后，会首先去 <code>查询缓存</code> 中查找，是否执行过这条 SQL 语句，之前执行过的语句以及结果会以 <code>key-value</code> 对的形式，被直接放在内存中。key 是查询语句，value 是查询的结果。如果通过 key 能够查找到这条 SQL 语句，就直接返回 SQL 的执行结果。</p><p>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果就会被放入查询缓存中。可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，效率会很高。</p><p><img src="http://caoxl.com/imgs/mysql_sql.jpg" alt="SQL 查询"></p><p>但是查询缓存不建议使用</p><p>为什么呢？因为只要在 MySQL 中对某一张表执行了更新操作，那么所有的查询缓存就会失效，对于更新频繁的数据库来说，查询缓存的命中率很低。</p><h2 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h2><p>如果没有命中查询，就开始执行真正的 SQL 语句。</p><ul><li>首先，MySQL 会根据你写的 <code>SQL</code> 语句进行解析，分析器会先做 <code>词法分析</code>，你写的 SQL 就是由多个字符串和空格组成的一条 <code>SQL</code> 语句，MySQL 需要识别出里面的字符串是什么，代表什么。</li><li>然后进行 <code>语法分析</code>，根据词法分析的结果， 语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。如果 <code>SQL</code> 语句不正确，就会提示 <strong>You have an error in your SQL syntax</strong></li></ul><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p>经过分析器的词法分析和语法分析后，你这条 <code>SQL</code> 就<code>合法</code>了，MySQL 就知道你要做什么了。但是在执行前，还需要进行优化器的处理，优化器会判断你使用了哪种索引，使用了何种连接，优化器的作用就是确定效率最高的执行方案。</p><h2 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h2><p>MySQL 通过分析器知道了你的 <code>SQL</code> 语句<code>是否合法</code>，你想要做什么操作，通过优化器知道了该怎么做效率最高，然后就进入了执行阶段，开始执行这条 <code>SQL</code> 语句</p><p>在执行阶段，MySQL 首先会判断你有没有执行这条语句的权限，没有权限的话，就会返回没有权限的错误。如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。对于有索引的表，执行的逻辑也差不多。</p><p>至此，MySQL 对于一条语句的执行过程也就完成了。</p><h1 id="SQL-的执行顺序"><a href="#SQL-的执行顺序" class="headerlink" title="SQL 的执行顺序"></a>SQL 的执行顺序</h1><p>我们在编写一个查询语句的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT</span><br><span class="line">    &lt; select_list &gt;</span><br><span class="line">FROM</span><br><span class="line">    &lt; left_table &gt; &lt; join_type &gt;</span><br><span class="line">JOIN &lt; right_table &gt; ON &lt; join_condition &gt;</span><br><span class="line">WHERE</span><br><span class="line">    &lt; where_condition &gt;</span><br><span class="line">GROUP BY</span><br><span class="line">    &lt; group_by_list &gt;</span><br><span class="line">HAVING</span><br><span class="line">    &lt; having_condition &gt;</span><br><span class="line">ORDER BY</span><br><span class="line">    &lt; order_by_condition &gt;</span><br><span class="line">LIMIT &lt; limit_number &gt;</span><br></pre></td></tr></table></figure><h2 id="FROM-连接"><a href="#FROM-连接" class="headerlink" title="FROM 连接"></a>FROM 连接</h2><p>首先，对 SELECT 语句执行查询时，对 <code>FROM</code> 关键字两边的表执行连接，会形成<code>笛卡尔积</code>，这时候会产生一个虚表<strong>VT1</strong>(<code>virtual table</code>)</p><blockquote><p>首先先来解释一下什么是<code>笛卡尔积</code><br>  现在我们有两个集合 A = {0,1} , B = {2,3,4}<br>  那么，集合 A <em> B 得到的结果就是<br>  A </em> B = {(0,2)、(1,2)、(0,3)、(1,3)、(0,4)、(1,4)};<br>  B <em> A = {(2,0)、{2,1}、{3,0}、{3,1}、{4,0}、(4,1)};<br>  上面 A </em> B 和 B <em> A 的结果就可以称为两个集合相乘的 <code>笛卡尔积</code><br>  我们可以得出结论，A 集合和 B 集合相乘，包含了集合 A 中的元素和集合 B 中元素之和，也就是 A 元素的个数 </em> B 元素的个数</p></blockquote><p>再来解释一下什么是虚表</p><blockquote><p>在 MySQL 中，有三种类型的表<br>  一种是<code>永久表</code>，永久表就是创建以后用来长期保存数据的表<br>  一种是<code>临时表</code>，临时表也有两类，一种是和永久表一样，只保存临时数据，但是能够长久存在的；还有一种是临时创建的，SQL 语句执行完成就会删除。<br>  一种是<code>虚表</code>，虚表其实就是视图，数据可能会来自多张表的执行结果。</p></blockquote><h2 id="ON-过滤"><a href="#ON-过滤" class="headerlink" title="ON 过滤"></a>ON 过滤</h2><p>然后对 FROM 连接的结果进行 ON 筛选，创建 <strong>VT2</strong>，把符合记录的条件存在 <strong>VT2</strong> 中。</p><h2 id="JOIN-连接"><a href="#JOIN-连接" class="headerlink" title="JOIN 连接"></a>JOIN 连接</h2><p>第三步，如果是 <code>OUTER JOIN(left join、right join)</code> ，那么这一步就将添加外部行，如果是 <code>left join</code> 就把 ON 过滤条件的左表添加进来，如果是 <code>right join</code> ，就把右表添加进来，从而生成新的虚拟表 <strong>VT3</strong>。</p><h2 id="WHERE-过滤"><a href="#WHERE-过滤" class="headerlink" title="WHERE 过滤"></a>WHERE 过滤</h2><p>第四步，是执行 <code>WHERE</code> 过滤器，对上一步生产的虚拟表引用 <code>WHERE</code> 筛选，生成虚拟表 <strong>VT4</strong>。</p><p>WHERE 和 ON 的区别</p><ul><li>如果有外部列，ON 针对过滤的是关联表，主表(保留表)会返回所有的列;</li><li>如果没有添加外部列，两者的效果是一样的;</li></ul><p>应用</p><ul><li>对主表的过滤应该使用 WHERE;</li><li>对于关联表，先条件查询后连接则用 ON，先连接后条件查询则用 WHERE;</li></ul><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><p>根据 <code>group by</code> 字句中的列，会对 <strong>VT4</strong> 中的记录进行分组操作，产生虚拟机表 <strong>VT5</strong>。如果应用了<code>group by</code>，那么后面的所有步骤都只能得到的 <strong>VT5</strong> 的列或者是聚合函数（<code>count</code>、<code>sum</code>、<code>avg</code>等）。</p><h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h2><p>紧跟着 <code>GROUP BY</code> 字句后面的是 <code>HAVING</code>，使用 HAVING 过滤，会把符合条件的放在 <strong>VT6</strong></p><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><p>第七步才会执行 <code>SELECT</code> 语句，将 <strong>VT6</strong> 中的结果按照 <code>SELECT</code> 进行刷选，生成 <strong>VT7</strong></p><h2 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h2><p>在第八步中，会对 <strong>TV7</strong> 生成的记录进行去重操作，生成 <strong>VT8</strong>。事实上如果应用了 <code>group by</code> 子句那么 <code>distinct</code> 是多余的，原因同样在于，分组的时候是将列中唯一的值分成一组，同时只为每一组返回一行记录，那么所以的记录都将是不相同的。</p><h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h2><p>应用 <code>order by</code> 子句。按照 <code>order_by_condition</code> 排序 <strong>VT8</strong>，此时返回的一个游标，而不是虚拟表。sql 是基于集合的理论的，集合不会预先对他的行排序，它只是成员的逻辑集合，成员的顺序是无关紧要的。</p><p><img src="http://caoxl.com/imgs/mysql_exec.jpg" alt="SQL 执行过程"></p><h1 id="什么是临时表，何时删除临时表"><a href="#什么是临时表，何时删除临时表" class="headerlink" title="什么是临时表，何时删除临时表"></a>什么是临时表，何时删除临时表</h1><p>什么是临时表？MySQL 在执行 SQL 语句的过程中，通常会临时创建一些<code>存储中间结果集</code>的表，临时表只对当前连接可见，在连接关闭时，临时表会被删除并释放所有表空间。</p><p>临时表分为两种：一种是<code>内存临时表</code>，一种是<code>磁盘临时表</code>，什么区别呢？内存临时表使用的是 MEMORY 存储引擎，而临时表采用的是 MyISAM 存储引擎。</p><blockquote><p>MEMORY 存储引擎：<code>memory</code> 是 MySQL 中一类特殊的存储引擎，它使用存储在内容中的内容来创建表，而且<strong>数据全部放在内存中</strong>。每个基于 MEMORY 存储引擎的表实际对应一个磁盘文件。该文件的文件名与表名相同，类型为 <code>frm</code> 类型。而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。MEMORY 用到的很少，因为它是把数据存到内存中，如果内存出现异常就会影响数据。如果重启或者关机，所有数据都会消失。因此，基于 MEMORY 的表的生命周期很短，一般是一次性的。</p></blockquote><p>MySQL 会在下面这几种情况产生临时表</p><ul><li>使用 <code>UNION</code> 查询：<code>UNION</code> 有两种，一种是<code>UNION</code> ，一种是 <code>UNION ALL</code> ，它们都用于联合查询；区别是 使用 <code>UNION</code> 会去掉两个表中的重复数据，相当于对结果集做了一下<code>去重(distinct)</code>。使用 <code>UNION ALL</code>，则不会排重，返回所有的行。使用 <code>UNION</code> 查询会产生临时表。</li><li>使用 <code>TEMPTABLE</code> 算法或者是 <code>UNION</code> 查询中的视图。<code>TEMPTABLE</code> 算法是一种创建临时表的算法，它是将结果放置到临时表中，意味这要 <code>MySQL</code> 要先创建好一个临时表，然后将结果放到临时表中去，然后再使用这个临时表进行相应的查询。</li><li><code>ORDER BY</code> 和 <code>GROUP BY</code> 的子句不一样时也会产生临时表。</li><li><code>DISTINCT</code> 查询并且加上 <code>ORDER BY</code> 时；</li><li><code>SQL</code>中用到 <code>SQL_SMALL_RESULT</code> 选项时；如果查询结果比较小的时候，可以加上 <code>SQL_SMALL_RESULT</code> 来优化，产生临时表</li><li><code>FROM</code> 中的子查询；</li><li><code>EXPLAIN</code> 查看执行计划结果的 <code>Extra</code> 列中，如果使用 <code>Using Temporary</code> 就表示会用到临时表。</li></ul><h1 id="MySQL-常见索引类型"><a href="#MySQL-常见索引类型" class="headerlink" title="MySQL 常见索引类型"></a>MySQL 常见索引类型</h1><p>索引是存储在一张表中特定列上的<code>数据结构</code>，索引是在列上创建的。并且，索引是一种数据结构。</p><p>在 MySQL 中，主要有下面这几种索引</p><ul><li><code>全局索引(FULLTEXT)</code>：全局索引，目前只有 MyISAM 引擎支持全局索引，它的出现是为了解决针对文本的模糊查询效率较低的问题。</li><li><code>哈希索引(HASH)</code>：哈希索引是 MySQL 中用到的唯一 key-value 键值对的数据结构，很适合作为索引。HASH 索引具有一次定位的好处，不需要像树那样逐个节点查找，但是这种查找适合应用于查找单个键的情况，对于范围查找，HASH 索引的性能就会很低。</li><li><code>B-Tree 索引</code>：B 就是 Balance 的意思，BTree 是一种平衡树，它有很多变种，最常见的就是 B+ Tree，它被 MySQL 广泛使用。</li><li><code>R-Tree 索引</code>：R-Tree 在 MySQL 很少使用，仅支持 geometry 数据类型，支持该类型的存储引擎只有MyISAM、BDb、InnoDb、NDb、Archive几种，相对于 B-Tree 来说，R-Tree 的优势在于范围查找。</li></ul><h1 id="varchar-和-char-的区别和使用场景"><a href="#varchar-和-char-的区别和使用场景" class="headerlink" title="varchar 和 char 的区别和使用场景"></a>varchar 和 char 的区别和使用场景</h1><p>MySQL 中没有 nvarchar 数据类型，所以直接比较的是 varchar 和 char 的区别</p><ul><li><code>char</code> ：表示的是定长的字符串，当你输入小于指定的数目，比如你指定的数目是 <code>char(6)</code>，当你输入小于 6 个字符的时候，<code>char</code> 会在你最后一个字符后面补空值。当你输入超过指定允许最大长度后，MySQL 会报错</li><li><code>varchar</code>： <code>varchar</code> 指的是长度为 n 个字节的可变长度，并且是非<code>Unicode</code>的字符数据。n 的值是介于 1 - 8000 之间的数值。存储大小为实际大小。</li></ul><p>使用 <code>char</code> 存储定长的数据非常方便、<code>char</code> 检索效率高，无论你存储的数据是否到了 10 个字节，都要去占用 10 字节的空间</p><p>使用 <code>varchar</code> 可以存储变长的数据，但存储效率没有 <code>char</code> 高。</p><h1 id="什么是-内连接、外连接、交叉连接、笛卡尔积"><a href="#什么是-内连接、外连接、交叉连接、笛卡尔积" class="headerlink" title="什么是 内连接、外连接、交叉连接、笛卡尔积"></a>什么是 内连接、外连接、交叉连接、笛卡尔积</h1><p>连接的方式主要有三种：<strong>外连接</strong>、<strong>内链接</strong>、<strong>交叉连接</strong></p><ul><li><code>外连接(OUTER JOIN)</code>：外连接分为三种，分别是<code>左外连接(LEFT OUTER JOIN 或 LEFT JOIN)</code>、<code>右外连接(RIGHT OUTER JOIN 或 RIGHT JOIN)</code> 、<code>全外连接(FULL OUTER JOIN 或 FULL JOIN)</code></li></ul><p><strong>MySQL 暂不支持全外连接</strong></p><ul><li><code>内连接(INNER JOIN)</code>：结合两个表中相同的字段，返回关联字段相符的记录。</li><li><p><code>笛卡尔积(Cartesian product)</code>： 我在上面提到了笛卡尔积，为了方便，下面再列出来一下。</p></li><li><p>交叉连接的原文是<code>Cross join</code> ，就是笛卡尔积在 SQL 中的实现，SQL中使用关键字<code>CROSS JOIN</code>来表示交叉连接，在交叉连接中，随便增加一个表的字段，都会对结果造成很大的影响。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t_Class a CROSS JOIN t_Student b WHERE a.classid=b.classid</span><br></pre></td></tr></table></figure><p>或者不用 CROSS JOIN，直接用 FROM 也能表示交叉连接的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t_Class a ,t_Student b WHERE a.classid=b.classid</span><br></pre></td></tr></table></figure><p>如果表中字段比较多，不适宜用交叉连接，交叉连接的效率比较差。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;非关系型数据库和关系型数据库区别，优势比较&quot;&gt;&lt;a href=&quot;#非关系型数据库和关系型数据库区别，优势比较&quot; class=&quot;headerlink&quot; title=&quot;非关系型数据库和关系型数据库区别，优势比较&quot;&gt;&lt;/a&gt;非关系型数据库和关系型数据库区别，优势比较&lt;/h1&gt;
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="MySQL" scheme="http://blog.caoxl.com/tags/MySQL/"/>
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
