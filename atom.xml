<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep It Simple And Stupid</title>
  
  <subtitle>Caoxl-Hexo-caoxl.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.caoxl.com/"/>
  <updated>2020-06-23T07:26:48.195Z</updated>
  <id>http://blog.caoxl.com/</id>
  
  <author>
    <name>CAO XIAN LIANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入MySQL锁</title>
    <link href="http://blog.caoxl.com/2020/06/23/Deep-Going-MySQL-Lock/"/>
    <id>http://blog.caoxl.com/2020/06/23/Deep-Going-MySQL-Lock/</id>
    <published>2020-06-23T03:16:11.000Z</published>
    <updated>2020-06-23T07:26:48.195Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>高并发场景下锁机制是怎么保证数据的一致性的和事务隔离性的?</p></blockquote><a id="more"></a><h1 id="锁种类"><a href="#锁种类" class="headerlink" title="锁种类"></a>锁种类</h1><blockquote><ul><li>按照<strong>锁的粒度</strong>划分：<code>表锁</code>、<code>页锁</code>、<code>行锁</code>；</li><li>按照<strong>使用的方式</strong>划分：<code>共享锁</code>和<code>排它锁</code>；</li><li>按照<strong>思想</strong>划分：<code>乐观锁</code>和<code>悲观锁</code>。</li></ul></blockquote><h2 id="按锁的粒度划分"><a href="#按锁的粒度划分" class="headerlink" title="按锁的粒度划分"></a>按锁的粒度划分</h2><ul><li><code>「表锁」</code>是粒度最大的锁，开销小，加锁快，不会出现死锁，但是由于粒度太大，因此造成锁的冲突几率大，并发性能低。</li></ul><p>Mysql中<code>「MyISAM储存引擎就支持表锁」</code>，MyISAM的表锁模式有两种：<code>「表共享读锁」</code>和<code>「表独占写锁」</code>。</p><p>当一个线程获取到MyISAM表的读锁的时候，会阻塞其他用户对该表的写操作，但是不会阻塞其它用户对该用户的读操作。</p><p>相反的，当一个线程获取到MyISAM表的写锁的时候，就会阻塞其它用户的读写操作对其它的线程具有排它性。</p><ul><li><p><code>「页锁」</code>的粒度是介于行锁和表锁之间的一种锁，因为页锁是在BDB中支持的一种锁机制，也很少被人提及和使用，所以这里制作概述，不做详解。</p></li><li><p><code>「行锁」</code>是粒度最小的锁机制，行锁的加锁开销性能大，加锁慢，并且会出现死锁，但是行锁的锁冲突的几率低，并发性能高。</p></li></ul><p>行锁是InnoDB默认的支持的锁机制，MyISAM不支持行锁，这个也是InnoDB和MyISAM的区别之一。</p><h2 id="按锁的使用方式划分"><a href="#按锁的使用方式划分" class="headerlink" title="按锁的使用方式划分"></a>按锁的使用方式划分</h2><blockquote><p>行锁在使用的方式上可以划分为：「<code>共享读锁（S锁）</code>「和」<code>排它写锁（X锁）</code>」。</p></blockquote><p>当一个事务对Mysql中的一条数据行加上了<code>S锁</code>，当前事务不能修改该行数据只能执行度操作，其他事务只能对该行数据加S锁不能加X锁。</p><p>若是一个事务对一行数据加了<code>X锁</code>，该事物能够对该行数据执行读和写操作，其它事务不能对该行数据加任何的锁，既不能读也不能写。</p><h2 id="按锁的思想划分"><a href="#按锁的思想划分" class="headerlink" title="按锁的思想划分"></a>按锁的思想划分</h2><p>「悲观锁和乐观锁是在很多框架都存在的一种思想，不要狭义地认为它们是某一种框架的锁机制」。</p><p>数据库管理系统中为了控制并发，保证在多个事务执行时的数据一致性以及事务的隔离性，使用悲观锁和乐观锁来解决并发场景下的问题。</p><p>Mysql中「<strong>悲观锁的实现是基于Mysql自身的锁机制实现，而乐观锁需要程序员自己去实现的锁机制</strong>」，最常见的乐观锁实现就锁机制是「<strong>使用版本号实现</strong>」。</p><h1 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h1><p>MyISAM中默认支持的表级锁有两种：<strong>「共享读锁」</strong> 和 <strong>「独占写锁」</strong>。表级锁在MyISAM和InnoDB的存储引擎中都支持，但是InnoDB默认支持的是行锁。</p><p>Mysql中平时读写操作都是隐式的进行加锁和解锁操作，Mysql已经自动帮我们实现加锁和解锁操作了，若是想要测试锁机制，我们就要显示的自己控制锁机制。</p><p>Mysql中可以通过以下sql来显示的在事务中显式的进行加锁和解锁操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 显式的添加表级读锁</span><br><span class="line">LOCK TABLE 表名 READ</span><br><span class="line"></span><br><span class="line">// 显示的添加表级写锁</span><br><span class="line">LOCK TABLE 表名 WRITE</span><br><span class="line"></span><br><span class="line">// 显式的解锁（当一个事务commit的时候也会自动解锁）</span><br><span class="line">unlock tables;</span><br></pre></td></tr></table></figure><p>下面我们就来测试一下MyISAM中的表级锁机制，首先创建一个测试表<code>employee</code> ，这里要指定存储引擎为MyISAM，并插入两条测试数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 创建一个测试表</span><br><span class="line">CREATE TABLE IF NOT EXISTS employee (</span><br><span class="line">    id INT PRIMARY KEY auto_increment,</span><br><span class="line">    name VARCHAR(40),</span><br><span class="line">    money INT</span><br><span class="line">)ENGINE MyISAM;</span><br><span class="line"></span><br><span class="line">-- 插入两条测试数据</span><br><span class="line">INSERT INTO employee(name, money) VALUES(&apos;caoxl&apos;, 8888);</span><br><span class="line">INSERT INTO employee(name, money) VALUES(&apos;lc&apos;, 9999);</span><br></pre></td></tr></table></figure><p>查看一下，表结果如下图所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from employee;</span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | name  | money |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  1 | caoxl |  8888 |</span><br><span class="line">|  2 | lc    |  9999 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h2 id="MyISAM表级写锁"><a href="#MyISAM表级写锁" class="headerlink" title="MyISAM表级写锁"></a>MyISAM表级写锁</h2><ul><li><ol><li>与此同时再开启一个session窗口，然后在第一个窗口执行下面的sql，在session1中给表添加写锁：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; LOCK TABLE employee WRITE;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>可以在session2中进行查询或者插入、更新该表数据，可以发现都会处于等待状态，也就是session1锁住了整个表，导致session2只能等待：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from employee;</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>在session1中进行查询、插入、更新数据，都可以执行成功：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 插入</span><br><span class="line">MariaDB [test]&gt; INSERT INTO employee(name, money) VALUES(&apos;caolx&apos;, 1111);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line">-- 更新</span><br><span class="line">MariaDB [test]&gt; UPDATE employee set name=&apos;caoxllc&apos; where id=1; </span><br><span class="line">Query OK, 1 row affected (0.14 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line">-- 查询</span><br><span class="line">MariaDB [test]&gt; SELECT * FROM employee;</span><br><span class="line">+----+---------+-------+</span><br><span class="line">| id | name    | money |</span><br><span class="line">+----+---------+-------+</span><br><span class="line">|  1 | caoxllc |  8888 |</span><br><span class="line">|  2 | lc      |  9999 |</span><br><span class="line">|  3 | caolx   |  1111 |</span><br><span class="line">+----+---------+-------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p><strong>「总结：」</strong> 从上面的测试结果显示 <strong>「当一个线程获取到表级写锁后，只能由该线程对表进行读写操作，别的线程必须等待该线程释放锁以后才能操作」</strong>。</p><h2 id="MyISAM表级共享读锁"><a href="#MyISAM表级共享读锁" class="headerlink" title="MyISAM表级共享读锁"></a>MyISAM表级共享读锁</h2><ul><li><ol><li>接下来测试一下表级共享读锁，同样还是利用上面的测试数据，第一步还是在session1给表加读锁。</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; LOCK TABLE employee read;</span><br><span class="line">Query OK, 0 rows affected (0.11 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>然后在session1中尝试进行插入、更新数据，发现都会报错，只能查询数据。</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 查询</span><br><span class="line">MariaDB [test]&gt; select * from employee;</span><br><span class="line">+----+---------+-------+</span><br><span class="line">| id | name    | money |</span><br><span class="line">+----+---------+-------+</span><br><span class="line">|  1 | caoxllc |  8888 |</span><br><span class="line">|  2 | lc      |  9999 |</span><br><span class="line">|  3 | caolx   |  1111 |</span><br><span class="line">+----+---------+-------+</span><br><span class="line">3 rows in set (7 min 12.28 sec)</span><br><span class="line">-- 插入</span><br><span class="line">MariaDB [test]&gt; INSERT INTO employee(name, money) VALUES(&apos;lxlc&apos;, 2222);</span><br><span class="line">ERROR 1099 (HY000): Table &apos;employee&apos; was locked with a READ lock and can&apos;t be updated</span><br><span class="line">-- 更新</span><br><span class="line">MariaDB [test]&gt; UPDATE employee set name=&apos;lxlc&apos; where id=1;</span><br><span class="line">ERROR 1099 (HY000): Table &apos;employee&apos; was locked with a READ lock and can&apos;t be updated</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>最后在session2中尝试进行插入、更新数据，程序都会进入等待状态，只能查询数据，直到session1解锁表session2才能插入、更新数据。</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; INSERT INTO employee(name, money) VALUES(&apos;lxlc&apos;, 2222);</span><br></pre></td></tr></table></figure><p><strong>「总结：」</strong> 从上面的测试结果显示 <strong>「当一个线程获取到表级读锁后，该线程只能读取数据不能修改数据，其它线程也只能加读锁，不能加写锁」</strong>。</p><h2 id="MyISAM表级锁竞争情况"><a href="#MyISAM表级锁竞争情况" class="headerlink" title="MyISAM表级锁竞争情况"></a>MyISAM表级锁竞争情况</h2><p>MyISAM存储引擎中，可以通过查询变量来查看并发场景锁的争夺情况，具体执行下面的sql语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; show status like &apos;table%&apos;;</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Table_locks_immediate | 37    |</span><br><span class="line">| Table_locks_waited    | 2     |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">2 rows in set (0.27 sec)</span><br></pre></td></tr></table></figure><p>主要是查看<code>table_locks_waited</code>和<code>table_locks_immediate</code>的值的大小分析锁的竞争情况。</p><ul><li><code>Table_locks_immediate</code>: 表示能够立即获得表级锁的锁请求次数；</li><li><code>Table_locks_waited</code>: 表示不能立即获取表级锁而需要等待的锁请求次数分析，<strong>「值越大竞争就越严重」</strong>。</li></ul><h2 id="并发插入"><a href="#并发插入" class="headerlink" title="并发插入"></a>并发插入</h2><p>通过上面的操作演示，详细的说明了表级共享锁和表级写锁的特点。但是在平时的执行sql的时候，这些 <strong>「解锁和释放锁都是Mysql底层隐式的执行的」</strong>。</p><p>上面的演示只是为了证明显式的执行事务的过程共享锁和表级写锁的加锁和解锁的特点，实际并不会这么做的。</p><p>在我们平时执行select语句的时候就会隐式的加读锁，执行增、删、改的操作时就会隐式的执行加写锁。<br>MyISAM存储引擎中，虽然读写操作是串行化的，但是它也支持并发插入，这个需要设置内部变量<code>concurrent_insert</code>的值。</p><p>它的值有三个值<code>0</code>、<code>1</code>、<code>2</code>。可以通过以下的sql查看<code>concurrent_insert</code>的默认值为 <strong>「AUTO(或者1)」</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; show variables like &quot;%concurrent_insert&quot;;</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| concurrent_insert | AUTO  |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">1 row in set (0.25 sec)</span><br></pre></td></tr></table></figure><p><code>concurrent_insert</code>的值为:</p><ul><li><code>NEVER (or 0)</code>表示不支持比并发插入；</li><li><code>AUTO(或者1）</code>表示在MyISAM表中没有被删除的行，运行另一个线程从表尾插入数据；</li><li><code>ALWAYS (or 2)</code>表示不管是否有删除的行，都允许在表尾插入数据。</li></ul><h2 id="锁调度"><a href="#锁调度" class="headerlink" title="锁调度"></a>锁调度</h2><p>MyISAM存储引擎中，<strong>「假如同时一个读请求，一个写请求过来的话，它会优先处理写请求」</strong>，因为MyISAM存储引擎中认为<strong>写请求比读请求重要</strong>。</p><p>这样就会导致，<strong>「假如大量的读写请求过来，就会导致读请求长时间的等待，或者”线程饿死”，因此MyISAM不适合运用于大量读写操作的场景」</strong>，这样会导致长时间读取不到用户数据，用户体验感极差。</p><p>当然可以通过设置<code>low-priority-updates</code>参数，设置请求链接的优先级，使得Mysql优先处理读请求。</p><h1 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h1><blockquote><p>InnoDB和MyISAM不同的是，<strong>InnoDB支持「行锁」和「事务」</strong></p></blockquote><p>InnoDB中除了有<code>「表锁」</code>和<code>「行级锁」</code>的概念，还有<code>Gap Lock（间隙锁）</code>、<code>Next-key Lock锁</code>，<strong>「间隙锁主要用于范围查询的时候，锁住查询的范围，并且间隙锁也是解决幻读的方案」</strong>。</p><p>InnoDB中的行级锁是 <strong>「对索引加的锁，在不通过索引查询数据的时候，InnoDB就会使用表锁」</strong>。</p><p><strong>「但是通过索引查询的时候是否使用索引，还要看Mysql的执行计划」</strong>，Mysql的优化器会判断是一条sql执行的最佳策略。</p><p>若是Mysql觉得执行索引查询还不如全表扫描速度快，那么Mysql就会使用全表扫描来查询，这是即使sql语句中使用了索引，最后还是执行为全表扫描，加的是表锁。</p><h2 id="InnoDB行锁和表锁"><a href="#InnoDB行锁和表锁" class="headerlink" title="InnoDB行锁和表锁"></a>InnoDB行锁和表锁</h2><p>InnoDB的行锁也是分为行级 <strong>「共享读锁（S锁）「和」排它写锁（X锁）」</strong>，原理特点和MyISAM的表级锁两种模式是一样的。</p><p>若想显式的给表加行级读锁和写锁，可以执行下面的sql语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 给查询sql显示添加读锁</span><br><span class="line">select ... lock in share mode;</span><br><span class="line"></span><br><span class="line">// 给查询sql显示添加写锁</span><br><span class="line">select ... for update；</span><br></pre></td></tr></table></figure><ul><li><ol><li>下面我们直接进入锁机制的测试阶段，还是创建一个测试表，并插入两条数据：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 先把原来的MyISAM表给删除了</span><br><span class="line">DROP TABLE IF EXISTS employee;</span><br><span class="line">CREATE TABLE IF NOT EXISTS employee (</span><br><span class="line">    id INT PRIMARY KEY auto_increment,</span><br><span class="line">    name VARCHAR(40),</span><br><span class="line">    money INT</span><br><span class="line">)ENGINE INNODB;</span><br><span class="line"></span><br><span class="line">// 插入测试数据</span><br><span class="line">INSERT INTO employee(name, money) VALUES(&apos;caoxl&apos;, 1000);</span><br><span class="line">INSERT INTO employee(name, money) VALUES(&apos;lc&apos;, 2000);</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>创建的表中可以看出对表中的字段只有id添加了主键索引，接着就是在session1窗口执行<code>begin</code>开启事务，并执行下面的sql语句：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select * from employee where name=&apos;caoxl&apos; for update;</span><br><span class="line">MariaDB [test]&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">-- 使用非索引字段查询，并显式的添加写锁</span><br><span class="line">MariaDB [test]&gt; select * from employee where name=&apos;caolx&apos; for update;</span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | name  | money |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  1 | caolx |  1000 |</span><br><span class="line">|  2 | caolx |  2000 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>然后在session2中执行update语句，上面查询的式id=1的数据行，下面update的是id=1的数据行，会发现程序也会进入等待状态：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; update employee set name=&apos;caoxl&apos; where id = 1;</span><br></pre></td></tr></table></figure><p>可见若是 <strong>「使用非索引查询，直接就是使用的表级锁」</strong>，锁住了整个表。</p><ul><li><ol start="4"><li>若是session1使用的是id来查询，如下所示：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from employee where id=&apos;1&apos; for update;  </span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | name  | money |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  1 | caolx |  1000 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">1 row in set (0.14 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li>那么session2是可以成功update其它数据行的，但是这里我建议使用数据量大的表进行测试，因为前面我说过了 <strong>「是否执行索引还得看Mysql的执行计划，对于一些小表的操作，可能就直接使用全表扫描」</strong>。</li></ol></li></ul><ul><li><ol start="6"><li>还有一种情况就是：假如我们给name字段也加上了普通索引，那么通过普通索引来查询数据，并且查询到多行数据，拿它是锁这多行数据还是锁整个表呢？</li></ol></li></ul><p>下面我们来测试一下，首先给「name字段添加普通索引」，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; alter table employee add index index_name(name);</span><br><span class="line">Query OK, 0 rows affected (0.22 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><ul><li><ol start="7"><li>并插入一条新的数据name值与id=2的值相同，并显式的加锁，如下所示：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; INSERT INTO employee(name, money) VALUES(&apos;caoxl&apos;, 3000);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from employee;                        </span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | name  | money |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  1 | caolx |  1000 |</span><br><span class="line">|  2 | caoxl |  2000 |</span><br><span class="line">|  3 | caoxl |  3000 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from employee where name=&apos;caoxl&apos; for update;</span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | name  | money |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  2 | caoxl |  2000 |</span><br><span class="line">|  3 | caoxl |  3000 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">2 rows in set (0.03 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="8"><li>当update其它数据行name值不是<code>caoxl</code>的也会进入等待状态，并且通过explain来查看是否name=’caoxl’有执行索引，可以看到sql语句是有执行索引条件的。</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; MariaDB [test]&gt; explain update employee set name=&apos;lc&apos; where id = 1;</span><br><span class="line">+------+-------------+----------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">| id   | select_type | table    | type  | possible_keys | key     | key_len | ref  | rows | Extra       |</span><br><span class="line">+------+-------------+----------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">|    1 | SIMPLE      | employee | range | PRIMARY       | PRIMARY | 4       | NULL |    1 | Using where |</span><br><span class="line">+------+-------------+----------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>执行非索引条件查询执行的是表锁。</li><li>执行索引查询是否是加行锁，还得看Mysql的执行计划，可以通过explain关键字来查看。</li><li>用普通键索引的查询，遇到索引值相同的，也会对其他的操作数据行的产生影响。</li></ul><h2 id="InnoDB间隙锁"><a href="#InnoDB间隙锁" class="headerlink" title="InnoDB间隙锁"></a>InnoDB间隙锁</h2><p>当我们使用范围条件查询而不是等值条件查询的时候，InnoDB就会给符合条件的范围索引加锁，在条件范围内并不存的记录就叫做”间隙（GAP）”</p><p>大家大概都知道在事务的四大隔离级别中，不可重复读会产生幻读的现象，只能通过提高隔离级别到串行化来解决幻读现象。</p><p>但是Mysql中的不可重复是已经解决了幻读问题，它通过引入间隙锁的实现来解决幻读，通过给符合条件的间隙加锁，防止再次查询的时候出现新数据产生幻读的问题。</p><p>例如我们执行下面的sql语句，就会对id大于100的记录加锁，在id&gt;100的记录中肯定是有不存在的间隙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from  employee where id &gt; 100 for update;</span><br></pre></td></tr></table></figure><ul><li><ol><li>接着来测试间隙锁，新增一个字段num，并将num添加为普通索引、修改之前的数据使得num之间的值存在间隙，操作如下sql所示：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alter table employee add num int not null default 0;</span><br><span class="line">update employee set num = 1 where id = 1;</span><br><span class="line">update employee set num = 1 where id = 2;</span><br><span class="line">update employee set num = 3 where id = 3;</span><br><span class="line">insert into employee values(4,&apos;kris&apos;,4000,5);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from employee;                        </span><br><span class="line">+----+-------+-------+-----+</span><br><span class="line">| id | name  | money | num |</span><br><span class="line">+----+-------+-------+-----+</span><br><span class="line">|  1 | caolx |  1000 |   1 |</span><br><span class="line">|  2 | caoxl |  2000 |   1 |</span><br><span class="line">|  3 | caoxl |  3000 |   3 |</span><br><span class="line">|  4 | kris  |  4000 |   5 |</span><br><span class="line">+----+-------+-------+-----+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>接着在session1的窗口开启事务，并执行下面操作：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from employee where num=3 for update;</span><br><span class="line">+----+-------+-------+-----+</span><br><span class="line">| id | name  | money | num |</span><br><span class="line">+----+-------+-------+-----+</span><br><span class="line">|  3 | caoxl |  3000 |   3 |</span><br><span class="line">+----+-------+-------+-----+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>同时打开窗口session2，并执行新增语句：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into employee values(5,&apos;ceshi&apos;,5000,2);  // 程序出现等待</span><br><span class="line">insert into employee values(5,&apos;ceshi&apos;,5000,4);  // 程序出现等待</span><br><span class="line">insert into employee values(5,&apos;ceshi&apos;,5000,6);  // 新增成功</span><br><span class="line">insert into employee values(6,&apos;ceshi&apos;,5000,0);  // 新增成功</span><br></pre></td></tr></table></figure><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>死锁在InnoDB中才会出现死锁，MyISAM是不会出现死锁，因为MyISAM支持的是表锁，一次性获取了所有得锁，其它的线程只能排队等候。</p><p>而InnoDB默认支持行锁，获取锁是分步的，并不是一次性获取所有得锁，因此在锁竞争的时候就会出现死锁的情况。</p><p>虽然InnoDB会出现死锁，但是并不影响InnoDB最受欢成为迎的存储引擎，MyISAM可以理解为串行化操作，读写有序，因此支持的并发性能低下。</p><h2 id="死锁的解决方案"><a href="#死锁的解决方案" class="headerlink" title="死锁的解决方案"></a>死锁的解决方案</h2><p>首先要解决死锁问题，在程序的设计上，当发现程序有高并发的访问某一个表时，尽量对该表的执行操作串行化，或者锁升级，一次性获取所有的锁资源。</p><p>然后也可以设置参数<code>innodb_lock_wait_timeout</code>，超时时间，并且将参数<code>innodb_deadlock_detect</code>打开，当发现死锁的时候，自动回滚其中的某一个事务。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面详细的介绍了<code>MyISAM</code>和<code>InnoDB</code>两种存储引擎的锁机制的实现，并进行了测试。</p><p><code>MyISAM</code>的表锁分为两种模式：<strong>「共享读锁」</strong> 和 <strong>「排它写锁」</strong>。获取的读锁的线程对该数据行只能读，不能修改，其它线程也只能对该数据行加读锁。</p><p>获取到写锁的线程对该数据行既能读也能写，对其他线程对该数据行的读写具有排它性。</p><p><strong>MyISAM中默认写优先于读操作</strong>，因此<code>MyISAM</code>一般不适合运用于大量读写操作的程序中。</p><p><code>InnoDB</code>的行锁虽然会出现死锁的可能，但是<code>InnoDB</code>的支持的并发性能比<code>MyISAM</code>好，行锁的粒度最小，一定的方法和措施可以解决死锁的发生，极大的发挥<code>InnoDB</code>的性能。</p><p><code>InnoDB</code>中引入了<strong>间隙锁</strong>的概念来决解出现幻读的问题，也引入事务的特性，通过事务的四种隔离级别，来降低锁冲突，提高并发性能。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;高并发场景下锁机制是怎么保证数据的一致性的和事务隔离性的?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="MySQL锁" scheme="http://blog.caoxl.com/tags/MySQL%E9%94%81/"/>
    
      <category term="共享锁" scheme="http://blog.caoxl.com/tags/%E5%85%B1%E4%BA%AB%E9%94%81/"/>
    
      <category term="排他锁" scheme="http://blog.caoxl.com/tags/%E6%8E%92%E4%BB%96%E9%94%81/"/>
    
      <category term="行锁" scheme="http://blog.caoxl.com/tags/%E8%A1%8C%E9%94%81/"/>
    
      <category term="表锁" scheme="http://blog.caoxl.com/tags/%E8%A1%A8%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 面试题 II</title>
    <link href="http://blog.caoxl.com/2020/06/18/MySQL-Interview-Questions-II/"/>
    <id>http://blog.caoxl.com/2020/06/18/MySQL-Interview-Questions-II/</id>
    <published>2020-06-18T06:19:56.000Z</published>
    <updated>2020-06-18T08:47:15.063Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="非关系型数据库和关系型数据库区别，优势比较"><a href="#非关系型数据库和关系型数据库区别，优势比较" class="headerlink" title="非关系型数据库和关系型数据库区别，优势比较"></a>非关系型数据库和关系型数据库区别，优势比较</h1><a id="more"></a><h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><p>非关系型数据库（感觉翻译不是很准确）称为 <code>NoSQL</code>，也就是 Not Only SQL，不仅仅是 SQL。非关系型数据库不需要写一些复杂的 SQL 语句，其内部存储方式是以 <code>key-value</code> 的形式存在可以把它想象成电话本的形式，每个人名（key）对应电话（value）。常见的非关系型数据库主要有 <strong>Hbase</strong>、<strong>Redis</strong>、<strong>MongoDB</strong> 等。非关系型数据库不需要经过 SQL 的重重解析，所以性能很高；非关系型数据库的可扩展性比较强，数据之间没有耦合性，遇见需要新加字段的需求，就直接增加一个 <code>key-value</code> 键值对即可。</p><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>关系型数据库以<code>表格</code>的形式存在，以<code>行</code>和<code>列</code>的形式存取数据，关系型数据库这一系列的行和列被称为表，无数张表组成了<code>数据库</code>，常见的关系型数据库有 <strong>Oracle</strong>、<strong>DB2</strong>、<strong>Microsoft SQL Server</strong>、<strong>MySQL</strong>等。关系型数据库能够支持复杂的 SQL 查询，能够体现出数据之间、表之间的关联关系；关系型数据库也支持事务，便于提交或者回滚。</p><h1 id="MySQL-事务四大特性"><a href="#MySQL-事务四大特性" class="headerlink" title="MySQL 事务四大特性"></a>MySQL 事务四大特性</h1><p>一说到 MySQL 事务，你肯定能想起来四大特性：<code>原子性</code>、<code>一致性</code>、<code>隔离性</code>、<code>持久性</code>，下面再对这事务的四大特性做一个描述</p><ul><li><code>原子性(Atomicity)</code>: 原子性指的就是 MySQL 中的包含事务的操作要么<code>全部成功</code>、要么全部<code>失败回滚</code>，因此事务的操作如果成功就必须要全部应用到数据库，如果操作失败则不能对数据库有任何影响。</li><li><code>一致性(Consistency)</code>：一致性指的是一个事务在执行前后其状态一致。比如 A 和 B 加起来的钱一共是 1000 元，那么不管 A 和 B 之间如何转账，转多少次，事务结束后两个用户的钱加起来还得是 1000，这就是事务的一致性。</li><li><code>持久性(Durability)</code>: 持久性指的是一旦事务提交，那么发生的改变就是永久性的，即使数据库遇到特殊情况比如故障的时候也不会产生干扰。</li><li><code>隔离性(Isolation)</code>：隔离性需要重点说一下，当多个事务同时进行时，就有可能出现<code>脏读(dirty read)</code>、<code>不可重复读(non-repeatable read)</code>、<code>幻读(phantom read)</code> 的情况，为了解决这些并发问题，提出了隔离性的概念。</li></ul><h1 id="MySQL-常见存储引擎的区别"><a href="#MySQL-常见存储引擎的区别" class="headerlink" title="MySQL 常见存储引擎的区别"></a>MySQL 常见存储引擎的区别</h1><p>MySQL 常见的存储引擎，可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW ENGINES;</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |</span><br><span class="line">| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |</span><br><span class="line">| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |</span><br><span class="line">| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |</span><br><span class="line">| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |</span><br><span class="line">| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |</span><br><span class="line">| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">9 rows in set (0.07 sec)</span><br></pre></td></tr></table></figure><p>可以看到，InnoDB 是 MySQL 默认支持的存储引擎，支持<strong>事务、行级锁定和外键</strong>。</p><h2 id="MyISAM-存储引擎的特点"><a href="#MyISAM-存储引擎的特点" class="headerlink" title="MyISAM 存储引擎的特点"></a>MyISAM 存储引擎的特点</h2><p>在 5.1 版本之前，MyISAM 是 MySQL 的默认存储引擎，MyISAM 并发性比较差，使用的场景比较少，主要特点是</p><ul><li>不支持<code>事务</code>操作，ACID 的特性也就不存在了，这一设计是为了性能和效率考虑的。</li><li>不支持<code>外键</code>操作，如果强行增加外键，MySQL 不会报错，只不过外键不起作用。</li><li>MyISAM 默认的锁粒度是<code>表级锁</code>，所以并发性能比较差，加锁比较快，锁冲突比较少，不太容易发生死锁的情况。</li><li>MyISAM 会在磁盘上存储三个文件，文件名和表名相同，扩展名分别是 <code>.frm(存储表定义)</code>、<code>.MYD(MYData,存储数据)</code>、<code>MYI(MyIndex,存储索引)</code>。这里需要特别注意的是 MyISAM 只缓存<code>索引文件</code>，并不缓存数据文件。</li><li>MyISAM 支持的索引类型有 <code>全局索引(Full-Text)</code>、<code>B-Tree 索引</code>、<code>R-Tree 索引</code><ul><li><code>Full-Text 索引</code>：它的出现是为了解决针对文本的模糊查询效率较低的问题。</li><li><code>B-Tree 索引</code>：所有的索引节点都按照平衡树的数据结构来存储，所有的索引数据节点都在叶节点</li><li><code>R-Tree索引</code>：它的存储方式和 B-Tree 索引有一些区别，主要设计用于存储空间和多维数据的字段做索引,目前的 MySQL 版本仅支持 geometry 类型的字段作索引，相对于 BTREE，RTREE 的优势在于范围查找。</li></ul></li><li>数据库所在主机如果宕机，MyISAM 的数据文件容易损坏，而且难以恢复。</li><li>增删改查性能方面：SELECT 性能较高，适用于查询较多的情况</li></ul><h2 id="InnoDB-存储引擎的特点"><a href="#InnoDB-存储引擎的特点" class="headerlink" title="InnoDB 存储引擎的特点"></a>InnoDB 存储引擎的特点</h2><p>自从 MySQL 5.1 之后，默认的存储引擎变成了 InnoDB 存储引擎，相对于 MyISAM，InnoDB 存储引擎有了较大的改变，它的主要特点是</p><ul><li>支持事务操作，具有事务 ACID 隔离特性，默认的隔离级别是<code>可重复读(repetable-read)</code>、通过MVCC（并发版本控制）来实现的。能够解决<code>脏读</code>和<code>不可重复读</code>的问题。</li><li>InnoDB 支持外键操作。</li><li>InnoDB 默认的锁粒度<code>行级锁</code>，并发性能比较好，会发生死锁的情况。</li><li>和 MyISAM 一样的是，InnoDB 存储引擎也有 <code>.frm</code>文件存储表结构 定义，但是不同的是，InnoDB 的表数据与索引数据是存储在一起的，都位于 B+ 数的叶子节点上，而 MyISAM 的表数据和索引数据是分开的。</li><li>InnoDB 有安全的日志文件，这个日志文件用于恢复因数据库崩溃或其他情况导致的数据丢失问题，保证数据的一致性。</li><li>InnoDB 和 MyISAM 支持的索引类型相同，但具体实现因为文件结构的不同有很大差异。</li><li>增删改查性能方面，如果执行大量的增删改操作，推荐使用 InnoDB 存储引擎，它在删除操作时是对行删除，不会重建表。</li></ul><h2 id="MyISAM-和-InnoDB-存储引擎的对比"><a href="#MyISAM-和-InnoDB-存储引擎的对比" class="headerlink" title="MyISAM 和 InnoDB 存储引擎的对比"></a>MyISAM 和 InnoDB 存储引擎的对比</h2><ul><li><code>锁粒度方面</code>：由于锁粒度不同，InnoDB 比 MyISAM 支持更高的并发；InnoDB 的锁粒度为行锁、MyISAM 的锁粒度为表锁、行锁需要对每一行进行加锁，所以锁的开销更大，但是能解决脏读和不可重复读的问题，相对来说也更容易发生死锁</li><li><code>可恢复性上</code>：由于 InnoDB 是有事务日志的，所以在产生由于数据库崩溃等条件后，可以根据日志文件进行恢复。而 MyISAM 则没有事务日志。</li><li><code>查询性能上</code>：MyISAM 要优于 InnoDB，因为 InnoDB 在查询过程中，是需要维护数据缓存，而且查询过程是先定位到行所在的数据块，然后在从数据块中定位到要查找的行；而 MyISAM 可以直接定位到数据所在的内存地址，可以直接找到数据。</li><li><code>表结构文件上</code>： MyISAM 的表结构文件包括：<code>.frm</code>(表结构定义),<code>.MYI</code>(索引),<code>.MYD</code>(数据)；而 InnoDB 的表数据文件为:<code>.ibd</code>和<code>.frm</code>(表结构定义)；</li></ul><h1 id="MySQL-基础架构"><a href="#MySQL-基础架构" class="headerlink" title="MySQL 基础架构"></a>MySQL 基础架构</h1><p><img src="http://caoxl.com/imgs/mysql.jpg" alt="mysql"></p><p>大致上来说，MySQL 可以分为<code>Server</code>层和<code>存储引擎</code>层。</p><p>Server 层包括连接器、查询缓存、分析器、优化器、执行器，包括大多数 MySQL 中的核心功能，所有跨存储引擎的功能也在这一层实现，包括<strong>存储过程、触发器、视图</strong>等。</p><p>存储引擎层包括 MySQL 常见的存储引擎，包括 <strong>MyISAM、InnoDB 和 Memory</strong> 等，最常用的是 InnoDB，也是现在 MySQL 的默认存储引擎。存储引擎也可以在创建表的时候手动指定，比如下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t (i INT) ENGINE = &lt;Storage Engine&gt;;</span><br></pre></td></tr></table></figure><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h2><p>首先需要在 MySQL 客户端登陆才能使用，所以需要一个<code>连接器</code>来连接用户和 MySQL 数据库，我们一般是使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u 用户名 -p 密码</span><br></pre></td></tr></table></figure><p>来进行 MySQL 登陆，和服务端建立连接。在完成 <code>TCP 握手</code> 后，连接器会根据你输入的用户名和密码验证你的登录身份。如果用户名或者密码错误，MySQL 就会提示 <strong>Access denied for user</strong>，来结束执行。如果登录成功后，MySQL 会根据权限表中的记录来判定你的权限。</p><h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><p>连接完成后，你就可以执行 SQL 语句了，这行逻辑就会来到第二步：<code>查询缓存</code>。</p><p>MySQL 在得到一个执行请求后，会首先去 <code>查询缓存</code> 中查找，是否执行过这条 SQL 语句，之前执行过的语句以及结果会以 <code>key-value</code> 对的形式，被直接放在内存中。key 是查询语句，value 是查询的结果。如果通过 key 能够查找到这条 SQL 语句，就直接返回 SQL 的执行结果。</p><p>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果就会被放入查询缓存中。可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，效率会很高。</p><p><img src="http://caoxl.com/imgs/mysql_sql.jpg" alt="SQL 查询"></p><p>但是查询缓存不建议使用</p><p>为什么呢？因为只要在 MySQL 中对某一张表执行了更新操作，那么所有的查询缓存就会失效，对于更新频繁的数据库来说，查询缓存的命中率很低。</p><h2 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h2><p>如果没有命中查询，就开始执行真正的 SQL 语句。</p><ul><li>首先，MySQL 会根据你写的 <code>SQL</code> 语句进行解析，分析器会先做 <code>词法分析</code>，你写的 SQL 就是由多个字符串和空格组成的一条 <code>SQL</code> 语句，MySQL 需要识别出里面的字符串是什么，代表什么。</li><li>然后进行 <code>语法分析</code>，根据词法分析的结果， 语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。如果 <code>SQL</code> 语句不正确，就会提示 <strong>You have an error in your SQL syntax</strong></li></ul><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p>经过分析器的词法分析和语法分析后，你这条 <code>SQL</code> 就<code>合法</code>了，MySQL 就知道你要做什么了。但是在执行前，还需要进行优化器的处理，优化器会判断你使用了哪种索引，使用了何种连接，优化器的作用就是确定效率最高的执行方案。</p><h2 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h2><p>MySQL 通过分析器知道了你的 <code>SQL</code> 语句<code>是否合法</code>，你想要做什么操作，通过优化器知道了该怎么做效率最高，然后就进入了执行阶段，开始执行这条 <code>SQL</code> 语句</p><p>在执行阶段，MySQL 首先会判断你有没有执行这条语句的权限，没有权限的话，就会返回没有权限的错误。如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。对于有索引的表，执行的逻辑也差不多。</p><p>至此，MySQL 对于一条语句的执行过程也就完成了。</p><h1 id="SQL-的执行顺序"><a href="#SQL-的执行顺序" class="headerlink" title="SQL 的执行顺序"></a>SQL 的执行顺序</h1><p>我们在编写一个查询语句的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT</span><br><span class="line">    &lt; select_list &gt;</span><br><span class="line">FROM</span><br><span class="line">    &lt; left_table &gt; &lt; join_type &gt;</span><br><span class="line">JOIN &lt; right_table &gt; ON &lt; join_condition &gt;</span><br><span class="line">WHERE</span><br><span class="line">    &lt; where_condition &gt;</span><br><span class="line">GROUP BY</span><br><span class="line">    &lt; group_by_list &gt;</span><br><span class="line">HAVING</span><br><span class="line">    &lt; having_condition &gt;</span><br><span class="line">ORDER BY</span><br><span class="line">    &lt; order_by_condition &gt;</span><br><span class="line">LIMIT &lt; limit_number &gt;</span><br></pre></td></tr></table></figure><h2 id="FROM-连接"><a href="#FROM-连接" class="headerlink" title="FROM 连接"></a>FROM 连接</h2><p>首先，对 SELECT 语句执行查询时，对 <code>FROM</code> 关键字两边的表执行连接，会形成<code>笛卡尔积</code>，这时候会产生一个虚表<strong>VT1</strong>(<code>virtual table</code>)</p><blockquote><p>首先先来解释一下什么是<code>笛卡尔积</code><br>  现在我们有两个集合 A = {0,1} , B = {2,3,4}<br>  那么，集合 A <em> B 得到的结果就是<br>  A </em> B = {(0,2)、(1,2)、(0,3)、(1,3)、(0,4)、(1,4)};<br>  B <em> A = {(2,0)、{2,1}、{3,0}、{3,1}、{4,0}、(4,1)};<br>  上面 A </em> B 和 B <em> A 的结果就可以称为两个集合相乘的 <code>笛卡尔积</code><br>  我们可以得出结论，A 集合和 B 集合相乘，包含了集合 A 中的元素和集合 B 中元素之和，也就是 A 元素的个数 </em> B 元素的个数</p></blockquote><p>再来解释一下什么是虚表</p><blockquote><p>在 MySQL 中，有三种类型的表<br>  一种是<code>永久表</code>，永久表就是创建以后用来长期保存数据的表<br>  一种是<code>临时表</code>，临时表也有两类，一种是和永久表一样，只保存临时数据，但是能够长久存在的；还有一种是临时创建的，SQL 语句执行完成就会删除。<br>  一种是<code>虚表</code>，虚表其实就是视图，数据可能会来自多张表的执行结果。</p></blockquote><h2 id="ON-过滤"><a href="#ON-过滤" class="headerlink" title="ON 过滤"></a>ON 过滤</h2><p>然后对 FROM 连接的结果进行 ON 筛选，创建 <strong>VT2</strong>，把符合记录的条件存在 <strong>VT2</strong> 中。</p><h2 id="JOIN-连接"><a href="#JOIN-连接" class="headerlink" title="JOIN 连接"></a>JOIN 连接</h2><p>第三步，如果是 <code>OUTER JOIN(left join、right join)</code> ，那么这一步就将添加外部行，如果是 <code>left join</code> 就把 ON 过滤条件的左表添加进来，如果是 <code>right join</code> ，就把右表添加进来，从而生成新的虚拟表 <strong>VT3</strong>。</p><h2 id="WHERE-过滤"><a href="#WHERE-过滤" class="headerlink" title="WHERE 过滤"></a>WHERE 过滤</h2><p>第四步，是执行 <code>WHERE</code> 过滤器，对上一步生产的虚拟表引用 <code>WHERE</code> 筛选，生成虚拟表 <strong>VT4</strong>。</p><p>WHERE 和 ON 的区别</p><ul><li>如果有外部列，ON 针对过滤的是关联表，主表(保留表)会返回所有的列;</li><li>如果没有添加外部列，两者的效果是一样的;</li></ul><p>应用</p><ul><li>对主表的过滤应该使用 WHERE;</li><li>对于关联表，先条件查询后连接则用 ON，先连接后条件查询则用 WHERE;</li></ul><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><p>根据 <code>group by</code> 字句中的列，会对 <strong>VT4</strong> 中的记录进行分组操作，产生虚拟机表 <strong>VT5</strong>。如果应用了<code>group by</code>，那么后面的所有步骤都只能得到的 <strong>VT5</strong> 的列或者是聚合函数（<code>count</code>、<code>sum</code>、<code>avg</code>等）。</p><h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h2><p>紧跟着 <code>GROUP BY</code> 字句后面的是 <code>HAVING</code>，使用 HAVING 过滤，会把符合条件的放在 <strong>VT6</strong></p><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><p>第七步才会执行 <code>SELECT</code> 语句，将 <strong>VT6</strong> 中的结果按照 <code>SELECT</code> 进行刷选，生成 <strong>VT7</strong></p><h2 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h2><p>在第八步中，会对 <strong>TV7</strong> 生成的记录进行去重操作，生成 <strong>VT8</strong>。事实上如果应用了 <code>group by</code> 子句那么 <code>distinct</code> 是多余的，原因同样在于，分组的时候是将列中唯一的值分成一组，同时只为每一组返回一行记录，那么所以的记录都将是不相同的。</p><h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h2><p>应用 <code>order by</code> 子句。按照 <code>order_by_condition</code> 排序 <strong>VT8</strong>，此时返回的一个游标，而不是虚拟表。sql 是基于集合的理论的，集合不会预先对他的行排序，它只是成员的逻辑集合，成员的顺序是无关紧要的。</p><p><img src="http://caoxl.com/imgs/mysql_exec.jpg" alt="SQL 执行过程"></p><h1 id="什么是临时表，何时删除临时表"><a href="#什么是临时表，何时删除临时表" class="headerlink" title="什么是临时表，何时删除临时表"></a>什么是临时表，何时删除临时表</h1><p>什么是临时表？MySQL 在执行 SQL 语句的过程中，通常会临时创建一些<code>存储中间结果集</code>的表，临时表只对当前连接可见，在连接关闭时，临时表会被删除并释放所有表空间。</p><p>临时表分为两种：一种是<code>内存临时表</code>，一种是<code>磁盘临时表</code>，什么区别呢？内存临时表使用的是 MEMORY 存储引擎，而临时表采用的是 MyISAM 存储引擎。</p><blockquote><p>MEMORY 存储引擎：<code>memory</code> 是 MySQL 中一类特殊的存储引擎，它使用存储在内容中的内容来创建表，而且<strong>数据全部放在内存中</strong>。每个基于 MEMORY 存储引擎的表实际对应一个磁盘文件。该文件的文件名与表名相同，类型为 <code>frm</code> 类型。而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。MEMORY 用到的很少，因为它是把数据存到内存中，如果内存出现异常就会影响数据。如果重启或者关机，所有数据都会消失。因此，基于 MEMORY 的表的生命周期很短，一般是一次性的。</p></blockquote><p>MySQL 会在下面这几种情况产生临时表</p><ul><li>使用 <code>UNION</code> 查询：<code>UNION</code> 有两种，一种是<code>UNION</code> ，一种是 <code>UNION ALL</code> ，它们都用于联合查询；区别是 使用 <code>UNION</code> 会去掉两个表中的重复数据，相当于对结果集做了一下<code>去重(distinct)</code>。使用 <code>UNION ALL</code>，则不会排重，返回所有的行。使用 <code>UNION</code> 查询会产生临时表。</li><li>使用 <code>TEMPTABLE</code> 算法或者是 <code>UNION</code> 查询中的视图。<code>TEMPTABLE</code> 算法是一种创建临时表的算法，它是将结果放置到临时表中，意味这要 <code>MySQL</code> 要先创建好一个临时表，然后将结果放到临时表中去，然后再使用这个临时表进行相应的查询。</li><li><code>ORDER BY</code> 和 <code>GROUP BY</code> 的子句不一样时也会产生临时表。</li><li><code>DISTINCT</code> 查询并且加上 <code>ORDER BY</code> 时；</li><li><code>SQL</code>中用到 <code>SQL_SMALL_RESULT</code> 选项时；如果查询结果比较小的时候，可以加上 <code>SQL_SMALL_RESULT</code> 来优化，产生临时表</li><li><code>FROM</code> 中的子查询；</li><li><code>EXPLAIN</code> 查看执行计划结果的 <code>Extra</code> 列中，如果使用 <code>Using Temporary</code> 就表示会用到临时表。</li></ul><h1 id="MySQL-常见索引类型"><a href="#MySQL-常见索引类型" class="headerlink" title="MySQL 常见索引类型"></a>MySQL 常见索引类型</h1><p>索引是存储在一张表中特定列上的<code>数据结构</code>，索引是在列上创建的。并且，索引是一种数据结构。</p><p>在 MySQL 中，主要有下面这几种索引</p><ul><li><code>全局索引(FULLTEXT)</code>：全局索引，目前只有 MyISAM 引擎支持全局索引，它的出现是为了解决针对文本的模糊查询效率较低的问题。</li><li><code>哈希索引(HASH)</code>：哈希索引是 MySQL 中用到的唯一 key-value 键值对的数据结构，很适合作为索引。HASH 索引具有一次定位的好处，不需要像树那样逐个节点查找，但是这种查找适合应用于查找单个键的情况，对于范围查找，HASH 索引的性能就会很低。</li><li><code>B-Tree 索引</code>：B 就是 Balance 的意思，BTree 是一种平衡树，它有很多变种，最常见的就是 B+ Tree，它被 MySQL 广泛使用。</li><li><code>R-Tree 索引</code>：R-Tree 在 MySQL 很少使用，仅支持 geometry 数据类型，支持该类型的存储引擎只有MyISAM、BDb、InnoDb、NDb、Archive几种，相对于 B-Tree 来说，R-Tree 的优势在于范围查找。</li></ul><h1 id="varchar-和-char-的区别和使用场景"><a href="#varchar-和-char-的区别和使用场景" class="headerlink" title="varchar 和 char 的区别和使用场景"></a>varchar 和 char 的区别和使用场景</h1><p>MySQL 中没有 nvarchar 数据类型，所以直接比较的是 varchar 和 char 的区别</p><ul><li><code>char</code> ：表示的是定长的字符串，当你输入小于指定的数目，比如你指定的数目是 <code>char(6)</code>，当你输入小于 6 个字符的时候，<code>char</code> 会在你最后一个字符后面补空值。当你输入超过指定允许最大长度后，MySQL 会报错</li><li><code>varchar</code>： <code>varchar</code> 指的是长度为 n 个字节的可变长度，并且是非<code>Unicode</code>的字符数据。n 的值是介于 1 - 8000 之间的数值。存储大小为实际大小。</li></ul><p>使用 <code>char</code> 存储定长的数据非常方便、<code>char</code> 检索效率高，无论你存储的数据是否到了 10 个字节，都要去占用 10 字节的空间</p><p>使用 <code>varchar</code> 可以存储变长的数据，但存储效率没有 <code>char</code> 高。</p><h1 id="什么是-内连接、外连接、交叉连接、笛卡尔积"><a href="#什么是-内连接、外连接、交叉连接、笛卡尔积" class="headerlink" title="什么是 内连接、外连接、交叉连接、笛卡尔积"></a>什么是 内连接、外连接、交叉连接、笛卡尔积</h1><p>连接的方式主要有三种：<strong>外连接</strong>、<strong>内链接</strong>、<strong>交叉连接</strong></p><ul><li><code>外连接(OUTER JOIN)</code>：外连接分为三种，分别是<code>左外连接(LEFT OUTER JOIN 或 LEFT JOIN)</code>、<code>右外连接(RIGHT OUTER JOIN 或 RIGHT JOIN)</code> 、<code>全外连接(FULL OUTER JOIN 或 FULL JOIN)</code></li></ul><p><strong>MySQL 暂不支持全外连接</strong></p><ul><li><code>内连接(INNER JOIN)</code>：结合两个表中相同的字段，返回关联字段相符的记录。</li><li><p><code>笛卡尔积(Cartesian product)</code>： 我在上面提到了笛卡尔积，为了方便，下面再列出来一下。</p></li><li><p>交叉连接的原文是<code>Cross join</code> ，就是笛卡尔积在 SQL 中的实现，SQL中使用关键字<code>CROSS JOIN</code>来表示交叉连接，在交叉连接中，随便增加一个表的字段，都会对结果造成很大的影响。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t_Class a CROSS JOIN t_Student b WHERE a.classid=b.classid</span><br></pre></td></tr></table></figure><p>或者不用 CROSS JOIN，直接用 FROM 也能表示交叉连接的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t_Class a ,t_Student b WHERE a.classid=b.classid</span><br></pre></td></tr></table></figure><p>如果表中字段比较多，不适宜用交叉连接，交叉连接的效率比较差。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;非关系型数据库和关系型数据库区别，优势比较&quot;&gt;&lt;a href=&quot;#非关系型数据库和关系型数据库区别，优势比较&quot; class=&quot;headerlink&quot; title=&quot;非关系型数据库和关系型数据库区别，优势比较&quot;&gt;&lt;/a&gt;非关系型数据库和关系型数据库区别，优势比较&lt;/h1&gt;
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="MySQL" scheme="http://blog.caoxl.com/tags/MySQL/"/>
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 面试题 I</title>
    <link href="http://blog.caoxl.com/2020/06/18/MySQL-Interview-Questions-I/"/>
    <id>http://blog.caoxl.com/2020/06/18/MySQL-Interview-Questions-I/</id>
    <published>2020-06-18T02:09:36.000Z</published>
    <updated>2020-06-18T06:13:59.187Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>原文地址:<a href="https://juejin.im/post/5ec15ab9f265da7bc60e1910" target="_blank" rel="noopener">100道MySQL数据库经典面试题解析（收藏版）</a></p></blockquote><a id="more"></a><h1 id="MySQL-索引使用有哪些注意事项呢？"><a href="#MySQL-索引使用有哪些注意事项呢？" class="headerlink" title="MySQL 索引使用有哪些注意事项呢？"></a>MySQL 索引使用有哪些注意事项呢？</h1><p>可以从三个维度回答这个问题：索引哪些情况会失效，索引不适合哪些场景，索引规则</p><h2 id="索引哪些情况会失效"><a href="#索引哪些情况会失效" class="headerlink" title="索引哪些情况会失效"></a>索引哪些情况会失效</h2><ul><li>查询条件包含or，可能导致索引失效</li><li>如果字段类型是字符串，where时一定用引号括起来，否则索引失效</li><li>like通配符可能导致索引失效。</li><li>联合索引，查询时的条件列不是联合索引中的第一个列，索引失效。</li><li>在索引列上使用mysql的内置函数，索引失效。</li><li>对索引列运算（如，+、-、*、/），索引失效。</li><li>索引字段上使用（！= 或者 &lt; &gt;，not in）时，可能会导致索引失效。</li><li>索引字段上使用is null， is not null，可能导致索引失效。</li><li>左连接查询或者右连接查询查询关联的字段编码格式不一样，可能导致索引失效。</li><li>mysql估计使用全表扫描要比使用索引快,则不使用索引。</li></ul><h2 id="索引不适合哪些场景"><a href="#索引不适合哪些场景" class="headerlink" title="索引不适合哪些场景"></a>索引不适合哪些场景</h2><ul><li>数据量少的不适合加索引</li><li>更新比较频繁的也不适合加索引</li><li>区分度低的字段不适合加索引（如性别）</li></ul><h2 id="索引的一些潜规则"><a href="#索引的一些潜规则" class="headerlink" title="索引的一些潜规则"></a>索引的一些潜规则</h2><ul><li>覆盖索引</li><li>回表</li><li>索引数据结构（B+树）</li><li>最左前缀原则</li><li>索引下推</li></ul><h1 id="MySQL-遇到过死锁问题吗，你是如何解决的？"><a href="#MySQL-遇到过死锁问题吗，你是如何解决的？" class="headerlink" title="MySQL 遇到过死锁问题吗，你是如何解决的？"></a>MySQL 遇到过死锁问题吗，你是如何解决的？</h1><ul><li>查看死锁日志<code>show engine innodb status;</code></li><li>找出死锁Sql</li><li>分析sql加锁情况</li><li>模拟死锁案发</li><li>分析死锁日志</li><li>分析死锁结果</li></ul><h1 id="日常工作中你是怎么优化SQL的？"><a href="#日常工作中你是怎么优化SQL的？" class="headerlink" title="日常工作中你是怎么优化SQL的？"></a>日常工作中你是怎么优化SQL的？</h1><ul><li>加索引</li><li>避免返回不必要的数据</li><li>适当分批量进行</li><li>优化sql结构</li><li>分库分表</li><li>读写分离</li></ul><h1 id="说说分库与分表的设计"><a href="#说说分库与分表的设计" class="headerlink" title="说说分库与分表的设计"></a>说说分库与分表的设计</h1><p>分库分表方案，分库分表中间件，分库分表可能遇到的问题</p><h2 id="分库分表方案"><a href="#分库分表方案" class="headerlink" title="分库分表方案:"></a>分库分表方案:</h2><ul><li>水平分库：以字段为依据，按照一定策略（hash、range等），将一个库中的数据拆分到多个库中。</li><li>水平分表：以字段为依据，按照一定策略（hash、range等），将一个表中的数据拆分到多个表中。</li><li>垂直分库：以表为依据，按照业务归属不同，将不同的表拆分到不同的库中。</li><li>垂直分表：以字段为依据，按照字段的活跃性，将表中字段拆到不同的表（主表和扩展表）中。</li></ul><h2 id="常用的分库分表中间件："><a href="#常用的分库分表中间件：" class="headerlink" title="常用的分库分表中间件："></a>常用的分库分表中间件：</h2><ul><li>sharding-jdbc（当当）</li><li>Mycat</li><li>TDDL（淘宝）</li><li>Oceanus(58同城数据库中间件)</li><li>vitess（谷歌开发的数据库中间件）</li><li>Atlas(Qihoo 360)</li></ul><h2 id="分库分表可能遇到的问题"><a href="#分库分表可能遇到的问题" class="headerlink" title="分库分表可能遇到的问题"></a>分库分表可能遇到的问题</h2><ul><li>事务问题：需要用分布式事务啦</li><li>跨节点Join的问题：解决这一问题可以分两次查询实现</li><li>跨节点的count,order by,group by以及聚合函数问题：分别在各个节点上得到结果后在应用程序端进行合并。</li><li>数据迁移，容量规划，扩容等问题</li><li>ID问题：数据库被切分后，不能再依赖数据库自身的主键生成机制啦，最简单可以考虑UUID</li><li>跨分片的排序分页问题（后台加大pagesize处理？）</li></ul><h1 id="InnoDB与MyISAM的区别"><a href="#InnoDB与MyISAM的区别" class="headerlink" title="InnoDB与MyISAM的区别"></a>InnoDB与MyISAM的区别</h1><ul><li>InnoDB支持事务，MyISAM不支持事务</li><li>InnoDB支持外键，MyISAM不支持外键</li><li>InnoDB支持 MVCC(多版本并发控制)，MyISAM 不支持</li><li>select count(*) from table时，MyISAM更快，因为它有一个变量保存了整个表的总行数，可以直接读取，InnoDB就需要全表扫描。</li><li>InnoDB不支持全文索引，而MyISAM支持全文索引（5.7以后的InnoDB也支持全文索引）</li><li>InnoDB支持表、行级锁，而MyISAM支持表级锁</li><li>InnoDB表必须有主键，而MyISAM可以没有主键</li><li>InnoDB表需要更多的内存和存储，而MyISAM可被压缩，存储空间较小，。</li><li>InnoDB按主键大小有序插入，MyISAM记录插入顺序是，按记录插入顺序保存。</li><li>InnoDB 存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全，与 MyISAM 比 InnoDB 写的效率差一些，并且会占用更多的磁盘空间以保留数据和索引</li></ul><h1 id="数据库索引的原理，为什么要用-B-树，为什么不用二叉树？"><a href="#数据库索引的原理，为什么要用-B-树，为什么不用二叉树？" class="headerlink" title="数据库索引的原理，为什么要用 B+树，为什么不用二叉树？"></a>数据库索引的原理，为什么要用 B+树，为什么不用二叉树？</h1><p>可以从几个维度去看这个问题，查询是否够快，效率是否稳定，存储数据多少，以及查找磁盘次数，为什么不是二叉树，为什么不是平衡二叉树，为什么不是B树，而偏偏是B+树呢？</p><h2 id="为什么不是一般二叉树？"><a href="#为什么不是一般二叉树？" class="headerlink" title="为什么不是一般二叉树？"></a>为什么不是一般二叉树？</h2><p>如果二叉树特殊化为一个链表，相当于全表扫描。平衡二叉树相比于二叉查找树来说，查找效率更稳定，总体的查找速度也更快。</p><h2 id="为什么不是平衡二叉树呢？"><a href="#为什么不是平衡二叉树呢？" class="headerlink" title="为什么不是平衡二叉树呢？"></a>为什么不是平衡二叉树呢？</h2><p>我们知道，在内存比在磁盘的数据，查询效率快得多。如果树这种数据结构作为索引，那我们每查找一次数据就需要从磁盘中读取一个节点，也就是我们说的一个磁盘块，但是平衡二叉树可是每个节点只存储一个键值和数据的，如果是B树，可以存储更多的节点数据，树的高度也会降低，因此读取磁盘的次数就降下来啦，查询效率就快啦。</p><h2 id="那为什么不是B树而是B-树呢？"><a href="#那为什么不是B树而是B-树呢？" class="headerlink" title="那为什么不是B树而是B+树呢？"></a>那为什么不是B树而是B+树呢？</h2><ul><li><p>B+树非叶子节点上是不存储数据的，仅存储键值，而B树节点中不仅存储键值，也会存储数据。innodb中页的默认大小是16KB，如果不存储数据，那么就会存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树就会更矮更胖，如此一来我们查找数据进行磁盘的IO次数有会再次减少，数据查询的效率也会更快。</p></li><li><p>B+树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的，链表连着的。那么B+树使得范围查找，排序查找，分组查找以及去重查找变得异常简单。</p></li></ul><h1 id="聚集索引与非聚集索引的区别"><a href="#聚集索引与非聚集索引的区别" class="headerlink" title="聚集索引与非聚集索引的区别"></a>聚集索引与非聚集索引的区别</h1><ul><li>一个表中只能拥有一个聚集索引，而非聚集索引一个表可以存在多个。</li><li>聚集索引，索引中键值的逻辑顺序决定了表中相应行的物理顺序；非聚集索引，索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同。</li><li>索引是通过二叉树的数据结构来描述的，我们可以这么理解聚簇索引：索引的叶节点就是数据节点。而非聚簇索引的叶节点仍然是索引节点，只不过有一个指针指向对应的数据块。</li><li>聚集索引：物理存储按照索引排序；非聚集索引：物理存储不按照索引排序；</li></ul><h1 id="limit-1000000-加载很慢的话，你是怎么解决的呢？"><a href="#limit-1000000-加载很慢的话，你是怎么解决的呢？" class="headerlink" title="limit 1000000 加载很慢的话，你是怎么解决的呢？"></a>limit 1000000 加载很慢的话，你是怎么解决的呢？</h1><ul><li>方案一：如果id是连续的，可以这样，返回上次查询的最大记录(偏移量)，再往下limit</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id，name from employee where id&gt;1000000 limit 10.</span><br></pre></td></tr></table></figure><ul><li>方案二：在业务允许的情况下限制页数：</li></ul><p>建议跟业务讨论，有没有必要查这么后的分页啦。因为绝大多数用户都不会往后翻太多页。</p><ul><li>方案三：order by + 索引（id为索引）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id，name from employee order by id  limit 1000000，10</span><br></pre></td></tr></table></figure><ul><li>方案四：利用延迟关联或者子查询优化超多分页场景。（先快速定位需要获取的id段，然后再关联）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT a.* FROM employee a, (select id from employee where 条件 LIMIT 1000000,10 ) b where a.id=b.id</span><br></pre></td></tr></table></figure><h1 id="如何选择合适的分布式主键方案呢？"><a href="#如何选择合适的分布式主键方案呢？" class="headerlink" title="如何选择合适的分布式主键方案呢？"></a>如何选择合适的分布式主键方案呢？</h1><ul><li>数据库自增长序列或字段。</li><li>UUID</li><li>Redis生成ID</li><li>Twitter的snowflake算法</li><li>利用zookeeper生成唯一ID</li><li>MongoDB的ObjectId</li></ul><h1 id="事务的隔离级别有哪些？MySQL的默认隔离级别是什么？"><a href="#事务的隔离级别有哪些？MySQL的默认隔离级别是什么？" class="headerlink" title="事务的隔离级别有哪些？MySQL的默认隔离级别是什么？"></a>事务的隔离级别有哪些？MySQL的默认隔离级别是什么？</h1><ul><li>读未提交（Read Uncommitted）</li><li>读已提交（Read Committed）</li><li>可重复读（Repeatable Read）</li><li>串行化（Serializable）</li></ul><p>Mysql默认的事务隔离级别是可重复读(Repeatable Read)</p><h1 id="什么是幻读，脏读，不可重复读呢？"><a href="#什么是幻读，脏读，不可重复读呢？" class="headerlink" title="什么是幻读，脏读，不可重复读呢？"></a>什么是幻读，脏读，不可重复读呢？</h1><ul><li>事务A、B交替执行，事务A被事务B干扰到了，因为事务A读取到事务B未提交的数据,这就是<strong>脏读</strong></li><li>在一个事务范围内，两个相同的查询，读取同一条记录，却返回了不同的数据，这就是<strong>不可重复读</strong>。</li><li>事务A查询一个范围的结果集，另一个并发事务B往这个范围中插入/删除了数据，并静悄悄地提交，然后事务A再次查询相同的范围，两次读取得到的结果集不一样了，这就是<strong>幻读</strong>。</li></ul><h1 id="在高并发情况下，如何做到安全的修改同一行数据？"><a href="#在高并发情况下，如何做到安全的修改同一行数据？" class="headerlink" title="在高并发情况下，如何做到安全的修改同一行数据？"></a>在高并发情况下，如何做到安全的修改同一行数据？</h1><p>要安全的修改同一行数据，就要保证一个线程在修改时其它线程无法更新这行记录。一般有悲观锁和乐观锁两种方案~</p><h2 id="使用悲观锁"><a href="#使用悲观锁" class="headerlink" title="使用悲观锁"></a>使用悲观锁</h2><p>悲观锁思想就是，当前线程要进来修改数据时，别的线程都得拒之门外~ 比如，可以使用select…for update ~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from User where name = &apos;jay&apos; for update</span><br></pre></td></tr></table></figure><p>以上这条sql语句会锁定了User表中所有符合检索条件（name=’jay’）的记录。本次事务提交之前，别的线程都无法修改这些记录。</p><h2 id="使用乐观锁"><a href="#使用乐观锁" class="headerlink" title="使用乐观锁"></a>使用乐观锁</h2><p>乐观锁思想就是，有线程过来，先放过去修改，如果看到别的线程没修改过，就可以修改成功，如果别的线程修改过，就修改失败或者重试。实现方式：乐观锁一般会使用版本号机制或CAS算法实现。</p><h1 id="数据库的乐观锁和悲观锁。"><a href="#数据库的乐观锁和悲观锁。" class="headerlink" title="数据库的乐观锁和悲观锁。"></a>数据库的乐观锁和悲观锁。</h1><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>悲观锁她专一且缺乏安全感了，她的心只属于当前事务，每时每刻都担心着它心爱的数据可能被别的事务修改，所以一个事务拥有（获得）悲观锁后，其他任何事务都不能对数据进行修改啦，只能等待锁被释放才可以执行。</p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁的“乐观情绪”体现在，它认为数据的变动不会太频繁。因此，它允许多个事务同时对数据进行变动。实现方式：乐观锁一般会使用版本号机制或CAS算法实现。</p><h1 id="SQL优化的一般步骤是什么，怎么看执行计划（explain），如何理解其中各个字段的含义。"><a href="#SQL优化的一般步骤是什么，怎么看执行计划（explain），如何理解其中各个字段的含义。" class="headerlink" title="SQL优化的一般步骤是什么，怎么看执行计划（explain），如何理解其中各个字段的含义。"></a>SQL优化的一般步骤是什么，怎么看执行计划（explain），如何理解其中各个字段的含义。</h1><ul><li>show status 命令了解各种 sql 的执行频率</li><li>通过慢查询日志定位那些执行效率较低的 sql 语句</li><li>explain 分析低效 sql 的执行计划（这点非常重要，日常开发中用它分析Sql，会大大降低Sql导致的线上事故）</li></ul><h1 id="select-for-update有什么含义，会锁表还是锁行还是其他。"><a href="#select-for-update有什么含义，会锁表还是锁行还是其他。" class="headerlink" title="select for update有什么含义，会锁表还是锁行还是其他。"></a>select for update有什么含义，会锁表还是锁行还是其他。</h1><h2 id="select-for-update-含义"><a href="#select-for-update-含义" class="headerlink" title="select for update 含义"></a>select for update 含义</h2><p>select查询语句是不会加锁的，但是select for update除了有查询的作用外，还会加锁呢，而且它是悲观锁哦。至于加了是行锁还是表锁，这就要看是不是用了索引/主键啦。</p><p>没用索引/主键的话就是表锁，否则就是是行锁。</p><h2 id="select-for-update-加锁验证"><a href="#select-for-update-加锁验证" class="headerlink" title="select for update 加锁验证"></a>select for update 加锁验证</h2><p>没用索引/主键的话，select for update加的就是表锁</p><h1 id="MySQL事务得四大特性以及实现原理"><a href="#MySQL事务得四大特性以及实现原理" class="headerlink" title="MySQL事务得四大特性以及实现原理"></a>MySQL事务得四大特性以及实现原理</h1><ul><li>原子性： 事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</li><li>一致性： 指在事务开始之前和事务结束以后，数据不会被破坏，假如A账户给B账户转10块钱，不管成功与否，A和B的总金额是不变的。</li><li>隔离性： 多个事务并发访问时，事务之间是相互隔离的，即一个事务不影响其它事务运行效果。简言之，就是事务之间是进水不犯河水的。</li><li>持久性： 表示事务完成以后，该事务对数据库所作的操作更改，将持久地保存在数据库之中。</li></ul><h2 id="事务ACID特性的实现思想"><a href="#事务ACID特性的实现思想" class="headerlink" title="事务ACID特性的实现思想"></a>事务ACID特性的实现思想</h2><ul><li>原子性：是使用 undo log来实现的，如果事务执行过程中出错或者用户执行了rollback，系统通过undo log日志返回事务开始的状态。</li><li>持久性：使用 redo log来实现，只要redo log日志持久化了，当系统崩溃，即可通过redo log把数据恢复。</li><li>隔离性：通过锁以及MVCC,使事务相互隔离开。</li><li>一致性：通过回滚、恢复，以及并发情况下的隔离性，从而实现一致性。</li></ul><h1 id="如果某个表有近千万数据，CRUD比较慢，如何优化。"><a href="#如果某个表有近千万数据，CRUD比较慢，如何优化。" class="headerlink" title="如果某个表有近千万数据，CRUD比较慢，如何优化。"></a>如果某个表有近千万数据，CRUD比较慢，如何优化。</h1><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><p>某个表有近千万数据，可以考虑优化表结构，分表（水平分表，垂直分表），当然，你这样回答，需要准备好面试官问你的分库分表相关问题呀，如</p><ul><li>分表方案（水平分表，垂直分表，切分规则hash等）</li><li>分库分表中间件（Mycat，sharding-jdbc等）</li><li>分库分表一些问题（事务问题？跨节点Join的问题）</li><li>解决方案（分布式事务等）</li></ul><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><p>除了分库分表，优化表结构，当然还有所以索引优化等方案~</p><h1 id="如何写sql能够有效的使用到复合索引。"><a href="#如何写sql能够有效的使用到复合索引。" class="headerlink" title="如何写sql能够有效的使用到复合索引。"></a>如何写sql能够有效的使用到复合索引。</h1><p>复合索引，也叫组合索引，用户可以在多个列上建立索引,这种索引叫做复合索引。</p><p>当我们创建一个组合索引的时候，如(k1,k2,k3)，相当于创建了（k1）、(k1,k2)和(k1,k2,k3)三个索引，这就是最左匹配原则。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table where k1=A AND k2=B AND k3=D</span><br></pre></td></tr></table></figure><p>有关于复合索引，我们需要关注查询Sql条件的顺序，确保最左匹配原则有效，同时可以删除不必要的冗余索引。</p><h1 id="MVCC熟悉吗，它的底层原理？"><a href="#MVCC熟悉吗，它的底层原理？" class="headerlink" title="MVCC熟悉吗，它的底层原理？"></a>MVCC熟悉吗，它的底层原理？</h1><p>MVCC,多版本并发控制,它是通过读取历史版本的数据，来降低并发事务冲突，从而提高并发性能的一种机制。</p><h2 id="MVCC需要关注这几个知识点："><a href="#MVCC需要关注这几个知识点：" class="headerlink" title="MVCC需要关注这几个知识点："></a>MVCC需要关注这几个知识点：</h2><ul><li>事务版本号</li><li>表的隐藏列</li><li>undo log</li><li>read view</li></ul><h1 id="MYSQL的主从延迟，你怎么解决？"><a href="#MYSQL的主从延迟，你怎么解决？" class="headerlink" title="MYSQL的主从延迟，你怎么解决？"></a>MYSQL的主从延迟，你怎么解决？</h1><p>主从复制分了五个步骤进行：</p><ul><li>步骤一：主库的更新事件(update、insert、delete)被写到binlog</li><li>步骤二：从库发起连接，连接到主库。</li><li>步骤三：此时主库创建一个binlog dump thread，把binlog的内容发送到从库。</li><li>步骤四：从库启动之后，创建一个I/O线程，读取主库传过来的binlog内容并写入到relay log</li><li>步骤五：还会创建一个SQL线程，从relay log里面读取内容，从Exec_Master_Log_Pos位置开始执行读取到的更新事件，将更新内容写入到slave的db</li></ul><h2 id="主从同步延迟的原因"><a href="#主从同步延迟的原因" class="headerlink" title="主从同步延迟的原因"></a>主从同步延迟的原因</h2><p>一个服务器开放Ｎ个链接给客户端来连接的，这样有会有大并发的更新操作, 但是从服务器的里面读取binlog的线程仅有一个，当某个SQL在从服务器上执行的时间稍长 或者由于某个SQL要进行锁表就会导致，主服务器的SQL大量积压，未被同步到从服务器里。这就导致了主从不一致， 也就是主从延迟。</p><h2 id="主从同步延迟的解决办法"><a href="#主从同步延迟的解决办法" class="headerlink" title="主从同步延迟的解决办法"></a>主从同步延迟的解决办法</h2><ul><li>主服务器要负责更新操作，对安全性的要求比从服务器要高，所以有些设置参数可以修改，比如<code>sync_binlog=1</code>，<code>innodb_flush_log_at_trx_commit = 1</code> 之类的设置等。</li><li>选择更好的硬件设备作为slave。</li><li>把一台从服务器当度作为备份使用， 而不提供查询， 那边他的负载下来了， 执行relay log 里面的SQL效率自然就高了。</li><li>增加从服务器喽，这个目的还是分散读的压力，从而降低服务器负载。</li></ul><h1 id="什么是数据库连接池-为什么需要数据库连接池呢"><a href="#什么是数据库连接池-为什么需要数据库连接池呢" class="headerlink" title="什么是数据库连接池?为什么需要数据库连接池呢?"></a>什么是数据库连接池?为什么需要数据库连接池呢?</h1><p><strong>连接池基本原理</strong>： 数据库连接池原理：在内部对象池中，维护一定数量的数据库连接，并对外暴露数据库连接的获取和返回方法。</p><h2 id="应用程序和数据库建立连接的过程："><a href="#应用程序和数据库建立连接的过程：" class="headerlink" title="应用程序和数据库建立连接的过程："></a>应用程序和数据库建立连接的过程：</h2><ul><li>通过TCP协议的三次握手和数据库服务器建立连接</li><li>发送数据库用户账号密码，等待数据库验证用户身份</li><li>完成身份验证后，系统可以提交SQL语句到数据库执行</li><li>把连接关闭，TCP四次挥手告别。</li></ul><h2 id="数据库连接池好处："><a href="#数据库连接池好处：" class="headerlink" title="数据库连接池好处："></a>数据库连接池好处：</h2><ul><li>资源重用 (连接复用)</li><li>更快的系统响应速度</li><li>新的资源分配手段</li><li>统一的连接管理，避免数据库连接泄漏</li></ul><h1 id="一条SQL语句在MySQL中如何执行的？"><a href="#一条SQL语句在MySQL中如何执行的？" class="headerlink" title="一条SQL语句在MySQL中如何执行的？"></a>一条SQL语句在MySQL中如何执行的？</h1><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><ul><li>先检查该语句是否有权限</li><li>如果没有权限，直接返回错误信息</li><li>如果有权限，在 MySQL8.0 版本以前，会先查询缓存。</li><li>如果没有缓存，分析器进行词法分析，提取 sql 语句select等的关键元素。然后判断sql 语句是否有语法错误，比如关键词是否正确等等。</li><li>优化器进行确定执行方案</li><li>进行权限校验，如果没有权限就直接返回错误信息，如果有权限就会调用数据库引擎接口，返回执行结果。</li></ul><h1 id="InnoDB引擎中的索引策略，了解过吗？"><a href="#InnoDB引擎中的索引策略，了解过吗？" class="headerlink" title="InnoDB引擎中的索引策略，了解过吗？"></a>InnoDB引擎中的索引策略，了解过吗？</h1><ul><li>覆盖索引</li><li>最左前缀原则</li><li>索引下推</li></ul><p>索引下推优化是 MySQL 5.6 引入的， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><h1 id="数据库存储日期格式时，如何考虑时区转换问题？"><a href="#数据库存储日期格式时，如何考虑时区转换问题？" class="headerlink" title="数据库存储日期格式时，如何考虑时区转换问题？"></a>数据库存储日期格式时，如何考虑时区转换问题？</h1><ul><li><code>datetime</code>类型适合用来记录数据的原始的创建时间，修改记录中其他字段的值，<code>datetime</code>字段的值不会改变，除非手动修改它。</li><li><code>timestamp</code>类型适合用来记录数据的最后修改时间，只要修改了记录中其他字段的值，<code>timestamp</code>字段的值都会被自动更新。</li></ul><h1 id="一条sql执行过长的时间，你如何优化，从哪些方面入手？"><a href="#一条sql执行过长的时间，你如何优化，从哪些方面入手？" class="headerlink" title="一条sql执行过长的时间，你如何优化，从哪些方面入手？"></a>一条sql执行过长的时间，你如何优化，从哪些方面入手？</h1><ul><li>查看是否涉及多表和子查询，优化Sql结构，如去除冗余字段，是否可拆表等</li><li>优化索引结构，看是否可以适当添加索引</li><li>数量大的表，可以考虑进行分离/分表（如交易流水表）</li><li>数据库主从分离，读写分离</li><li>explain分析sql语句，查看执行计划，优化sql</li><li>查看mysql执行日志，分析是否有其他方面的问题</li></ul><h1 id="MYSQL数据库服务器性能分析的方法命令有哪些"><a href="#MYSQL数据库服务器性能分析的方法命令有哪些" class="headerlink" title="MYSQL数据库服务器性能分析的方法命令有哪些?"></a>MYSQL数据库服务器性能分析的方法命令有哪些?</h1><ul><li>Show status, 一些值得监控的变量值：</li></ul><blockquote><ul><li>Bytes_received和Bytes_sent 和服务器之间来往的流量。</li><li>Com_*服务器正在执行的命令。</li><li>Created_*在查询执行期限间创建的临时表和文件。</li><li>Handler_*存储引擎操作。</li><li>Select_*不同类型的联接执行计划。</li><li>Sort_*几种排序信息。</li></ul></blockquote><ul><li>Show profiles 是MySql用来分析当前会话SQL语句执行的资源消耗情况</li></ul><h1 id="Blob和text有什么区别？"><a href="#Blob和text有什么区别？" class="headerlink" title="Blob和text有什么区别？"></a>Blob和text有什么区别？</h1><ul><li>Blob用于存储二进制数据，而Text用于存储大字符串。</li><li>Blob值被视为二进制字符串（字节字符串）,它们没有字符集，并且排序和比较基于列值中的字节的数值。</li><li>text值被视为非二进制字符串（字符字符串）。它们有一个字符集，并根据字符集的排序规则对值进行排序和比较。</li></ul><h1 id="Mysql中有哪几种锁，列举一下？"><a href="#Mysql中有哪几种锁，列举一下？" class="headerlink" title="Mysql中有哪几种锁，列举一下？"></a>Mysql中有哪几种锁，列举一下？</h1><p>如果按锁粒度划分，有以下3种：</p><ul><li>表锁： 开销小，加锁快；锁定力度大，发生锁冲突概率高，并发度最低;不会出现死锁。</li><li>行锁： 开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高。</li><li>页锁： 开销和加锁速度介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般</li></ul><h1 id="Hash索引和B-树区别是什么？你在设计索引是怎么抉择的？"><a href="#Hash索引和B-树区别是什么？你在设计索引是怎么抉择的？" class="headerlink" title="Hash索引和B+树区别是什么？你在设计索引是怎么抉择的？"></a>Hash索引和B+树区别是什么？你在设计索引是怎么抉择的？</h1><ul><li>B+树可以进行范围查询，Hash索引不能。</li><li>B+树支持联合索引的最左侧原则，Hash索引不支持。</li><li>B+树支持order by排序，Hash索引不支持。</li><li>Hash索引在等值查询上比B+树效率更高。</li><li>B+树使用like 进行模糊查询的时候，like后面（比如%开头）的话可以起到优化的作用，Hash索引根本无法进行模糊查询。</li></ul><h1 id="mysql-的内连接、左连接、右连接有什么区别？"><a href="#mysql-的内连接、左连接、右连接有什么区别？" class="headerlink" title="mysql 的内连接、左连接、右连接有什么区别？"></a>mysql 的内连接、左连接、右连接有什么区别？</h1><ul><li>Inner join 内连接，在两张表进行连接查询时，只保留两张表中完全匹配的结果集</li><li>left join 在两张表进行连接查询时，会返回左表所有的行，即使在右表中没有匹配的记录。</li><li>right join 在两张表进行连接查询时，会返回右表所有的行，即使在左表中没有匹配的记录。</li></ul><h1 id="mysql有关权限的表有哪几个呢？"><a href="#mysql有关权限的表有哪几个呢？" class="headerlink" title="mysql有关权限的表有哪几个呢？"></a>mysql有关权限的表有哪几个呢？</h1><p>MySQL服务器通过权限表来控制用户对数据库的访问，权限表存放在mysql数据库里，由<code>mysql_install_db</code>脚本初始化。这些权限表分别<code>user</code>，<code>db</code>，<code>table_priv</code>，<code>columns_priv</code>和<code>host</code>。</p><ul><li><code>user</code>权限表：记录允许连接到服务器的用户帐号信息，里面的权限是全局级的。</li><li><code>db</code>权限表：记录各个帐号在各个数据库上的操作权限。</li><li><code>table_priv</code>权限表：记录数据表级的操作权限。</li><li><code>columns_priv</code>权限表：记录数据列级的操作权限。</li><li><code>host</code>权限表：配合db权限表对给定主机上数据库级操作权限作更细致的控制。这个权限表不受GRANT和REVOKE语句的影响。</li></ul><h1 id="Mysql的binlog有几种录入格式？分别有什么区别？"><a href="#Mysql的binlog有几种录入格式？分别有什么区别？" class="headerlink" title="Mysql的binlog有几种录入格式？分别有什么区别？"></a>Mysql的binlog有几种录入格式？分别有什么区别？</h1><p>有三种格式哈，statement，row和mixed。</p><ul><li>statement，每一条会修改数据的sql都会记录在binlog中。不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能。由于sql的执行是有上下文的，因此在保存的时候需要保存相关的信息，同时还有一些使用了函数之类的语句无法被记录复制。</li><li>row，不记录sql语句上下文相关信息，仅保存哪条记录被修改。记录单元为每一行的改动，基本是可以全部记下来但是由于很多操作，会导致大量行的改动(比如alter table)，因此这种模式的文件保存的信息太多，日志量太大。</li><li>mixed，一种折中的方案，普通操作使用statement记录，当无法使用statement的时候使用row。</li></ul><h1 id="InnoDB引擎的4大特性，了解过吗"><a href="#InnoDB引擎的4大特性，了解过吗" class="headerlink" title="InnoDB引擎的4大特性，了解过吗"></a>InnoDB引擎的4大特性，了解过吗</h1><ul><li>插入缓冲（insert buffer)</li><li>二次写(double write)</li><li>自适应哈希索引(ahi)</li><li>预读(read ahead)</li></ul><h1 id="索引有哪些优缺点？"><a href="#索引有哪些优缺点？" class="headerlink" title="索引有哪些优缺点？"></a>索引有哪些优缺点？</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>唯一索引可以保证数据库表中每一行的数据的唯一性</li><li>索引可以加快数据查询速度，减少查询时间</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>创建索引和维护索引要耗费时间</li><li>索引需要占物理空间，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间</li><li>以表中的数据进行增、删、改的时候，索引也要动态的维护。</li></ul><h1 id="索引有哪几种类型？"><a href="#索引有哪几种类型？" class="headerlink" title="索引有哪几种类型？"></a>索引有哪几种类型？</h1><ul><li>主键索引: 数据列不允许重复，不允许为NULL，一个表只能有一个主键。</li><li>唯一索引: 数据列不允许重复，允许为NULL值，一个表允许多个列创建唯一索引。</li><li>普通索引: 基本的索引类型，没有唯一性的限制，允许为NULL值。</li><li>全文索引：是目前搜索引擎使用的一种关键技术，对文本的内容进行分词、搜索。</li><li>覆盖索引：查询列要被所建的索引覆盖，不必读取数据行</li><li>组合索引：多列值组成一个索引，用于组合搜索，效率大于索引合并</li></ul><h1 id="创建索引有什么原则呢？"><a href="#创建索引有什么原则呢？" class="headerlink" title="创建索引有什么原则呢？"></a>创建索引有什么原则呢？</h1><ul><li>最左前缀匹配原则</li><li>频繁作为查询条件的字段才去创建索引</li><li>频繁更新的字段不适合创建索引</li><li>索引列不能参与计算，不能有函数操作</li><li>优先考虑扩展索引，而不是新建索引，避免不必要的索引</li><li>在order by或者group by子句中，创建索引需要注意顺序</li><li>区分度低的数据列不适合做索引列(如性别）</li><li>定义有外键的数据列一定要建立索引。</li><li>对于定义为text、image数据类型的列不要建立索引。</li><li>删除不再使用或者很少使用的索引</li></ul><h1 id="创建索引的三种方式"><a href="#创建索引的三种方式" class="headerlink" title="创建索引的三种方式"></a>创建索引的三种方式</h1><ul><li>在执行CREATE TABLE时创建索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `employee` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_name` (`name`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><ul><li>使用ALTER TABLE命令添加索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD INDEX index_name (column);</span><br></pre></td></tr></table></figure><ul><li>使用CREATE INDEX命令创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name ON table_name (column);</span><br></pre></td></tr></table></figure><h1 id="覆盖索引、回表等这些，了解过吗？"><a href="#覆盖索引、回表等这些，了解过吗？" class="headerlink" title="覆盖索引、回表等这些，了解过吗？"></a>覆盖索引、回表等这些，了解过吗？</h1><ul><li>覆盖索引： 查询列要被所建的索引覆盖，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖。</li><li>回表：二级索引无法直接查询所有列的数据，所以通过二级索引查询到聚簇索引后，再查询到想要的数据，这种通过二级索引查询出来的过程，就叫做回表。</li></ul><h1 id="为什么要使用视图？什么是视图？"><a href="#为什么要使用视图？什么是视图？" class="headerlink" title="为什么要使用视图？什么是视图？"></a>为什么要使用视图？什么是视图？</h1><h2 id="为什么要使用视图？"><a href="#为什么要使用视图？" class="headerlink" title="为什么要使用视图？"></a>为什么要使用视图？</h2><p>为了提高复杂SQL语句的复用性和表操作的安全性，MySQL数据库管理系统提供了视图特性。</p><h2 id="什么是视图？"><a href="#什么是视图？" class="headerlink" title="什么是视图？"></a>什么是视图？</h2><p>视图是一个虚拟的表，是一个表中的数据经过某种筛选后的显示方式，视图由一个预定义的查询select语句组成。</p><h1 id="视图有哪些特点？哪些使用场景？"><a href="#视图有哪些特点？哪些使用场景？" class="headerlink" title="视图有哪些特点？哪些使用场景？"></a>视图有哪些特点？哪些使用场景？</h1><h2 id="视图特点："><a href="#视图特点：" class="headerlink" title="视图特点："></a>视图特点：</h2><ul><li>视图的列可以来自不同的表，是表的抽象和在逻辑意义上建立的新关系。</li><li>视图是由基本表(实表)产生的表(虚表)。</li><li>视图的建立和删除不影响基本表。</li><li>对视图内容的更新(添加，删除和修改)直接影响基本表。</li><li>当视图来自多个基本表时，不允许添加和删除数据。</li></ul><h2 id="视图用途"><a href="#视图用途" class="headerlink" title="视图用途"></a>视图用途</h2><p>简化sql查询，提高开发效率，兼容老的表结构。</p><h2 id="视图的常见使用场景"><a href="#视图的常见使用场景" class="headerlink" title="视图的常见使用场景"></a>视图的常见使用场景</h2><ul><li>重用SQL语句；</li><li>简化复杂的SQL操作。</li><li>使用表的组成部分而不是整个表；</li><li>保护数据</li><li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li></ul><h1 id="MySQL中都有哪些触发器？"><a href="#MySQL中都有哪些触发器？" class="headerlink" title="MySQL中都有哪些触发器？"></a>MySQL中都有哪些触发器？</h1><p>MySQL 数据库中有六种触发器：</p><ul><li><code>Before Insert</code></li><li><code>After Insert</code></li><li><code>Before Update</code></li><li><code>After Update</code></li><li><code>Before Delete</code></li><li><code>After Delete</code></li></ul><h1 id="SQL-约束有哪几种呢？"><a href="#SQL-约束有哪几种呢？" class="headerlink" title="SQL 约束有哪几种呢？"></a>SQL 约束有哪几种呢？</h1><ul><li><code>NOT NULL</code>: 约束字段的内容一定不能为NULL。</li><li><code>UNIQUE</code>: 约束字段唯一性，一个表允许有多个 Unique 约束。</li><li><code>PRIMARY KEY</code>: 约束字段唯一，不可重复，一个表只允许存在一个。</li><li><code>FOREIGN KEY</code>: 用于预防破坏表之间连接的动作，也能防止非法数据插入外键。</li><li><code>CHECK</code>: 用于控制字段的值范围。</li></ul><h1 id="UNION与UNION-ALL的区别？"><a href="#UNION与UNION-ALL的区别？" class="headerlink" title="UNION与UNION ALL的区别？"></a>UNION与UNION ALL的区别？</h1><ul><li>Union：对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序；</li><li>Union All：对两个结果集进行并集操作，包括重复行，不进行排序；</li><li>UNION的效率高于 UNION ALL</li></ul><h1 id="SQL的生命周期？"><a href="#SQL的生命周期？" class="headerlink" title="SQL的生命周期？"></a>SQL的生命周期？</h1><ul><li>服务器与数据库建立连接</li><li>数据库进程拿到请求sql</li><li>解析并生成执行计划，执行</li><li>读取数据到内存，并进行逻辑处理</li><li>通过步骤一的连接，发送结果到客户端</li><li>关掉连接，释放资源</li></ul><h1 id="你是否做过主从一致性校验，如果有，怎么做的，如果没有，你打算怎么做？"><a href="#你是否做过主从一致性校验，如果有，怎么做的，如果没有，你打算怎么做？" class="headerlink" title="你是否做过主从一致性校验，如果有，怎么做的，如果没有，你打算怎么做？"></a>你是否做过主从一致性校验，如果有，怎么做的，如果没有，你打算怎么做？</h1><p>主从一致性校验有多种工具 例如checksum、mysqldiff、pt-table-checksum等</p><h1 id="你们数据库是否支持emoji表情存储，如果不支持，如何操作？"><a href="#你们数据库是否支持emoji表情存储，如果不支持，如何操作？" class="headerlink" title="你们数据库是否支持emoji表情存储，如果不支持，如何操作？"></a>你们数据库是否支持emoji表情存储，如果不支持，如何操作？</h1><p>更换字符集utf8–&gt;utf8mb4</p><h1 id="一个6亿的表a，一个3亿的表b，通过外间tid关联，你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。"><a href="#一个6亿的表a，一个3亿的表b，通过外间tid关联，你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。" class="headerlink" title="一个6亿的表a，一个3亿的表b，通过外间tid关联，你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。"></a>一个6亿的表a，一个3亿的表b，通过外间tid关联，你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。</h1><ul><li>如果A表TID是自增长,并且是连续的,B表的ID为索引 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from a,b where a.tid = b.id and a.tid&gt;500000 limit 200;</span><br></pre></td></tr></table></figure><ul><li>如果A表的TID不是连续的,那么就需要使用覆盖索引.TID要么是主键,要么是辅助索引,B表ID也需要有索引。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from b , (select tid from a limit 50000,200) a where b.id = a .tid;</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="https://juejin.im/post/5de99dd2518825125e1ba49d" target="_blank" rel="noopener">后端程序员必备：索引失效的十大杂症</a></li><li><a href="https://juejin.im/post/5e8b269f518825739379e82c" target="_blank" rel="noopener">手把手教你分析Mysql死锁问题</a></li><li><a href="https://juejin.im/post/5ea16dede51d45470b4ffc5b" target="_blank" rel="noopener">没内鬼，来点干货！SQL优化和诊断</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址:&lt;a href=&quot;https://juejin.im/post/5ec15ab9f265da7bc60e1910&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;100道MySQL数据库经典面试题解析（收藏版）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="MySQL" scheme="http://blog.caoxl.com/tags/MySQL/"/>
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>三年 Git 使用心得 &amp; 常见问题整理</title>
    <link href="http://blog.caoxl.com/2020/06/15/Git-Use-Notes/"/>
    <id>http://blog.caoxl.com/2020/06/15/Git-Use-Notes/</id>
    <published>2020-06-15T07:45:01.000Z</published>
    <updated>2020-06-15T09:45:54.820Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>原文地址 <a href="https://juejin.im/post/5ee649ff51882542ea2b5108" target="_blank" rel="noopener">三年 Git 使用心得 &amp; 常见问题整理</a></p></blockquote><a id="more"></a><h1 id="Git-流程图"><a href="#Git-流程图" class="headerlink" title="Git 流程图"></a>Git 流程图</h1><p><img src="http://caoxl.com/imgs/git.jpg" alt="git 流程图"></p><ul><li><code>Workspace</code>: 工作区</li><li><code>Index/Stage</code>: 暂存区</li><li><code>Repository</code>: 仓库区(或本地仓库)</li><li><code>Remote</code>: 远程仓库</li></ul><h1 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 配置全局用户</span></span><br><span class="line">git config --global user.name "用户名"</span><br><span class="line">git config --global user.email "git账号"</span><br><span class="line"></span><br><span class="line"><span class="section"># 美化log的输出, 并配置别名</span></span><br><span class="line">alias gll="git log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'";</span><br><span class="line"></span><br><span class="line"><span class="section"># 删除全局配置</span></span><br><span class="line">git config --global --unset alias.xxx</span><br><span class="line">git config --global --unset user.xxx</span><br></pre></td></tr></table></figure><h1 id="查看-Git-信息"><a href="#查看-Git-信息" class="headerlink" title="查看 Git 信息"></a>查看 Git 信息</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看系统配置</span></span><br><span class="line">git<span class="built_in"> config </span>--list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户配置</span></span><br><span class="line">cat ~/.gitconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前项目的git配置</span></span><br><span class="line">cat .git/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看暂存区的文件</span></span><br><span class="line">git ls-files</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地git命令历史</span></span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有git命令</span></span><br><span class="line">git --help -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前HEAD指向</span></span><br><span class="line">cat .git/HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line">git log --online</span><br><span class="line">        <span class="attribute">--grep</span>=<span class="string">"关键字"</span></span><br><span class="line">        --author <span class="string">"username"</span></span><br><span class="line">        --before 1 day/1 week/1 <span class="string">"2020-06-15"</span></span><br></pre></td></tr></table></figure><h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">cbff89f (HEAD -&gt; master, origin/master) HEAD@&#123;0&#125;: commit: Laravel7 初始化</span><br><span class="line">8b1a09f HEAD@&#123;1&#125;: commit: Laravel7 初始化</span><br><span class="line">c6dcc6b HEAD@&#123;2&#125;: commit: test jenkins</span><br><span class="line">f76c78d HEAD@&#123;3&#125;: commit (initial): Laravel7 初始化</span><br></pre></td></tr></table></figure><ul><li>显示的是一个 <code>HEAD</code> 指向发生改变的时间列表。在你切换分支、用 <code>git commit</code> 进行提交、以及用 <code>git reset</code> 撤销 <code>commit</code> 时，<code>HEAD</code> 指向会改变，但当你进行 <code>git checkout -- &lt;filename&gt;</code> 撤销或者 <code>git stash</code>  存储文件等操作时，<code>HEAD</code> 并不会改变，这些修改从来没有被提交过，因此 <code>reflog</code> 也无法帮助我们恢复它们。</li><li><code>git reflog</code> 不会永远保持，Git 会定期清理那些 “用不到的” 对象，不要指望几个月前的提交还一直在那里。</li></ul><h2 id="git-log-点线图"><a href="#git-log-点线图" class="headerlink" title="git log 点线图"></a>git log 点线图</h2><ul><li>git 中一条分支就是一个指针，新建一条分支就是基于当前指针新建一个指针</li><li>切换至某个分支 ，就是将 HEAD 指向某条分支（指针）</li><li><p>切换至某个 commit ，就是将 HEAD 指向某个 commit</p></li><li><p>符号解释：</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span>表示一个 commit</span><br><span class="line">|表示分支前进</span><br><span class="line">/表示分叉</span><br><span class="line">\表示合入</span><br><span class="line">|/表示新分支</span><br></pre></td></tr></table></figure><h1 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h1><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看工作区和暂存区的状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="meta"># 将工作区的文件提交到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="meta"># 提交到本地仓库</span></span><br><span class="line">git commit -m <span class="string">"本次提交说明"</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># add和commit的合并，便捷写法（未追踪的文件无法直接提交到暂存区/本地仓库）</span></span><br><span class="line">git commit -am <span class="string">"本次提交说明"</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 将本地分支和远程分支进行关联</span></span><br><span class="line">git push -u origin branch_name</span><br><span class="line"></span><br><span class="line"><span class="meta"># 将本地仓库的文件推送到远程分支</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="meta"># 拉取远程分支的代码</span></span><br><span class="line">git pull origin branch_name</span><br><span class="line"></span><br><span class="line"><span class="meta"># 合并分支</span></span><br><span class="line">git merge branch_name</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="meta"># 切换分支</span></span><br><span class="line">git checkout branch_name</span><br><span class="line"></span><br><span class="line"><span class="meta"># 临时将工作区文件的修改保存至堆栈中</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="meta"># 将之前保存至堆栈中的文件取出来</span></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h1 id="Git-常用命令详解"><a href="#Git-常用命令详解" class="headerlink" title="Git 常用命令详解"></a>Git 常用命令详解</h1><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p>将工作区的文件添加到暂存区</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区(追踪新增的指定文件)</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> [file1] [file2] ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区, 包括子目录</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> [dir]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区(追踪所有新增的文件)</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区/暂存区的文件</span></span><br><span class="line">git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名工作区/暂存区的文件</span></span><br><span class="line">git mv [file-origine] [file-renamed]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Git 2.0 以下版本</span></span><br><span class="line"><span class="comment"># 只作用于文件的新增和修改</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br><span class="line"><span class="comment"># 只作用于文件的修改和删除</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> -u</span></span><br><span class="line"><span class="comment"># 作用于文件的增删改</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> -A</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Git 2.0版本</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> . // 等价于 git add -A</span></span><br></pre></td></tr></table></figure><ul><li><code>git add .</code> ：操作的对象是“当前目录”所有文件变更，”.” 表示当前目录。会监控工作区的状态树，使用它会把工作区的所有变化提交到暂存区，包括文件内容修改（<code>modified</code>）以及新文件（<code>new</code>），但不包括被删除的文件。</li><li><code>git add -u</code> ：操作的对象是整个工作区已经跟踪的文件变更，无论当前位于哪个目录下。仅监控已经被 add 的文件（即 <code>tracked file</code>），它会将被修改的文件（包括文件删除）提交到暂存区。<code>git add -u</code> 不会提交新文件（<code>untracked file</code>）。（<code>git add --update</code> 的缩写）</li><li><code>git add -A</code> ：操作的对象是“整个工作区”所有文件的变更，无论当前位于哪个目录下。是上面两个功能的合集（<code>git add --all</code> 的缩写）。</li></ul><h2 id="status"><a href="#status" class="headerlink" title="status"></a>status</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 查看工作区和暂存区的状态</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将暂存区的文件提交到本地仓库并添加提交说明</span></span><br><span class="line">git <span class="keyword">commit</span> -m <span class="string">"本次提交的说明"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add 和 commit 的合并，便捷写法</span></span><br><span class="line">git <span class="keyword">commit</span> -am <span class="string">"本次提交的说明"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过验证继续提交</span></span><br><span class="line">git <span class="keyword">commit</span> <span class="comment">--no-verify</span></span><br><span class="line">git <span class="keyword">commit</span> -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑器会弹出上一次提交的信息，可以在这里修改提交信息</span></span><br><span class="line">git <span class="keyword">commit</span> <span class="comment">--amend</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修复提交, 同时修改提交信息</span></span><br><span class="line">git <span class="keyword">commit</span> <span class="comment">--amend -m "本次提交的说明"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入 --no-edit 标记会修复提交但不修改提交信息, 编辑器不会弹出上一次提交的信息</span></span><br><span class="line">git <span class="keyword">commit</span> <span class="comment">--amend --no-edit</span></span><br></pre></td></tr></table></figure><h2 id="push-amp-pull"><a href="#push-amp-pull" class="headerlink" title="push &amp; pull"></a>push &amp; pull</h2><ul><li>分支推送顺序的写法是 <strong>&lt;来源地&gt;:&lt;目的地&gt;</strong></li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 将本地仓库的文件推送到远程分支</span></span><br><span class="line"><span class="meta"># 如果远程仓库没有这个分支，会新建一个同名的远程分支</span></span><br><span class="line"><span class="meta"># 如果省略远程分支名，则表示两者同名</span></span><br><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line">git push origin branch_name</span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果省略本地分支名，则表示删除指定的远程分支</span></span><br><span class="line"><span class="meta"># 因为这等同于推送一个空的本地分支到远程分支。</span></span><br><span class="line">git push origin :branch_name</span><br><span class="line"><span class="meta"># 等同于</span></span><br><span class="line">git push origin --delete branch_name</span><br><span class="line"></span><br><span class="line"><span class="meta"># 建立当前分支和远程分支的追踪关系</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="meta"># 如果当前分支与远程分支存在追踪关系则可以省略分支和 -u </span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="meta"># 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机</span></span><br><span class="line">git push --all origin</span><br><span class="line"></span><br><span class="line"><span class="meta"># 拉取所有远程分支到本地镜像仓库中</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="meta"># 拉取并合并项目其他人员的一个分支</span></span><br><span class="line">git pull origin branch_name</span><br><span class="line"><span class="meta"># 等同于 fetch + merge</span></span><br><span class="line">git fetch origin branch_name</span><br><span class="line">git merge origin/branch_name</span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果远程主机的版本比本地版本更新，推送时 Git 会报错，要求先在本地做 git pull 合并差异，</span></span><br><span class="line"><span class="meta"># 然后再推送到远程主机。这时，如果你一定要推送，可以使用 –-force 选项 </span></span><br><span class="line"><span class="meta"># (尽量避免使用)</span></span><br><span class="line">git push --force origin</span><br><span class="line"><span class="meta"># 或</span></span><br><span class="line">git push -f orign</span><br></pre></td></tr></table></figure><h2 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看本地分支</span></span><br><span class="line">git branch | git branch -l</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看所有分支(本地分支+远程分支)</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看所有分支并带上最新的提交信息</span></span><br><span class="line">git branch -av</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看本地分支对应的远程分支</span></span><br><span class="line">git branch -vv</span><br><span class="line"></span><br><span class="line"><span class="meta"># 新建分支</span></span><br><span class="line"><span class="meta"># 在别的分支下新建一个分支，新分支会复制当前分支的内容</span></span><br><span class="line"><span class="meta"># 注意：如果当前分支有修改，但是没有提交到仓库，此时修改的内容是不会被复制到新分支的</span></span><br><span class="line">git branch branch_name</span><br><span class="line"></span><br><span class="line"><span class="meta"># 切换分支(切换分支时，本地工作区，仓库都会相应切换到对应分支的内容)</span></span><br><span class="line">git checkout branch_name</span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建一个 caoxl 分支，并切换到该分支 （新建分支和切换分支的简写）</span></span><br><span class="line">git checkout -b caoxl</span><br><span class="line"></span><br><span class="line"><span class="meta"># 可以看做是基于 master 分支创建一个 caoxl 分支，并切换到该分支</span></span><br><span class="line">git checkout -b caoxl master</span><br><span class="line"></span><br><span class="line"><span class="meta"># 新建一条空分支（详情请看问题列表）</span></span><br><span class="line">git checkout --orphan empty_branch_name</span><br><span class="line">git rm -rf .</span><br><span class="line"></span><br><span class="line"><span class="meta"># 删除本地分支, 会阻止删除保护未合并更改的分支</span></span><br><span class="line">git branch -D branch_name</span><br><span class="line"></span><br><span class="line"><span class="meta"># 删除远程分支</span></span><br><span class="line"><span class="meta"># 推送一个空分支到远程分支，其实就相当于删除远程分支</span></span><br><span class="line">git push orign :远程分支名</span><br><span class="line"><span class="meta"># 或者</span></span><br><span class="line">git push origin --delete 远程分支名</span><br><span class="line"></span><br><span class="line"><span class="meta"># 修改当前分支名</span></span><br><span class="line">git branch -m branch_name</span><br></pre></td></tr></table></figure><h2 id="merge-三种常用合并方法"><a href="#merge-三种常用合并方法" class="headerlink" title="merge 三种常用合并方法"></a>merge 三种常用合并方法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 默认 fast-forward ，HEAD 指针直接指向被合并的分支</span></span><br><span class="line">git merge</span><br><span class="line"></span><br><span class="line"><span class="section"># 禁止快进式合并</span></span><br><span class="line">git merge --no-ff</span><br><span class="line"> </span><br><span class="line">git merge --squash</span><br></pre></td></tr></table></figure><p><img src="http://caoxl.com/imgs/git_merge.jpg" alt="git merge"></p><ul><li><code>fast-forward</code>：会在当前分支的提交历史中添加进被合并分支的提交历史（<strong>得先理解什么时候会发生快速合并，并不是每次 merge 都会发生快速合并</strong>）；</li><li><code>--no-ff</code>：会生成一个新的提交，让当前分支的提交历史不会那么乱；</li><li><code>--squash</code>：不会生成新的提交，会将被合并分支多次提交的内容直接存到工作区和暂存区，由开发者手动去提交，这样当前分支最终只会多出一条提交记录，不会掺杂被合并分支的提交历史</li></ul><h2 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h2><ul><li>能够将所有未提交的修改保存至堆栈中，用于后续恢复当前工作区内容</li><li>如果文件没有提交到暂存区（<strong>使用 git add . 追踪新的文件</strong>），使用该命令会提示 <code>No local changes to save</code> ，无法将修改保存到堆栈中</li></ul><blockquote><p><strong>使用场景</strong>： 当你接到一个修复紧急 bug 的任务时候，一般都是先创建一个新的 bug 分支来修复它，然后合并，最后删除。但是，如果当前你正在开发功能中，短时间还无法完成，无法直接提交到仓库，这时候可以先把当前工作区的内容 <code>git stash</code> 一下，然后去修复 bug，修复后，再 <code>git stash pop</code>，恢复之前的工作内容。</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 将所有未提交的修改（提交到暂存区）保存至堆栈中</span></span><br><span class="line">git stash</span><br><span class="line"><span class="meta"># 给本次存储加个备注, 以防时间久了忘了</span></span><br><span class="line">git stash save <span class="string">"存储"</span></span><br><span class="line"><span class="meta"># 存储未追踪的文件</span></span><br><span class="line">git stash -u</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看存储记录</span></span><br><span class="line">git stash list</span><br></pre></td></tr></table></figure><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看工作区和暂存区单个文件的对比</span></span><br><span class="line">git <span class="keyword">diff </span>filename</span><br><span class="line"><span class="comment"># 查看工作区和暂存区所有文件的对比</span></span><br><span class="line">git <span class="keyword">diff</span></span><br><span class="line"><span class="keyword"># </span>查看工作区和暂存区所有文件的对比，并显示出所有有差异的文件列表</span><br><span class="line">git <span class="keyword">diff </span>--stat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看暂存区与上次提交到本地仓库的快照（即最新提交到本地仓库的快照）的对比</span></span><br><span class="line">git <span class="keyword">diff </span>--<span class="keyword">cached/--staged</span></span><br><span class="line"><span class="keyword"># </span>查看工作区与上次提交到本地仓库的快照（即最新提交到本地仓库的快照）的对比</span><br><span class="line">git <span class="keyword">diff </span><span class="keyword">branch_name</span></span><br><span class="line"><span class="keyword"># </span>查看工作区与 HEAD 指向（默认当前分支最新的提交）的对比</span><br><span class="line">git <span class="keyword">diff </span>HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看两个commit的对比</span></span><br><span class="line">git <span class="keyword">diff </span>commit1..commit2</span><br></pre></td></tr></table></figure><h2 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有远程主机</span></span><br><span class="line"><span class="string">git </span><span class="string">remote</span></span><br><span class="line"><span class="string">#</span> 查看关联的远程仓库的详细信息</span><br><span class="line"><span class="string">git </span><span class="string">remote </span>-v</span><br><span class="line"><span class="comment"># 删除远程仓库的"关联"</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span><span class="string">rm </span><span class="string">projectname</span></span><br><span class="line"><span class="string">#</span> 设置远程仓库的<span class="string">"关联"</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span>&lt;<span class="string">newurl&gt;</span></span><br></pre></td></tr></table></figure><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 默认在 HEAD 上创建一个标签 </span></span><br><span class="line">git tag v1.0</span><br><span class="line"></span><br><span class="line"><span class="section"># 指定一个 commit id 创建一个标签 </span></span><br><span class="line">git tag v0.9 f52c633</span><br><span class="line"></span><br><span class="line"><span class="section"># 创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字</span></span><br><span class="line">git tag -a v0.1 -m "version 0.1 released" </span><br><span class="line"></span><br><span class="line"><span class="section"># 查看所有标签</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="section"># 查看单个标签具体信息</span></span><br><span class="line">git show <span class="xml"><span class="tag">&lt;<span class="name">tagname</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="section"># 推送一个本地标签</span></span><br><span class="line">git push origin <span class="xml"><span class="tag">&lt;<span class="name">tagname</span>&gt;</span></span></span><br><span class="line"><span class="section"># 推送全部未推送的本地标签</span></span><br><span class="line">git push origin --tags</span><br><span class="line"></span><br><span class="line"><span class="section"># 删除本地标签</span></span><br><span class="line">git tag -d v0.1</span><br><span class="line"><span class="section"># 因为创建的标签都只存储在本地，不会自动推送到远程。</span></span><br><span class="line"><span class="section"># 所以，打错的标签可以在本地安全删除。</span></span><br><span class="line">git tag -d v0.1</span><br><span class="line"><span class="section"># 删除一个远程标签（先删除本地 tag ，然后再删除远程 tag）</span></span><br><span class="line">git push origin :refs/tags/<span class="xml"><span class="tag">&lt;<span class="name">tagname</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 生成一个撤销最近的一次提交的新提交</span></span><br><span class="line">git revert HEAD</span><br><span class="line"> </span><br><span class="line"><span class="section"># 生成一个撤销最近一次提交的上一次提交的新提交</span></span><br><span class="line">git revert HEAD^</span><br><span class="line"> </span><br><span class="line"><span class="section"># 生成一个撤销最近一次提交的上两次提交的新提交</span></span><br><span class="line">git revert HEAD^^</span><br><span class="line"> </span><br><span class="line"><span class="section"># 生成一个撤销最近一次提交的上n次提交的新提交</span></span><br><span class="line">git revert HEAD~num </span><br><span class="line"></span><br><span class="line"><span class="section"># 生成一个撤销指定提交版本的新提交</span></span><br><span class="line">git revert <span class="xml"><span class="tag">&lt;<span class="name">commit_id</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section"># 生成一个撤销指定提交版本的新提交，执行时不打开默认编辑器，直接使用 Git 自动生成的提交信息</span></span><br><span class="line">git revert <span class="xml"><span class="tag">&lt;<span class="name">commit_id</span>&gt;</span></span> --no-edit</span><br></pre></td></tr></table></figure><h1 id="新建一个-Git-项目的两种方式"><a href="#新建一个-Git-项目的两种方式" class="headerlink" title="新建一个 Git 项目的两种方式"></a>新建一个 Git 项目的两种方式</h1><h2 id="本地新建好-Git-项目，然后关联远程仓库"><a href="#本地新建好-Git-项目，然后关联远程仓库" class="headerlink" title="本地新建好 Git 项目，然后关联远程仓库"></a>本地新建好 Git 项目，然后关联远程仓库</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化一个Git仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联远程仓库</span></span><br><span class="line">git remote <span class="keyword">add</span><span class="bash"> &lt;name&gt; &lt;git-repo-url&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">git remote <span class="keyword">add</span><span class="bash"> origin https://github.com/xxxxxx</span></span><br></pre></td></tr></table></figure><h2 id="clone-远程仓库"><a href="#clone-远程仓库" class="headerlink" title="clone 远程仓库"></a>clone 远程仓库</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 新建好远程仓库，然后 clone 到本地</span></span><br><span class="line">git clone <span class="xml"><span class="tag">&lt;<span class="name">git-repo-url</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section"># 将远程仓库下载到（当前 git bash 启动位置下面的）指定文件中，如果没有会自动生成</span></span><br><span class="line">git clone <span class="xml"><span class="tag">&lt;<span class="name">git-repo-url</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;<span class="name">project-name</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="Git-钩子"><a href="#Git-钩子" class="headerlink" title="Git 钩子"></a>Git 钩子</h1><h2 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h2><ul><li><code>pre-commit</code> 就是在代码提交之前做些东西，比如代码打包，代码检测，称之为钩子（<code>hook</code>）</li><li>在 <code>commit</code> 之前执行一个函数（<code>callback</code>）。这个函数成功执行完之后，再继续 <code>commit</code>，但是失败之后就阻止 <code>commit</code></li><li>在 <code>.git/hooks/</code>下面有个 <code>pre-commit.sample*</code> ，这个里面就是默认的函数(脚本)样本</li></ul><h2 id="安装-pre-commit"><a href="#安装-pre-commit" class="headerlink" title="安装 pre-commit"></a>安装 pre-commit</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pre-commit --save-dev</span><br></pre></td></tr></table></figure><h2 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h2><p>如果没有在 <code>.git/hooks</code> 目录下生成 <code>pre-commit</code> 文件的话，则要手工创建 <code>node ./node_modules/pre-commit/install.js</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line"><span class="code">    "build": "tsc",</span></span><br><span class="line"><span class="code">    "eslint": "eslint src --ext .ts",</span></span><br><span class="line"><span class="code">    "eslint:fix": "eslint src --ext .ts --fix"</span></span><br><span class="line">  &#125;,</span><br><span class="line"> //在提交代码之前，先执行 scripts 中的 eslint 命令 </span><br><span class="line">  "pre-commit": [</span><br><span class="line"><span class="code">    "eslint"</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h2 id="跳过-pre-commit-继续提交代码"><a href="#跳过-pre-commit-继续提交代码" class="headerlink" title="跳过 pre-commit 继续提交代码"></a>跳过 pre-commit 继续提交代码</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 跳过验证</span></span><br><span class="line">git commit --no-verify</span><br><span class="line">git commit -n</span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="将本地新建的项目上传到新建的远程仓库上"><a href="#将本地新建的项目上传到新建的远程仓库上" class="headerlink" title="将本地新建的项目上传到新建的远程仓库上"></a>将本地新建的项目上传到新建的远程仓库上</h2><p>之前没有进行过关联，即没有通过 clone 远程项目到本地再开始做项目，而是先本地新建了一个项目，然后想传到远程仓库上。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 将本地仓库和远程仓库关联起来</span></span><br><span class="line">git remote add origin 远程仓库地址</span><br><span class="line"></span><br><span class="line"><span class="section"># 将本地的 master 分支推送到 origin 主机，同时指定 origin 为默认主机</span></span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"><span class="section"># 上面的命名执行后，下次再从本地库上传内容的时候只需下面这样就可以了</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="不小心把某些文件上传到远程-git-仓库-想要删除远程仓库中的文件"><a href="#不小心把某些文件上传到远程-git-仓库-想要删除远程仓库中的文件" class="headerlink" title="不小心把某些文件上传到远程 git 仓库/想要删除远程仓库中的文件"></a>不小心把某些文件上传到远程 git 仓库/想要删除远程仓库中的文件</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 删除暂存区和工作区的文件</span></span><br><span class="line">git rm filename</span><br><span class="line"></span><br><span class="line"><span class="section"># 只删除暂存区的文件, 不会删除工作区的文件</span></span><br><span class="line">git rm --cached filename</span><br></pre></td></tr></table></figure><h2 id="每次-git-push-都要输入用户名、密码"><a href="#每次-git-push-都要输入用户名、密码" class="headerlink" title="每次 git push 都要输入用户名、密码"></a>每次 git push 都要输入用户名、密码</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 生成公钥</span></span><br><span class="line">ssh-keygen -t rsa -C "xxxxx@xxxxx.com"</span><br><span class="line"></span><br><span class="line"><span class="section"># 查看已生成的公钥</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"><span class="section"># 复制已生成的公钥添加到 git 服务器</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 测试ssh是否能够连接成功</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line"><span class="section"># 设置远程仓库</span></span><br><span class="line">git remote set-url origin git@xxx.com/xxx.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址 &lt;a href=&quot;https://juejin.im/post/5ee649ff51882542ea2b5108&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;三年 Git 使用心得 &amp;amp; 常见问题整理&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Git" scheme="http://blog.caoxl.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>使用 Gitlab+Jenkins 实现自动化构建</title>
    <link href="http://blog.caoxl.com/2020/06/03/Gitlab-Jenkins-AutoBuild/"/>
    <id>http://blog.caoxl.com/2020/06/03/Gitlab-Jenkins-AutoBuild/</id>
    <published>2020-06-03T01:20:01.000Z</published>
    <updated>2020-06-04T06:22:29.988Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>使用 Gitlab+Jenkins 实现自动化构建</p></blockquote><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="Jenkins-密钥配置"><a href="#Jenkins-密钥配置" class="headerlink" title="Jenkins 密钥配置"></a>Jenkins 密钥配置</h2><ul><li>设置jenkins的shell终端为/bin/bash</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# grep jenkins /etc/passwd</span><br><span class="line">jenkins:x:990:987:Jenkins Automation Server:/var/lib/jenkins:/bin/false</span><br></pre></td></tr></table></figure><ul><li>登录到jenkins用户生成密钥</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# su - jenkins</span><br><span class="line">Last login: Wed Jun  3 15:27:02 CST 2020 on pts/3</span><br><span class="line">[root@caoxl ~]# ssh-keygen -t rsa</span><br><span class="line">[root@caoxl ~]# cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>添加公钥到gitlab服务器，用来clone代码</li><li>添加完成之后从gitlab服务器clone下自己的工程，会在.ssh/known_hosts添加gitlab服务器记录</li><li>添加公钥到jenkins服务器root用户，用来执行部署脚本</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 输入以下, 并且输入服务器密码即可</span><br><span class="line">[root@caoxl ~]# ssh-copy-id -i .ssh/id_rsa.pub root@47.107.169.233</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: ".ssh/id_rsa.pub"</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@47.107.169.233's password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   "ssh 'root@47.107.169.233'"</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><h2 id="准备一个脚本"><a href="#准备一个脚本" class="headerlink" title="准备一个脚本"></a>准备一个脚本</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl deploy]# cat /shell/deploy/jenkins_deploy.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo "部署脚本被执行"</span><br></pre></td></tr></table></figure><p>注意：如果是生产配置，直接把这个脚本换成对应项目的上线脚本即可，jenkins配置无须修改。</p><ul><li>正式脚本</li></ul><blockquote><p>/bin/sh /shell/deploy/jenkins_deploy.sh ${WORKSPACE} ${JOB_NAME} ${BUILD_NUMBER}</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /$&#123;WORKSPACE&#125;</span><br><span class="line">tar -zcvf /var/www/code<span class="emphasis">_backup/$&#123;JOB_</span>NAME&#125;<span class="emphasis">_$&#123;BUILD_</span>NUMBER&#125;.tar.gz $&#123;JOB_NAME&#125;</span><br><span class="line">tar -zcvf /var/www/code<span class="emphasis">_backup/$&#123;JOB_</span>NAME&#125;<span class="emphasis">_$&#123;BUILD_</span>NUMBER&#125;_bak.tar.gz /var/www/lumen6.caoxl.com</span><br><span class="line">mv /var/www/code<span class="emphasis">_backup/$&#123;JOB_</span>NAME&#125;<span class="emphasis">_$&#123;BUILD_</span>NUMBER&#125;.tar.gz /var/www/</span><br><span class="line">cd /var/www/</span><br><span class="line">tar -zxvf $&#123;JOB<span class="emphasis">_NAME&#125;_</span>$&#123;BUILD_NUMBER&#125;.tar.gz</span><br><span class="line">rm $&#123;JOB<span class="emphasis">_NAME&#125;_</span>$&#123;BUILD_NUMBER&#125;.tar.gz</span><br><span class="line">chown -Rf www:www *</span><br></pre></td></tr></table></figure><h1 id="Jenkins-触发式构建"><a href="#Jenkins-触发式构建" class="headerlink" title="Jenkins 触发式构建"></a>Jenkins 触发式构建</h1><blockquote><p>用于开发环境部署，开发人员push代码或者合并代码到gitlab项目的master分支，jenkins就部署代码到对应服务器。</p></blockquote><h1 id="Jenkins-参数化构建"><a href="#Jenkins-参数化构建" class="headerlink" title="Jenkins 参数化构建"></a>Jenkins 参数化构建</h1><blockquote><p>用于测试环境预上线环境部署，开发push代码或者合并代码到gitlab项目的master分支之后，并不会部署代码，而是需要登录到jenkins的web界面，点击构建按钮，传入对应的参数（比如参数需要构建的tag，需要部署的分支）然后才会部署。</p></blockquote><h1 id="Jenkins-定时构建"><a href="#Jenkins-定时构建" class="headerlink" title="Jenkins 定时构建"></a>Jenkins 定时构建</h1><blockquote><p>用于APP自动打包，定时构建是在参数化构建的基础上添加的，开发人员可以登录jenkins手动传入tag进行打包，如果不手动打包，那么jenkins就每天凌晨从gitlab拉取最新的APP代码打包。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用 Gitlab+Jenkins 实现自动化构建&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Gitlab" scheme="http://blog.caoxl.com/tags/Gitlab/"/>
    
      <category term="Jenkins" scheme="http://blog.caoxl.com/tags/Jenkins/"/>
    
      <category term="自动化构建" scheme="http://blog.caoxl.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 安装部署 Jenkins</title>
    <link href="http://blog.caoxl.com/2020/06/02/Install-Jenkins-In-CentOS7/"/>
    <id>http://blog.caoxl.com/2020/06/02/Install-Jenkins-In-CentOS7/</id>
    <published>2020-06-02T03:40:05.000Z</published>
    <updated>2020-06-02T07:20:23.205Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Jenkins是一个开源的支持自动化构建、部署等任务的平台。基本上可以说是持续集成（CI）、持续发布（CD）不可或缺的工具。<br><a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins 官网</a></p></blockquote><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="本篇环境信息"><a href="#本篇环境信息" class="headerlink" title="本篇环境信息"></a>本篇环境信息</h2><table><thead><tr><th style="text-align:left">工具/环境</th><th style="text-align:left">版本</th></tr></thead><tbody><tr><td style="text-align:left">Linux Server</td><td style="text-align:left">CentOS7</td></tr><tr><td style="text-align:left">Jenkins</td><td style="text-align:left">2.222.4</td></tr><tr><td style="text-align:left">JDK</td><td style="text-align:left">1.8.0_212</td></tr><tr><td style="text-align:left">Nginx</td><td style="text-align:left">1.15.1</td></tr></tbody></table><ul><li>查看JAVA SDK版本</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# java -version</span><br><span class="line">openjdk version "1.8.0_212"</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_212-b04)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.212-b04, mixed mode)</span><br></pre></td></tr></table></figure><ul><li>查看Nginx版本</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# /usr/local/nginx/sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.15.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC) </span><br><span class="line">configure arguments:</span><br></pre></td></tr></table></figure><ul><li>查看Jenkins端口</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# cat /etc/sysconfig/jenkins | grep "JENKINS_PORT"</span><br><span class="line">JENKINS_PORT="8080"</span><br></pre></td></tr></table></figure><h1 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h1><h2 id="Yum安装"><a href="#Yum安装" class="headerlink" title="Yum安装"></a>Yum安装</h2><ul><li>yum源导入</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#添加Yum源</span></span><br><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line"></span><br><span class="line"><span class="section">#导入密钥</span></span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y jenkins</span><br></pre></td></tr></table></figure><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><p>Jenkins站点的默认监听端口是8080</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --add-port=8080/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="配置Java可选路径"><a href="#配置Java可选路径" class="headerlink" title="配置Java可选路径"></a>配置Java可选路径</h2><p>因为Jenkins默认的java可选路径不包含我们部署的jdk路径，所以这里要配置一下，不然Jenkins服务会启动失败</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#修改jenkins启动脚本</span></span><br><span class="line">sudo vi /etc/init.d/jenkins</span><br><span class="line"></span><br><span class="line"><span class="section">#修改candidates增加java可选路径：/usr/java/jdk1.8.0_181/bin/java</span></span><br><span class="line">candidates="</span><br><span class="line"><span class="code">    /etc/alternatives/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/java-1.8.0/bin/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/jre-1.8.0/bin/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/java-1.7.0/bin/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/jre-1.7.0/bin/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/java-11.0/bin/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/jre-11.0/bin/java</span></span><br><span class="line"><span class="code">    /usr/lib/jvm/java-11-openjdk-amd64</span></span><br><span class="line"><span class="code">    /usr/bin/java</span></span><br><span class="line">"</span><br></pre></td></tr></table></figure><h2 id="启动Jenkins并设置Jenkins开机启动"><a href="#启动Jenkins并设置Jenkins开机启动" class="headerlink" title="启动Jenkins并设置Jenkins开机启动"></a>启动Jenkins并设置Jenkins开机启动</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#重载服务（由于前面修改了Jenkins启动脚本）</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="section">#启动Jenkins服务</span></span><br><span class="line">sudo systemctl start jenkins</span><br><span class="line"></span><br><span class="line"><span class="section">#将Jenkins服务设置为开机启动</span></span><br><span class="line"><span class="section">#由于Jenkins不是Native Service，所以需要用chkconfig命令而不是systemctl命令</span></span><br><span class="line">sudo /sbin/chkconfig jenkins on</span><br></pre></td></tr></table></figure><p>浏览器输入 <code>http://&lt;ip address&gt;:8080</code> 访问Jenkins</p><h2 id="修改Jenkins端口"><a href="#修改Jenkins端口" class="headerlink" title="修改Jenkins端口"></a>修改Jenkins端口</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line">JENKINS_PORT="8080" // 修改成自己需要的端口即可</span><br><span class="line"></span><br><span class="line">// 重新启动jenkins</span><br><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure><h1 id="配置Nginx反向代理Jenkins"><a href="#配置Nginx反向代理Jenkins" class="headerlink" title="配置Nginx反向代理Jenkins"></a>配置Nginx反向代理Jenkins</h1><ul><li>新建配置文件</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#新增Jenkins专用Nginx配置文件</span></span><br><span class="line">sudo vi /etc/nginx/conf.d/jenkins.conf</span><br><span class="line"></span><br><span class="line"><span class="section">#输入以下内容并保存</span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="code">    listen 80;#监听80端口</span></span><br><span class="line"><span class="code">    server_name jenkins.caoxl.com;#监听的域名</span></span><br><span class="line"><span class="code">    access_log  /var/log/nginx/jenkins.access.log main;</span></span><br><span class="line"><span class="code">    error_log  /var/log/nginx/jenkins.error.log error;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    location / &#123; #转发或处理</span></span><br><span class="line"><span class="code">        proxy_pass http://127.0.0.1:8080; </span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    error_page   500 502 503 504  /50x.html;#错误页</span></span><br><span class="line"><span class="code">    location = /50x.html &#123;</span></span><br><span class="line"><span class="code">        root   /usr/share/nginx/html;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重载Nginx配置</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>报<code>-bash: nginx: command not found</code>, 解决办法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl sbin]# vi /etc/profile</span><br><span class="line">export PATH=$PATH:/usr/local/nginx/sbin  // Nginx可执行文件路径</span><br><span class="line">[root@caoxl sbin]# source /etc/profile</span><br></pre></td></tr></table></figure><h1 id="解决Jenkins插件下载慢的问题"><a href="#解决Jenkins插件下载慢的问题" class="headerlink" title="解决Jenkins插件下载慢的问题"></a>解决Jenkins插件下载慢的问题</h1><h2 id="修改插件下载链接"><a href="#修改插件下载链接" class="headerlink" title="修改插件下载链接"></a>修改插件下载链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/jenkins/hudson.model.UpdateCenter.xml</span><br><span class="line"></span><br><span class="line"><span class="section"># 修改</span></span><br><span class="line">https://updates.jenkins.io/update-center.json</span><br><span class="line"><span class="section"># 为</span></span><br><span class="line">http://mirror.xmission.com/jenkins/updates/update-center.json</span><br><span class="line"></span><br><span class="line"><span class="section"># 重新启动jenkins</span></span><br><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure><h2 id="修改default-json"><a href="#修改default-json" class="headerlink" title="修改default.json"></a>修改default.json</h2><p>cd 到<code>updates</code>目录,找到<code>default.json</code>文件</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl updates]# pwd</span><br><span class="line">/var/lib/jenkins/updates</span><br><span class="line">[root@caoxl updates]# ll</span><br><span class="line">total 2.2M</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 1.9M Jun  2 14:22 default.json</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 5.3K Jun  2 14:22 hudson.tasks.Maven.MavenInstaller</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 274K Jun  2 14:53 hudson.tools.JDKInstaller</span><br></pre></td></tr></table></figure><p>使用vi编辑文件，如下，替换所有插件下载的url</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:1,$s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g</span><br></pre></td></tr></table></figure><p>替换连接测试url</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:1,$s/http:\/\/www.google.com/https:\/\/www.baidu.com/g</span><br></pre></td></tr></table></figure><p><strong>进入vi先输入<code>:</code>然后再粘贴上边的<code>:</code>后边的命令，注意不要写两个冒号!</strong></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://juejin.im/post/5aa76e416fb9a028d37512c1" target="_blank" rel="noopener">使用CentOS7安装配置Jenkins</a></li><li><a href="https://ken.io/note/centos7-jenkins-install-tutorial" target="_blank" rel="noopener">CentOS 7 下Jenkins安装部署教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Jenkins是一个开源的支持自动化构建、部署等任务的平台。基本上可以说是持续集成（CI）、持续发布（CD）不可或缺的工具。&lt;br&gt;&lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jenkins 官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="CentOS7" scheme="http://blog.caoxl.com/tags/CentOS7/"/>
    
      <category term="Jenkins" scheme="http://blog.caoxl.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 安装部署 Gitlab</title>
    <link href="http://blog.caoxl.com/2020/06/01/Install-Gitlab-In-Centos7/"/>
    <id>http://blog.caoxl.com/2020/06/01/Install-Gitlab-In-Centos7/</id>
    <published>2020-06-01T01:46:29.000Z</published>
    <updated>2020-06-02T06:28:54.488Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>GitLab一个开源的git仓库管理平台，方便团队协作开发、管理。</p></blockquote><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装基础依赖"><a href="#安装基础依赖" class="headerlink" title="安装基础依赖"></a>安装基础依赖</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 安装基础依赖</span></span><br><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line"></span><br><span class="line"><span class="section"># 启动ssh服务&amp;设置为开机启动</span></span><br><span class="line">sudo systemctl enable sshd</span><br><span class="line">sudo systemctl start sshd</span><br></pre></td></tr></table></figure><h2 id="安装Postfix"><a href="#安装Postfix" class="headerlink" title="安装Postfix"></a>安装Postfix</h2><p>Postfix是一个邮件服务器，GitLab发送邮件需要用到</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#安装postfix</span></span><br><span class="line">sudo yum install -y postfix</span><br><span class="line"></span><br><span class="line"><span class="section">#启动postfix并设置为开机启动</span></span><br><span class="line">sudo systemctl enable postfix</span><br><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure><ul><li>报 <code>Job for postfix.service failed because the control process exited with error code. See &quot;systemctl status postfix.service&quot; and &quot;journalctl -xe&quot; for details.</code>错误, 解决办法:</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 修改 /etc/postfix/main.cf 的设置</span></span><br><span class="line">inet_protocols = ipv4</span><br><span class="line">inet_interfaces = all</span><br><span class="line"><span class="section"># 重新启动postfix即可</span></span><br><span class="line">sudo systemctl restart postfix.service</span><br></pre></td></tr></table></figure><h2 id="开放ssh以及http服务（80端口）"><a href="#开放ssh以及http服务（80端口）" class="headerlink" title="开放ssh以及http服务（80端口）"></a>开放ssh以及http服务（80端口）</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#开放ssh、http服务</span></span><br><span class="line">sudo firewall-cmd --add-service=ssh --permanent</span><br><span class="line">sudo firewall-cmd --add-service=http --permanent</span><br><span class="line"></span><br><span class="line"><span class="section">#重载防火墙规则</span></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><ul><li>报 <code>FirewallD is not running</code>, 解决办法:</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start firewalld</span><br></pre></td></tr></table></figure><h1 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h1><p>本次我们部署的是社区版:<code>gitlab-ce</code>，如果要部署商业版可以把关键字替换为：<code>gitlab-ee</code></p><h2 id="Yum安装GitLab"><a href="#Yum安装GitLab" class="headerlink" title="Yum安装GitLab"></a>Yum安装GitLab</h2><ul><li>添加GitLab社区版Package</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><ul><li>安装GitLab社区版</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y gitlab-ce</span><br></pre></td></tr></table></figure><p>安装成功后会看到gitlab-ce打印了以下图形</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">       *.                  *.</span></span><br><span class="line"><span class="code">      ***                 ***</span></span><br><span class="line"><span class="code">     *****               *****</span></span><br><span class="line"><span class="code">    .******             *******</span></span><br><span class="line"><span class="code">    ********            ********</span></span><br><span class="line">   ,,,,,,,,,<span class="strong">*****</span><span class="strong">*****</span>*,,,,,,,,,</span><br><span class="line">  ,,,,,,,,,,,<span class="strong">*****</span><span class="emphasis">***</span>*,,,,,,,,,,,</span><br><span class="line">  .,,,,,,,,,,,<span class="strong">*****</span>**,,,,,,,,,,,,</span><br><span class="line"><span class="code">      ,,,,,,,,,*****,,,,,,,,,.</span></span><br><span class="line"><span class="code">         ,,,,,,,****,,,,,,</span></span><br><span class="line"><span class="code">            .,,,***,,,,</span></span><br><span class="line"><span class="code">                ,*,.</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">     _______ __  __          __</span></span><br><span class="line"><span class="code">    / ____(_) /_/ /   ____ _/ /_</span></span><br><span class="line">   / / <span class="strong">__/ / __</span>/ /   / <span class="strong">__ `/ __</span> \</span><br><span class="line">  / /<span class="emphasis">_/ / / /_</span>/ /<span class="emphasis">___</span>/ /<span class="emphasis">_/ / /_</span>/ /</span><br><span class="line">  \<span class="strong">____/_/\__</span>/<span class="strong">_____</span>/\<span class="strong">__,_/_.__</span>_/</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">Thank you for installing GitLab!</span><br></pre></td></tr></table></figure><h2 id="配置GitLab站点Url"><a href="#配置GitLab站点Url" class="headerlink" title="配置GitLab站点Url"></a>配置GitLab站点Url</h2><p>GitLab默认的配置文件路径是<code>/etc/gitlab/gitlab.rb</code></p><p>默认的站点Url配置项是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">external_url 'http://gitlab.example.com'</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#修改配置文件</span></span><br><span class="line">sudo vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="section">#配置首页地址</span></span><br><span class="line">external_url 'http://gitlab.caoxl.com'</span><br></pre></td></tr></table></figure><ul><li>防火墙开启端口</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl init.d]# firewall-cmd --add-port=9999/tcp --permanent</span><br><span class="line">success</span><br></pre></td></tr></table></figure><h2 id="启动并访问Gitlab"><a href="#启动并访问Gitlab" class="headerlink" title="启动并访问Gitlab"></a>启动并访问Gitlab</h2><ul><li>启动Gitlab</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#重新配置并启动</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line"><span class="section">#完成后将会看到如下输出</span></span><br><span class="line">Running handlers:</span><br><span class="line">Running handlers complete</span><br><span class="line">Chef Client finished, 3/709 resources updated in 15 seconds</span><br><span class="line">gitlab Reconfigured!</span><br><span class="line"></span><br><span class="line"><span class="section">#启动</span></span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure><ul><li>访问Gitlab</li></ul><p>将设置的域名DNS解析到服务器IP，或者修改本地host将域名指向服务器IP。访问：<code>http://gitlab.caoxl.com</code></p><p>这时候会提示为管理员账号设置密码。管理员账号默认username是<code>root</code>。<br>设置完成之后即可使用<code>root</code>账号登录，登陆后会进入欢迎界面。</p><ul><li>报<code>ruby_block[authorize Grafana with GitLab] action run</code>,解决办法</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># vim /etc/gitlab/gitlab.rb</span></span><br><span class="line">monitoring[<span class="string">'grafana'</span>][<span class="symbol">'enable'</span>] = false</span><br></pre></td></tr></table></figure><ul><li>报 <code>Whoops, GitLab is taking too much time to respond. (502)错误</code>, 解决办法</li></ul><p>原因是端口被其他服务占用了，需要更换配置文件里得到端口 ，并且执行<code>gitlab-ctl reconfigure</code>, <code>gitlab-ctl restart</code> 就可以解决</p><h1 id="GitLab常用配置"><a href="#GitLab常用配置" class="headerlink" title="GitLab常用配置"></a>GitLab常用配置</h1><h2 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h2><p>配置邮箱可以让GitLab在发生相应事件的时候进行邮件通知<br>比如：找回密码、添加邮箱等</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#修改配置文件</span></span><br><span class="line">sudo vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="section">#邮件配置</span></span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>enable'] = true</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>address'] = 'smtp.163.com'</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>port'] = 465</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>user_name'] = 'yourmail@163.com'</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>password'] = 'yourpasswd'</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>domain'] = 'smtp.163.com'</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>authentication'] = 'login'</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>enable<span class="emphasis">_starttls_</span>auto'] = true</span><br><span class="line">gitlab<span class="emphasis">_rails['smtp_</span>tls'] = true</span><br><span class="line">gitlab<span class="emphasis">_rails['gitlab_</span>email_enabled'] = true</span><br><span class="line">gitlab<span class="emphasis">_rails['gitlab_</span>email_from'] = 'yourmail@163.com'</span><br><span class="line">gitlab<span class="emphasis">_rails['gitlab_</span>email<span class="emphasis">_display_</span>name'] = 'Gitlab'</span><br><span class="line"></span><br><span class="line"><span class="section">#保存后，重新配置并启动GitLab</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h2 id="禁用创建组权限"><a href="#禁用创建组权限" class="headerlink" title="禁用创建组权限"></a>禁用创建组权限</h2><p>GitLab默认所有的注册用户都可以创建组。但对于团队来说，通常只会给Leader相关权限。<br>虽然可以在用户管理界面取消权限，但毕竟不方便。我们可以通过配置GitLab默认禁用创建组权限。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#修改配置文件</span></span><br><span class="line">sudo vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="section">#开启gitlab_rails['gitlab_default_can_create_group'] 选项，并将值设置为false</span></span><br><span class="line"><span class="section">### GitLab user privileges</span></span><br><span class="line">gitlab<span class="emphasis">_rails['gitlab_</span>default<span class="emphasis">_can_</span>create_group'] = false</span><br><span class="line"></span><br><span class="line"><span class="section">#保存后，重新配置并启动GitLab</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h2 id="gitlab-ctl常用命令介绍"><a href="#gitlab-ctl常用命令介绍" class="headerlink" title="gitlab-ctl常用命令介绍"></a>gitlab-ctl常用命令介绍</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl cmd</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>check-config</code></td><td style="text-align:left">检查在gitlab中是否有任何配置。在指定版本中删除的rb</td></tr><tr><td style="text-align:left"><code>deploy-page</code></td><td style="text-align:left">安装部署页面</td></tr><tr><td style="text-align:left"><code>diff-config</code></td><td style="text-align:left">将用户配置与包可用配置进行比较</td></tr><tr><td style="text-align:left"><code>remove-accounts</code></td><td style="text-align:left">删除所有用户和组</td></tr><tr><td style="text-align:left"><code>upgrade</code></td><td style="text-align:left">升级</td></tr><tr><td style="text-align:left"><code>once</code></td><td style="text-align:left">如果GitLab服务停止了就启动服务，如果已启动就不做任何操作</td></tr><tr><td style="text-align:left"><code>restart</code></td><td style="text-align:left">重启GitLab服务</td></tr><tr><td style="text-align:left"><code>start</code></td><td style="text-align:left">如果GitLab服务停止了就启动服务，如果已启动就重启服务</td></tr><tr><td style="text-align:left"><code>stop</code></td><td style="text-align:left">停止GitLab服务</td></tr><tr><td style="text-align:left"><code>status</code></td><td style="text-align:left">查看GitLab服务状态</td></tr><tr><td style="text-align:left"><code>reconfigure</code></td><td style="text-align:left">reconfigure重新配置GitLab并启动</td></tr></tbody></table><h1 id="解决Gitlab的Nginx以及自带Nginx冲突问题"><a href="#解决Gitlab的Nginx以及自带Nginx冲突问题" class="headerlink" title="解决Gitlab的Nginx以及自带Nginx冲突问题"></a>解决Gitlab的Nginx以及自带Nginx冲突问题</h1><blockquote><p>vim /etc/gitlab/gitlab.rb</p></blockquote><p>做以下修改:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 禁用Gitlab的nginx</span><br><span class="line">nginx['enable'] = false</span><br><span class="line"></span><br><span class="line">// 设置自建Nginx的用户, 查看用户命令看说明</span><br><span class="line">web<span class="emphasis">_server['external_</span>users'] = ['www']</span><br><span class="line"></span><br><span class="line">// 修改监听方式和监听地址</span><br><span class="line">gitlab<span class="emphasis">_workhorse['listen_</span>network'] = "tcp"</span><br><span class="line">gitlab<span class="emphasis">_workhorse['listen_</span>addr'] = "127.0.0.1:9999"</span><br><span class="line"></span><br><span class="line">// 最后执行下面命令让配置生效：</span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><ul><li><code>说明</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/local/nginx/conf/nginx.conf | grep user</span><br></pre></td></tr></table></figure><ul><li>配置Nginx, 新增<code>gitlab.conf</code></li></ul><blockquote><p><a href="https://gitlab.com/gitlab-org/gitlab-recipes/blob/master/web-server/nginx/gitlab-omnibus-nginx.conf" target="_blank" rel="noopener">官网提供配置 - gitlab-omnibus-nginx.conf</a></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">upstream gitlab-workhorse &#123;</span><br><span class="line"><span class="code">    server 127.0.0.1:9999; #根据实际情况修改, 与gitlab.rb中的gitlab_workhorse['listen_addr']一致</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">## Normal HTTP host</span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="code">    listen 80;</span></span><br><span class="line"><span class="code">    listen [::]:80 default_server;</span></span><br><span class="line"><span class="code">    server_name gitlab.caoxl.com; ## 修改成自己的域名；</span></span><br><span class="line"><span class="code">    server_tokens off; ## Don't show the nginx version number, a security best practice</span></span><br><span class="line"><span class="code">    root /opt/gitlab/embedded/service/gitlab-rails/public;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    ## See app/controllers/application_controller.rb for headers set</span></span><br><span class="line"></span><br><span class="line"><span class="code">    ## Individual nginx logs for this GitLab vhost</span></span><br><span class="line"><span class="code">    access_log  /var/log/nginx/gitlab_access.log; # 根据实际情况修改</span></span><br><span class="line"><span class="code">    error_log   /var/log/nginx/gitlab_error.log;  # 根据实际情况修改</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">    location / &#123;</span></span><br><span class="line"><span class="code">        client_max_body_size 0;</span></span><br><span class="line"><span class="code">        gzip off;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        ## https://github.com/gitlabhq/gitlabhq/issues/694</span></span><br><span class="line"><span class="code">        ## Some requests take more than 30 seconds.</span></span><br><span class="line"><span class="code">        proxy_read_timeout      300;</span></span><br><span class="line"><span class="code">        proxy_connect_timeout   300;</span></span><br><span class="line"><span class="code">        proxy_redirect          off;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        proxy_http_version 1.1;</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">        proxy_set_header    Host                $http_host;</span></span><br><span class="line"><span class="code">        proxy_set_header    X-Real-IP           $remote_addr;</span></span><br><span class="line"><span class="code">        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;</span></span><br><span class="line"><span class="code">        proxy_set_header    X-Forwarded-Proto   $scheme;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        proxy_pass http://gitlab-workhorse;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启Nginx: <code>sudo service nginx restart</code></li></ul><h1 id="解决Gitlab访问502问题"><a href="#解决Gitlab访问502问题" class="headerlink" title="解决Gitlab访问502问题"></a>解决Gitlab访问502问题</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R o+x /opt/gitlab/embedded/service//gitlab-rails/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GitLab一个开源的git仓库管理平台，方便团队协作开发、管理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Gitlab" scheme="http://blog.caoxl.com/tags/Gitlab/"/>
    
      <category term="CentOS7" scheme="http://blog.caoxl.com/tags/CentOS7/"/>
    
  </entry>
  
  <entry>
    <title>值得期待的PHP8新特性</title>
    <link href="http://blog.caoxl.com/2020/05/30/Hello-PHP8/"/>
    <id>http://blog.caoxl.com/2020/05/30/Hello-PHP8/</id>
    <published>2020-05-30T01:31:16.000Z</published>
    <updated>2020-05-30T03:14:05.415Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>罗列出 PHP8 中会发生的一些改变：新功能、性能改进和突破性变化。</p></blockquote><a id="more"></a><h1 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h1><h2 id="联合类型-Union-types"><a href="#联合类型-Union-types" class="headerlink" title="联合类型(Union types)"></a>联合类型(Union types)</h2><p>考虑到 PHP 的动态类型特性，联合类型在很多情况下都很有用。<br>联合类型是两个或多个类型的集合，这些类型指示可以使用这两个类型中的任何一个。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(Foo|Bar $input)</span>: <span class="title">int</span>|<span class="title">float</span></span>;</span><br></pre></td></tr></table></figure><p>请注意，void 永远不能是联合类型的一部分，因为它表示 “根本没有返回值”。</p><p>此外，可以使用 <code>|NULL</code> 或使用现有的 <code>？</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(Foo|null $foo)</span>: <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">(?Bar $bar)</span>: <span class="title">void</span></span>;</span><br></pre></td></tr></table></figure><h2 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h2><blockquote><p>JIT-Just-In-Time 编译器承诺显著提高性能，尽管在 Web 应用可能没有较大的好处。</p></blockquote><h2 id="静态返回类型-Static-return-types"><a href="#静态返回类型-Static-return-types" class="headerlink" title="静态返回类型 (Static return types)"></a>静态返回类型 (Static return types)</h2><p>虽然已经可以返回 self ，但在 PHP8 之前，静态不是有效的返回类型。考虑到 PHP 的动态类型特性，它对许多开发人员都很有用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span>: <span class="title">static</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">static</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="弱映射"><a href="#弱映射" class="headerlink" title="弱映射"></a>弱映射</h2><p>基于在 PHP 7.4 中添加的 <code>WeakRefs</code> RFC 的基础上，在 PHP 8 中 添加了 WeakMap 实现。<code>WeakMap</code> 包含对对象的引用，这不会阻止这些对象被垃圾回收。</p><p>以 ORM 为例，它们经常实现包含对实体类的引用的缓存，以提高实体之间关系的性能。<br>这些实体对象不能被垃圾回收，只要该缓存有对它们的引用，即使缓存是唯一引用它们的东西。</p><p>如果该缓存层改为使用弱引用和映射，则 PHP 将在其他对象不再引用这些对象时对它们进行垃圾回收。<br>特别是在 ORM 的情况下，它可以在一个请求中管理数百个 (如果不是数千个) 实体；弱映射可以提供一种更好、更资源友好的方式来处理这些对象。</p><p>以下是 Weak maps 的用法，RFC 中的一个示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WeakMap $cache;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSomethingWithCaching</span><span class="params">(object $obj)</span>: <span class="title">object</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;cache[$obj] ??= <span class="keyword">$this</span>-&gt;computeSomethingExpensive($obj);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可以在对象上使用-class"><a href="#可以在对象上使用-class" class="headerlink" title="可以在对象上使用 ::class"></a>可以在对象上使用 <code>::class</code></h2><p>一个小而有用的新特性：现在可以对对象使用 <code>::class</code>，而不必对它们使用 <code>get_class()</code>。<br>它的工作方式与 <code>get_class()</code> 相同。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$foo = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line">var_dump($foo::class);</span><br></pre></td></tr></table></figure><h2 id="创建-DateTime-对象的接口"><a href="#创建-DateTime-对象的接口" class="headerlink" title="创建 DateTime 对象的接口"></a>创建 DateTime 对象的接口</h2><p>您已经可以使用 <code>DateTime::createFromImmutable($immutableDateTime)</code>，从 <code>DateTimeImmutable</code> 对象创建 <code>DateTime</code> 对象，但是反过来很棘手。</p><p>通过添加 <code>DateTime::createFromInterface()</code> 和 <code>DatetimeImmutable::createFromInterface()</code>，现在有了一种将 <code>DateTime</code> 和 <code>DateTimeImmutable</code> 对象相互转换的通用方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DateTime::createFromInterface(DateTimeInterface $other);</span><br><span class="line"></span><br><span class="line">DateTimeImmutable::createFromInterface(DateTimeInterface $other);</span><br></pre></td></tr></table></figure><h2 id="新的-Stringable-接口"><a href="#新的-Stringable-接口" class="headerlink" title="新的 Stringable 接口"></a>新的 <code>Stringable</code> 接口</h2><p><code>Stringable</code> 接口可用于键入提示任何字符串或实现<code>__toString()</code>。<br>此外，每当类实现 <code>__toString()</code> 时，它都会自动在幕后实现接口，不需要手动实现它。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'foo'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">(Stringable $stringable)</span> </span>&#123; <span class="comment">/* … */</span> &#125;</span><br><span class="line"></span><br><span class="line">bar(<span class="keyword">new</span> Foo());</span><br><span class="line">bar(<span class="string">'abc'</span>);</span><br></pre></td></tr></table></figure><h2 id="新的-str-contains-函数"><a href="#新的-str-contains-函数" class="headerlink" title="新的 str_contains() 函数"></a>新的 <code>str_contains()</code> 函数</h2><blockquote><p>有些人可能会说这是早就应该实现的功能，但是我们最终不必再依赖 <code>strpos()</code> 来知道一个字符串是否包含另一个字符串。</p></blockquote><ul><li>以前:</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (strpos(<span class="string">'string with lots of words'</span>, <span class="string">'words'</span>) !== <span class="keyword">false</span>) &#123; <span class="comment">/* … */</span> &#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">- 现在:</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line">    <span class="keyword">if</span> (str_contains(<span class="string">'string with lots of words'</span>, <span class="string">'words'</span>)) &#123; <span class="comment">/* … */</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="新的-fdiv-函数"><a href="#新的-fdiv-函数" class="headerlink" title="新的 fdiv() 函数"></a>新的 <code>fdiv()</code> 函数</h2><p>新的 <code>fdiv()</code> 函数的作用类似于 <code>fmod()</code> 和 <code>intdiv()</code> 函数，它们<strong>允许被 0 整除</strong>。<br>您将得到 <code>INF</code>、<code>-INF</code> 或 <code>NaN</code> ，而不是错误，具体取决于大小写。</p><h2 id="新的-get-debug-type-函数"><a href="#新的-get-debug-type-函数" class="headerlink" title="新的 get_debug_type() 函数"></a>新的 <code>get_debug_type()</code> 函数</h2><p><code>get_debug_type()</code> 返回一个变量的类型。<br>听起来像是 <code>gettype()</code> 可以实现的功能。<br><code>get_debug_type()</code> 为数组、字符串、匿名类和对象返回更有用的输出。</p><p>例如，在类 <code>\foo\Bar</code> 上调用 <code>gettype()</code> 将返回 <code>Object</code>。<br>使用 <code>get_debug_type()</code> 将返回类名。</p><h2 id="改进-traits-里的抽象方法"><a href="#改进-traits-里的抽象方法" class="headerlink" title="改进 traits 里的抽象方法"></a>改进 <code>traits</code> 里的抽象方法</h2><p>traits 可以指定必须由使用它们的类实现的抽象方法。<br>但是有一个警告：在 PHP8 之前，这些方法实现的签名没有经过验证。<br>在以下代码中有效：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> Test &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(int $input)</span>: <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsesTrait</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Test</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($input)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用 traits 并实现其抽象方法时，PHP8 将执行正确的方法签名验证。<br>这意味着您需要改写以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsesTrait</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Test</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(int $input)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="token-get-all-的对象接口-RFC"><a href="#token-get-all-的对象接口-RFC" class="headerlink" title="token_get_all() 的对象接口 RFC"></a><code>token_get_all()</code> 的对象接口 RFC</h2><p>函数的作用是：返回值的是一个数组。<br>此 RFC 使用 <code>PhpToken::getall()</code> 方法添加一个 <code>PhpToken</code> 类。<br>此实现使用对象，而不是普通值。<br>它消耗更少的内存，更容易阅读。</p><h2 id="统一错误类型-RFC"><a href="#统一错误类型-RFC" class="headerlink" title="统一错误类型 RFC"></a>统一错误类型 RFC</h2><p>PHP 中的用户定义函数已经抛出 <code>TypeErrors</code>，但是内部函数没有抛出 <code>TypeErrors</code>，而是发出警告并返回 <code>NULL</code>。<br>从 PHP8 开始，内部函数的行为已经保持一致。</p><h2 id="默认错误报告级别"><a href="#默认错误报告级别" class="headerlink" title="默认错误报告级别"></a>默认错误报告级别</h2><p>现在是 <code>E_ALL</code>，而不是除 <code>E_NOTICE</code> 和 <code>E_DEVERATED</code> 之外的所有内容。<br>这意味着可能会弹出许多以前被悄悄忽略的错误，尽管在 PHP8 之前可能已经存在</p><h2 id="运算符不再忽略致命错误"><a href="#运算符不再忽略致命错误" class="headerlink" title="@运算符不再忽略致命错误"></a>@运算符不再忽略致命错误</h2><p>此更改可能会揭示在 PHP8 之前隐藏的错误。请确保在生产服务器上设置 <code>display_errors=off</code></p><h2 id="串联优先级-RFC"><a href="#串联优先级-RFC" class="headerlink" title="串联优先级 RFC"></a>串联优先级 RFC</h2><p>虽然在 PHP7.4 中已不推荐使用，但此更改现在生效。<br>如果你这样写的话：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"sum: "</span> . $a + $b;</span><br></pre></td></tr></table></figure><p>PHP 以前会这样解释它：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> (<span class="string">"sum: "</span> . $a) + $b;</span><br></pre></td></tr></table></figure><p>PHP 8 将会这样解释它：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"sum: "</span> . ($a + $b);</span><br></pre></td></tr></table></figure><h2 id="反射方法签名更改"><a href="#反射方法签名更改" class="headerlink" title="反射方法签名更改"></a>反射方法签名更改</h2><p>反射类的三个方法签名已更改：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReflectionClass::newInstance($args);</span><br><span class="line">ReflectionFunction::invoke($args);</span><br><span class="line">ReflectionMethod::invoke($object, $args);</span><br></pre></td></tr></table></figure><p>现已成为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReflectionClass::newInstance(...$args);</span><br><span class="line">ReflectionFunction::invoke(...$args);</span><br><span class="line">ReflectionMethod::invoke($object, ...$args);</span><br></pre></td></tr></table></figure><p>升级指南指定，如果您扩展了这些类，并且仍然希望同时支持 PHP 7 和 PHP 8，则允许以下签名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReflectionClass::newInstance($arg = <span class="keyword">null</span>, ...$args);</span><br><span class="line">ReflectionFunction::invoke($arg = <span class="keyword">null</span>, ...$args);</span><br><span class="line">ReflectionMethod::invoke($object, $arg = <span class="keyword">null</span>, ...$args);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;罗列出 PHP8 中会发生的一些改变：新功能、性能改进和突破性变化。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://blog.caoxl.com/categories/PHP/"/>
    
    
      <category term="PHP8" scheme="http://blog.caoxl.com/tags/PHP8/"/>
    
  </entry>
  
  <entry>
    <title>PHP面试/笔试题杂记 VIII</title>
    <link href="http://blog.caoxl.com/2020/05/21/Interview-Questions-Notes-VIII/"/>
    <id>http://blog.caoxl.com/2020/05/21/Interview-Questions-Notes-VIII/</id>
    <published>2020-05-21T03:35:49.000Z</published>
    <updated>2020-05-21T08:07:25.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>知识嘛就是常问常新.</p></blockquote><a id="more"></a><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="MySQL索引-全文索引-聚簇索引"><a href="#MySQL索引-全文索引-聚簇索引" class="headerlink" title="MySQL索引 (全文索引, 聚簇索引)"></a>MySQL索引 (全文索引, 聚簇索引)</h2><h3 id="FULLTEXT"><a href="#FULLTEXT" class="headerlink" title="FULLTEXT"></a>FULLTEXT</h3><p>即为全文索引，目前只有MyISAM引擎支持。其可以在CREATE TABLE ，ALTER TABLE ，CREATE INDEX 使用，不过目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。值得一提的是，在数据量较大时候，现将数据放入一个没有全局索引的表中，然后再用CREATE INDEX创建FULLTEXT索引，要比先为一张表建立FULLTEXT然后再将数据写入的速度快很多。</p><h3 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h3><ul><li>Hash 索引仅仅能满足”=”,”IN”和”&lt;=&gt;”查询，不能使用范围查询。</li></ul><p>由于 Hash 索引比较的是进行 Hash 运算之后的 Hash 值，所以它只能用于等值的过滤，不能用于基于范围的过滤，因为经过相应的 Hash 算法处理之后的 Hash 值的大小关系，并不能保证和Hash运算前完全一样。</p><ul><li>Hash 索引无法被用来避免数据的排序操作。</li></ul><p>由于 Hash 索引中存放的是经过 Hash 计算之后的 Hash 值，而且Hash值的大小关系并不一定和 Hash 运算前的键值完全一样，所以数据库无法利用索引的数据来避免任何排序运算；</p><ul><li>Hash 索引不能利用部分索引键查询。</li></ul><p>对于组合索引，Hash 索引在计算 Hash 值的时候是组合索引键合并后再一起计算 Hash 值，而不是单独计算 Hash 值，所以通过组合索引的前面一个或几个索引键进行查询的时候，Hash 索引也无法被利用。</p><ul><li>Hash 索引在任何时候都不能避免表扫描。</li></ul><p>前面已经知道，Hash 索引是将索引键通过 Hash 运算之后，将 Hash运算结果的 Hash 值和所对应的行指针信息存放于一个 Hash 表中，由于不同索引键存在相同 Hash 值，所以即使取满足某个 Hash 键值的数据的记录条数，也无法从 Hash 索引中直接完成查询，还是要通过访问表中的实际数据进行相应的比较，并得到相应的结果。</p><ul><li>Hash 索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。</li></ul><p>对于选择性比较低的索引键，如果创建 Hash 索引，那么将会存在大量记录指针信息存于同一个 Hash 值相关联。这样要定位某一条记录时就会非常麻烦，会浪费多次表数据的访问，而造成整体性能低下。</p><h3 id="BTREE"><a href="#BTREE" class="headerlink" title="BTREE"></a>BTREE</h3><p>BTREE索引就是一种将索引值按一定的算法，存入一个树形的数据结构中</p><h2 id="MySQL引擎-MyISAM-InnoDB"><a href="#MySQL引擎-MyISAM-InnoDB" class="headerlink" title="MySQL引擎 (MyISAM, InnoDB)"></a>MySQL引擎 (MyISAM, InnoDB)</h2><ul><li><code>MyISAM</code>类型不支持事务处理等高级处理，而<code>InnoDB</code>类型支持.</li><li><code>MyISAM</code>类型的表强调的是性能，其执行数度比<code>InnoDB</code>类型更快.</li><li><code>InnoDB</code>不支持<code>FULLTEXT</code>类型的索引.</li><li><code>InnoDB</code>中不保存表的具体行数，也就是说，执行<code>select count(*) from table</code>时，<code>InnoDB</code>要扫描一遍整个表来计算有多少行，但是<code>MyISAM</code>只要简单的读出保存好的行数即可.</li><li>对于<code>AUTO_INCREMENT</code>类型的字段，InnoDB中必须包含只有该字段的索引，但是在<code>MyISAM</code>表中，可以和其他字段一起建立联合索引。</li><li><code>DELETE FROM table</code>时，<code>InnoDB</code>不会重新建立表，而是一行一行的删除。</li><li><code>LOAD TABLE FROM MASTER</code>操作对<code>InnoDB</code>是不起作用的，解决方法是首先把<code>InnoDB</code>表改成<code>MyISAM</code>表，导入数据后再改成<code>InnoDB</code>表，但是对于使用的额外的<code>InnoDB</code>特性(例如外键)的表不适用.</li><li><code>MyISAM</code>支持表锁，<code>InnoDB</code>支持行锁。</li></ul><h2 id="MySQL优化方式"><a href="#MySQL优化方式" class="headerlink" title="MySQL优化方式"></a>MySQL优化方式</h2><h3 id="MySQL-优化常用方法"><a href="#MySQL-优化常用方法" class="headerlink" title="MySQL 优化常用方法"></a>MySQL 优化常用方法</h3><ol><li>选取最适用的字段属性 </li><li>使用连接（JOIN）来代替子查询(Sub-Queries) </li><li>使用联合(UNION)来代替手动创建的临时表</li><li>事务 </li><li>锁定表</li><li>使用外键 </li><li>使用索引 </li><li>优化的查询语句 </li></ol><h3 id="MySQL-性能优化方案"><a href="#MySQL-性能优化方案" class="headerlink" title="MySQL 性能优化方案"></a>MySQL 性能优化方案</h3><ul><li>列出mysql服务器运行各种状态值</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status;</span><br></pre></td></tr></table></figure><ul><li>查询mysql服务器配置信息语句</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables;</span><br></pre></td></tr></table></figure><h4 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'slow%';</span><br><span class="line">+---------------------+-------------------------------------------+</span><br><span class="line">| Variable_name       | Value                                     |</span><br><span class="line">+---------------------+-------------------------------------------+</span><br><span class="line">| slow<span class="emphasis">_launch_</span>time    | 2                                         |</span><br><span class="line">| slow<span class="emphasis">_query_</span>log      | ON                                        |</span><br><span class="line">| slow<span class="emphasis">_query_</span>log<span class="emphasis">_file | /home/mysql/data3056/mysql/slow_</span>query.log |</span><br><span class="line">+---------------------+-------------------------------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; show global status like 'slow%';</span><br><span class="line">+---------------------+-------+</span><br><span class="line">| Variable_name       | Value |</span><br><span class="line">+---------------------+-------+</span><br><span class="line">| Slow<span class="emphasis">_launch_</span>threads | 0     |</span><br><span class="line">| Slow_queries        | 52321 |</span><br><span class="line">+---------------------+-------+</span><br></pre></td></tr></table></figure><h4 id="连接数"><a href="#连接数" class="headerlink" title="连接数"></a>连接数</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'max_connections';</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| max_connections | 4532  |</span><br><span class="line">+-----------------+-------+</span><br></pre></td></tr></table></figure><ul><li>查询一下服务器响应的最大连接数：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'max<span class="emphasis">_used_</span>connections';</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Variable_name        | Value |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Max<span class="emphasis">_used_</span>connections | 835   |</span><br><span class="line">+----------------------+-------+</span><br></pre></td></tr></table></figure><h4 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'created_tmp%';</span><br><span class="line">+-------------------------+-----------+</span><br><span class="line">| Variable_name           | Value     |</span><br><span class="line">+-------------------------+-----------+</span><br><span class="line">| Created<span class="emphasis">_tmp_</span>disk_tables | 44999364  |</span><br><span class="line">| Created<span class="emphasis">_tmp_</span>files       | 1763      |</span><br><span class="line">| Created<span class="emphasis">_tmp_</span>tables      | 120658849 |</span><br><span class="line">+-------------------------+-----------+</span><br></pre></td></tr></table></figure><ul><li>查看一下mysql服务器对临时表的配置</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  show variables where variable<span class="emphasis">_name in ('tmp_</span>table<span class="emphasis">_size', 'max_</span>heap<span class="emphasis">_table_</span>size');</span><br><span class="line">+---------------------+----------+</span><br><span class="line">| Variable_name       | Value    |</span><br><span class="line">+---------------------+----------+</span><br><span class="line">| max<span class="emphasis">_heap_</span>table_size | 67108864 |</span><br><span class="line">| tmp<span class="emphasis">_table_</span>size      | 2097152  |</span><br><span class="line">+---------------------+----------+</span><br></pre></td></tr></table></figure><h4 id="open-table-情况"><a href="#open-table-情况" class="headerlink" title="open table 情况"></a>open table 情况</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'open%tables%';</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Open_tables   | 1998  |</span><br><span class="line">| Opened_tables | 7704  |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure><blockquote><p><code>open_tables</code> 表示打开表的数量，<code>opened_tables</code>表示打开过的表数量，如果<code>opened_tables</code>数量过大，说明配置中 <code>table_open_cache</code>(5.1.3之前这个值叫做<code>table_cache</code>)值可能太小，我们查询一下服务器<code>table_open_cache</code>：</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'table<span class="emphasis">_open_</span>cache';</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| table<span class="emphasis">_open_</span>cache | 2000  |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure><h4 id="进程使用情况"><a href="#进程使用情况" class="headerlink" title="进程使用情况"></a>进程使用情况</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'thread%';</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Threads_cached    | 10    |</span><br><span class="line">| Threads_connected | 736   |</span><br><span class="line">| Threads_created   | 85295 |</span><br><span class="line">| Threads_running   | 3     |</span><br><span class="line">+-------------------+-------+</span><br></pre></td></tr></table></figure><blockquote><p><code>threads_created</code>表示创建过的线程数，如果发现<code>threads_created</code>值过大的话，表明 mysql服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中<code>thread_cache_size</code>值，</p></blockquote><ul><li>查询服务器 thread_cache_size配置：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'thread<span class="emphasis">_cache_</span>size';</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| thread<span class="emphasis">_cache_</span>size | 100   |</span><br><span class="line">+-------------------+-------+</span><br></pre></td></tr></table></figure><h4 id="查询缓存-query-cache"><a href="#查询缓存-query-cache" class="headerlink" title="查询缓存(query cache)"></a>查询缓存(query cache)</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'qcache%';</span><br><span class="line">+-------------------------+-----------+</span><br><span class="line">| Variable_name           | Value     |</span><br><span class="line">+-------------------------+-----------+</span><br><span class="line">| Qcache<span class="emphasis">_free_</span>blocks      | 1         |</span><br><span class="line">| Qcache<span class="emphasis">_free_</span>memory      | 3128864   |</span><br><span class="line">| Qcache_hits             | 0         |</span><br><span class="line">| Qcache_inserts          | 0         |</span><br><span class="line">| Qcache<span class="emphasis">_lowmem_</span>prunes    | 0         |</span><br><span class="line">| Qcache<span class="emphasis">_not_</span>cached       | 712727780 |</span><br><span class="line">| Qcache<span class="emphasis">_queries_</span>in_cache | 0         |</span><br><span class="line">| Qcache<span class="emphasis">_total_</span>blocks     | 1         |</span><br><span class="line">+-------------------------+-----------+</span><br></pre></td></tr></table></figure><ul><li><code>Qcache_free_blocks</code>: 缓存中相邻内存块的个数。数目大说明可能有碎片。flush query cache会对缓存中的碎片进行整理，从而得到一个空闲块。</li><li><code>Qcache_free_memory</code>: 缓存中的空闲内存</li><li><code>Qcache_hits</code>: 每次查询在缓存中命中时就增大</li><li><code>Qcache_inserts</code>: 每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。</li><li><code>Qcache_lowmem_prunes</code>: 缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看；如果这个数字在不断增长，就表示可能碎片非常严重，或者内存 很少。（上面的 free_blocks和free_memory可以告诉您属于哪种情况）</li><li><code>Qcache_not_cached</code>: 不适合进行缓存的查询的数量，通常是由于这些查询不是 select 语句或者用了now()之类的函数。</li><li><code>Qcache_queries_in_cache</code>: 当前缓存的查询（和响应）的数量。</li><li><code>Qcache_total_blocks</code>: 缓存中块的数量。</li></ul><p>再查询一下服务器关于query_cache的配置：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'query_cache%';</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">| Variable_name                | Value   |</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">| query<span class="emphasis">_cache_</span>limit            | 1048576 |</span><br><span class="line">| query<span class="emphasis">_cache_</span>min<span class="emphasis">_res_</span>unit     | 1024    |</span><br><span class="line">| query<span class="emphasis">_cache_</span>size             | 3145728 |</span><br><span class="line">| query<span class="emphasis">_cache_</span>type             | OFF     |</span><br><span class="line">| query<span class="emphasis">_cache_</span>wlock_invalidate | OFF     |</span><br><span class="line">+------------------------------+---------+</span><br></pre></td></tr></table></figure><ul><li><code>query_cache_limit</code>: query_cache_limit</li><li><code>query_cache_min_res_unit</code>: 缓存块的最小大小</li><li><code>query_cache_size</code>: 查询缓存大小</li><li><code>query_cache_type</code>: 缓存类型，决定缓存什么样的查询，示例中表示不缓存 select sql_no_cache 查询</li><li><code>query_cache_wlock_invalidate</code>: 当有其他客户端正在对myisam表进行写操作时，如果查询在query cache中，是否返回cache结果还是等写操作完成再读表获取结果。</li></ul><h4 id="排序使用情况"><a href="#排序使用情况" class="headerlink" title="排序使用情况"></a>排序使用情况</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'sort%';</span><br><span class="line">+-------------------+----------+</span><br><span class="line">| Variable_name     | Value    |</span><br><span class="line">+-------------------+----------+</span><br><span class="line">| Sort<span class="emphasis">_merge_</span>passes | 3948     |</span><br><span class="line">| Sort_range        | 19442930 |</span><br><span class="line">| Sort_rows         | 87116099 |</span><br><span class="line">| Sort_scan         | 1748111  |</span><br><span class="line">+-------------------+----------+</span><br></pre></td></tr></table></figure><h4 id="文件打开数-open-files"><a href="#文件打开数-open-files" class="headerlink" title="文件打开数(open_files)"></a>文件打开数(open_files)</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'open_files';</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Open_files    | 10    |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'open<span class="emphasis">_files_</span>limit';</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| open<span class="emphasis">_files_</span>limit | 65535 |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure><p>比较合适的设置：<code>open_files / open_files_limit * 100% &lt;= 75%</code></p><h4 id="表锁情况"><a href="#表锁情况" class="headerlink" title="表锁情况"></a>表锁情况</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'table_locks%';</span><br><span class="line">+-----------------------+----------+</span><br><span class="line">| Variable_name         | Value    |</span><br><span class="line">+-----------------------+----------+</span><br><span class="line">| Table<span class="emphasis">_locks_</span>immediate | 61629615 |</span><br><span class="line">| Table<span class="emphasis">_locks_</span>waited    | 77       |</span><br><span class="line">+-----------------------+----------+</span><br></pre></td></tr></table></figure><ul><li><code>Table_locks_immediate</code>: 表示立即释放表锁数</li><li><code>Table_locks_waited</code>: 表示需要等待的表锁数</li></ul><p>如果 <code>table_locks_immediate / table_locks_waited &gt; 5000</code>，最好采用<code>innodb</code>引擎，因为<code>innodb</code>是行锁而<code>myisam</code>是表锁，对于高并发写入的应用<code>innodb</code>效果会好些</p><h4 id="表扫描情况"><a href="#表扫描情况" class="headerlink" title="表扫描情况"></a>表扫描情况</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'handler_read%';</span><br><span class="line">+-----------------------+--------------+</span><br><span class="line">| Variable_name         | Value        |</span><br><span class="line">+-----------------------+--------------+</span><br><span class="line">| Handler<span class="emphasis">_read_</span>first    | 177188783    |</span><br><span class="line">| Handler<span class="emphasis">_read_</span>key      | 3542386589   |</span><br><span class="line">| Handler<span class="emphasis">_read_</span>last     | 52930        |</span><br><span class="line">| Handler<span class="emphasis">_read_</span>next     | 445982431928 |</span><br><span class="line">| Handler<span class="emphasis">_read_</span>prev     | 89234087     |</span><br><span class="line">| Handler<span class="emphasis">_read_</span>rnd      | 2283006748   |</span><br><span class="line">| Handler<span class="emphasis">_read_</span>rnd_next | 175219902622 |</span><br><span class="line">+-----------------------+--------------+</span><br></pre></td></tr></table></figure><ul><li>服务器完成的查询请求次数: </li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like 'com_select';</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| Variable_name | Value     |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| Com_select    | 713039214 |</span><br><span class="line">+---------------+-----------+</span><br></pre></td></tr></table></figure><p>计算表扫描率: </p><blockquote><p>表扫描率 ＝ handler_read_rnd_next / com_select</p></blockquote><h2 id="MySQL-分库分表"><a href="#MySQL-分库分表" class="headerlink" title="MySQL 分库分表"></a>MySQL 分库分表</h2><h3 id="数据库主从"><a href="#数据库主从" class="headerlink" title="数据库主从"></a>数据库主从</h3><p>从数据库(Slave)是主数据库的备份，当主数据库(Master)变化时从数据库要更新，这些数据库软件可以设计更新周期。这是提高信息安全的手段。主从数据库服务器不在一个地理位置上，当发生意外时数据库可以保存。</p><ul><li>主从分工</li></ul><p>其中Master负责写操作的负载，也就是说一切写的操作都在Master上进行，而读的操作则分摊到Slave上进行。</p><ul><li>基本过程</li></ul><ol><li>Mysql的主从同步就是当master（主库）发生数据变化的时候，会实时同步到slave（从库）。</li><li>主从复制可以水平扩展数据库的负载能力，容错，高可用，数据备份。</li><li>不管是delete、update、insert，还是创建函数、存储过程，都是在master上，当master有操作的时候，slave会快速的接受到这些操作，从而做同步。</li></ol><ul><li>用途和条件</li></ul><ol><li>mysql主从复制用途<ul><li>实时灾备，用于故障切换</li><li>读写分离，提供查询服务</li><li>备份，避免影响业务</li></ul></li><li>主从部署必要条件：<ul><li>主库开启binlog日志（设置log-bin参数）</li><li>主从server-id不同</li><li>从库服务器能连通主库</li></ul></li></ol><h4 id="主从形式"><a href="#主从形式" class="headerlink" title="主从形式"></a>主从形式</h4><ul><li>一主一从</li><li>主主复制</li><li>一主多从—扩展系统读取的性能，因为读是在从库读取的;</li><li>多主一从—5.7开始支持</li><li>联级复制</li></ul><h4 id="主从同步的延迟等问题、原因及解决方案："><a href="#主从同步的延迟等问题、原因及解决方案：" class="headerlink" title="主从同步的延迟等问题、原因及解决方案："></a>主从同步的延迟等问题、原因及解决方案：</h4><ul><li>mysql数据库从库同步的延迟问题</li></ul><blockquote><p>MySQL数据库主从同步延迟原理mysql主从同步原理：主库针对写操作，顺序写binlog，从库单线程去主库顺序读”写操作的binlog”，从库取到binlog在本地原样执行（随机写），来保证主从数据逻辑上一致。mysql的主从复制都是单线程的操作，主库对所有DDL和DML产生binlog，binlog是顺序写，所以效率很高，slave的Slave_IO_Running线程到主库取日志，效率比较高，下一步，问题来了，slave的Slave_SQL_Running线程将主库的DDL和DML操作在slave实施。DML和DDL的IO操作是随即的，不是顺序的，成本高很多，还可能可slave上的其他查询产生lock争用，由于Slave_SQL_Running也是单线程的，所以一个DDL卡主了，需要执行10分钟，那么所有之后的DDL会等待这个DDL执行完才会继续执行，这就导致了延时。有朋友会问：“主库上那个相同的DDL也需要执行10分，为什么slave会延时？”，答案是master可以并发，Slave_SQL_Running线程却不可以。</p></blockquote><ul><li>MySql数据库从库同步的延迟解决方案</li></ul><ol><li>架构方面</li></ol><ul><li>业务的持久化层的实现采用分库架构，mysql服务可平行扩展，分散压力。</li><li>单个库读写分离，一主多从，主写从读，分散压力。这样从库压力比主库高，保护主库。</li><li>服务的基础架构在业务和mysql之间加入memcache或者redis的cache层。降低mysql的读压力。</li><li>不同业务的mysql物理上放在不同机器，分散压力。</li><li>使用比主库更好的硬件设备作为slave总结，mysql压力小，延迟自然会变小。</li></ul><ol start="2"><li>硬件方面</li></ol><ul><li>提高服务器性能</li></ul><ol start="3"><li>mysql主从同步加速</li></ol><ul><li>sync_binlog在slave端设置为0</li><li>–logs-slave-updates 从服务器从主服务器接收到的更新不记入它的二进制日志。</li><li>直接禁用slave端的binlog</li><li>slave端，如果使用的存储引擎是innodb，innodb_flush_log_at_trx_commit =2</li></ul><h3 id="水平分表"><a href="#水平分表" class="headerlink" title="水平分表"></a>水平分表</h3><p>例：QQ的登录表。假设QQ的用户有100亿，如果只有一张表，每个用户登录的时候数据库都要从这100亿中查找，会很慢很慢。如果将这一张表分成100份，每张表有1亿条，就小了很多，比如qq0,qq1,qq1…qq99表。</p><p>用户登录的时候，可以将用户的id%100，那么会得到0-99的数，查询表的时候，将表名qq跟取模的数连接起来，就构建了表名。比如123456789用户，取模的89，那么就到qq89表查询，查询的时间将会大大缩短。</p><p>这就是水平分割。</p><h3 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h3><p>也就是“大表拆小表”，基于列字段进行的。一般是表中的字段较多，将不常用的， 数据较大，长度较长（比如text类型字段）的拆分到“扩展表“。 一般是针对那种几百列的大表，也避免查询时，数据量太大造成的“跨页”问题。</p><h2 id="MySQL-如何做双机热备和负载均衡"><a href="#MySQL-如何做双机热备和负载均衡" class="headerlink" title="MySQL+如何做双机热备和负载均衡"></a>MySQL+如何做双机热备和负载均衡</h2><blockquote><p><a href="https://juejin.im/post/5ca2f93cf265da307261fae1" target="_blank" rel="noopener">MySQL 主从复制，双机热备</a></p></blockquote><h3 id="双机热备"><a href="#双机热备" class="headerlink" title="双机热备"></a>双机热备</h3><blockquote><p>所谓双机热备其实是一个复制的过程，复制过程中一个服务器充当主服务器，一个或多个服务器充当从服务。 这个复制的过程实质上是从服务器复制主服务器上MySQL的二进制日志（bin-log），并在从服务器上还原主服务器上的sql语句操作，这样只要两个数据库的初态是一样的，就能一直同步。</p></blockquote><p>实现双机热备，原理其实就是做两个机器的互相主从，我们把上述步骤主从对调，然后做一遍就能实现了双机热备了</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li>mysql读写分离</li></ul><p>mysql复制时，产生了多个数据副本（备库），为减少服务器压力，从库用于处理读操作，主库可同时处理读写是mysql集群实现读写分离的常用策略。</p><p>由于备库的复制是异步的，无法实时同步，读写分离的主要难点也在于从库上的脏数据。通常如果使用备库进行读，一般对数据的实时性要求不能太高。对此，mysql提供了几种常见的读写分离方式，例如基于查询的读写分离、基于脏数据、基于会话等，有兴趣可继续研究。</p><p>mysql设置的读写分离，减少了主库的请求量，将大量读的操作发送给从库，实现负载均衡。</p><ul><li>修改DNS</li></ul><p>通过n个服务器IP指定到一个域名，根据请求的不同标识特征，将请求发送给不同的IP服务器进行处理。</p><ul><li>引入中间件</li></ul><p>mysql官方提供了一个mysql负载的中间件，mysql_proxy，也需要在服务器上进行安装，修改配置文件（mysql的服务器IP）,实质与nginx类似，也是一个代理服务器。</p><h2 id="数据表类型有哪些"><a href="#数据表类型有哪些" class="headerlink" title="数据表类型有哪些"></a>数据表类型有哪些</h2><ul><li>MyISAM、InnoDB、HEAP、BOB,ARCHIVE,CSV等</li><li>MyISAM：成熟、稳定、易于管理，快速读取。一些功能不支持（事务等），表级锁。</li><li>InnoDB：支持事务、外键等特性、数据行锁定。空间占用大，不支持全文索引等。</li></ul><h2 id="MySQL-把一个大表拆分多个表后-如何解决跨表查询效率问题"><a href="#MySQL-把一个大表拆分多个表后-如何解决跨表查询效率问题" class="headerlink" title="MySQL 把一个大表拆分多个表后,如何解决跨表查询效率问题"></a>MySQL 把一个大表拆分多个表后,如何解决跨表查询效率问题</h2><h2 id="MySQL-对于大表-千万级-要怎么优化呢"><a href="#MySQL-对于大表-千万级-要怎么优化呢" class="headerlink" title="MySQL 对于大表(千万级),要怎么优化呢?"></a>MySQL 对于大表(千万级),要怎么优化呢?</h2><ol><li>优化SQL和索引</li><li>加缓存, Memcached, redis等</li><li>主从复制,读写分离</li><li>分库分表</li><li>分布式系统</li></ol><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>规范设计<ul><li>配置规范</li><li>建表规范</li><li>命名规范</li><li>索引规范</li><li>应用规范</li></ul></li><li>业务层优化<ul><li>业务拆分</li><li>数据拆分</li><li>读多写少优化场景<ul><li>采用缓存</li></ul></li><li>读少写多优化场景<ul><li>采用异步提交模式</li><li>使用队列技术</li><li>降低写入频率</li></ul></li></ul></li><li>架构层优化</li><li>管理优化<ul><li>数据清理如何做</li><li>数据变更如何做</li><li>尽可能避免数据碎片</li></ul></li></ul><h2 id="MySQL-的慢查询问题"><a href="#MySQL-的慢查询问题" class="headerlink" title="MySQL 的慢查询问题"></a>MySQL 的慢查询问题</h2><blockquote><p>其实通过慢查询日志来分析是一种比较简单的方式，如果不想看日志，可以借助工具来完成，<br>  如<code>mysqldumpslow</code>, <code>mysqlsla</code>, <code>myprofi</code>, <code>mysql-explain-slow-log</code>, <code>mysqllogfilter</code>等，感觉自己来分析一个需要丰富的经验，一个浪费时间。</p></blockquote><h2 id="SQL语言分4大类请列举"><a href="#SQL语言分4大类请列举" class="headerlink" title="SQL语言分4大类请列举 ?"></a>SQL语言分4大类请列举 ?</h2><ul><li>DDL–CREATE,DROP,ALTER</li></ul><blockquote><p>DDL 数据库定义语言 (Data Definition Language)</p></blockquote><ul><li>DML–INSERT,UPDATE,DELETE</li></ul><blockquote><p>数据库操纵语言 (Data Manipulation Language)</p></blockquote><ul><li>DQL–SELECT</li></ul><blockquote><p>数据库查询语言 (Data Query Language)</p></blockquote><ul><li>DCL–GRANT,REVOKE,COMMIT,ROLLBACK</li></ul><blockquote><p>数据库控制语言 (Data Control Language)</p></blockquote><h2 id="mysql-请写出数据类型-int-char-varchar-datetime-text-的意思"><a href="#mysql-请写出数据类型-int-char-varchar-datetime-text-的意思" class="headerlink" title="(mysql)请写出数据类型(int char varchar datetime text)的意思;"></a>(mysql)请写出数据类型(int char varchar datetime text)的意思;</h2><ul><li>int : 数值类型</li><li>char : 固定长度字符串类型</li><li>varchar : 可变长度字符串类型</li><li>datetime : 时期时间类型</li><li>text : 文本类型</li></ul><h3 id="varchar和char有什么区别"><a href="#varchar和char有什么区别" class="headerlink" title="varchar和char有什么区别:"></a>varchar和char有什么区别:</h3><ul><li>char 长度是固定的，不管你存储的数据是多少他都会是固定的长度。而varchar则是可变长度但他要在总长度上加1字符，这个用来存储位置。</li><li>char 固定长度，所以在处理速度上要比varchar快速很多，但是浪费存储空间，所以对存储不大，但在速度上有要求的可以使用char类型，反之可以用varchar类型来实例。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;知识嘛就是常问常新.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="笔试题" scheme="http://blog.caoxl.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Linux awk使用</title>
    <link href="http://blog.caoxl.com/2020/05/19/Linux-cmd-awk/"/>
    <id>http://blog.caoxl.com/2020/05/19/Linux-cmd-awk/</id>
    <published>2020-05-19T02:29:47.000Z</published>
    <updated>2020-05-19T03:11:01.407Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。</p></blockquote><a id="more"></a><h1 id="awk命令格式和选项"><a href="#awk命令格式和选项" class="headerlink" title="awk命令格式和选项"></a>awk命令格式和选项</h1><h2 id="语法形式"><a href="#语法形式" class="headerlink" title="语法形式"></a>语法形式</h2><blockquote><p>awk [options] ‘script’ var=value file(s)<br>awk [options] -f script_file var=value file(s)</p></blockquote><h3 id="常用命令选项"><a href="#常用命令选项" class="headerlink" title="常用命令选项"></a>常用命令选项</h3><ul><li>-F fs: fs指定输入分隔符, fs可以是字符串或正则表达式，如-F:</li><li>-v var=value 赋值一个用户定义变量，将外部变量传递给awk</li><li>-f script_file 从脚本文件中读取awk命令</li></ul><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><ul><li><code>log.txt</code>文本内容如下：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2 this is a test</span><br><span class="line">3 Are you like awk</span><br><span class="line">This's a test</span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure><h2 id="用法一"><a href="#用法一" class="headerlink" title="用法一:"></a>用法一:</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;[pattern] action&#125;' &#123;filenames&#125; # 行匹配语句 awk ''只能用单引号</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 每行按空格或TAB分割，输出文本中的1、4项</span></span><br><span class="line">[root@caoxl ~]# awk '&#123;print $1,$4&#125;' log.txt</span><br><span class="line">2 a</span><br><span class="line">3 like</span><br><span class="line">This's </span><br><span class="line">10 orange,apple,mongo</span><br><span class="line"></span><br><span class="line"><span class="section"># 格式化输出</span></span><br><span class="line">[root@caoxl ~]# awk '&#123;printf "%-8s %-10s\n",$1,$4&#125;' log.txt</span><br><span class="line">2        a         </span><br><span class="line">3        like      </span><br><span class="line">This's             </span><br><span class="line">10       orange,apple,mongo</span><br></pre></td></tr></table></figure><h2 id="用法二"><a href="#用法二" class="headerlink" title="用法二:"></a>用法二:</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F #-F相当于内置变了FS, 指定分割字符</span><br></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 使用","分割</span></span><br><span class="line">[root@caoxl ~]# awk -F, '&#123;print $1,$2&#125;' log.txt</span><br><span class="line">2 this is a test </span><br><span class="line">3 Are you like awk </span><br><span class="line">This's a test </span><br><span class="line">10 There are orange apple</span><br><span class="line"></span><br><span class="line"><span class="section"># 或者使用内建变量</span></span><br><span class="line">[root@caoxl ~]# awk 'BEGIN&#123;FS=","&#125;&#123;print $1,$2&#125;' log.txt</span><br><span class="line">2 this is a test </span><br><span class="line">3 Are you like awk </span><br><span class="line">This's a test </span><br><span class="line">10 There are orange apple</span><br><span class="line"></span><br><span class="line"><span class="section"># 使用多个分隔符.先使用空格分割，然后对分割结果再使用","分割</span></span><br><span class="line">2 this</span><br><span class="line">3 Are</span><br><span class="line">This's a</span><br><span class="line">10 There</span><br></pre></td></tr></table></figure><h2 id="用法三"><a href="#用法三" class="headerlink" title="用法三:"></a>用法三:</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -v # 设置变量</span><br></pre></td></tr></table></figure><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# awk -va=1 '&#123;print $1,$1+a&#125;' log.txt</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">This's 1</span><br><span class="line">10 11</span><br><span class="line"></span><br><span class="line">[root@caoxl ~]# awk -va=1 -vb=s '&#123;print $1,$1+a,$1b&#125;' log.txt</span><br><span class="line">2 3 2s</span><br><span class="line">3 4 3s</span><br><span class="line">This's 1 This'ss</span><br><span class="line">10 11 10s</span><br></pre></td></tr></table></figure><h2 id="用法四"><a href="#用法四" class="headerlink" title="用法四:"></a>用法四:</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -f &#123;awk脚本&#125; &#123;文件名&#125;</span><br></pre></td></tr></table></figure><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><ul><li><code>cal.awk</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#!/bin/awk -f</span></span><br><span class="line"><span class="section">#运行前</span></span><br><span class="line">BEGIN &#123;</span><br><span class="line"><span class="code">    math = 0</span></span><br><span class="line"><span class="code">    english = 0</span></span><br><span class="line"><span class="code">    computer = 0</span></span><br><span class="line"> </span><br><span class="line"><span class="code">    printf "NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n"</span></span><br><span class="line"><span class="code">    printf "---------------------------------------------\n"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">#运行中</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="code">    math+=$3</span></span><br><span class="line"><span class="code">    english+=$4</span></span><br><span class="line"><span class="code">    computer+=$5</span></span><br><span class="line"><span class="code">    printf "%-6s %-6s %4d %8d %8d %8d\n", $1, $2, $3, $4, $5, $3+$4+$5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">#运行后</span></span><br><span class="line">END &#123;</span><br><span class="line"><span class="code">    printf "---------------------------------------------\n"</span></span><br><span class="line"><span class="code">    printf "  TOTAL:%10d %8d %8d \n", math, english, computer</span></span><br><span class="line"><span class="code">    printf "AVERAGE:%10.2f %8.2f %8.2f\n", math/NR, english/NR, computer/NR</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>score.txt</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Marry   2143 78 84 77</span><br><span class="line">Jack    2321 66 78 45</span><br><span class="line">Tom     2122 48 77 71</span><br><span class="line">Mike    2537 87 97 95</span><br><span class="line">Bob     2415 40 57 62</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# awk -f cal.awk score.txt</span><br><span class="line">NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL</span><br><span class="line">---------------------------------------------</span><br><span class="line">Marry  2143     78       84       77      239</span><br><span class="line">Jack   2321     66       78       45      189</span><br><span class="line">Tom    2122     48       77       71      196</span><br><span class="line">Mike   2537     87       97       95      279</span><br><span class="line">Bob    2415     40       57       62      159</span><br><span class="line">---------------------------------------------</span><br><span class="line">  TOTAL:       319      393      350 </span><br><span class="line">AVERAGE:     63.80    78.60    70.00</span><br></pre></td></tr></table></figure><h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法:"></a>其他用法:</h2><ul><li>从文件中找出长度大于30的行</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# awk 'length&gt;30' log.txt </span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure><ul><li>打印九九乘法表</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# seq 9 | sed 'H;g' | awk -v RS='' '&#123;for(i=1;i<span class="xml"><span class="tag">&lt;<span class="name">=NF;i++)printf("%dx%d=%d%s",</span> <span class="attr">i</span>, <span class="attr">NR</span>, <span class="attr">i</span>*<span class="attr">NR</span>, <span class="attr">i</span>==<span class="string">NR?</span>"\<span class="attr">n</span>"<span class="attr">:</span>"\<span class="attr">t</span>")&#125;'</span></span></span><br><span class="line"><span class="xml">1x1=1</span></span><br><span class="line"><span class="xml">1x2=22x2=4</span></span><br><span class="line"><span class="xml">1x3=32x3=63x3=9</span></span><br><span class="line"><span class="xml">1x4=42x4=83x4=124x4=16</span></span><br><span class="line"><span class="xml">1x5=52x5=103x5=154x5=205x5=25</span></span><br><span class="line"><span class="xml">1x6=62x6=123x6=184x6=245x6=306x6=36</span></span><br><span class="line"><span class="xml">1x7=72x7=143x7=214x7=285x7=356x7=427x7=49</span></span><br><span class="line"><span class="xml">1x8=82x8=163x8=244x8=325x8=406x8=487x8=568x8=64</span></span><br><span class="line"><span class="xml">1x9=92x9=183x9=274x9=365x9=456x9=547x9=638x9=729x9=81</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.caoxl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.caoxl.com/tags/Linux/"/>
    
      <category term="awk" scheme="http://blog.caoxl.com/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 基础知识 II</title>
    <link href="http://blog.caoxl.com/2020/04/23/MySQL-Basic-Knowledge-II/"/>
    <id>http://blog.caoxl.com/2020/04/23/MySQL-Basic-Knowledge-II/</id>
    <published>2020-04-23T07:58:29.000Z</published>
    <updated>2020-04-23T09:13:26.210Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>闲来无事, 复习复习MySQL<br><a href="https://learnku.com/articles/27776" target="_blank" rel="noopener">原文地址: [记录] MySQL 学习笔记</a></p></blockquote><a id="more"></a><h1 id="连接与断开服务器"><a href="#连接与断开服务器" class="headerlink" title="连接与断开服务器"></a>连接与断开服务器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</span><br><span class="line">SHOW PROCESSLIST; -- 显示哪些线程正在运行</span><br><span class="line">SHOW VARIABLES;   -- 显示系统变量信息</span><br></pre></td></tr></table></figure><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 查看当前数据库</span><br><span class="line">    SELECT DATABASE();</span><br><span class="line">-- 显示当前时间、用户名、数据库版本</span><br><span class="line">    SELECT now(), user(), version();</span><br><span class="line">-- 创建库</span><br><span class="line">    CREATE DATABASE [IF NOT EXISTS] 数据库名 数据库选项</span><br><span class="line">    数据库选项：</span><br><span class="line">        CHARACTER SET charset_name</span><br><span class="line">        COLLATE collation_name。</span><br><span class="line">-- 查看已有库</span><br><span class="line">    SHOW DATABASES [LIKE &apos;PATTERN&apos;]</span><br><span class="line">-- 查看当前库信息</span><br><span class="line">    SHOW CREATE DATABASE 数据库名</span><br><span class="line">-- 修改库的选项信息</span><br><span class="line">    ALTER DATABASE 库名 选项信息</span><br><span class="line">-- 删除库</span><br><span class="line">    DROP DATABASE[ IF EXISTS] 数据库名</span><br><span class="line">        同时删除该数据库相关的目录及其目录内容</span><br></pre></td></tr></table></figure><h1 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表</span><br><span class="line">    CREATE [TEMPORARY] TABLE [IF NOT EXISTS] [库名.]表名 (表的结构定义)[表选项]</span><br><span class="line">        每个字段必须有数据类型</span><br><span class="line">        最后一个字段后不能有逗号</span><br><span class="line">        TEMPORARY 临时表，会话结束时表自动消失</span><br><span class="line">        对于字段的定义：</span><br><span class="line">            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT &apos;string&apos;]</span><br><span class="line"></span><br><span class="line">-- 表选项</span><br><span class="line">    -- 字符集</span><br><span class="line">        CHARSET = charset_name</span><br><span class="line">        如果表没有设定，则使用数据库字符集</span><br><span class="line">    -- 存储引擎</span><br><span class="line">        ENGINE = engine_name</span><br><span class="line">        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同</span><br><span class="line">        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive</span><br><span class="line">        不同的引擎在保存表的结构和数据时采用不同的方式</span><br><span class="line">        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引</span><br><span class="line">        InnoDB表文件含义：.frm表定义，表空间数据和日志文件</span><br><span class="line">        SHOW ENGINES -- 显示存储引擎的状态信息</span><br><span class="line">        SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息</span><br><span class="line">    -- 自增起始数</span><br><span class="line">        AUTO_INCREMENT = 行数</span><br><span class="line">    -- 数据文件目录</span><br><span class="line">        DATA DIRECTORY = &apos;目录&apos;</span><br><span class="line">    -- 索引文件目录</span><br><span class="line">        INDEX DIRECTORY = &apos;目录&apos;</span><br><span class="line">    -- 表注释</span><br><span class="line">        COMMENT = &apos;string&apos;</span><br><span class="line">    -- 分区选项</span><br><span class="line">        PARTITION BY ... (详细见手册)</span><br><span class="line"></span><br><span class="line">-- 查看所有表</span><br><span class="line">    SHOW TABLES[ LIKE &apos;pattern&apos;]</span><br><span class="line">    SHOW TABLES FROM 表名</span><br><span class="line"></span><br><span class="line">-- 查看表结构</span><br><span class="line">    SHOW CREATE TABLE 表名 （信息更详细）</span><br><span class="line">    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE &apos;PATTERN&apos;]</span><br><span class="line">    SHOW TABLE STATUS [FROM db_name] [LIKE &apos;pattern&apos;]</span><br><span class="line"></span><br><span class="line">-- 修改表</span><br><span class="line">    -- 修改表本身的选项</span><br><span class="line">        ALTER TABLE 表名 表的选项</span><br><span class="line">        eg: ALTER TABLE 表名 ENGINE=MYISAM;</span><br><span class="line">    -- 对表进行重命名</span><br><span class="line">        RENAME TABLE 原表名 TO 新表名</span><br><span class="line">        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）</span><br><span class="line">        -- RENAME可以交换两个表名</span><br><span class="line">    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）</span><br><span class="line">        ALTER TABLE 表名 操作名</span><br><span class="line">        -- 操作名</span><br><span class="line">            ADD[COLUMN] 字段定义        -- 增加字段</span><br><span class="line">                AFTER 字段名            -- 表示增加在该字段名后面</span><br><span class="line">                FIRST                  -- 表示增加在第一个</span><br><span class="line">            ADD PRIMARY KEY(字段名)     -- 创建主键</span><br><span class="line">            ADD UNIQUE [索引名] (字段名) -- 创建唯一索引</span><br><span class="line">            ADD INDEX [索引名] (字段名)  -- 创建普通索引</span><br><span class="line">            DROP[ COLUMN] 字段名        -- 删除字段</span><br><span class="line">            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)</span><br><span class="line">            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改</span><br><span class="line">            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)</span><br><span class="line">            DROP INDEX 索引名 -- 删除索引</span><br><span class="line">            DROP FOREIGN KEY 外键    -- 删除外键</span><br><span class="line"></span><br><span class="line">-- 删除表</span><br><span class="line">    DROP TABLE[ IF EXISTS] 表名 ...</span><br><span class="line"></span><br><span class="line">-- 清空表数据</span><br><span class="line">    TRUNCATE [TABLE] 表名</span><br><span class="line"></span><br><span class="line">-- 复制表结构</span><br><span class="line">    CREATE TABLE 表名 LIKE 要复制的表名</span><br><span class="line"></span><br><span class="line">-- 复制表结构和数据</span><br><span class="line">    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名</span><br><span class="line"></span><br><span class="line">-- 检查表是否有错误</span><br><span class="line">    CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line"></span><br><span class="line">-- 优化表</span><br><span class="line">    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br><span class="line"></span><br><span class="line">-- 修复表</span><br><span class="line">    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]</span><br><span class="line"></span><br><span class="line">-- 分析表</span><br><span class="line">    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 增</span><br><span class="line">    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]</span><br><span class="line">        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。</span><br><span class="line">        -- 可同时插入多条数据记录！</span><br><span class="line">        REPLACE 与 INSERT 完全一样，可互换。</span><br><span class="line">    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]</span><br><span class="line"></span><br><span class="line">-- 查</span><br><span class="line">    SELECT 字段列表 FROM 表名[其他子句]</span><br><span class="line">        -- 可来自多个表的多个字段</span><br><span class="line">        -- 其他子句可以不使用</span><br><span class="line">        -- 字段列表可以用*代替，表示所有字段</span><br><span class="line"></span><br><span class="line">-- 删</span><br><span class="line">    DELETE FROM 表名[ 删除条件子句]</span><br><span class="line">        没有条件子句，则会删除全部</span><br><span class="line"></span><br><span class="line">-- 改</span><br><span class="line">    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]</span><br></pre></td></tr></table></figure><h1 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- MySQL、数据库、表、字段均可设置编码</span><br><span class="line">-- 数据编码与客户端编码不需一致</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &apos;character_set_%&apos;;   -- 查看所有字符集编码项</span><br><span class="line">    character_set_client        客户端向服务器发送数据时使用的编码</span><br><span class="line">    character_set_results       服务器端将结果返回给客户端所使用的编码</span><br><span class="line">    character_set_connection    连接层编码</span><br><span class="line">SET 变量名 = 变量值</span><br><span class="line">    SET character_set_client = gbk;</span><br><span class="line">    SET character_set_results = gbk;</span><br><span class="line">    SET character_set_connection = gbk;</span><br><span class="line">SET NAMES GBK;  -- 相当于完成以上三个设置</span><br><span class="line"></span><br><span class="line">-- 校对集</span><br><span class="line">    校对集用以排序</span><br><span class="line">    SHOW CHARACTER SET [LIKE &apos;pattern&apos;]/SHOW CHARSET [LIKE &apos;pattern&apos;]   查看所有字符集</span><br><span class="line">    SHOW COLLATION [LIKE &apos;pattern&apos;]     查看所有校对集</span><br><span class="line">    CHARSET 字符集编码     设置字符集编码</span><br><span class="line">    COLLATE 校对集编码     设置校对集编码</span><br></pre></td></tr></table></figure><h1 id="数据类型-列类型"><a href="#数据类型-列类型" class="headerlink" title="数据类型 (列类型)"></a>数据类型 (列类型)</h1><ul><li><ol><li>数值类型</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-- a. 整型 ----------</span><br><span class="line">    类型         字节     范围（有符号位）</span><br><span class="line">    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255</span><br><span class="line">    smallint    2字节    -32768 ~ 32767</span><br><span class="line">    mediumint   3字节    -8388608 ~ 8388607</span><br><span class="line">    int         4字节</span><br><span class="line">    bigint      8字节</span><br><span class="line">    int(M)  M表示总位数</span><br><span class="line">    - 默认存在符号位，unsigned 属性修改</span><br><span class="line">    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改</span><br><span class="line">        例：int(5)   插入一个数&apos;123&apos;，补填后为&apos;00123&apos;</span><br><span class="line">    - 在满足要求的情况下，越小越好。</span><br><span class="line">    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。</span><br><span class="line"></span><br><span class="line">-- b. 浮点型 ----------</span><br><span class="line">    类型             字节     范围</span><br><span class="line">    float(单精度)     4字节</span><br><span class="line">    double(双精度)    8字节</span><br><span class="line">    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。</span><br><span class="line">        不同于整型，前后均会补填0.</span><br><span class="line">    定义浮点型时，需指定总位数和小数位数。</span><br><span class="line">        float(M, D)     double(M, D)</span><br><span class="line">        M表示总位数，D表示小数位数。</span><br><span class="line">        M和D的大小会决定浮点数的范围。不同于整型的固定范围。</span><br><span class="line">        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。</span><br><span class="line">        支持科学计数法表示。</span><br><span class="line">        浮点数表示近似值。</span><br><span class="line"></span><br><span class="line">-- c. 定点数 ----------</span><br><span class="line">    decimal -- 可变长度</span><br><span class="line">    decimal(M, D)   M也表示总位数，D表示小数位数。</span><br><span class="line">    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。</span><br><span class="line">    将浮点数转换为字符串来保存，每9位数字保存为4个字节。</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>字符串类型</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-- a. char, varchar ----------</span><br><span class="line">    char    定长字符串，速度快，但浪费空间</span><br><span class="line">    varchar 变长字符串，速度慢，但节省空间</span><br><span class="line">    M表示能存储的最大长度，此长度是字符数，非字节数。</span><br><span class="line">    不同的编码，所占用的空间不同。</span><br><span class="line">    char,最多255个字符，与编码无关。</span><br><span class="line">    varchar,最多65535字符，与编码有关。</span><br><span class="line">    一条有效记录最大不能超过65535个字节。</span><br><span class="line">        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符</span><br><span class="line">    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。</span><br><span class="line">    varchar 的最大有效长度由最大行大小和使用的字符集确定。</span><br><span class="line">    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。</span><br><span class="line">    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3</span><br><span class="line"></span><br><span class="line">-- b. blob, text ----------</span><br><span class="line">    blob 二进制字符串（字节字符串）</span><br><span class="line">        tinyblob, blob, mediumblob, longblob</span><br><span class="line">    text 非二进制字符串（字符字符串）</span><br><span class="line">        tinytext, text, mediumtext, longtext</span><br><span class="line">    text 在定义时，不需要定义长度，也不会计算总长度。</span><br><span class="line">    text 类型在定义时，不可给default值</span><br><span class="line"></span><br><span class="line">-- c. binary, varbinary ----------</span><br><span class="line">    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。</span><br><span class="line">    char, varchar, text 对应 binary, varbinary, blob.</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>日期时间类型</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">3. 日期时间类型</span><br><span class="line">    一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。</span><br><span class="line">    datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59</span><br><span class="line">    date        3字节    日期         1000-01-01 到 9999-12-31</span><br><span class="line">    timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07</span><br><span class="line">    time        3字节    时间         -838:59:59 到 838:59:59</span><br><span class="line">    year        1字节    年份         1901 - 2155</span><br><span class="line">datetime    YYYY-MM-DD hh:mm:ss</span><br><span class="line">timestamp   YY-MM-DD hh:mm:ss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">date        YYYY-MM-DD</span><br><span class="line">            YY-MM-DD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">time        hh:mm:ss</span><br><span class="line">            hhmmss</span><br><span class="line">            hhmmss</span><br><span class="line">year        YYYY</span><br><span class="line">            YY</span><br><span class="line">            YYYY</span><br><span class="line">            YY</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>枚举和集合</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 枚举(enum) ----------</span><br><span class="line">enum(val1, val2, val3...)</span><br><span class="line">    在已知的值中进行单选。最大数量为65535.</span><br><span class="line">    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。</span><br><span class="line">    表现为字符串类型，存储却是整型。</span><br><span class="line">    NULL值的索引是NULL。</span><br><span class="line">    空字符串错误值的索引值是0。</span><br><span class="line"></span><br><span class="line">-- 集合(set) ----------</span><br><span class="line">set(val1, val2, val3...)</span><br><span class="line">    create table tab ( gender set(&apos;男&apos;, &apos;女&apos;, &apos;无&apos;) );</span><br><span class="line">    insert into tab values (&apos;男, 女&apos;);</span><br><span class="line">    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。</span><br><span class="line">    当创建表时，SET成员值的尾部空格将自动被删除。</span><br></pre></td></tr></table></figure><h1 id="列属性-列约束"><a href="#列属性-列约束" class="headerlink" title="列属性 (列约束)"></a>列属性 (列约束)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">1. PRIMARY 主键</span><br><span class="line">    - 能唯一标识记录的字段，可以作为主键。</span><br><span class="line">    - 一个表只能有一个主键。</span><br><span class="line">    - 主键具有唯一性。</span><br><span class="line">    - 声明字段时，用 primary key 标识。</span><br><span class="line">        也可以在字段列表之后声明</span><br><span class="line">            例：create table tab ( id int, stu varchar(10), primary key (id));</span><br><span class="line">    - 主键字段的值不能为null。</span><br><span class="line">    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。</span><br><span class="line">        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));</span><br><span class="line"></span><br><span class="line">2. UNIQUE 唯一索引（唯一约束）</span><br><span class="line">    使得某字段的值也不能重复。</span><br><span class="line"></span><br><span class="line">3. NULL 约束</span><br><span class="line">    null不是数据类型，是列的一个属性。</span><br><span class="line">    表示当前列是否可以为null，表示什么都没有。</span><br><span class="line">    null, 允许为空。默认。</span><br><span class="line">    not null, 不允许为空。</span><br><span class="line">    insert into tab values (null, &apos;val&apos;);</span><br><span class="line">        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null</span><br><span class="line"></span><br><span class="line">4. DEFAULT 默认值属性</span><br><span class="line">    当前字段的默认值。</span><br><span class="line">    insert into tab values (default, &apos;val&apos;);    -- 此时表示强制使用默认值。</span><br><span class="line">    create table tab ( add_time timestamp default current_timestamp );</span><br><span class="line">        -- 表示将当前时间的时间戳设为默认值。</span><br><span class="line">        current_date, current_time</span><br><span class="line"></span><br><span class="line">5. AUTO_INCREMENT 自动增长约束</span><br><span class="line">    自动增长必须为索引（主键或unique）</span><br><span class="line">    只能存在一个字段为自动增长。</span><br><span class="line">    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;</span><br><span class="line"></span><br><span class="line">6. COMMENT 注释</span><br><span class="line">    例：create table tab ( id int ) comment &apos;注释内容&apos;;</span><br><span class="line"></span><br><span class="line">7. FOREIGN KEY 外键约束</span><br><span class="line">    用于限制主表与从表数据完整性。</span><br><span class="line">    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);</span><br><span class="line">        -- 将表t1的t1_id外键关联到表t2的id字段。</span><br><span class="line">        -- 每个外键都有一个名字，可以通过 constraint 指定</span><br><span class="line">    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。</span><br><span class="line">    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。</span><br><span class="line">    MySQL中，可以对InnoDB引擎使用外键约束：</span><br><span class="line">    语法：</span><br><span class="line">    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]</span><br><span class="line">    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。</span><br><span class="line">    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。</span><br><span class="line">    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：</span><br><span class="line">    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。</span><br><span class="line">    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。</span><br><span class="line">    3. restrict，拒绝父表删除和更新。</span><br><span class="line">    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。</span><br></pre></td></tr></table></figure><h1 id="建表规范"><a href="#建表规范" class="headerlink" title="建表规范"></a>建表规范</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- Normal Format, NF</span><br><span class="line">    - 每个表保存一个实体信息</span><br><span class="line">    - 每个具有一个ID字段作为主键</span><br><span class="line">    - ID主键 + 原子表</span><br><span class="line"></span><br><span class="line">-- 1NF, 第一范式</span><br><span class="line">    字段不能再分，就满足第一范式。</span><br><span class="line">-- 2NF, 第二范式</span><br><span class="line">    满足第一范式的前提下，不能出现部分依赖。</span><br><span class="line">    消除符合主键就可以避免部分依赖。增加单列关键字。</span><br><span class="line">-- 3NF, 第三范式</span><br><span class="line">    满足第二范式的前提下，不能出现传递依赖。</span><br><span class="line">    某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。</span><br><span class="line">    将一个实体信息的数据放在一个表内实现。</span><br></pre></td></tr></table></figure><h1 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT</span><br><span class="line"></span><br><span class="line">a. select_expr</span><br><span class="line">    -- 可以用 * 表示所有字段。</span><br><span class="line">        select * from tb;</span><br><span class="line">    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）</span><br><span class="line">        select stu, 29+25, now() from tb;</span><br><span class="line">    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。</span><br><span class="line">        - 使用 as 关键字，也可省略 as.</span><br><span class="line">        select stu+10 as add10 from tb;</span><br><span class="line"></span><br><span class="line">b. FROM 子句</span><br><span class="line">    用于标识查询来源。</span><br><span class="line">    -- 可以为表起别名。使用as关键字。</span><br><span class="line">        SELECT * FROM tb1 AS tt, tb2 AS bb;</span><br><span class="line">    -- from子句后，可以同时出现多个表。</span><br><span class="line">        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。</span><br><span class="line">        SELECT * FROM tb1, tb2;</span><br><span class="line">    -- 向优化符提示如何选择索引</span><br><span class="line">        USE INDEX、IGNORE INDEX、FORCE INDEX</span><br><span class="line">        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;</span><br><span class="line">        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;</span><br><span class="line"></span><br><span class="line">c. WHERE 子句</span><br><span class="line">    -- 从from获得的数据源中进行筛选。</span><br><span class="line">    -- 整型1表示真，0表示假。</span><br><span class="line">    -- 表达式由运算符和运算数组成。</span><br><span class="line">        -- 运算数：变量（字段）、值、函数返回值</span><br><span class="line">        -- 运算符：</span><br><span class="line">            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,</span><br><span class="line">            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor</span><br><span class="line">            is/is not 加上ture/false/unknown，检验某个值的真假</span><br><span class="line">            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较</span><br><span class="line"></span><br><span class="line">d. GROUP BY 子句, 分组子句</span><br><span class="line">    GROUP BY 字段/别名 [排序方式]</span><br><span class="line">    分组后会进行排序。升序：ASC，降序：DESC</span><br><span class="line">    以下[合计函数]需配合 GROUP BY 使用：</span><br><span class="line">    count 返回不同的非NULL值数目  count(*)、count(字段)</span><br><span class="line">    sum 求和</span><br><span class="line">    max 求最大值</span><br><span class="line">    min 求最小值</span><br><span class="line">    avg 求平均值</span><br><span class="line">    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。</span><br><span class="line"></span><br><span class="line">e. HAVING 子句，条件子句</span><br><span class="line">    与 where 功能、用法相同，执行时机不同。</span><br><span class="line">    where 在开始时执行检测数据，对原数据进行过滤。</span><br><span class="line">    having 对筛选出的结果再次进行过滤。</span><br><span class="line">    having 字段必须是查询出来的，where 字段必须是数据表存在的。</span><br><span class="line">    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。</span><br><span class="line">    where 不可以使用合计函数。一般需用合计函数才会用 having</span><br><span class="line">    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。</span><br><span class="line"></span><br><span class="line">f. ORDER BY 子句，排序子句</span><br><span class="line">    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...</span><br><span class="line">    升序：ASC，降序：DESC</span><br><span class="line">    支持多个字段的排序。</span><br><span class="line"></span><br><span class="line">g. LIMIT 子句，限制结果数量子句</span><br><span class="line">    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。</span><br><span class="line">    limit 起始位置, 获取条数</span><br><span class="line">    省略第一个参数，表示从索引0开始。limit 获取条数</span><br><span class="line"></span><br><span class="line">h. DISTINCT, ALL 选项</span><br><span class="line">    distinct 去除重复记录</span><br><span class="line">    默认为 all, 全部记录</span><br></pre></td></tr></table></figure><h1 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">将多个select查询的结果组合成一个结果集合。</span><br><span class="line">SELECT ... UNION [ALL|DISTINCT] SELECT ...</span><br><span class="line">默认 DISTINCT 方式，即所有返回的行都是唯一的</span><br><span class="line">建议，对每个SELECT查询加上小括号包裹。</span><br><span class="line">ORDER BY 排序时，需加上 LIMIT 进行结合。</span><br><span class="line">需要各select查询的字段数量一样。</span><br><span class="line">每个select查询的字段列表（数量、类型）应一致，因为结果中的字段名以第一条select语句为准。</span><br></pre></td></tr></table></figure><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- 子查询需用括号包裹。</span><br><span class="line">-- from型</span><br><span class="line">    from后要求是一个表，必须给子查询结果取个别名。</span><br><span class="line">    - 简化每个查询内的条件。</span><br><span class="line">    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。</span><br><span class="line">    - 子查询返回一个表，表型子查询。</span><br><span class="line">    select * from (select * from tb where id &gt; 0) as subfrom where id&gt;1;</span><br><span class="line"></span><br><span class="line">-- where型</span><br><span class="line">    - 子查询返回一个值，标量子查询。</span><br><span class="line">    - 不需要给子查询取别名。</span><br><span class="line">    - where子查询内的表，不能直接用以更新。</span><br><span class="line">    select * from tb where money = (select max(money) from tb);</span><br><span class="line">    -- 列子查询</span><br><span class="line">        如果子查询结果返回的是一列。</span><br><span class="line">        使用 in 或 not in 完成查询</span><br><span class="line">        exists 和 not exists 条件</span><br><span class="line">            如果子查询返回数据，则返回1或0。常用于判断条件。</span><br><span class="line">            select column1 from t1 where exists (select * from t2);</span><br><span class="line">    -- 行子查询</span><br><span class="line">        查询条件是一个行。</span><br><span class="line">        select * from t1 where (id, gender) in (select id, gender from t2);</span><br><span class="line">        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)</span><br><span class="line">        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。</span><br><span class="line">    -- 特殊运算符</span><br><span class="line">    != all()    相当于 not in</span><br><span class="line">    = some()    相当于 in。any 是 some 的别名</span><br><span class="line">    != some()   不等同于 not in，不等于其中某一个。</span><br><span class="line">    all, some 可以配合其他运算符一起使用。</span><br></pre></td></tr></table></figure><h1 id="连接查询-JOIN"><a href="#连接查询-JOIN" class="headerlink" title="连接查询 (JOIN)"></a>连接查询 (JOIN)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">将多个表的字段进行连接，可以指定连接条件。</span><br><span class="line">-- 内连接(inner join)</span><br><span class="line">    - 默认就是内连接，可省略inner。</span><br><span class="line">    - 只有数据存在时才能发送连接。即连接结果不能出现空行。</span><br><span class="line">    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）</span><br><span class="line">    也可用where表示连接条件。</span><br><span class="line">    还有 using, 但需字段名相同。 using(字段名)</span><br><span class="line">    -- 交叉连接 cross join</span><br><span class="line">        即，没有条件的内连接。</span><br><span class="line">        select * from tb1 cross join tb2;</span><br><span class="line"></span><br><span class="line">-- 外连接(outer join)</span><br><span class="line">    - 如果数据不存在，也会出现在连接结果中。</span><br><span class="line">    -- 左外连接 left join</span><br><span class="line">        如果数据不存在，左表记录会出现，而右表为null填充</span><br><span class="line">    -- 右外连接 right join</span><br><span class="line">        如果数据不存在，右表记录会出现，而左表为null填充</span><br><span class="line"></span><br><span class="line">-- 自然连接(natural join)</span><br><span class="line">    自动判断连接条件完成连接。</span><br><span class="line">    相当于省略了using，会自动查找相同字段名。</span><br><span class="line">    natural join</span><br><span class="line">    natural left join</span><br><span class="line">    natural right join</span><br></pre></td></tr></table></figure><h1 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">select语句获得的数据可以用insert插入。</span><br><span class="line">可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。</span><br><span class="line">    或者使用set语法。</span><br><span class="line">    INSERT INTO tbl_name SET field=value,...；</span><br><span class="line"></span><br><span class="line">可以一次性使用多个值，采用(), (), ();的形式。</span><br><span class="line">    INSERT INTO tbl_name VALUES (), (), ();</span><br><span class="line"></span><br><span class="line">可以在列值指定时，使用表达式。</span><br><span class="line">    INSERT INTO tbl_name VALUES (field_value, 10+10, now());</span><br><span class="line"></span><br><span class="line">可以使用一个特殊值 DEFAULT，表示该列使用默认值。</span><br><span class="line">    INSERT INTO tbl_name VALUES (field_value, DEFAULT);</span><br><span class="line"></span><br><span class="line">可以通过一个查询的结果，作为需要插入的值。</span><br><span class="line">    INSERT INTO tbl_name SELECT ...;</span><br><span class="line"></span><br><span class="line">可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。</span><br><span class="line">    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, ...;</span><br></pre></td></tr></table></figure><h1 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]</span><br><span class="line">按照条件删除。where</span><br><span class="line">指定删除的最多记录数。limit</span><br><span class="line">可以通过排序条件删除。order by + limit</span><br><span class="line">支持多表删除，使用类似连接语法。</span><br><span class="line">delete from 需要删除数据多表1，表2 using 表连接操作 条件。</span><br></pre></td></tr></table></figure><h1 id="TRUNCATE"><a href="#TRUNCATE" class="headerlink" title="TRUNCATE"></a>TRUNCATE</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE [TABLE] tbl_name</span><br><span class="line">清空数据</span><br><span class="line">删除重建表</span><br><span class="line">区别：</span><br><span class="line">1. truncate 是删除表再创建，delete 是逐条删除</span><br><span class="line">2. truncate 重置auto_increment的值。而delete不会</span><br><span class="line">3. truncate 不知道删除了几条，而delete知道。</span><br><span class="line">4. 当被用于带分区的表时，truncate 会保留分区</span><br></pre></td></tr></table></figure><h1 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h1><blockquote><p>备份，将数据的结构与表内数据保存起来。<br>  利用 mysqldump 指令完成。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 导出</span><br><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line">mysqldump [options] ---database DB1 [DB2 DB3...]</span><br><span class="line">mysqldump [options] --all--database</span><br><span class="line">1. 导出一张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span><br><span class="line">2. 导出多张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)</span><br><span class="line">3. 导出所有表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">4. 导出一个库</span><br><span class="line">　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">可以-w携带WHERE条件</span><br><span class="line"></span><br><span class="line">-- 导入</span><br><span class="line">1. 在登录mysql的情况下：</span><br><span class="line">　　source  备份文件</span><br><span class="line">2. 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><blockquote><p>什么是视图：<br>      视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。<br>      视图具有表结构文件，但不存在数据文件。<br>      对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。<br>      视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-- 创建视图</span><br><span class="line">CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW view_name [(column_list)] AS select_statement</span><br><span class="line">    - 视图名必须唯一，同时不能与表重名。</span><br><span class="line">    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。</span><br><span class="line">    - 可以指定视图执行的算法，通过ALGORITHM指定。</span><br><span class="line">    - column_list如果存在，则数目必须等于SELECT语句检索的列数</span><br><span class="line"></span><br><span class="line">-- 查看结构</span><br><span class="line">    SHOW CREATE VIEW view_name</span><br><span class="line"></span><br><span class="line">-- 删除视图</span><br><span class="line">    - 删除视图后，数据依然存在。</span><br><span class="line">    - 可同时删除多个视图。</span><br><span class="line">    DROP VIEW [IF EXISTS] view_name ...</span><br><span class="line"></span><br><span class="line">-- 修改视图结构</span><br><span class="line">    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。</span><br><span class="line">    ALTER VIEW view_name [(column_list)] AS select_statement</span><br><span class="line"></span><br><span class="line">-- 视图作用</span><br><span class="line">    1. 简化业务逻辑</span><br><span class="line">    2. 对客户端隐藏真实的表结构</span><br><span class="line"></span><br><span class="line">-- 视图算法(ALGORITHM)</span><br><span class="line">    MERGE       合并</span><br><span class="line">        将视图的查询语句，与外部查询需要先合并再执行！</span><br><span class="line">    TEMPTABLE   临时表</span><br><span class="line">        将视图执行完毕后，形成临时表，再做外层查询！</span><br><span class="line">    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。</span><br></pre></td></tr></table></figure><h1 id="事务-transaction"><a href="#事务-transaction" class="headerlink" title="事务 (transaction)"></a>事务 (transaction)</h1><blockquote><p>事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</p><pre><code>- 支持连续SQL的集体成功或集体撤销。- 事务是数据库在数据晚自习方面的一个功能。- 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。- InnoDB被称为事务安全型引擎。</code></pre></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">-- 事务开启</span><br><span class="line">    START TRANSACTION; 或者 BEGIN;</span><br><span class="line">    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。</span><br><span class="line"></span><br><span class="line">-- 事务提交</span><br><span class="line">    COMMIT;</span><br><span class="line"></span><br><span class="line">-- 事务回滚</span><br><span class="line">    ROLLBACK;</span><br><span class="line">    如果部分操作发生问题，映射到事务开启前。</span><br><span class="line"></span><br><span class="line">-- 事务的特性</span><br><span class="line">    1. 原子性（Atomicity）</span><br><span class="line">        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</span><br><span class="line">    2. 一致性（Consistency）</span><br><span class="line">        事务前后数据的完整性必须保持一致。</span><br><span class="line">        - 事务开始和结束时，外部数据一致</span><br><span class="line">        - 在整个事务过程中，操作是连续的</span><br><span class="line">    3. 隔离性（Isolation）</span><br><span class="line">        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。</span><br><span class="line">    4. 持久性（Durability）</span><br><span class="line">        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。</span><br><span class="line"></span><br><span class="line">-- 事务的实现</span><br><span class="line">    1. 要求是事务支持的表类型</span><br><span class="line">    2. 执行一组相关的操作前开启事务</span><br><span class="line">    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。</span><br><span class="line"></span><br><span class="line">-- 事务的原理</span><br><span class="line">    利用InnoDB的自动提交(autocommit)特性完成。</span><br><span class="line">    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。</span><br><span class="line">    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。</span><br><span class="line">-- 注意</span><br><span class="line">    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。</span><br><span class="line">    2. 事务不能被嵌套</span><br><span class="line"></span><br><span class="line">-- 保存点</span><br><span class="line">    SAVEPOINT 保存点名称 -- 设置一个事务保存点</span><br><span class="line">    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点</span><br><span class="line">    RELEASE SAVEPOINT 保存点名称 -- 删除保存点</span><br><span class="line"></span><br><span class="line">-- InnoDB自动提交特性设置</span><br><span class="line">    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。</span><br><span class="line">    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。</span><br><span class="line">    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，</span><br><span class="line">        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)</span><br><span class="line">        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)</span><br></pre></td></tr></table></figure><h1 id="锁表"><a href="#锁表" class="headerlink" title="锁表"></a>锁表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表锁定只用于防止其它客户端进行不正当地读取和写入</span><br><span class="line">MyISAM 支持表锁，InnoDB 支持行锁</span><br><span class="line">-- 锁定</span><br><span class="line">    LOCK TABLES tbl_name [AS alias]</span><br><span class="line">-- 解锁</span><br><span class="line">    UNLOCK TABLES</span><br></pre></td></tr></table></figure><h1 id="SQL编程"><a href="#SQL编程" class="headerlink" title="SQL编程"></a>SQL编程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">--// 局部变量 ----------</span><br><span class="line">-- 变量声明</span><br><span class="line">    declare var_name[,...] type [default value]</span><br><span class="line">    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。</span><br><span class="line">-- 赋值</span><br><span class="line">    使用 set 和 select into 语句为变量赋值。</span><br><span class="line">    - 注意：在函数内是可以使用全局变量（用户自定义的变量）</span><br><span class="line"></span><br><span class="line">--// 全局变量 ----------</span><br><span class="line">-- 定义、赋值</span><br><span class="line">set 语句可以定义并为变量赋值。</span><br><span class="line">set @var = value;</span><br><span class="line">也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。</span><br><span class="line">还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。</span><br><span class="line">select @var:=20;</span><br><span class="line">select @v1:=id, @v2=name from t1 limit 1;</span><br><span class="line">select * from tbl_name where @var:=30;</span><br><span class="line">select into 可以将表中查询获得的数据赋给变量。</span><br><span class="line">    -| select max(height) into @max_height from tb;</span><br><span class="line"></span><br><span class="line">-- 自定义变量名</span><br><span class="line">为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。</span><br><span class="line">@var=10;</span><br><span class="line">    - 变量被定义后，在整个会话周期都有效（登录到退出）</span><br><span class="line"></span><br><span class="line">--// 控制结构 ----------</span><br><span class="line">-- if语句</span><br><span class="line">if search_condition then</span><br><span class="line">    statement_list   </span><br><span class="line">[elseif search_condition then</span><br><span class="line">    statement_list]</span><br><span class="line">...</span><br><span class="line">[else</span><br><span class="line">    statement_list]</span><br><span class="line">end if;</span><br><span class="line">-- case语句</span><br><span class="line">CASE value WHEN [compare-value] THEN result</span><br><span class="line">[WHEN [compare-value] THEN result ...]</span><br><span class="line">[ELSE result]</span><br><span class="line">END</span><br><span class="line">-- while循环</span><br><span class="line">[begin_label:] while search_condition do</span><br><span class="line">    statement_list</span><br><span class="line">end while [end_label];</span><br><span class="line">- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。</span><br><span class="line">    -- 退出循环</span><br><span class="line">        退出整个循环 leave</span><br><span class="line">        退出当前循环 iterate</span><br><span class="line">        通过退出的标签决定退出哪个循环</span><br></pre></td></tr></table></figure><ul><li>内置函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">-- 数值函数</span><br><span class="line">abs(x)          -- 绝对值 abs(-10.9) = 10</span><br><span class="line">format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span><br><span class="line">ceil(x)         -- 向上取整 ceil(10.1) = 11</span><br><span class="line">floor(x)        -- 向下取整 floor (10.1) = 10</span><br><span class="line">round(x)        -- 四舍五入去整</span><br><span class="line">mod(m, n)       -- m%n m mod n 求余 10%3=1</span><br><span class="line">pi()            -- 获得圆周率</span><br><span class="line">pow(m, n)       -- m^n</span><br><span class="line">sqrt(x)         -- 算术平方根</span><br><span class="line">rand()          -- 随机数</span><br><span class="line">truncate(x, d)  -- 截取d位小数</span><br><span class="line"></span><br><span class="line">-- 时间日期函数</span><br><span class="line">now(), current_timestamp();     -- 当前日期时间</span><br><span class="line">current_date();                 -- 当前日期</span><br><span class="line">current_time();                 -- 当前时间</span><br><span class="line">date(&apos;yyyy-mm-dd hh:ii:ss&apos;);    -- 获取日期部分</span><br><span class="line">time(&apos;yyyy-mm-dd hh:ii:ss&apos;);    -- 获取时间部分</span><br><span class="line">date_format(&apos;yyyy-mm-dd hh:ii:ss&apos;, &apos;%d %y %a %d %m %b %j&apos;); -- 格式化时间</span><br><span class="line">unix_timestamp();               -- 获得unix时间戳</span><br><span class="line">from_unixtime();                -- 从时间戳获得时间</span><br><span class="line"></span><br><span class="line">-- 字符串函数</span><br><span class="line">length(string)          -- string长度，字节</span><br><span class="line">char_length(string)     -- string的字符个数</span><br><span class="line">substring(str, position [,length])      -- 从str的position开始,取length个字符</span><br><span class="line">replace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str</span><br><span class="line">instr(string ,substring)    -- 返回substring首次在string中出现的位置</span><br><span class="line">concat(string [,...])   -- 连接字串</span><br><span class="line">charset(str)            -- 返回字串字符集</span><br><span class="line">lcase(string)           -- 转换成小写</span><br><span class="line">left(string, length)    -- 从string2中的左边起取length个字符</span><br><span class="line">load_file(file_name)    -- 从文件读取内容</span><br><span class="line">locate(substring, string [,start_position]) -- 同instr,但可指定开始位置</span><br><span class="line">lpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length</span><br><span class="line">ltrim(string)           -- 去除前端空格</span><br><span class="line">repeat(string, count)   -- 重复count次</span><br><span class="line">rpad(string, length, pad)   --在str后用pad补充,直到长度为length</span><br><span class="line">rtrim(string)           -- 去除后端空格</span><br><span class="line">strcmp(string1 ,string2)    -- 逐字符比较两字串大小</span><br><span class="line"></span><br><span class="line">-- 流程函数</span><br><span class="line">case when [condition] then result [when [condition] then result ...] [else result] end   多分支</span><br><span class="line">if(expr1,expr2,expr3)  双分支。</span><br><span class="line"></span><br><span class="line">-- 聚合函数</span><br><span class="line">count()</span><br><span class="line">sum();</span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">avg();</span><br><span class="line">group_concat()</span><br><span class="line"></span><br><span class="line">-- 其他常用函数</span><br><span class="line">md5();</span><br><span class="line">default();</span><br></pre></td></tr></table></figure><ul><li>存储函数，自定义函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 新建</span><br><span class="line">    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型</span><br><span class="line">        函数体</span><br><span class="line">    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。</span><br><span class="line">    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。</span><br><span class="line">    - 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。</span><br><span class="line">    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。</span><br><span class="line">    - 多条语句应该使用 begin...end 语句块包含。</span><br><span class="line">    - 一定要有 return 返回值语句。</span><br><span class="line"></span><br><span class="line">-- 删除</span><br><span class="line">    DROP FUNCTION [IF EXISTS] function_name;</span><br><span class="line"></span><br><span class="line">-- 查看</span><br><span class="line">    SHOW FUNCTION STATUS LIKE &apos;PATTEN&apos;</span><br><span class="line">    SHOW CREATE FUNCTION function_name;</span><br><span class="line"></span><br><span class="line">-- 修改</span><br><span class="line">    ALTER FUNCTION function_name 函数选项</span><br></pre></td></tr></table></figure><ul><li>存储过程，自定义功能</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-- 定义</span><br><span class="line">存储存储过程 是一段代码（过程），存储在数据库中的sql组成。</span><br><span class="line">一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。</span><br><span class="line">而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。</span><br><span class="line"></span><br><span class="line">-- 创建</span><br><span class="line">CREATE PROCEDURE sp_name (参数列表)</span><br><span class="line">    过程体</span><br><span class="line">参数列表：不同于函数的参数列表，需要指明参数类型</span><br><span class="line">IN，表示输入型</span><br><span class="line">OUT，表示输出型</span><br><span class="line">INOUT，表示混合型</span><br><span class="line">注意，没有返回值。</span><br><span class="line"></span><br><span class="line">-- 存储过程</span><br><span class="line">存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。</span><br><span class="line">调用：CALL 过程名</span><br><span class="line">-- 注意</span><br><span class="line">- 没有返回值。</span><br><span class="line">- 只能单独调用，不可夹杂在其他语句中</span><br><span class="line">-- 参数</span><br><span class="line">IN|OUT|INOUT 参数名 数据类型</span><br><span class="line">IN      输入：在调用过程中，将数据输入到过程体内部的参数</span><br><span class="line">OUT     输出：在调用过程中，将过程体处理完的结果返回到客户端</span><br><span class="line">INOUT   输入输出：既可输入，也可输出</span><br><span class="line">-- 语法</span><br><span class="line">CREATE PROCEDURE 过程名 (参数列表)</span><br><span class="line">BEGIN</span><br><span class="line">    过程体</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h1 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">-- root密码重置</span><br><span class="line">1. 停止MySQL服务</span><br><span class="line">2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &amp;</span><br><span class="line">    [Windows] mysqld --skip-grant-tables</span><br><span class="line">3. use mysql;</span><br><span class="line">4. UPDATE `user` SET PASSWORD=PASSWORD(&quot;密码&quot;) WHERE `user` = &quot;root&quot;;</span><br><span class="line">5. FLUSH PRIVILEGES;</span><br><span class="line">用户信息表：mysql.user</span><br><span class="line"></span><br><span class="line">-- 刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">-- 增加用户</span><br><span class="line">CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)</span><br><span class="line">    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。</span><br><span class="line">    - 只能创建用户，不能赋予权限。</span><br><span class="line">    - 用户名，注意引号：如 &apos;user_name&apos;@&apos;192.168.1.1&apos;</span><br><span class="line">    - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span><br><span class="line"></span><br><span class="line">-- 重命名用户</span><br><span class="line">RENAME USER old_user TO new_user</span><br><span class="line"></span><br><span class="line">-- 设置密码</span><br><span class="line">SET PASSWORD = PASSWORD(&apos;密码&apos;)  -- 为当前用户设置密码</span><br><span class="line">SET PASSWORD FOR 用户名 = PASSWORD(&apos;密码&apos;) -- 为指定用户设置密码</span><br><span class="line"></span><br><span class="line">-- 删除用户</span><br><span class="line">DROP USER 用户名</span><br><span class="line"></span><br><span class="line">-- 分配权限/添加用户</span><br><span class="line">GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &apos;password&apos;]</span><br><span class="line">    - all privileges 表示所有权限</span><br><span class="line">    - *.* 表示所有库的所有表</span><br><span class="line">    - 库名.表名 表示某库下面的某表</span><br><span class="line">    GRANT ALL PRIVILEGES ON `pms`.* TO &apos;pms&apos;@&apos;%&apos; IDENTIFIED BY &apos;pms0817&apos;;</span><br><span class="line"></span><br><span class="line">-- 查看权限</span><br><span class="line">SHOW GRANTS FOR 用户名</span><br><span class="line">    -- 查看当前用户权限</span><br><span class="line">    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();</span><br><span class="line"></span><br><span class="line">-- 撤消权限</span><br><span class="line">REVOKE 权限列表 ON 表名 FROM 用户名</span><br><span class="line">REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限</span><br><span class="line"></span><br><span class="line">-- 权限层级</span><br><span class="line">-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。</span><br><span class="line">全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user</span><br><span class="line">    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。</span><br><span class="line">数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host</span><br><span class="line">    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。</span><br><span class="line">表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv</span><br><span class="line">    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。</span><br><span class="line">列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv</span><br><span class="line">    当使用REVOKE时，您必须指定与被授权列相同的列。</span><br><span class="line"></span><br><span class="line">-- 权限列表</span><br><span class="line">ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限</span><br><span class="line">ALTER   -- 允许使用ALTER TABLE</span><br><span class="line">ALTER ROUTINE   -- 更改或取消已存储的子程序</span><br><span class="line">CREATE  -- 允许使用CREATE TABLE</span><br><span class="line">CREATE ROUTINE  -- 创建已存储的子程序</span><br><span class="line">CREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE</span><br><span class="line">CREATE USER;     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span><br><span class="line">CREATE VIEW     -- 允许使用CREATE VIEW</span><br><span class="line">DELETE  -- 允许使用DELETE</span><br><span class="line">DROP    -- 允许使用DROP TABLE</span><br><span class="line">EXECUTE     -- 允许用户运行已存储的子程序</span><br><span class="line">FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span><br><span class="line">INDEX   -- 允许使用CREATE INDEX和DROP INDEX</span><br><span class="line">INSERT  -- 允许使用INSERT</span><br><span class="line">LOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES</span><br><span class="line">PROCESS     -- 允许使用SHOW FULL PROCESSLIST</span><br><span class="line">REFERENCES  -- 未被实施</span><br><span class="line">RELOAD  -- 允许使用FLUSH</span><br><span class="line">REPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址</span><br><span class="line">REPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span><br><span class="line">SELECT  -- 允许使用SELECT</span><br><span class="line">SHOW DATABASES  -- 显示所有数据库</span><br><span class="line">SHOW VIEW   -- 允许使用SHOW CREATE VIEW</span><br><span class="line">SHUTDOWN    -- 允许使用mysqladmin shutdown</span><br><span class="line">SUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span><br><span class="line">UPDATE  -- 允许使用UPDATE</span><br><span class="line">USAGE   -- “无权限”的同义词</span><br><span class="line">GRANT OPTION    -- 允许授予权限</span><br></pre></td></tr></table></figure><h1 id="表维护"><a href="#表维护" class="headerlink" title="表维护"></a>表维护</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 分析和存储表的关键字分布</span><br><span class="line">ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...</span><br><span class="line"></span><br><span class="line">-- 检查一个或多个表是否有错误</span><br><span class="line">CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;</span><br><span class="line"></span><br><span class="line">-- 整理数据文件的碎片</span><br><span class="line">OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span><br><span class="line"></span><br><span class="line">2. 每个库目录存在一个保存当前数据库的选项文件db.opt。</span><br><span class="line"></span><br><span class="line">3. 注释：</span><br><span class="line">    单行注释 # 注释内容</span><br><span class="line">    多行注释 /* 注释内容 */</span><br><span class="line">    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span><br><span class="line"></span><br><span class="line">4. 模式通配符：</span><br><span class="line">    _   任意单个字符</span><br><span class="line">    %   任意多个字符，甚至包括零字符</span><br><span class="line">    单引号需要进行转义 \&apos;</span><br><span class="line"></span><br><span class="line">5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\G&quot;, &quot;\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span><br><span class="line"></span><br><span class="line">6. SQL对大小写不敏感</span><br><span class="line"></span><br><span class="line">7. 清除已有语句：\c</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;闲来无事, 复习复习MySQL&lt;br&gt;&lt;a href=&quot;https://learnku.com/articles/27776&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址: [记录] MySQL 学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://blog.caoxl.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://blog.caoxl.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Swoole 再深入</title>
    <link href="http://blog.caoxl.com/2020/04/09/Swoole-Learn-More/"/>
    <id>http://blog.caoxl.com/2020/04/09/Swoole-Learn-More/</id>
    <published>2020-04-09T03:55:42.000Z</published>
    <updated>2020-04-10T06:41:13.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>问即是学</p></blockquote><a id="more"></a><h1 id="基础编程知识"><a href="#基础编程知识" class="headerlink" title="基础编程知识"></a>基础编程知识</h1><h2 id="阻塞-和-非阻塞-的区别"><a href="#阻塞-和-非阻塞-的区别" class="headerlink" title="阻塞 和 非阻塞 的区别?"></a><code>阻塞</code> 和 <code>非阻塞</code> 的区别?</h2><ul><li>同步(<code>Synchronous</code>)IO</li></ul><blockquote><p>当一个程序发起调用的时候，在程序没有处理完成返回结果时，调用方会一直等待，等待结果的返回。</p></blockquote><ul><li>异步(<code>Asynchronous</code>)IO</li></ul><blockquote><p>当一个程序发起调用的时候，程序立即返回调用成功的消息，但不会马上返回结果，而是需要通过回调的方式把返回结果返回给调用方。</p></blockquote><ul><li>阻塞(<code>Blocking</code>)IO</li></ul><blockquote><p>阻塞就是在程序调用之后，结果返回之前，当前的进程/线程是被挂起的</p></blockquote><ul><li>非阻塞(<code>non-Blocking</code>)IO</li></ul><blockquote><p>非阻塞是指程序调用之后，结果返回之前，不会挂起该进程/线程的。</p></blockquote><h3 id="异步的优势"><a href="#异步的优势" class="headerlink" title="异步的优势 ?"></a>异步的优势 ?</h3><ul><li>高并发，同步阻塞IO模型的并发能力依赖于进程/线程数量</li><li>无IO等待，同步模型无法解决<code>IOWait</code>很高的场景</li></ul><h3 id="同步的优势"><a href="#同步的优势" class="headerlink" title="同步的优势 ?"></a>同步的优势 ?</h3><ul><li>编码简单，同步模式编写/调试程序更轻松</li><li>可控性好，同步模式的程序具有良好的过载保护机制</li></ul><h2 id="PHP的GC机制"><a href="#PHP的GC机制" class="headerlink" title="PHP的GC机制 ?"></a>PHP的GC机制 ?</h2><blockquote><p>GC机制: 垃圾回收机制</p></blockquote><blockquote><p><code>PHP5.3</code>: 当变量容器的<code>ref_count</code>计数清0时，表示该变量容器就会被销毁，实现了内存回收<br><code>PHP5.3</code>版本之后引入<strong>根缓冲机制</strong>，即php启动时默认设置指定<code>zval</code>数量的根缓冲区（默认是10000），当php发现有存在循环引用的<code>zval</code>时，就会把其投入到根缓冲区，当根缓冲区达到配置文件中的指定数量（默认是10000）后，就会进行垃圾回收，以此解决循环引用导致的内存泄漏问题</p></blockquote><h2 id="PHP面向对象编程-对象引用机制和对象与内存之间的关系"><a href="#PHP面向对象编程-对象引用机制和对象与内存之间的关系" class="headerlink" title="PHP面向对象编程: 对象引用机制和对象与内存之间的关系 ?"></a>PHP面向对象编程: 对象引用机制和对象与内存之间的关系 ?</h2><blockquote><p>对象释放的时候调用了<code>__destruct()</code>,释放内存;</p></blockquote><h1 id="多进程编程"><a href="#多进程编程" class="headerlink" title="多进程编程"></a>多进程编程</h1><h2 id="fpm-和-swoole-的多进程模型及其区别"><a href="#fpm-和-swoole-的多进程模型及其区别" class="headerlink" title="fpm 和 swoole 的多进程模型及其区别 ?"></a><code>fpm</code> 和 <code>swoole</code> 的多进程模型及其区别 ?</h2><ul><li><code>PHP-FPM</code></li></ul><p><code>php-fpm</code> 就是通过 <code>FastCGI</code> 协议来处理 PHP 与第三方 WEB 服务器之间的通信<br>比如 <code>Nginx + php-fpm</code> 的组合，这种方式运行的 <code>fpm</code> 是 <code>Master/Worker</code> 模式，启动一个 <code>Master</code> 进程监听来自 <code>Nginx</code> 的请求，再 <code>fork</code> 多个 <code>Worker</code> 进程处理请求。每个 <code>Worker</code> 进程只能处理一个请求，单一进程的生命周期大体如下：</p><ol><li>初始化模块。</li><li>初始化请求。此处请求是请求 PHP 执行代码的意思，并非 HTTP 的请求。</li><li>执行 PHP 脚本。</li><li>结束请求。</li><li>关闭模块。</li></ol><ul><li><code>Swoole</code></li></ul><p><code>Swoole</code> 采用的也是 <code>Master/Worker</code> 模式，不同的是 <code>Master</code> 进程有多个 <code>Reactor</code> 线程，<code>Master</code> 只是一个事件发生器，负责监听 <code>Socket</code> 句柄的事件变化。<code>Worker</code> 以多进程的方式运行，接收来自 <code>Reactor</code> 线程的请求，并执行回调函数（PHP 编写的）。启动 <code>Master</code> 进程的流程大致是：</p><ol><li>初始化模块。</li><li>初始化请求。因为 swoole 需要通过 cli 的方式运行，所以初始化请求时，不会初始化 PHP 的全局变量，如 $_SERVER, $_POST, $_GET 等。</li><li>执行 PHP 脚本。包括词法、语法分析，变量、函数、类的初始化等，Master 进入监听状态，并不会结束进程。</li></ol><p><strong>对比不同:</strong></p><ul><li><p><strong>PHP-FPM</strong></p><ul><li>Master 主进程 / Worker 多进程模式。</li><li>启动 Master，通过 FastCGI 协议监听来自 Nginx 传输的请求。</li><li>每个 Worker 进程只对应一个连接，用于执行完整的 PHP 代码。</li><li>PHP 代码执行完毕，占用的内存会全部销毁，下一次请求需要重新再进行初始化等各种繁琐的操作。</li><li>只用于 HTTP Server。</li></ul></li><li><p><strong>Swoole</strong></p><ul><li>Master 主进程（由多个 Reactor 线程组成）/ Worker 多进程（或多线程）模式</li><li>启动 Master，初始化 PHP 代码，由 Reactor 监听 Socket 句柄的事件变化。</li><li>Reactor 主线程负责子多线程的均衡问题，Manager 进程管理 Worker 多进程，包括 TaskWorker 的进程。</li><li>每个 Worker 接受来自 Reactor 的请求，只需要执行回调函数部分的 PHP 代码。</li><li>只在 Master 启动时执行一遍 PHP 初始化代码，Master 进入监听状态，并不会结束进程。</li><li>不仅可以用于 HTTP Server，还可以建立 TCP 连接、WebSocket 连接。</li></ul></li></ul><h2 id="进程间通信-进程隔离-进程信号量"><a href="#进程间通信-进程隔离-进程信号量" class="headerlink" title="进程间通信? 进程隔离? 进程信号量?"></a>进程间通信? 进程隔离? 进程信号量?</h2><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><ul><li>管道</li></ul><ol><li>我们知道进程直接是相互独立的，那如果在进程之间通信就需要通过特殊介质，建立管道是其中一种方式。</li><li>管道分无名管道(pipe)和有名管道(FIFO)，无名管道只能用于父子进程或者兄弟进程这些具有亲缘关系的进程；</li><li>为了克服这个缺点，就有了有名管道，提供非亲缘关系直接进程间通信</li></ol><ul><li>信号</li></ul><ol><li>比如我们kill命令来杀死一个进程，就是内核生成一个信号，当系统捕获到是这个信号就会做出相应得操作。</li><li>信号可以作为进程间通信或修改行为的一种方式，明确地由一个进程发送给另一个进程。一个信号的产生叫生成，接收到一个信号叫捕获。</li></ol><ul><li>消息队列</li><li>共享内存</li></ul><h3 id="进程隔离"><a href="#进程隔离" class="headerlink" title="进程隔离"></a>进程隔离</h3><ul><li>不同的进程中PHP变量不是共享，即使是全局变量，在A进程内修改了它的值，在B进程内是无效的</li><li>如果需要在不同的Worker进程内共享数据，可以用<code>Redis</code>、<code>MySQL</code>、文件、<code>Swoole\Table</code>、<code>APCu</code>、<code>shmget</code>等工具实现</li><li>不同进程的文件句柄是隔离的，所以在A进程创建的Socket连接或打开的文件，在B进程内是无效，即使是将它的fd发送到B进程也是不可用的</li></ul><h1 id="基础的TCP-UDP认知"><a href="#基础的TCP-UDP认知" class="headerlink" title="基础的TCP/UDP认知"></a>基础的TCP/UDP认知</h1><h2 id="TCP-和-UDP的区别"><a href="#TCP-和-UDP的区别" class="headerlink" title="TCP 和 UDP的区别 ?"></a><code>TCP</code> 和 <code>UDP</code>的区别 ?</h2><blockquote><p>TCP(Transmission Control Protocol, 传输控制协议)<br>TCP 三次握手 四次挥手</p></blockquote><blockquote><p>UDP(User Data Protocol, 用户数据报协议)</p></blockquote><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><ol><li>基于连接与无连接;</li></ol></li><li><ol start="2"><li>对系统资源的要求 (TCP较多，UDP少);</li></ol></li><li><ol start="3"><li>UDP程序结构较简单;</li></ol></li><li><ol start="4"><li>流模式与数据报模式;</li></ol></li><li><ol start="5"><li>TCP保证数据正确性，UDP可能丢包;</li></ol></li><li><ol start="6"><li>TCP保证数据顺序，UDP不保证</li></ol></li></ul><h2 id="OSI七层模型中的上四层"><a href="#OSI七层模型中的上四层" class="headerlink" title="OSI七层模型中的上四层 ?"></a>OSI七层模型中的上四层 ?</h2><blockquote><p>应用层 表示层 会话层 传输层 网络层 数据链路层 物理层</p></blockquote><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><h2 id="Swoole的协程工作模式"><a href="#Swoole的协程工作模式" class="headerlink" title="Swoole的协程工作模式 ?"></a>Swoole的协程工作模式 ?</h2><ul><li>内存栈</li></ul><p><code>4.0</code>版本使用了<code>PHP</code>+<code>C</code>的双栈模式。创建协程时会创建一个<code>C</code>栈，默认尺寸为<code>2M</code>，创建一个<code>PHP</code>栈，默认为<code>8K</code>。</p><p>C栈主要用于保存底层函数调用的局部变量数据，用于解决<code>call_user_func</code>、<code>array_map</code>等C函数调用在协程切换时未能还原的问题。<code>4.0</code>版本无论如何切换协程，底层总是能正确地切换回原先的C函数栈帧继续向下执行。</p><ul><li>协程切换</li></ul><p><code>C</code>栈切换使用了<code>boost.context 1.60</code>汇编代码，用于保存寄存器，切换指令序列。主要是<code>jump_fcontext</code>这个<code>ASM</code>函数提供。<br><code>PHP</code>栈的切换是跟随C栈切同步进行的。底层会切换<code>EG(vm_stack)</code>使得<code>PHP</code>恢复到正确的<code>PHP</code>函数栈帧。<code>4.0.2</code>版本还增加了<code>ob</code>输出缓存区的切换，<code>ob_start</code>等操作也可以用于协程。</p><ul><li>协程调度</li></ul><p><code>4.0</code>协程实现中，主协程即为<code>Reactor</code>协程，负责整个<code>EventLoop</code>的运行。主协程实现事件监听，在IO事件完成后唤醒其他工作协程。</p><ul><li><ul><li>协程挂起</li></ul></li></ul><p>在工作协程中执行一些<code>IO</code>操作时，底层会将<code>IO</code>事件注册到<code>EventLoop</code>，并让出执行权。</p><ul><li><ul><li>协程恢复</li></ul></li></ul><p>当主协程的<code>Reactor</code>接收到新的<code>IO</code>事件，底层会挂起主协程，并恢复<code>IO</code>事件对应的工作协程。该工作协程挂起或退出时，会再次回到主协程。</p><h1 id="Swoole常见的”坑”"><a href="#Swoole常见的”坑”" class="headerlink" title="Swoole常见的”坑”"></a>Swoole常见的”坑”</h1><h2 id="为何全局变量无法共享呢"><a href="#为何全局变量无法共享呢" class="headerlink" title="为何全局变量无法共享呢 ?"></a>为何全局变量无法共享呢 ?</h2><blockquote><p>这是在于出现了进程克隆，而每个进程之间的数据都是不一致的。</p></blockquote><h2 id="echo-var-dump-无法输出到浏览器-http响应"><a href="#echo-var-dump-无法输出到浏览器-http响应" class="headerlink" title="echo var_dump 无法输出到浏览器(http响应) ?"></a><code>echo</code> <code>var_dump</code> 无法输出到浏览器(http响应) ?</h2><blockquote><p>原因在于模式的变更，<strong>swoole的运行模式不再是fpm，而是cli</strong>，如果你需要把数据响应给浏览器，你只能 通过<code>Http request</code>回调中的<code>response</code>对象进行响应</p></blockquote><h2 id="http请求参数获取"><a href="#http请求参数获取" class="headerlink" title="http请求参数获取 ?"></a>http请求参数获取 ?</h2><blockquote><p>在同<code>swoole</code>的<code>http</code>服务的时候，很多人会发现<code>$_GET</code>、<code>$_POST</code>等常见全局变量无法使用。这是因为<code>$_GET</code>、<code>$_POST</code>等变量都是全局的，在<code>swoole</code>当中会出现问题，如果想获取请求参数，可以用<code>swoole</code>回调时提供的<code>Request</code>对象来进行获取</p></blockquote><h2 id="swoole不能使用die-exit"><a href="#swoole不能使用die-exit" class="headerlink" title="swoole不能使用die/exit ?"></a>swoole不能使用die/exit ?</h2><blockquote><p><code>phper</code>都习惯用<code>die/exit</code>来调试代码，这是因为这个命令会直接退出当前进程，对于fpm来讲，每个请求都对应一个独立进程，退出了问题不大，但是在<code>swoole</code>当中，可能一个进程中会有多个请求同时在处理，如果你<code>exit</code>或者<code>die</code>来退出当前进程，会导致数据丢失。</p></blockquote><h2 id="swoole下为何需要断线重连"><a href="#swoole下为何需要断线重连" class="headerlink" title="swoole下为何需要断线重连 ?"></a>swoole下为何需要断线重连 ?</h2><blockquote><p>在<code>swoole</code>常驻内存的情况下， 请求结束后，该连接并不会被清理，依旧保留在内存空间内，而该连接若是长时间没有使用，或者是因为网络波动，那么就会断开。下次请求进来的时候，你没有判断连接状态，就直接去执行sql语句，那么就意味着你操作了一个断线的数据库连接，因此肯定会报错。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;问即是学&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Swoole" scheme="http://blog.caoxl.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>Swoft V2 学习日志</title>
    <link href="http://blog.caoxl.com/2020/04/09/Swoft-V2-Learning/"/>
    <id>http://blog.caoxl.com/2020/04/09/Swoft-V2-Learning/</id>
    <published>2020-04-09T02:43:20.000Z</published>
    <updated>2020-04-09T02:48:29.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Swoole" scheme="http://blog.caoxl.com/tags/Swoole/"/>
    
      <category term="Swoft" scheme="http://blog.caoxl.com/tags/Swoft/"/>
    
  </entry>
  
  <entry>
    <title>PHP7.4 新特性</title>
    <link href="http://blog.caoxl.com/2020/04/08/PHP-74-New-Features/"/>
    <id>http://blog.caoxl.com/2020/04/08/PHP-74-New-Features/</id>
    <published>2020-04-08T09:39:35.000Z</published>
    <updated>2020-04-08T09:55:44.301Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>原文地址: <a href="https://learnku.com/articles/37449" target="_blank" rel="noopener">PHP7.4 新特性</a></p></blockquote><a id="more"></a><h1 id="属性添加限定类型"><a href="#属性添加限定类型" class="headerlink" title="属性添加限定类型"></a>属性添加限定类型</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> int $age;</span><br><span class="line">  <span class="keyword">public</span> string $name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user = <span class="keyword">new</span> User();</span><br><span class="line">$user-&gt;age  = <span class="number">10</span>;</span><br><span class="line">$user-&gt;name = <span class="string">"张三"</span>;</span><br><span class="line"><span class="comment">// error 需要传递int</span></span><br><span class="line">$user-&gt;age  = <span class="string">"zhang"</span>;</span><br></pre></td></tr></table></figure><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>这个特性基本上参考 <code>Js</code> 的 <code>ES6</code> 的语法。可以让我们的代码写的更少。如果你的代码有 <code>fn</code> 这个函数。可能会冲突</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$factor = <span class="number">10</span>;</span><br><span class="line">$nums = array_map(fn($n) =&gt; $n * $factor, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// [10,20,30]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前的写法</span></span><br><span class="line">$nums = array_map(<span class="function"><span class="keyword">function</span> <span class="params">($num)</span> <span class="title">use</span> <span class="params">($factor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $num * $factor;</span><br><span class="line">&#125;, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h1 id="有限返回类型协变与参数类型逆变"><a href="#有限返回类型协变与参数类型逆变" class="headerlink" title="有限返回类型协变与参数类型逆变"></a>有限返回类型协变与参数类型逆变</h1><p>仅当使用自动加载时，才提供完全协变 / 逆变支持。在单个文件中，只能使用非循环类型引用，因为所有类在被引用之前都必须可用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span><span class="params">()</span>: <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildProducer</span> <span class="keyword">extends</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span><span class="params">()</span>: <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组解包"><a href="#数组解包" class="headerlink" title="数组解包"></a>数组解包</h1><p>使用展开运算符 <code>...</code> 解包数组。这个特性，应该又是从 js 那吸收过来的。看例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$parts  = [<span class="string">'apple'</span>, <span class="string">'pear'</span>];</span><br><span class="line">$fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, ...$parts, <span class="string">'watermelon'</span>];</span><br><span class="line"><span class="comment">// ['banana', 'orange', 'apple', 'pear', 'watermelon'];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 老的写法</span></span><br><span class="line">$fruits = array_merge([<span class="string">'banana'</span>, <span class="string">'orange'</span>], $parts, [<span class="string">'watermelon'</span>]);</span><br></pre></td></tr></table></figure><h1 id="空合并运算符赋值"><a href="#空合并运算符赋值" class="headerlink" title="空合并运算符赋值"></a>空合并运算符赋值</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php">$array[<span class="string">'key'</span>] ??= computeDefault();</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="comment">// 老的写法</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (!<span class="keyword">isset</span>($array[<span class="string">'key'</span>])) &#123;</span></span><br><span class="line"><span class="php">    $array[<span class="string">'key'</span>] = computeDefault();</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="数值文字分隔符"><a href="#数值文字分隔符" class="headerlink" title="数值文字分隔符"></a>数值文字分隔符</h1><p>数字文字可以在数字之间包含下划线。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="number">6.674</span>_083e<span class="number">-11</span>; <span class="comment">// float</span></span><br><span class="line"><span class="number">299</span>_792_458;   <span class="comment">// decimal</span></span><br><span class="line"><span class="number">0xCAFE</span>_F00D;   <span class="comment">// hexadecimal</span></span><br><span class="line"><span class="number">0</span>b0101_1111;   <span class="comment">// binary</span></span><br></pre></td></tr></table></figure><h1 id="允许从-toString-抛出异常"><a href="#允许从-toString-抛出异常" class="headerlink" title="允许从 __toString () 抛出异常"></a>允许从 __toString () 抛出异常</h1><blockquote><p>现在允许从 __toString() 引发异常，以往这会导致致命错误，字符串转换中现有的可恢复致命错误已转换为 Error 异常。</p></blockquote><h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><ul><li>新增 <code>FILTER_VALIDATE_FLOAT</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">filter_var(<span class="number">1.00</span>, FILTER_VALIDATE_FLOAT);</span><br></pre></td></tr></table></figure><h1 id="strip-tags-支持数组"><a href="#strip-tags-支持数组" class="headerlink" title="strip_tags 支持数组"></a>strip_tags 支持数组</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">strip_tags($str,[<span class="string">'p'</span>,<span class="string">'a'</span>,<span class="string">'div'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 老的写法</span></span><br><span class="line">strip_tags($str,<span class="string">"&lt;p&gt;&lt;a&gt;&lt;div&gt;"</span>);</span><br></pre></td></tr></table></figure><h1 id="废弃的特性"><a href="#废弃的特性" class="headerlink" title="废弃的特性"></a>废弃的特性</h1><h2 id="没有显式括号的嵌套三元运算符"><a href="#没有显式括号的嵌套三元运算符" class="headerlink" title="没有显式括号的嵌套三元运算符"></a>没有显式括号的嵌套三元运算符</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> ? <span class="number">2</span> : <span class="number">3</span> ? <span class="number">4</span> : <span class="number">5</span>;   <span class="comment">// deprecated</span></span><br><span class="line">(<span class="number">1</span> ? <span class="number">2</span> : <span class="number">3</span>) ? <span class="number">4</span> : <span class="number">5</span>; <span class="comment">// ok</span></span><br><span class="line"><span class="number">1</span> ? <span class="number">2</span> : (<span class="number">3</span> ? <span class="number">4</span> : <span class="number">5</span>); <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><h2 id="花括号访问数组索引"><a href="#花括号访问数组索引" class="headerlink" title="花括号访问数组索引"></a>花括号访问数组索引</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$arr = [<span class="string">"a"</span>=&gt;<span class="string">"111"</span>];</span><br><span class="line">$index = <span class="string">"a"</span>;</span><br><span class="line">$arr&#123;$index&#125;; <span class="comment">// 废弃</span></span><br><span class="line">$arr[$index];</span><br></pre></td></tr></table></figure><h2 id="real-和-is-real-实数"><a href="#real-和-is-real-实数" class="headerlink" title="real 和 is_real 实数"></a>real 和 is_real 实数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$num = <span class="string">""</span>;</span><br><span class="line">$a = (real) $num; <span class="comment">// 废弃</span></span><br><span class="line">$a = (float) $num;</span><br></pre></td></tr></table></figure><h2 id="parent-关键词在没父类的类中使用"><a href="#parent-关键词在没父类的类中使用" class="headerlink" title="parent 关键词在没父类的类中使用"></a>parent 关键词在没父类的类中使用</h2><p>在没有父类的类中使用 parent 会出现编译错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::index(); <span class="comment">//编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="money-format-函数"><a href="#money-format-函数" class="headerlink" title="money_format 函数"></a>money_format 函数</h2><p><code>money_format</code> 被废弃，使用 <code>numberFormater</code> 替换</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址: &lt;a href=&quot;https://learnku.com/articles/37449&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHP7.4 新特性&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://blog.caoxl.com/categories/PHP/"/>
    
    
      <category term="PHP7.4" scheme="http://blog.caoxl.com/tags/PHP7-4/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 再深入</title>
    <link href="http://blog.caoxl.com/2020/04/08/RabbitMQ-Learn-More/"/>
    <id>http://blog.caoxl.com/2020/04/08/RabbitMQ-Learn-More/</id>
    <published>2020-04-08T06:19:22.000Z</published>
    <updated>2020-04-08T07:11:27.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>问即是学</p></blockquote><a id="more"></a><h1 id="什么是RabbitMQ"><a href="#什么是RabbitMQ" class="headerlink" title="什么是RabbitMQ ?"></a>什么是RabbitMQ ?</h1><blockquote><p>RabbitMQ是一款开源的，Erlang编写的，基于AMQP协议的消息中间件</p></blockquote><h1 id="什么是消息中间件"><a href="#什么是消息中间件" class="headerlink" title="什么是消息中间件 ?"></a>什么是消息中间件 ?</h1><blockquote><p>是关注于数据的发送和接收，利用高效可靠的异步消息传递机制集成分布式系统</p></blockquote><h1 id="RabbitMQ的使用场景"><a href="#RabbitMQ的使用场景" class="headerlink" title="RabbitMQ的使用场景 ?"></a>RabbitMQ的使用场景 ?</h1><ul><li><ol><li>服务间异步通信</li></ol></li><li><ol start="2"><li>顺序消费</li></ol></li><li><ol start="3"><li>定时任务</li></ol></li><li><ol start="4"><li>请求削峰</li></ol></li></ul><h1 id="RabbitMQ基本概念"><a href="#RabbitMQ基本概念" class="headerlink" title="RabbitMQ基本概念 ?"></a>RabbitMQ基本概念 ?</h1><blockquote><ul><li><code>Broker</code>: 简单来说就是消息队列服务器实体</li><li><code>Exchange</code>: 消息交换机，它指定消息按什么规则，路由到哪个队列</li><li><code>Queue</code>: 消息队列载体，每个消息都会被投入到一个或多个队列</li><li><code>Binding</code>:  绑定，它的作用就是把<code>exchange</code>和<code>queue</code>按照路由规则绑定起来</li><li><code>Routing Key</code>:  路由关键字，<code>exchange</code>根据这个关键字进行消息投递</li><li><code>VHost</code>:  vhost 可以理解为虚拟 <code>broker</code> ，即 mini-RabbitMQ server。其内部均含有独立的 <code>queue</code>、<code>exchange</code> 和 <code>binding</code> 等，但最最重要的是，其拥有独立的权限系统，可以做到 vhost 范围的用户控制。当然，从 RabbitMQ 的全局角度，vhost 可以作为不同权限隔离的手段</li><li><code>Producer</code>: 消息生产者，就是投递消息的程序</li><li><code>Consumer</code>: 消息消费者，就是接受消息的程序</li><li><code>Channel</code>: 消息通道，在客户端的每个连接里，可建立多个<code>channel</code>，每个<code>channel</code>代表一个会话任务</li></ul></blockquote><h1 id="RabbitMQ的工作模式"><a href="#RabbitMQ的工作模式" class="headerlink" title="RabbitMQ的工作模式 ?"></a>RabbitMQ的工作模式 ?</h1><h2 id="Simple模式-即最简单的收发模式"><a href="#Simple模式-即最简单的收发模式" class="headerlink" title="Simple模式 (即最简单的收发模式)"></a>Simple模式 (即最简单的收发模式)</h2><ul><li><ol><li>消息产生消息，将消息放入队列</li></ol></li><li><ol start="2"><li>消息的消费者(<code>consumer</code>) 监听 消息队列,如果队列中有消息,就消费掉,消息被拿走后,自动从队列中删除(隐患 消息可能没有被消费者正确处理,已经从队列中消失了,造成消息的丢失，这里可以设置成手动的<code>ack</code>,但如果设置成手动<code>ack</code>，处理完后要及时发送<code>ack</code>消息给队列，否则会造成内存溢出)。</li></ol></li></ul><h2 id="Work工作模式-资源的竞争"><a href="#Work工作模式-资源的竞争" class="headerlink" title="Work工作模式 (资源的竞争)"></a>Work工作模式 (资源的竞争)</h2><ul><li><ol><li>消息产生者将消息放入队列消费者可以有多个,消费者1,消费者2同时监听同一个队列,消息被消费。</li></ol></li><li><ol start="2"><li>C1 C2共同争抢当前的消息队列内容,谁先拿到谁负责消费消息(隐患：高并发情况下,默认会产生某一个消息被多个消费者共同使用,可以设置一个开关(synchronize) 保证一条消息只能被一个消费者使用)。</li></ol></li></ul><h2 id="Publish-Subscribe发布订阅-共享资源"><a href="#Publish-Subscribe发布订阅-共享资源" class="headerlink" title="Publish/Subscribe发布订阅 (共享资源)"></a>Publish/Subscribe发布订阅 (共享资源)</h2><ul><li><ol><li>每个消费者监听自己的队列；</li></ol></li><li><ol start="2"><li>生产者将消息发给<code>broker</code>，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收到消息。</li></ol></li></ul><h2 id="Routing路由模式"><a href="#Routing路由模式" class="headerlink" title="Routing路由模式"></a>Routing路由模式</h2><ul><li><ol><li>消息生产者将消息发送给交换机按照路由判断,路由是字符串(info) 当前产生的消息携带路由字符(对象的方法),交换机根据路由的key,只能匹配上路由key对应的消息队列,对应的消费者才能消费消息;</li></ol></li><li><ol start="2"><li>根据业务功能定义路由字符串</li></ol></li><li><ol start="3"><li>从系统的代码逻辑中获取对应的功能字符串,将消息任务扔到对应的队列中。</li></ol></li><li><ol start="4"><li>业务场景:error 通知;EXCEPTION;错误通知的功能;传统意义的错误通知;客户通知;利用key路由,可以将程序中的错误封装成消息传入到消息队列中,开发者可以自定义消费者,实时接收错误;</li></ol></li></ul><h2 id="Topic主题模式-路由模式的一种"><a href="#Topic主题模式-路由模式的一种" class="headerlink" title="Topic主题模式 (路由模式的一种)"></a>Topic主题模式 (路由模式的一种)</h2><ul><li><ol><li>星号井号代表通配符</li></ol></li><li><ol start="2"><li>星号代表多个单词,井号代表一个单词</li></ol></li><li><ol start="3"><li>路由功能添加模糊匹配</li></ol></li><li><ol start="4"><li>消息产生者产生消息,把消息交给交换机</li></ol></li><li><ol start="5"><li>交换机根据key的规则模糊匹配到对应的队列,由队列的监听消费者接收消息消费</li></ol></li></ul><h1 id="如何保证RabbitMQ消息的顺序性"><a href="#如何保证RabbitMQ消息的顺序性" class="headerlink" title="如何保证RabbitMQ消息的顺序性 ?"></a>如何保证RabbitMQ消息的顺序性 ?</h1><h1 id="如何确保消息正确地发送至-RabbitMQ"><a href="#如何确保消息正确地发送至-RabbitMQ" class="headerlink" title="如何确保消息正确地发送至 RabbitMQ ?"></a>如何确保消息正确地发送至 RabbitMQ ?</h1><h2 id="发送方确认模式"><a href="#发送方确认模式" class="headerlink" title="发送方确认模式"></a>发送方确认模式</h2><ul><li>将信道设置成 <code>confirm</code> 模式（发送方确认模式），则所有在信道上发布的消息都会被指派一个唯一的 ID。</li><li>一旦消息被投递到目的队列后，或者消息被写入磁盘后（可持久化的消息），信道会发送一个确认给生产者（包含消息唯一 ID）。</li><li>如果 RabbitMQ 发生内部错误从而导致消息丢失，会发送一条 <code>nack</code>（not acknowledged，未确认）消息。</li><li>发送方确认模式是异步的，生产者应用程序在等待确认的同时，可以继续发送消息。当确认消息到达生产者应用程序，生产者应用程序的回调方法就会被触发来处理确认消息。</li></ul><h2 id="接收方确认机制"><a href="#接收方确认机制" class="headerlink" title="接收方确认机制"></a>接收方确认机制</h2><ul><li>消费者接收每一条消息后都必须进行确认（消息接收和消息确认是两个不同操作）。只有消费者确认了消息，RabbitMQ 才能安全地把消息从队列中删除。</li><li>这里并没有用到超时机制，<code>RabbitMQ</code> 仅通过 <code>Consumer</code> 的连接中断来确认是否需要重新发送消息。也就是说，只要连接不中断，<code>RabbitMQ</code> 给了 <code>Consumer</code> 足够长的时间来处理消息。保证数据的最终一致性；</li></ul><p>下面罗列几种特殊情况</p><ul><li>如果消费者接收到消息，<strong>在确认之前断开了连接或取消订阅</strong>，RabbitMQ 会认为消息没有被分发，然后重新分发给下一个订阅的消费者。（可能存在消息重复消费的隐患，需要去重）</li><li>如果消费者接收到消息却没有确认消息，连接也未断开，则 RabbitMQ 认为该消费者繁忙，将不会给该消费者分发更多的消息。</li></ul><h1 id="如何保证RabbitMQ消息的可靠传输"><a href="#如何保证RabbitMQ消息的可靠传输" class="headerlink" title="如何保证RabbitMQ消息的可靠传输 ?"></a>如何保证RabbitMQ消息的可靠传输 ?</h1><p>消息不可靠的情况可能是消息丢失，劫持等原因；</p><p>丢失又分为：<code>生产者丢失消息</code>、<code>消息列表丢失消息</code>、<code>消费者丢失消息</code>；</p><h2 id="生产者丢失消息"><a href="#生产者丢失消息" class="headerlink" title="生产者丢失消息"></a>生产者丢失消息</h2><p>从生产者弄丢数据这个角度来看，RabbitMQ提供<code>transaction</code>和<code>confirm</code>模式来确保生产者不丢消息；</p><ul><li><code>transaction</code>机制</li></ul><blockquote><p>发送消息前，开启事务（channel.txSelect()）,然后发送消息，如果发送过程中出现什么异常，事务就会回滚（channel.txRollback()）,如果发送成功则提交事务（channel.txCommit()）。然而，这种方式有个缺点：吞吐量下降；</p></blockquote><ul><li><code>confirm</code>模式</li></ul><blockquote><p>一旦channel进入confirm模式，所有在该信道上发布的消息都将会被指派一个唯一的ID（从1开始），一旦消息被投递到所有匹配的队列之后；<br>rabbitMQ就会发送一个ACK给生产者（包含消息的唯一ID），这就使得生产者知道消息已经正确到达目的队列了；<br>如果rabbitMQ没能处理该消息，则会发送一个Nack消息给你，你可以进行重试操作。</p></blockquote><h2 id="消息队列丢失消息"><a href="#消息队列丢失消息" class="headerlink" title="消息队列丢失消息"></a>消息队列丢失消息</h2><blockquote><p>消息持久化。处理消息队列丢数据的情况，一般是开启持久化磁盘的配置。</p></blockquote><p>如何持久化?</p><ul><li><ol><li>将<code>queue</code>的持久化标识<code>durable</code>设置为<code>true</code>,则代表是一个持久的队列</li></ol></li><li><ol start="2"><li>发送消息的时候将<code>deliveryMode=2</code></li></ol></li></ul><h2 id="消费者丢失消息"><a href="#消费者丢失消息" class="headerlink" title="消费者丢失消息"></a>消费者丢失消息</h2><blockquote><p>消费者丢数据一般是因为采用了自动确认消息模式，改为手动确认消息即可！<br>解决方案：处理消息成功后，<strong>手动回复确认消息</strong>。</p></blockquote><h1 id="RabbitMQ-上的一个-queue-中存放的-message-是否有数量限制"><a href="#RabbitMQ-上的一个-queue-中存放的-message-是否有数量限制" class="headerlink" title="RabbitMQ 上的一个 queue 中存放的 message 是否有数量限制 ?"></a>RabbitMQ 上的一个 queue 中存放的 message 是否有数量限制 ?</h1><blockquote><p>可以认为是无限制，因为限制取决于机器的<strong>内存</strong>，但是消息过多会导致处理效率的下降。</p></blockquote><h1 id="消息基于什么传输"><a href="#消息基于什么传输" class="headerlink" title="消息基于什么传输 ?"></a>消息基于什么传输 ?</h1><blockquote><p><code>RabbitMQ</code> 使用<strong>信道</strong>的方式来传输数据。信道是建立在真实的 <code>TCP</code> 连接内的虚拟连接，且每条 <code>TCP</code> 连接上的信道数量没有限制。</p></blockquote><h1 id="消息如何分发"><a href="#消息如何分发" class="headerlink" title="消息如何分发 ?"></a>消息如何分发 ?</h1><blockquote><p>若该队列至少有一个消费者订阅，消息将以循环（round-robin）的方式发送给消费者。每条消息只会分发给一个订阅的消费者（前提是消费者能够正常处理消息并进行确认）。通过路由可实现多消费的功能</p></blockquote><h1 id="消息怎么路由"><a href="#消息怎么路由" class="headerlink" title="消息怎么路由 ?"></a>消息怎么路由 ?</h1><blockquote><p>消息提供方-&gt;路由-&gt;一至多个队列消息发布到交换器时，消息将拥有一个路由键（routing key），在消息创建时设定。通过队列路由键，可以把队列绑定到交换器上。消息到达交换器后，RabbitMQ 会将消息的路由键与队列的路由键进行匹配（针对不同的交换机有不同的路由规则）；</p></blockquote><p>常用的交换机主要分为一下三种：</p><ul><li><code>fanout</code>: 如果交换机收到消息，将会广播到所有绑定的队列上</li><li><code>direct</code>: 如果路由键完全匹配，消息就被投递到相应的队列</li><li><code>topic</code>: 可以使来自不同源头的消息能够到达同一个队列。 使用 <code>topic</code> 交换机时，可以使用通配符</li></ul><h1 id="RabbitMQ-的优缺点"><a href="#RabbitMQ-的优缺点" class="headerlink" title="RabbitMQ 的优缺点 ?"></a>RabbitMQ 的优缺点 ?</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>异步处理 - 相比于传统的串行、并行方式，提高了系统吞吐量。</li><li>应用解耦 - 系统间通过消息通信，不用关心其他系统的处理。</li><li>流量削锋 - 可以通过消息队列长度控制请求量；可以缓解短时间内的高并发请求。</li><li>日志处理 - 解决大量日志传输。</li><li>消息通讯 - 消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>系统可用性降低</li><li>系统复杂度提高</li><li>一致性问题</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;问即是学&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="RabbitMQ" scheme="http://blog.caoxl.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 实战记录</title>
    <link href="http://blog.caoxl.com/2020/04/03/RabbitMq-Actual-Combat-1/"/>
    <id>http://blog.caoxl.com/2020/04/03/RabbitMq-Actual-Combat-1/</id>
    <published>2020-04-03T01:37:50.000Z</published>
    <updated>2020-04-03T06:57:24.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>啊 好久没有写博客了, 我的博客就是总结自己的学习之路<br>加油 重新启程 keep calm and think more.</p></blockquote><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><blockquote><p>composer require php-amqplib/php-amqplib</p></blockquote><h1 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">api</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Wire</span>\<span class="title">AMQPTable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deliver</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $params = Request::instance()-&gt;param();</span><br><span class="line">        <span class="keyword">unset</span>($params[<span class="string">'sign'</span>]);</span><br><span class="line">        $params[<span class="string">'send_time'</span>]   = time();</span><br><span class="line">        $params[<span class="string">'create_time'</span>] = time();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;deliverMessage(json_encode($params), <span class="string">'test_exchange'</span>, <span class="string">'api_test_queue'</span>, <span class="string">'api_test'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Done'</span>;<span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息队列 - 投递消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $exchangeName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $queueName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $routingKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">deliverMessage</span><span class="params">($message, $exchangeName, $queueName, $routingKey)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接和信道</span></span><br><span class="line">        $connection = <span class="keyword">new</span> AMQPStreamConnection(</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'host'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'port'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'TEST'</span>][<span class="string">'user'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'TEST'</span>][<span class="string">'password'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'TEST'</span>][<span class="string">'vhost'</span>]</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (!$connection-&gt;isConnected()) &#123;</span><br><span class="line">            var_dump(<span class="string">'Connection failed'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $channel = $connection-&gt;channel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        <span class="comment">// type参数: (direct:精准推送 fanout:广播 topic:组播)</span></span><br><span class="line">        $channel-&gt;exchange_declare($exchangeName, <span class="string">'direct'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        $table = <span class="keyword">new</span> AMQPTable();</span><br><span class="line">        $table-&gt;set(<span class="string">'x-queue-mode'</span>, <span class="string">'lazy'</span>);</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        $channel-&gt;queue_declare($queueName, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $table);</span><br><span class="line">        <span class="comment">// 将队列绑定到交换机</span></span><br><span class="line">        $channel-&gt;queue_bind($queueName, $exchangeName, $routingKey);</span><br><span class="line">        $msg = <span class="keyword">new</span> AMQPMessage($message, [</span><br><span class="line">            <span class="string">'delivery_mode'</span> =&gt; AMQPMessage::DELIVERY_MODE_NON_PERSISTENT,</span><br><span class="line">        ]);</span><br><span class="line">        <span class="comment">// 向队列发送消息</span></span><br><span class="line">        $channel-&gt;basic_publish($msg, $exchangeName, $routingKey);</span><br><span class="line">        <span class="comment">// 关闭信道, 关闭连接</span></span><br><span class="line">        $channel-&gt;close();</span><br><span class="line">        $connection-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://tp5.test/api/test/deliver" target="_blank" rel="noopener">http://tp5.test/api/test/deliver</a></p></blockquote><h1 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">api</span>\<span class="title">command</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> APP_PATH . <span class="string">'api.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">console</span>\&#123;</span><br><span class="line">    <span class="title">Command</span>, <span class="title">Input</span>, <span class="title">Output</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Wire</span>\<span class="title">AMQPTable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">configure</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setName(<span class="string">'cmd_test'</span>)</span><br><span class="line">             -&gt;setDescription(<span class="string">'RabbitMQ Consumer Test'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行命令</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Input $input</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Output $output</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int|void|null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \ErrorException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">(Input $input, Output $output)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 交换机</span></span><br><span class="line">        $exchangeName = <span class="string">"test_exchange"</span>;</span><br><span class="line">        <span class="comment">// 队列</span></span><br><span class="line">        $queueName    = <span class="string">"api_test_queue"</span>;</span><br><span class="line">        <span class="comment">// 路由键</span></span><br><span class="line">        $routingKey   = <span class="string">"api_test"</span>;</span><br><span class="line">        <span class="comment">// 创建连接和信道</span></span><br><span class="line">        $connection   = <span class="keyword">new</span> AMQPStreamConnection(</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'host'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'port'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'TEST'</span>][<span class="string">'user'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'TEST'</span>][<span class="string">'password'</span>],</span><br><span class="line">            RABBITMQ_CONFIG[<span class="string">'TEST'</span>][<span class="string">'vhost'</span>]</span><br><span class="line">        );</span><br><span class="line">        $channel = $connection-&gt;channel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        $channel-&gt;exchange_declare($exchangeName, <span class="string">'direct'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 设置惰性队列</span></span><br><span class="line">        $table = <span class="keyword">new</span> AMQPTable();</span><br><span class="line">        $table-&gt;set(<span class="string">'x-queue-mode'</span>, <span class="string">"lazy"</span>);</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        $channel-&gt;queue_declare($queueName, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $table);</span><br><span class="line">        <span class="comment">// 将队列绑定到交换机</span></span><br><span class="line">        $channel-&gt;queue_bind($queueName, $exchangeName, $routingKey);</span><br><span class="line"></span><br><span class="line">        $callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO 处理数据</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                $msg-&gt;delivery_info[<span class="string">'channel'</span>]-&gt;basic_ack($msg-&gt;delivery_info[<span class="string">'delivery_tag'</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">                var_dump($e-&gt;getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置consumer同时处理队列数量</span></span><br><span class="line">        $channel-&gt;basic_qos(<span class="keyword">null</span>, <span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 消费队列</span></span><br><span class="line">        $channel-&gt;basic_consume($queueName, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</span><br><span class="line">        <span class="keyword">while</span> (count($channel-&gt;callbacks)) &#123;</span><br><span class="line">            $channel-&gt;wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭信道,关闭连接</span></span><br><span class="line">        $channel-&gt;close();</span><br><span class="line">        $connection-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>php think cmd_test</p></blockquote><ul><li>api.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rabbit配置信息</span></span><br><span class="line">define(<span class="string">'RABBITMQ_CONFIG'</span>, [</span><br><span class="line">    <span class="string">'host'</span> =&gt; <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    <span class="string">'port'</span> =&gt; <span class="number">5672</span>,</span><br><span class="line">    <span class="string">'TEST'</span> =&gt; [  <span class="comment">// 玩法虚拟机</span></span><br><span class="line">        <span class="string">'user'</span>     =&gt; <span class="string">'test'</span> ,</span><br><span class="line">        <span class="string">'password'</span> =&gt; <span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'vhost'</span>    =&gt; <span class="string">'test'</span></span><br><span class="line">    ],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;啊 好久没有写博客了, 我的博客就是总结自己的学习之路&lt;br&gt;加油 重新启程 keep calm and think more.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="RabbitMQ" scheme="http://blog.caoxl.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 邮件发送</title>
    <link href="http://blog.caoxl.com/2020/01/02/Yii2-Send-Mail-Notes/"/>
    <id>http://blog.caoxl.com/2020/01/02/Yii2-Send-Mail-Notes/</id>
    <published>2020-01-02T02:35:11.000Z</published>
    <updated>2020-01-02T03:31:45.661Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Yii2中官方为了解决邮件发送问题，提供了<code>swiftMailer</code>扩展。</p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>官方的包自带了<code>yii2-swiftmailer</code>, 如果需要自行下载可以使用下面这个</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> --prefer-dist yiisoft/yii2-swiftmailer</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><code>config/web.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [ </span><br><span class="line">    <span class="comment">//.... </span></span><br><span class="line">    <span class="string">'components'</span> =&gt; [ </span><br><span class="line">        <span class="string">'mailer'</span> =&gt; [ </span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\swiftmailer\Mailer'</span>, </span><br><span class="line">            <span class="string">'viewPath'</span> =&gt; <span class="string">'@common/mail'</span>, </span><br><span class="line">            <span class="comment">// send all mails to a file by default. You have to set </span></span><br><span class="line">            <span class="comment">// 'useFileTransport' to false and configure a transport </span></span><br><span class="line">            <span class="comment">// for the mailer to send real emails. </span></span><br><span class="line">            <span class="string">'useFileTransport'</span> =&gt; <span class="keyword">false</span>, </span><br><span class="line">            <span class="string">'transport'</span> =&gt; [ </span><br><span class="line">              <span class="comment">//这里如果你是qq的邮箱，可以参考qq客户端设置后再进行配置 http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256</span></span><br><span class="line">                <span class="string">'class'</span>      =&gt; <span class="string">'Swift_SmtpTransport'</span>,</span><br><span class="line">                <span class="string">'host'</span>       =&gt; <span class="string">'smtp.163.com'</span>,</span><br><span class="line">                <span class="string">'username'</span>   =&gt; <span class="string">'******@163.com'</span>,</span><br><span class="line">                <span class="string">'password'</span>   =&gt; <span class="string">'******'</span>,</span><br><span class="line">                <span class="string">'port'</span>       =&gt; <span class="string">'25'</span>,</span><br><span class="line">                <span class="string">'encryption'</span> =&gt; <span class="string">'tls'</span>,</span><br><span class="line">            ], </span><br><span class="line">            <span class="string">'messageConfig'</span>  =&gt; [ </span><br><span class="line">                <span class="string">'charset'</span> =&gt; <span class="string">'UTF-8'</span>, </span><br><span class="line">                <span class="string">'from'</span>    =&gt; [<span class="string">'***@163.com'</span> =&gt; <span class="string">'白狼栈'</span>] </span><br><span class="line">            ], </span><br><span class="line">        ], </span><br><span class="line">    ], </span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionEmail</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $result = \Yii::$app-&gt;mailer-&gt;compose()</span><br><span class="line">                -&gt;setFrom(<span class="string">'******@163.com'</span>)</span><br><span class="line">                -&gt;setTo(<span class="string">'******@163.com'</span>)</span><br><span class="line">                -&gt;setSubject(<span class="string">'测试邮件'</span>)</span><br><span class="line">                -&gt;setTextBody(<span class="string">'测试邮件'</span>)</span><br><span class="line">                -&gt;setHtmlBody(<span class="string">'&lt;b&gt;测试邮件&lt;/b&gt;'</span>)</span><br><span class="line">                -&gt;send();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">            var_dump($e-&gt;getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var_dump(<span class="number">1024</span>);<span class="keyword">die</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量发送"><a href="#批量发送" class="headerlink" title="批量发送"></a>批量发送</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionEmailMulti</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $users = [<span class="string">'***@qq.com'</span>, <span class="string">'******@qq.com'</span>];</span><br><span class="line"></span><br><span class="line">    $messages = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user) &#123;</span><br><span class="line">        $messages[] = Yii::$app-&gt;mailer-&gt;compose()</span><br><span class="line">            -&gt;setTo($user)</span><br><span class="line">            -&gt;setSubject(<span class="string">'测试主题'</span>)</span><br><span class="line">            -&gt;setHtmlBody(<span class="string">'测试内容'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        \Yii::$app-&gt;mailer-&gt;sendMultiple($messages);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        var_dump($e-&gt;getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var_dump(<span class="number">1024</span>);<span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Yii2中官方为了解决邮件发送问题，提供了&lt;code&gt;swiftMailer&lt;/code&gt;扩展。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架相关" scheme="http://blog.caoxl.com/categories/%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Email" scheme="http://blog.caoxl.com/tags/Email/"/>
    
      <category term="Yii2" scheme="http://blog.caoxl.com/tags/Yii2/"/>
    
      <category term="邮件发送" scheme="http://blog.caoxl.com/tags/%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Linux 查看CPU信息</title>
    <link href="http://blog.caoxl.com/2019/12/23/Linux-CPU-Information/"/>
    <id>http://blog.caoxl.com/2019/12/23/Linux-CPU-Information/</id>
    <published>2019-12-23T07:59:39.000Z</published>
    <updated>2019-12-23T08:25:43.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>总核数 = 物理CPU个数 X 每颗物理CPU的核数<br>总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</p></blockquote><a id="more"></a><h2 id="查看物理CPU个数"><a href="#查看物理CPU个数" class="headerlink" title="查看物理CPU个数"></a>查看物理CPU个数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="查看每个物理CPU中core的个数-即核数"><a href="#查看每个物理CPU中core的个数-即核数" class="headerlink" title="查看每个物理CPU中core的个数(即核数)"></a>查看每个物理CPU中core的个数(即核数)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep "cpu cores" | uniq</span></span><br><span class="line">cpu cores: <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="查看逻辑CPU的个数"><a href="#查看逻辑CPU的个数" class="headerlink" title="查看逻辑CPU的个数"></a>查看逻辑CPU的个数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep "processor" | wc -l</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="查看位于相同物理封装的处理器中的逻辑处理器的数量。"><a href="#查看位于相同物理封装的处理器中的逻辑处理器的数量。" class="headerlink" title="查看位于相同物理封装的处理器中的逻辑处理器的数量。"></a>查看位于相同物理封装的处理器中的逻辑处理器的数量。</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep "siblings" | sort | uniq</span></span><br><span class="line">siblings: <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="查看CPU信息（型号）"><a href="#查看CPU信息（型号）" class="headerlink" title="查看CPU信息（型号）"></a>查看CPU信息（型号）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span></span><br><span class="line">      <span class="number">2</span>  Intel(R) Xeon(R) CPU E5<span class="number">-2682</span> v4 @ <span class="number">2.50</span>GHz</span><br></pre></td></tr></table></figure><h2 id="proc-cpuinfo"><a href="#proc-cpuinfo" class="headerlink" title="/proc/cpuinfo"></a><code>/proc/cpuinfo</code></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo</span></span><br><span class="line">processor: <span class="number">0</span></span><br><span class="line">vendor_id: GenuineIntel</span><br><span class="line">cpu family: <span class="number">6</span></span><br><span class="line">model: <span class="number">79</span></span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5<span class="number">-2682</span> v4 @ <span class="number">2.50</span>GHz</span><br><span class="line">stepping: <span class="number">1</span></span><br><span class="line">microcode: <span class="number">0x1</span></span><br><span class="line">cpu MHz: <span class="number">2499.996</span></span><br><span class="line">cache size: <span class="number">40960</span> KB</span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">siblings: <span class="number">2</span></span><br><span class="line">core id: <span class="number">0</span></span><br><span class="line">cpu cores: <span class="number">1</span></span><br><span class="line">apicid: <span class="number">0</span></span><br><span class="line">initial apicid: <span class="number">0</span></span><br><span class="line">fpu: yes</span><br><span class="line">fpu_exception: yes</span><br><span class="line">cpuid level: <span class="number">13</span></span><br><span class="line">wp: yes</span><br><span class="line">flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm <span class="number">3</span>dnowprefetch ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx smap xsaveopt spec_ctrl intel_stibp</span><br><span class="line">bogomips: <span class="number">4999.99</span></span><br><span class="line">clflush size: <span class="number">64</span></span><br><span class="line">cache_alignment: <span class="number">64</span></span><br><span class="line">address sizes: <span class="number">46</span> bits physical, <span class="number">48</span> bits virtual</span><br><span class="line">power management:</span><br><span class="line"></span><br><span class="line">processor: <span class="number">1</span></span><br><span class="line">vendor_id: GenuineIntel</span><br><span class="line">cpu family: <span class="number">6</span></span><br><span class="line">model: <span class="number">79</span></span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5<span class="number">-2682</span> v4 @ <span class="number">2.50</span>GHz</span><br><span class="line">stepping: <span class="number">1</span></span><br><span class="line">microcode: <span class="number">0x1</span></span><br><span class="line">cpu MHz: <span class="number">2499.996</span></span><br><span class="line">cache size: <span class="number">40960</span> KB</span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">siblings: <span class="number">2</span></span><br><span class="line">core id: <span class="number">0</span></span><br><span class="line">cpu cores: <span class="number">1</span></span><br><span class="line">apicid: <span class="number">1</span></span><br><span class="line">initial apicid: <span class="number">1</span></span><br><span class="line">fpu: yes</span><br><span class="line">fpu_exception: yes</span><br><span class="line">cpuid level: <span class="number">13</span></span><br><span class="line">wp: yes</span><br><span class="line">flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm <span class="number">3</span>dnowprefetch ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx smap xsaveopt spec_ctrl intel_stibp</span><br><span class="line">bogomips: <span class="number">4999.99</span></span><br><span class="line">clflush size: <span class="number">64</span></span><br><span class="line">cache_alignment: <span class="number">64</span></span><br><span class="line">address sizes: <span class="number">46</span> bits physical, <span class="number">48</span> bits virtual</span><br><span class="line">power management:</span><br></pre></td></tr></table></figure><ul><li>以上输出项的含义如下：</li></ul><blockquote><p><code>processor</code>　：系统中逻辑处理核的编号。对于单核处理器，则可认为是其CPU编号，对于多核处理器则可以是物理核、或者使用超线程技术虚拟的逻辑核<br><code>vendor_id</code>：CPU制造商<br><code>cpu family</code>：CPU产品系列代号<br><code>model</code>：CPU属于其系列中的哪一代的代号<br><code>model name</code>：CPU属于的名字及其编号、标称主频<br><code>stepping</code>：CPU属于制作更新版本<br><code>cpu MHz</code>：CPU的实际使用主频<br><code>cache size</code>：CPU二级缓存大小<br><code>physical id</code>：单个CPU的标号<br><code>siblings</code>：单个CPU逻辑物理核数<br><code>core id</code>：当前物理核在其所处CPU中的编号，这个编号不一定连续<br><code>cpu cores</code>：该逻辑核所处CPU的物理核数<br><code>apicid</code>：用来区分不同逻辑核的编号，系统中每个逻辑核的此编号必然不同，此编号不一定连续<br><code>fpu</code>：是否具有浮点运算单元（Floating Point Unit）<br><code>fpu_exception</code>：是否支持浮点计算异常<br><code>cpuid level</code>：执行cpuid指令前，eax寄存器中的值，根据不同的值cpuid指令会返回不同的内容<br><code>wp</code>：表明当前CPU是否在内核态支持对用户空间的写保护（Write Protection）<br><code>flags</code>：当前CPU支持的功能<br><code>bogomips</code>：在系统内核启动时粗略测算的CPU速度（Million Instructions Per Second）<br><code>clflush size</code>：每次刷新缓存的大小单位<br><code>cache_alignment</code>：缓存地址对齐单位<br><code>address sizes</code>：可访问地址空间位数<br><code>power management</code>：对能源管理的支持</p></blockquote><h2 id="lscpu命令"><a href="#lscpu命令" class="headerlink" title="lscpu命令"></a><code>lscpu</code>命令</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># lscpu</span></span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        <span class="number">32</span>-bit, <span class="number">64</span>-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                <span class="number">24</span></span><br><span class="line">On-line CPU(s) <span class="keyword">list</span>:   <span class="number">0</span><span class="number">-23</span></span><br><span class="line">Thread(s) per core:    <span class="number">2</span></span><br><span class="line">Core(s) per socket:    <span class="number">12</span></span><br><span class="line">Socket(s):             <span class="number">1</span></span><br><span class="line">NUMA node(s):          <span class="number">1</span></span><br><span class="line">Vendor ID:             GenuineIntel</span><br><span class="line">CPU family:            <span class="number">6</span></span><br><span class="line">Model:                 <span class="number">85</span></span><br><span class="line">Model name:            Intel(R) Xeon(R) Platinum <span class="number">8163</span> CPU @ <span class="number">2.50</span>GHz</span><br><span class="line">Stepping:              <span class="number">4</span></span><br><span class="line">CPU MHz:               <span class="number">2494.132</span></span><br><span class="line">BogoMIPS:              <span class="number">4988.26</span></span><br><span class="line">Hypervisor vendor:     KVM</span><br><span class="line">Virtualization type:   full</span><br><span class="line">L1d cache:             <span class="number">32</span>K</span><br><span class="line">L1i cache:             <span class="number">32</span>K</span><br><span class="line">L2 cache:              <span class="number">1024</span>K</span><br><span class="line">L3 cache:              <span class="number">33792</span>K</span><br><span class="line">NUMA node0 CPU(s):     <span class="number">0</span><span class="number">-23</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;总核数 = 物理CPU个数 X 每颗物理CPU的核数&lt;br&gt;总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.caoxl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.caoxl.com/tags/Linux/"/>
    
      <category term="CPU" scheme="http://blog.caoxl.com/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 速查表</title>
    <link href="http://blog.caoxl.com/2019/12/20/Yii2-Cheat-Sheet/"/>
    <id>http://blog.caoxl.com/2019/12/20/Yii2-Cheat-Sheet/</id>
    <published>2019-12-20T06:21:48.000Z</published>
    <updated>2019-12-20T09:20:40.704Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Yii2 速查表</p></blockquote><a id="more"></a><h2 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h2><ul><li>安装yii程序</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist yiisoft/yii2-app-basic basic</span><br></pre></td></tr></table></figure><ul><li>通过<code>composer.json</code>安装扩展</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer install</span><br></pre></td></tr></table></figure><ul><li>更新本地<code>composer</code>扩展库</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure><ul><li>直接安装某个<code>composer</code>扩展</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> [options] [--] [vendor/packages]...</span><br></pre></td></tr></table></figure><h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><blockquote><p>Yii的数据库读取对象，在PDO之上，DAO后有了Query Builder和AR</p></blockquote><ul><li>获得数据库连接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$conn = Yii::$app-&gt;db;</span><br></pre></td></tr></table></figure><ul><li>执行数据库查询语句</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user`"</span>);</span><br><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user` WHERE uid=:uid"</span>,[<span class="string">":uid"</span>=&gt;<span class="number">1</span>]);</span><br><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user` WHERE uid=:uid"</span>)-&gt;addValue([<span class="string">":uid"</span>=&gt;<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><ul><li>SQL语句插入数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db</span><br><span class="line">-&gt;createCommand(<span class="string">'INSERT INTO user (email, password) VALUES("test3@example.com", "test3");'</span>)-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>数组形式插入数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;insert(<span class="string">'user'</span>, [</span><br><span class="line">    <span class="string">'email'</span> =&gt; <span class="string">'test4@example.com'</span>,</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">'changeme7'</span>,</span><br><span class="line">    <span class="string">'first_name'</span> =&gt; <span class="string">'Test'</span></span><br><span class="line">])-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>批量插入数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;batchInsert(<span class="string">'user'</span>, [<span class="string">'email'</span>, <span class="string">'password'</span>, <span class="string">'first_name'</span>],[</span><br><span class="line">    [<span class="string">'james.franklin@example.com'</span>, <span class="string">'changeme7'</span>, <span class="string">'James'</span>],</span><br><span class="line">    [<span class="string">'linda.marks@example.com'</span>, <span class="string">'changeme7'</span>, <span class="string">'Linda'</span>]</span><br><span class="line">    [<span class="string">'roger.martin@example.com'</span>, <span class="string">'changeme7'</span>]</span><br><span class="line">])-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>更新数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;update(<span class="string">'user'</span>, [<span class="string">'updated_at'</span> =&gt; time()], <span class="string">'id = 2'</span>)-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;delete(<span class="string">'user'</span>, <span class="string">'id = 3'</span>)-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>获取所有数据(数组形式返回)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user`"</span>)-&gt;queryAll();</span><br></pre></td></tr></table></figure><ul><li>获取一条数据（一维数组）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user` WHERE id = 1"</span>)-&gt;queryOne();</span><br></pre></td></tr></table></figure><ul><li>获取一个值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT count(*) AS total FROM `user` WHERE id = 1"</span>)-&gt;queryScalar();</span><br></pre></td></tr></table></figure><ul><li>获取某一列（放到一位数组中）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT username FROM `user`"</span>)-&gt;queryColumn();</span><br></pre></td></tr></table></figure><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><ul><li><code>trace</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::trace($message,$category)</span><br></pre></td></tr></table></figure><ul><li><code>info</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::info($message,$category)</span><br></pre></td></tr></table></figure><ul><li><code>warning</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::warning($message,$category)</span><br></pre></td></tr></table></figure><ul><li><code>error</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::error($message,$category)</span><br></pre></td></tr></table></figure><h2 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h2><blockquote><p>数据验证，最常用于模型的<code>rules()</code>函数</p></blockquote><ul><li><code>required</code> 必须值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"username"</span>,<span class="string">'required'</span>]</span><br><span class="line">[[<span class="string">"username"</span>,<span class="string">"email"</span>],<span class="string">'required'</span>]</span><br><span class="line">[[<span class="string">"username"</span>],<span class="string">'required'</span>,<span class="string">"message"</span>=&gt;<span class="string">"&#123;attribute&#125;必须填写"</span>]</span><br><span class="line">[[<span class="string">"username"</span>],<span class="string">'required'</span>,<span class="string">'requiredValue'</span>=&gt;<span class="string">"abei"</span>] <span class="comment">// 用户填写的值必须等于requiredValue才能通过验证。</span></span><br></pre></td></tr></table></figure><ul><li><code>Email</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"email"</span>,<span class="string">'email'</span>]</span><br><span class="line">[[<span class="string">"email"</span>,<span class="string">"work_email"</span>],<span class="string">'email'</span>]</span><br></pre></td></tr></table></figure><ul><li><code>Boolean</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'sex'</span>, <span class="string">'boolean'</span>, <span class="string">'trueValue'</span> =&gt; <span class="keyword">true</span>, <span class="string">'falseValue'</span> =&gt; <span class="keyword">false</span>, <span class="string">'strict'</span> =&gt; <span class="keyword">true</span>];<span class="comment">// 可以认为置顶 true / false 值。</span></span><br></pre></td></tr></table></figure><ul><li><code>captcha</code>验证码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'verificationCode'</span>, <span class="string">'captcha'</span>];</span><br></pre></td></tr></table></figure><ul><li><code>compare</code>比较</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'username'</span>, <span class="string">'compare'</span>, <span class="string">'compareAttribute'</span> =&gt; <span class="string">'province'</span>,<span class="string">'message'</span>=&gt;<span class="string">'username和province必须一样'</span>] <span class="comment">//错误信息将提示给username</span></span><br><span class="line">[<span class="string">'age'</span>, <span class="string">'compare'</span>, <span class="string">'compareValue'</span> =&gt; <span class="number">30</span>, <span class="string">'operator'</span> =&gt; <span class="string">'&gt;='</span>,<span class="string">'type'</span> =&gt; <span class="string">'number'</span>];<span class="comment">//compareValue:比较常量值 operator:比较操作符 type为值类型，默认为string，会一个每个字符对比，若为number则直接判断数值</span></span><br><span class="line"><span class="comment">// operator 待选值==、===、!=、!==、&gt;、&gt;=、&lt;、&lt;=</span></span><br></pre></td></tr></table></figure><ul><li><code>date</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"birth"</span>,<span class="string">"date"</span>,<span class="string">"format"</span>=&gt;<span class="string">"Y-m-d"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>default</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'age'</span>,<span class="string">'default'</span>,<span class="string">'value'</span>=&gt;<span class="keyword">null</span>] <span class="comment">// 当age为空的时候设置为null</span></span><br><span class="line">[<span class="string">'country'</span>,<span class="string">'default'</span>,<span class="string">'value'</span>=&gt;<span class="string">'USA'</span>] <span class="comment">// 当 country为空时设置为USA</span></span><br><span class="line"><span class="comment">/* 如果from为空，则=今天+3天，如果to为空，则=今天+6天 */</span></span><br><span class="line">[[<span class="string">'from'</span>,<span class="string">'to'</span>],<span class="string">'default'</span>,<span class="string">'value'</span>=&gt;<span class="function"><span class="keyword">function</span><span class="params">($model,$attribute)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date(<span class="string">'Y-m-d'</span>, strtotime($attribute === <span class="string">'to'</span> ? <span class="string">'+3 days'</span> : <span class="string">'+6 days'</span>));</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><ul><li><code>double/number</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'v'</span>,<span class="string">'double'</span>] <span class="comment">// 判断v是否为数字</span></span><br><span class="line">[<span class="string">'v'</span>,<span class="string">'double'</span>,<span class="string">'max'</span>=&gt;<span class="number">90</span>,<span class="string">'min'</span>=&gt;<span class="number">1</span>]<span class="comment">//判断v是否为数字且大于等于1、小于等于90</span></span><br></pre></td></tr></table></figure><ul><li>数组各元素验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 要求验证的元素必须为数组，否则会返回假并报错 */</span></span><br><span class="line">[<span class="string">"categoryIds"</span>,<span class="string">"each"</span>,<span class="string">"rule"</span>=&gt;[<span class="string">'integer'</span>]]</span><br></pre></td></tr></table></figure><ul><li><code>exist</code>是否存在验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 所谓对存在的检查实质为where的与操作，必须同时满足的记录存在方可。兄弟们可以研究下，exist是对sql语句EXISTS的应用*/</span></span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"exist"</span>] <span class="comment">// username输入的值已经存在</span></span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"exist"</span>,<span class="string">"targetAttribute"</span>=&gt;<span class="string">"province"</span>] <span class="comment">// username的输入值必须在province列存在</span></span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"exist"</span>,<span class="string">'targetAttribute'</span> =&gt; [<span class="string">'username'</span>, <span class="string">'province'</span>]] <span class="comment">// username的输入值必须在username和province中存在</span></span><br><span class="line">[[<span class="string">"username"</span>,<span class="string">"province"</span>],<span class="string">"exist"</span>,<span class="string">'targetAttribute'</span> =&gt; [<span class="string">'username'</span>, <span class="string">'province'</span>]] <span class="comment">// username和province的输入值必须在username和province中存在</span></span><br></pre></td></tr></table></figure><ul><li>file验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* maxFiles代表一次最多传几个，mimeTypes代表上传文件类型 */</span></span><br><span class="line">[<span class="string">'primaryImage'</span>, <span class="string">'file'</span>, <span class="string">'extensions'</span> =&gt; [<span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'gif'</span>],<span class="string">'mimeTypes'</span>=&gt;[<span class="string">"image/*"</span>], <span class="string">'maxSize'</span> =&gt; <span class="number">1024</span>*<span class="number">1024</span>,<span class="string">'minSize'</span>=&gt;<span class="number">100</span>*<span class="number">1024</span>,<span class="string">'maxFiles'</span>=&gt;<span class="number">6</span>,<span class="string">'checkExtensionByMimeType'</span>=&gt;<span class="keyword">true</span>],</span><br></pre></td></tr></table></figure><ul><li><code>filter</code>过滤验证函数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">'username'</span>, <span class="string">'email'</span>], <span class="string">'filter'</span>, <span class="string">'filter'</span> =&gt; <span class="string">'trim'</span>, <span class="string">'skipOnArray'</span> =&gt; <span class="keyword">true</span>],</span><br><span class="line">[<span class="string">'phone'</span>, <span class="string">'filter'</span>, <span class="string">'filter'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// normalize phone input here</span></span><br><span class="line">        <span class="keyword">return</span> $value;</span><br><span class="line">&#125;],</span><br></pre></td></tr></table></figure><ul><li><code>image</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 上传png/jpg格式，最大宽度不能超过1000px，最小宽度不能低于100px，最大高度不能高于1000px。最小高度不能低于100px */</span></span><br><span class="line">[<span class="string">'primaryImage'</span>, <span class="string">'image'</span>, <span class="string">'extensions'</span> =&gt; <span class="string">'png, jpg'</span>,<span class="string">'minWidth'</span> =&gt; <span class="number">100</span>, <span class="string">'maxWidth'</span> =&gt; <span class="number">1000</span>,<span class="string">'minHeight'</span> =&gt; <span class="number">100</span>, <span class="string">'maxHeight'</span> =&gt; <span class="number">1000</span>]</span><br></pre></td></tr></table></figure><ul><li><code>ip</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"ip_addess"</span>,<span class="string">"ip"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>in</code>方法验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"level"</span>,<span class="string">"in"</span>,<span class="string">"range"</span>=&gt;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><ul><li><code>integer</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"age"</span>,<span class="string">'integer'</span>];</span><br><span class="line">[<span class="string">"age"</span>,<span class="string">"integer"</span>,<span class="string">"max"</span>=&gt;<span class="number">90</span>,<span class="string">"min"</span>=&gt;<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>正则匹配验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"username"</span>,<span class="string">"match"</span>,<span class="string">"pattern"</span>=&gt;<span class="string">"/^[a-z]\w*$/i"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>in</code>方法验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"level"</span>,<span class="string">"in"</span>,<span class="string">"range"</span>=&gt;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><ul><li><code>safe</code>验证（多用于设置一个model的attribute）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"description"</span>,<span class="string">"safe"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>string</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"username"</span>,<span class="string">"string"</span>,<span class="string">"length"</span>=&gt;[<span class="number">4</span>,<span class="number">24</span>]];</span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"string"</span>,<span class="string">"min"</span>=&gt;<span class="number">4</span>];</span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"string"</span>,<span class="string">"max"</span>=&gt;<span class="number">32</span>];</span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"string"</span>,<span class="string">"encoding"</span>=&gt;<span class="string">"UTF-8"</span>];</span><br></pre></td></tr></table></figure><ul><li><code>unique</code>唯一验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"username"</span>,<span class="string">"unique"</span>]</span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"unique"</span>,<span class="string">"targetAttribute"</span>=&gt;<span class="string">"province"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>url</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"website"</span>,<span class="string">"url"</span>]</span><br><span class="line">[<span class="string">"website"</span>,<span class="string">"url"</span>,<span class="string">"validSchemes"</span>=&gt;[<span class="string">"http"</span>,<span class="string">"https"</span>]]</span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>一个字符串中单词数量</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::countWords(<span class="string">"hello world"</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>返回路径中的文件名部分</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::basename(<span class="string">"/path/hello.txt"</span>,<span class="string">".txt"</span>); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><ul><li>返回路径中的目录名</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::dirname(<span class="string">"/home/path/hello.txt"</span>);<span class="comment">// /home/path</span></span><br></pre></td></tr></table></figure><ul><li>超出内容用…代替(不含HTML)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::truncate(<span class="string">"hello world"</span>,<span class="number">7</span>,<span class="string">'...'</span>); <span class="comment">//hello w...</span></span><br></pre></td></tr></table></figure><ul><li>超出内容用…代替(识别HTML)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::truncate(<span class="string">"hello world"</span>,<span class="number">7</span>,<span class="string">'...'</span>,<span class="keyword">null</span>,<span class="keyword">true</span>); <span class="comment">// hello w...</span></span><br></pre></td></tr></table></figure><ul><li>以单词为单位超出部分用..代替（不解析HTML）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::truncateWords(<span class="string">'This is a test sentance'</span>, <span class="number">4</span>, <span class="string">'...'</span>) <span class="comment">//This is a test ...</span></span><br></pre></td></tr></table></figure><ul><li>以单词为单位超出部分用..代替（解析HTML）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::truncateWords(<span class="string">'This is a test for a sentance'</span>, <span class="number">5</span>, <span class="string">'...'</span>,<span class="keyword">true</span>) <span class="comment">//This is a test for...</span></span><br></pre></td></tr></table></figure><ul><li>一个字符串是否以另一个字符串开始</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::startsWith(<span class="string">"hello world"</span>,<span class="string">"he"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>一个字符串是否以另一个字符串结尾</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::endsWith(<span class="string">"hello world"</span>,<span class="string">"ald"</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li>按照分隔符分隔字符串为数组</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::explode(<span class="string">'It, is, a first, test'</span>));<span class="comment">//['It','is','a first','test']</span></span><br><span class="line">StringHelper::explode(<span class="string">"a@b@c"</span>,<span class="string">"@"</span>);[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">StringHelper::explode(<span class="string">"a, b ,c "</span>);[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br></pre></td></tr></table></figure><h2 id="Session-amp-Cookie"><a href="#Session-amp-Cookie" class="headerlink" title="Session&amp;Cookie"></a>Session&amp;Cookie</h2><blockquote><p><code>Session</code>被封装成一个应用组件，直接通过 <code>Yii::$app-&gt;session</code> 来访问；<br><code>Cookie</code>通过Request和Response来操作。</p></blockquote><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul><li>获得session</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$session = Yii::$app-&gt;session;</span><br></pre></td></tr></table></figure><ul><li>检查session是否开启</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;isActive</span><br></pre></td></tr></table></figure><ul><li>开启一个<code>session</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;open()</span><br></pre></td></tr></table></figure><ul><li>关闭<code>session</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;close();</span><br></pre></td></tr></table></figure><ul><li>销毁<code>session</code>中所有已注册的数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;destroy();</span><br></pre></td></tr></table></figure><ul><li>访问一个<code>session</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以下三种方法效果等同 */</span></span><br><span class="line">$language = $session-&gt;get(<span class="string">'language'</span>);</span><br><span class="line">$language = $session[<span class="string">'language'</span>];</span><br><span class="line">$language = <span class="keyword">isset</span>($_SESSION[<span class="string">'language'</span>]) ? $_SESSION[<span class="string">'language'</span>] : <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><ul><li>设置一个<code>session</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以下三种方法效果等同 */</span></span><br><span class="line">$session-&gt;set(<span class="string">'language'</span>, <span class="string">'en-US'</span>);</span><br><span class="line">$session[<span class="string">'language'</span>] = <span class="string">'en-US'</span>;</span><br><span class="line">$_SESSION[<span class="string">'language'</span>] = <span class="string">'en-US'</span>;</span><br></pre></td></tr></table></figure><ul><li>删除一个<code>session</code>变量</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 下面三种方法效果等同 */</span></span><br><span class="line">$session-&gt;remove(<span class="string">'language'</span>);</span><br><span class="line"><span class="keyword">unset</span>($session[<span class="string">'language'</span>]);</span><br><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">'language'</span>]);</span><br></pre></td></tr></table></figure><ul><li>检查一个<code>session</code>变量是否存在</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以下三种方法效果一致 */</span></span><br><span class="line"><span class="keyword">if</span> ($session-&gt;has(<span class="string">'language'</span>)) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($session[<span class="string">'language'</span>])) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'language'</span>])) ...</span><br></pre></td></tr></table></figure><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li>获取<code>cookie</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cookies = Yii::$app-&gt;request-&gt;cookies;</span><br></pre></td></tr></table></figure><ul><li>设置<code>cookie</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cookies = Yii::$app-&gt;response-&gt;cookies;</span><br></pre></td></tr></table></figure><ul><li>获取一个<code>cookie</code>值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$language = $cookies-&gt;getValue(<span class="string">'language'</span>, <span class="string">'en'</span>);<span class="comment">// 如果获取language失败，则返回"en"代替</span></span><br></pre></td></tr></table></figure><ul><li>另一种获取<code>cookie</code>值方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (($cookie = $cookies-&gt;get(<span class="string">'language'</span>)) !== <span class="keyword">null</span>) &#123;</span><br><span class="line">    $language = $cookie-&gt;value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组方式获取<code>cookie</code>值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($cookies[<span class="string">'language'</span>])) &#123;</span><br><span class="line">    $language = $cookies[<span class="string">'language'</span>]-&gt;value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>检查一个<code>cookie</code>是否存在</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($cookies-&gt;has(<span class="string">'language'</span>)) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($cookies[<span class="string">'language'</span>])) ...</span><br></pre></td></tr></table></figure><ul><li>新增一个<code>cookie</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$cookies-&gt;add(<span class="keyword">new</span> \yii\web\Cookie([</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'language'</span>,</span><br><span class="line">    <span class="string">'value'</span> =&gt; <span class="string">'zh-CN'</span>,</span><br><span class="line">]));</span><br></pre></td></tr></table></figure><ul><li>删除一个<code>cookie</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$cookies-&gt;remove(<span class="string">'language'</span>);</span><br><span class="line"><span class="keyword">unset</span>($cookies[<span class="string">'language'</span>]);</span><br></pre></td></tr></table></figure><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><blockquote><p><code>Request</code> 被配置为一个应用组件，我们可以通过<code>Yii::$app-&gt;request</code>访问它。</p></blockquote><h3 id="URL相关"><a href="#URL相关" class="headerlink" title="URL相关"></a>URL相关</h3><ul><li>获得当前请求的绝对<code>url</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getAbsoluteUrl();</span><br></pre></td></tr></table></figure><ul><li>返回一个请求URL的<code>hostInfo</code>部分</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getHostInfo();</span><br></pre></td></tr></table></figure><ul><li>获得URL问号后的参数字符串</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getQueryString()</span><br></pre></td></tr></table></figure><ul><li>返回服务器端口</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getServerPort();</span><br></pre></td></tr></table></figure><h3 id="HTTP头"><a href="#HTTP头" class="headerlink" title="HTTP头"></a>HTTP头</h3><ul><li>返回用户接受的内容类型</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt; getAcceptableContentTypes (); <span class="comment">// Header Accept</span></span><br></pre></td></tr></table></figure><ul><li>返回用户可接受的语言</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt; getAcceptableLanguages(); <span class="comment">// Header Accept-Language</span></span><br></pre></td></tr></table></figure><ul><li>返回<code>GET</code>/<code>POST</code>请求</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;get();</span><br><span class="line">Yii::$app-&gt;request-&gt;get(<span class="string">"id"</span>);</span><br><span class="line">Yii::$app-&gt;request-&gt;POST();</span><br><span class="line">Yii::$app-&gt;request-&gt;POST(<span class="string">"username"</span>);</span><br></pre></td></tr></table></figure><ul><li>判断请求类型（返回boolean）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;isAjax <span class="comment">// 判断是否为ajax请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isConsoleRequest <span class="comment">// 判断是否为控制发起的请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isDelete <span class="comment">// 判断是否为DELETE请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isGet <span class="comment">// 判断是否为GET请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isPost <span class="comment">// 判断是否为POST请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isPjax <span class="comment">// 判断是否为isPjax请求</span></span><br></pre></td></tr></table></figure><ul><li>返回用户的 IP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getUserIP();</span><br></pre></td></tr></table></figure><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><blockquote><p>和Request一样，Response被封装成Yii的一个组件，你可以通过<code>Yii::$app-&gt;response</code>轻松的访问它。</p></blockquote><h3 id="Status-Code状态码"><a href="#Status-Code状态码" class="headerlink" title="Status Code状态码"></a>Status Code状态码</h3><ul><li>设置一个<code>Status Code</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;statusCode = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><ul><li>Yii内置的通过异常形式返回状态码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yii\web\BadRequestHttpException: status code <span class="number">400.</span></span><br><span class="line">yii\web\ConflictHttpException: status code <span class="number">409.</span></span><br><span class="line">yii\web\ForbiddenHttpException: status code <span class="number">403.</span></span><br><span class="line">yii\web\GoneHttpException: status code <span class="number">410.</span></span><br><span class="line">yii\web\MethodNotAllowedHttpException: status code <span class="number">405.</span></span><br><span class="line">yii\web\NotAcceptableHttpException: status code <span class="number">406.</span></span><br><span class="line">yii\web\NotFoundHttpException: status code <span class="number">404.</span></span><br><span class="line">yii\web\ServerErrorHttpException: status code <span class="number">500.</span></span><br><span class="line">yii\web\TooManyRequestsHttpException: status code <span class="number">429.</span></span><br><span class="line">yii\web\UnauthorizedHttpException: status code <span class="number">401.</span></span><br><span class="line">yii\web\UnsupportedMediaTypeHttpException: status code <span class="number">415.</span></span><br></pre></td></tr></table></figure><h3 id="HTTP-Headers"><a href="#HTTP-Headers" class="headerlink" title="HTTP Headers"></a>HTTP Headers</h3><ul><li>添加设置删除<code>Http Headers</code>内容</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$headers = Yii::$app-&gt;response-&gt;headers;</span><br><span class="line"><span class="comment">// add a Pragma header. Existing Pragma headers will NOT be overwritten.</span></span><br><span class="line">$headers-&gt;add(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"><span class="comment">// set a Pragma header. Any existing Pragma headers will be discarded.</span></span><br><span class="line">$headers-&gt;set(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"><span class="comment">// remove Pragma header(s) and return the removed Pragma header values in an array</span></span><br><span class="line">$values = $headers-&gt;remove(<span class="string">'Pragma'</span>);</span><br></pre></td></tr></table></figure><h3 id="Response-Body"><a href="#Response-Body" class="headerlink" title="Response Body"></a><code>Response Body</code></h3><ul><li>相应主体</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;content = <span class="string">'hello world!'</span>;</span><br></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><blockquote><p>控制器，可在<code>action</code>内直接用<code>$this</code>调用。</p></blockquote><ul><li>渲染一个视图（如果布局有效则使用布局）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;render(<span class="string">'index'</span>, [<span class="string">'model'</span> =&gt; $model])</span><br></pre></td></tr></table></figure><ul><li>渲染视图（不使用布局）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;renderPartial(<span class="string">'index'</span>,[<span class="string">'model'</span>=&gt;$model])</span><br></pre></td></tr></table></figure><ul><li>渲染视图（不使用布局）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入所有注册的JS/CSS脚本和文件,通常使用在响应AJAX网页请求的情况下</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;renderAjax(<span class="string">'index'</span>,[<span class="string">'model'</span>=&gt;$model])</span><br></pre></td></tr></table></figure><ul><li>只渲染布局</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;renderContent($content);</span><br></pre></td></tr></table></figure><h2 id="ActiveForm"><a href="#ActiveForm" class="headerlink" title="ActiveForm"></a>ActiveForm</h2><blockquote><p>重点！列出最常用的ActiveForm方法。</p></blockquote><ul><li>取消客户端规则验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">'enableClientValidation'</span>=&gt;<span class="keyword">false</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>取消<code>yii.js</code>的引入</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">'enableClientScript'</span>=&gt;<span class="keyword">false</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>表单目标地址设置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">"action"</span>=&gt;$url </span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>GET &amp; POST 方法设置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">"method"</span>=&gt;<span class="string">"POST"</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>设置Form的类及自己定义标签属性</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">'options'</span>=&gt;[<span class="string">"class"</span>=&gt;<span class="string">"f"</span>,<span class="string">"data-name"</span>=&gt;<span class="string">"xxx"</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>生成文本框</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model, <span class="string">'date'</span>)-&gt;textInput([<span class="string">"key"</span>=&gt;<span class="string">"value"</span>]);</span><br></pre></td></tr></table></figure><ul><li>生成文本域</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model, <span class="string">'date'</span>)-&gt;textarea([<span class="string">"key"</span>=&gt;<span class="string">"value"</span>]);</span><br></pre></td></tr></table></figure><ul><li>单选列表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">'sex'</span>)-&gt;radioList($arr,[<span class="string">"key"</span>=&gt;<span class="string">"value"</span>]);</span><br></pre></td></tr></table></figure><ul><li>密码框 </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">"password"</span>)-&gt;passwordInput();</span><br></pre></td></tr></table></figure><ul><li>复选框</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">"city_id"</span>)-&gt;checkboxList($arr);</span><br></pre></td></tr></table></figure><ul><li>文件上传</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">"image"</span>)-&gt;fileInput();</span><br></pre></td></tr></table></figure><ul><li>隐藏域</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">"name"</span>)-&gt;hiddenInput();</span><br></pre></td></tr></table></figure><h2 id="FileHelper"><a href="#FileHelper" class="headerlink" title="FileHelper"></a>FileHelper</h2><blockquote><p>几个常用也好用的文件帮助方法</p></blockquote><ul><li>遍历一个文件夹下文件&amp;子文件夹</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::findFiles(<span class="string">'/path/to/search/'</span>);</span><br><span class="line">FileHelper::findFiles(<span class="string">'.'</span>, [<span class="string">'only'</span> =&gt; [<span class="string">'*.php'</span>, <span class="string">'*.txt'</span>]]); <span class="comment">// 只返回php和txt文件</span></span><br><span class="line">FileHelper::findFiles(<span class="string">'.'</span>, [<span class="string">'except'</span> =&gt; [<span class="string">'*.php'</span>, <span class="string">'*.txt'</span>]]); <span class="comment">// 排除php和txt文件</span></span><br></pre></td></tr></table></figure><ul><li>获得指定文件的MIME类型</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::getMimeType(<span class="string">'/path/to/img.jpeg'</span>);</span><br></pre></td></tr></table></figure><ul><li>复制文件夹</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::copyDirectory($src, $dst, $options = [])</span><br></pre></td></tr></table></figure><ul><li>删除一个目录及内容</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::removeDirectory($dir, $options = [])</span><br></pre></td></tr></table></figure><ul><li>生成一个文件夹（同时设置权限）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::createDirectory($path, $mode = <span class="number">0775</span>, $recursive = <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><h2 id="UploadedFile"><a href="#UploadedFile" class="headerlink" title="UploadedFile"></a>UploadedFile</h2><blockquote><p>上传文件帮助类</p></blockquote><ul><li>通过模型的属性获取一个文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file = UploadedFile::getInstance($model,<span class="string">'avatar'</span>)</span><br></pre></td></tr></table></figure><ul><li>通过模型的属性来获取一组文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$files = UploadedFile::getInstances($model,<span class="string">'avatar'</span>)</span><br><span class="line"><span class="comment">//view $form-&gt;field($model,'avatar[]')-&gt;fileInput()</span></span><br></pre></td></tr></table></figure><ul><li>通过名字上传一个文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file = UploadedFile::getInstanceByName(<span class="string">'avatar'</span>);</span><br></pre></td></tr></table></figure><ul><li>通过名字获取一组上传的文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$file = UploadedFile::getInstancesByName(<span class="string">'avatar'</span>);</span><br><span class="line"><span class="comment">// view Html::fileInput('avatar[]')</span></span><br></pre></td></tr></table></figure><ul><li>保存一个文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;saveAs(Yii::getAlias(<span class="string">"@webroot"</span>).<span class="string">'/data/test.jpg'</span>);</span><br></pre></td></tr></table></figure><ul><li>获取上传文件原始名(不含扩展名)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;getBaseName(); <span class="comment">// test.jpg ===&gt; test</span></span><br></pre></td></tr></table></figure><ul><li>获取上传文件的扩展名(已经自动格式化为小写)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;getExtension(); <span class="comment">// 是png、不是image/png</span></span><br></pre></td></tr></table></figure><ul><li>获取文件的原始名</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;name; <span class="comment">// test.jpg</span></span><br></pre></td></tr></table></figure><ul><li>获取文件媒体类型</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;type; <span class="comment">// image/png</span></span><br></pre></td></tr></table></figure><ul><li>获取文件临时名</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;tempName;</span><br></pre></td></tr></table></figure><ul><li>获取文件大小</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;size; <span class="comment">// 21744</span></span><br></pre></td></tr></table></figure><h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><blockquote><p>通过Html类的一些静态方法生成Html标签。</p></blockquote><ul><li>生成一个超级链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::a(<span class="string">'链接的文本'</span>, $url);</span><br></pre></td></tr></table></figure><ul><li>通过Yii2的路由生成一个链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html::a(<span class="string">'链接文本'</span>, Url::to([<span class="string">'/site/index'</span>], <span class="keyword">true</span>));</span><br><span class="line">Html::a(<span class="string">'链接文本'</span>, Yii::$app-&gt;urlManager-&gt;createUrl([<span class="string">'/site/index'</span>]));</span><br></pre></td></tr></table></figure><ul><li>生成一个图片链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::img(<span class="string">"/images/logo.png"</span>,[<span class="string">'class'</span>=&gt;<span class="string">'img'</span>]);</span><br></pre></td></tr></table></figure><ul><li>生成一个按钮</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::button(<span class="string">"按钮文本"</span>,[<span class="string">'class'</span>=&gt;<span class="string">'button-action'</span>]);</span><br></pre></td></tr></table></figure><ul><li>发送邮件链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::mailto(<span class="string">"阿北"</span>,<span class="string">'abei@nai8.me'</span>,$options);</span><br></pre></td></tr></table></figure><ul><li>生成有序列表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$list = [<span class="string">'china'</span>,<span class="string">'usa'</span>];</span><br><span class="line">Html::ol($list);</span><br></pre></td></tr></table></figure><ul><li>生成无须列表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$list = [<span class="string">'china'</span>,<span class="string">'usa'</span>,<span class="string">'japan'</span>];</span><br><span class="line">Html::ul($list);</span><br></pre></td></tr></table></figure><ul><li>生成<code>javascript</code>代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::script(<span class="string">"alert('hello world');"</span>)</span><br></pre></td></tr></table></figure><ul><li>生成<code>style</code>代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html::style(<span class="string">"color:#F60"</span>);</span><br><span class="line">Html::style(<span class="string">".list &#123;background:#FFF;&#125;"</span>);</span><br></pre></td></tr></table></figure><ul><li>生成一个css引用链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::cssFile(<span class="string">"http://baidu.com/style.css"</span>,[]);</span><br></pre></td></tr></table></figure><ul><li>生成一个js文件引用</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::jsFile($url,[]);</span><br></pre></td></tr></table></figure><ul><li>把字符 “&lt;” （小于）和 “&gt;” （大于）转换为HTML实体</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::encode($html);</span><br></pre></td></tr></table></figure><ul><li>将特色的HTML实体转化为&gt;和&lt;</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::decode($string);</span><br></pre></td></tr></table></figure><h2 id="Query-Builder"><a href="#Query-Builder" class="headerlink" title="Query Builder"></a>Query Builder</h2><blockquote><p>主要解决DAO在查询语句上的繁琐问题，无需输入原生SQL语句就可以完成数据库检索。</p></blockquote><ul><li>使用<code>Query Builder</code>需要使用的类</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query = (<span class="keyword">new</span> \yii\db\Query()); <span class="comment">// yii2使用Query对象来采集SQL的各个部分，然后由Query Builder组成SQL语句后由DAO发给数据库获得请求。</span></span><br></pre></td></tr></table></figure><ul><li><code>SELECT</code>方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;select(<span class="string">"id,username"</span>); <span class="comment">// 字符串形式</span></span><br><span class="line">$query-&gt;select([<span class="string">'id'</span>,<span class="string">'username'</span>]); <span class="comment">// 数组形式</span></span><br><span class="line">$query-&gt;select([<span class="string">"userId"</span>=&gt;<span class="string">"id"</span>,<span class="string">"fName"</span>=&gt;<span class="string">"user.frist_name"</span>]); <span class="comment">// 起别名</span></span><br><span class="line">$query-&gt;select([<span class="string">"full_name"</span>=&gt;<span class="string">"CONCAT(id,'-',username)"</span>]); <span class="comment">// 支持MYSQL函数</span></span><br></pre></td></tr></table></figure><ul><li><code>FROM</code>方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;from(<span class="string">"user"</span>); <span class="comment">// 字符串形式</span></span><br><span class="line">$query-&gt;from([<span class="string">"u"</span>=&gt;<span class="string">"user"</span>]); <span class="comment">// 数据表别名</span></span><br></pre></td></tr></table></figure><ul><li>过滤掉重复记录</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;select(<span class="string">"username"</span>)-&gt;distinct()-&gt;from(<span class="string">"user"</span>); <span class="comment">// distinct</span></span><br></pre></td></tr></table></figure><ul><li><code>WHERE</code>函数用法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 传递字符串 */</span></span><br><span class="line">$query-&gt;where(<span class="string">"id = 1"</span>);</span><br><span class="line">$query-&gt;where(<span class="string">"id = :id"</span>)-&gt;addParams([<span class="string">":id"</span>=&gt;<span class="number">1</span>]);</span><br><span class="line">$query-&gt;where(<span class="string">"id = :id"</span>,[<span class="string">":id"</span>=&gt;<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 传递数组 */</span></span><br><span class="line">$query-&gt;where([<span class="string">"username"</span>=&gt;<span class="string">"abei"</span>,<span class="string">"age"</span>=&gt;[<span class="number">20</span>,<span class="number">19</span>,<span class="number">26</span>]])-&gt;from(<span class="string">"user"</span>);<span class="comment">// select * from user where username="abei" AND age in (20,19,26)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作符 */</span></span><br><span class="line">$query-&gt;where([<span class="string">"&gt;"</span>,<span class="string">"id"</span>,<span class="number">10</span>]);<span class="comment">// id &gt; 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"&lt;"</span>,<span class="string">"id"</span>,<span class="number">10</span>]); <span class="comment">// id &lt; 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"&lt;&gt;"</span>,<span class="string">"id"</span>,<span class="number">10</span>]); <span class="comment">// id &lt;&gt; 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"in"</span>,<span class="string">"id"</span>,[<span class="number">10</span>,<span class="number">12</span>]]);<span class="comment">// id in (10,20)</span></span><br><span class="line">$query-&gt;where([<span class="string">"not in"</span>,<span class="string">"id"</span>,[<span class="number">10</span>,<span class="number">12</span>]]);<span class="comment">// id not in (10,20)</span></span><br><span class="line">$query-&gt;where([<span class="string">"and"</span>,<span class="string">"id=1"</span>,<span class="string">"id=2"</span>]); id=<span class="number">1</span> <span class="keyword">AND</span> id=<span class="number">2</span></span><br><span class="line">$query-&gt;where([<span class="string">'or'</span>, [<span class="string">'type'</span> =&gt; [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]], [<span class="string">'id'</span> =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]]); <span class="comment">// (type IN (7, 8, 9) OR (id IN (1, 2, 3)))</span></span><br><span class="line">$query-&gt;where([<span class="string">"between"</span>, <span class="string">'id'</span>, <span class="number">1</span>, <span class="number">10</span>]);<span class="comment">// id between 1 AND 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"not"</span>,[<span class="string">"id"</span>=&gt;<span class="number">5</span>]]);<span class="comment">// not (id=5)</span></span><br><span class="line">$query-&gt;where([<span class="string">"not between"</span>,<span class="string">"id"</span>,<span class="number">1</span>,<span class="number">10</span>]);<span class="comment">// id not between 1 AND 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"like"</span>,<span class="string">"username"</span>,<span class="string">"abei"</span>]); <span class="comment">// username like "%abei%"</span></span><br><span class="line">$query-&gt;where([[<span class="string">'like'</span>, <span class="string">'username'</span>, [<span class="string">'abei'</span>, <span class="string">'liuhuan'</span>]]]); <span class="comment">// username like "%abei%" AND username like "%liuhuan%"</span></span><br><span class="line">$query-&gt;where([<span class="string">'like'</span>, <span class="string">'username'</span>, <span class="string">'%abei'</span>, <span class="keyword">false</span>]); <span class="comment">// username like "%abei"</span></span><br><span class="line">$query-&gt;where([<span class="string">"or like"</span>, <span class="string">'username'</span>, [<span class="string">'abei'</span>, <span class="string">'liuhuan'</span>]]);<span class="comment">// username like "%abei%" OR username like "%liuhuan%"，只作用于范围为数组的形式</span></span><br><span class="line">$query-&gt;where([<span class="string">"not like"</span>,xxxxx]);<span class="comment">// 与like用法一致</span></span><br><span class="line">$query-&gt;where([<span class="string">"or not like"</span>,xxx])<span class="comment">// 与not like用法一致</span></span><br></pre></td></tr></table></figure><ul><li>一个要单独说明的<code>exists</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* EXISTS用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False */</span></span><br><span class="line">$query-&gt;where([<span class="string">'exists'</span>, (<span class="keyword">new</span> Query())-&gt;select(<span class="string">'id'</span>)-&gt;from(<span class="string">'user'</span>)-&gt;where([<span class="string">'id'</span> =&gt; <span class="number">1</span>])]);</span><br></pre></td></tr></table></figure><ul><li><code>ORDER BY</code> 方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;orderBy(<span class="string">"id DESC"</span>);</span><br><span class="line">$query-&gt;orderBy([<span class="string">"id"</span>=&gt;SORT_DESC]);</span><br><span class="line">$query-&gt;orderBy([<span class="string">"id"</span>=&gt;SORT_DESC,<span class="string">'create_time'</span>=&gt;SORT_ASC]);</span><br></pre></td></tr></table></figure><ul><li><code>GROUP BY</code> &amp;&amp; <code>HAVING</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;groupBy([<span class="string">"username"</span>]);</span><br><span class="line">$query-&gt;groupBy([<span class="string">"id"</span>])-&gt;having([<span class="string">"&gt;"</span>,<span class="string">'id'</span>,<span class="number">20</span>]);</span><br></pre></td></tr></table></figure><ul><li>获取生成的SQL语句</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;createCommand()-&gt;sql;</span><br></pre></td></tr></table></figure><h3 id="获得查询结果"><a href="#获得查询结果" class="headerlink" title="获得查询结果"></a>获得查询结果</h3><ul><li>获取所有结果</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;all();<span class="comment">// 二位数组</span></span><br></pre></td></tr></table></figure><ul><li>获取一条记录</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;one();</span><br></pre></td></tr></table></figure><ul><li>检查一个数据库中是否含有某个表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> \yii\db\Query)-&gt;from(<span class="string">'user'</span>)-&gt;exists();</span><br></pre></td></tr></table></figure><ul><li>获取<code>count</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;count();</span><br></pre></td></tr></table></figure><ul><li>获取一个值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;scalar();</span><br></pre></td></tr></table></figure><ul><li>获取一列值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;column();  <span class="comment">// 一位数组</span></span><br></pre></td></tr></table></figure><ul><li>获取一个user表的内容</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$query = <span class="keyword">new</span> \yii\db\Query;</span><br><span class="line">$query-&gt;from(<span class="string">"user"</span>);</span><br><span class="line">$query-&gt;select([<span class="string">"fname"</span>=&gt;<span class="string">"username"</span>]);</span><br><span class="line">$query-&gt;where([<span class="string">"&gt;"</span>,<span class="string">'id'</span>,<span class="number">10</span>]);</span><br><span class="line">$query-&gt;all();</span><br></pre></td></tr></table></figure><h2 id="Migrate"><a href="#Migrate" class="headerlink" title="Migrate"></a>Migrate</h2><ul><li>生成一个迁移文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./yii migrate/create script_name <span class="comment">// script_name为脚本名字（需要英文格式）</span></span><br></pre></td></tr></table></figure><ul><li>执行所有没有迁移的脚本</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./yii migrate</span><br><span class="line">./yii migrate/up</span><br></pre></td></tr></table></figure><ul><li>执行置顶的迁移</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./yii migrate/up 脚本名 <span class="comment">// 不用含有扩展名</span></span><br></pre></td></tr></table></figure><h2 id="Asset-Management"><a href="#Asset-Management" class="headerlink" title="Asset Management"></a>Asset Management</h2><blockquote><p>Asset资源管理</p></blockquote><ul><li>类属性说明</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$basePath <span class="comment">// 资源文件所在的web服务器目录路径，一般为@webroot</span></span><br><span class="line">$baseUrl <span class="comment">// js和css文件相对url基地址</span></span><br><span class="line">$css <span class="comment">// asset bundle 所包含的css文件数组</span></span><br><span class="line">$cssOptions <span class="comment">// 对link标签的属性控制</span></span><br><span class="line">$js <span class="comment">// asset bundle 所包含的js文件数组</span></span><br><span class="line">$jsOptions <span class="comment">// 对script标签的属性控制</span></span><br><span class="line">$publishOptions <span class="comment">// 发布操作</span></span><br><span class="line">$sourcePath <span class="comment">// 当资源网络不可以访问，则必须指定此目录。</span></span><br></pre></td></tr></table></figure><ul><li>去掉浏览器缓存</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'appendTimestamp'</span> =&gt; <span class="keyword">true</span> <span class="comment">// 在web.php里的components - assetManager</span></span><br></pre></td></tr></table></figure><ul><li>发布资源筛选</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $publishOptions = [</span><br><span class="line">    <span class="string">'only'</span> =&gt; [</span><br><span class="line">        <span class="string">'fonts/*'</span>,</span><br><span class="line">        <span class="string">'css/*'</span>,</span><br><span class="line">        <span class="string">'test.js'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'except'</span>=&gt;[</span><br><span class="line">        <span class="string">'img'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>js文件在页面的位置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $jsOptions = [<span class="string">'position'</span> =&gt; \yii\web\View::POS_HEAD];<span class="comment">//js文件发布到head标签内</span></span><br><span class="line"><span class="keyword">public</span> $jsOptions = [<span class="string">'position'</span> =&gt; \yii\web\View::POS_END];<span class="comment">//js文件发布到body标签底部</span></span><br><span class="line"><span class="keyword">public</span> $jsOptions = [<span class="string">'position'</span> =&gt; \yii\web\View::POS_BEGIN];<span class="comment">//js文件放到body标签开始处</span></span><br></pre></td></tr></table></figure><ul><li>浏览器兼容问题</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $cssOptions = [<span class="string">'condition'</span> =&gt; <span class="string">'IE 11'</span>];<span class="comment">// 代表兼容ie11</span></span><br></pre></td></tr></table></figure><ul><li>是否使用符号链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'linkAssets'</span> =&gt; <span class="keyword">true</span> <span class="comment">// 在web.php里的components - assetManager</span></span><br></pre></td></tr></table></figure><ul><li>配置yii自身的asset资源</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在web.php里的components - assetManager，配置自定义的也可以</span></span><br><span class="line"><span class="string">'bundles'</span> =&gt;  [</span><br><span class="line">    <span class="string">'yii/web/YiiAsset'</span>=&gt;[</span><br><span class="line">        <span class="string">'js'</span>=&gt;[],</span><br><span class="line">        ......</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><blockquote><p>有关事件的所有，系统自带事件通通给你。</p></blockquote><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><ul><li>应用处理请求<code>before</code>之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application::EVENT_BEFORE_REQUEST</span><br></pre></td></tr></table></figure><ul><li>应用处理请求<code>after</code>之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application::EVENT_AFTER_REQUEST</span><br></pre></td></tr></table></figure><h3 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h3><ul><li>在每个<code>Action</code>运行之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Controller::EVENT_BEFORE_ACTION</span><br></pre></td></tr></table></figure><ul><li>在每个Action运行之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Controller::EVENT_AFTER_ACTION</span><br></pre></td></tr></table></figure><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><ul><li>在验证Model属性之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model::EVENT_BEFORE_VALIDATE</span><br></pre></td></tr></table></figure><ul><li>在验证Model属性之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model::EVENT_AFTER_VALIDATE</span><br></pre></td></tr></table></figure><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><ul><li>一个模块的Action运行前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module::EVENT_BEFORE_ACTION</span><br></pre></td></tr></table></figure><ul><li>一个模块的Action运行后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module::EVENT_AFTER_ACTION</span><br></pre></td></tr></table></figure><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><ul><li>执行视图的<code>beforePage</code>时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_BEGIN_PAGE</span><br></pre></td></tr></table></figure><ul><li>执行视图的<code>endPage</code>函数时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_END_PAGE</span><br></pre></td></tr></table></figure><ul><li>在<code>renderFile</code>渲染一个视图文件之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_BEFORE_RENDER</span><br></pre></td></tr></table></figure><ul><li>在<code>renderFile</code>渲染一个视图文件之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_AFTER_RENDER</span><br></pre></td></tr></table></figure><ul><li>执行视图的<code>beginBody</code>函数时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_BEGIN_BODY</span><br></pre></td></tr></table></figure><ul><li>执行视图的<code>endBody</code>函数时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_END_BODY</span><br></pre></td></tr></table></figure><h3 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h3><ul><li>Widget初始化时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Widget::EVENT_INIT</span><br></pre></td></tr></table></figure><ul><li>Widget执行前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Widget::EVENT_BEFORE_RUN</span><br></pre></td></tr></table></figure><ul><li>Widget执行之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Widget::EVENT_AFTER_RUN</span><br></pre></td></tr></table></figure><h3 id="ActiveQuery"><a href="#ActiveQuery" class="headerlink" title="ActiveQuery"></a>ActiveQuery</h3><ul><li>由ActiveQuery的init函数触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActiveQuery::EVENT_INIT</span><br></pre></td></tr></table></figure><h3 id="BaseActiveRecord-amp-ActiveRecord"><a href="#BaseActiveRecord-amp-ActiveRecord" class="headerlink" title="BaseActiveRecord &amp; ActiveRecord"></a>BaseActiveRecord &amp; ActiveRecord</h3><ul><li>AR对象被初始化init时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_INIT</span><br></pre></td></tr></table></figure><ul><li>AR执行查询结束时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_FIND</span><br></pre></td></tr></table></figure><ul><li>插入结束时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_BEFORE_INSERT</span><br></pre></td></tr></table></figure><ul><li>插入之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_INSERT</span><br></pre></td></tr></table></figure><ul><li>更新记录之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_BEFORE_UPDATE</span><br></pre></td></tr></table></figure><ul><li>更新记录之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_UPDATE</span><br></pre></td></tr></table></figure><ul><li>删除记录之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_BEFORE_DELETE</span><br></pre></td></tr></table></figure><ul><li>删除记录之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_DELETE</span><br></pre></td></tr></table></figure><ul><li>在数据refresh成功之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_REFRESH</span><br></pre></td></tr></table></figure><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><ul><li>数据库连接被打开后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection::EVENT_AFTER_OPEN</span><br></pre></td></tr></table></figure><ul><li>事务被启动时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection::EVENT_BEGIN_TRANSACTION</span><br></pre></td></tr></table></figure><ul><li>事务被提交后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection::EVENT_COMMIT_TRANSACTION</span><br></pre></td></tr></table></figure><ul><li>事务回滚后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection::EVENT_ROLLBACK_TRANSACTION</span><br></pre></td></tr></table></figure><h3 id="Response-1"><a href="#Response-1" class="headerlink" title="Response"></a>Response</h3><ul><li>Response响应发送之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response::EVENT_BEFORE_SEND</span><br></pre></td></tr></table></figure><ul><li>Response响应发送之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response::EVENT_AFTER_SEND</span><br></pre></td></tr></table></figure><ul><li>Response响应内容准备好之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response::EVENT_AFTER_PREPARE</span><br></pre></td></tr></table></figure><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><ul><li>登陆之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::EVENT_BEFORE_LOGIN</span><br></pre></td></tr></table></figure><ul><li>登陆之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::EVENT_AFTER_LOGIN</span><br></pre></td></tr></table></figure><ul><li>注销之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::EVENT_BEFORE_LOGOUT</span><br></pre></td></tr></table></figure><ul><li>注销之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::EVENT_AFTER_LOGOUT</span><br></pre></td></tr></table></figure><h2 id="Route-amp-UrlManager"><a href="#Route-amp-UrlManager" class="headerlink" title="Route&amp;UrlManager"></a>Route&amp;UrlManager</h2><ul><li>URL美化配置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// conf/web.php</span></span><br><span class="line"><span class="string">'urlManager'</span> =&gt; [</span><br><span class="line">    <span class="string">'enablePrettyUrl'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">'showScriptName'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">'suffix'</span>=&gt;<span class="string">'.html'</span>,<span class="comment">// 统一后缀名，若不需要则无需配置</span></span><br><span class="line">    <span class="string">'enableStrictParsing'</span>=&gt;<span class="keyword">false</span>,<span class="comment">//默认为false，是否采用严格解析</span></span><br><span class="line">    <span class="string">'rules'</span> =&gt; [</span><br><span class="line">    ],        </span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>Apache开启url重写方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Apache需要支持url重写其AllowOverride为all</span></span><br><span class="line">AllowOverride:all</span><br><span class="line"></span><br><span class="line"><span class="comment">//web目录下增加.htaccess，隐藏index.php文件 内容如下</span></span><br><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule . index.php</span><br></pre></td></tr></table></figure><ul><li>Nginx支持url重写</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    <span class="keyword">if</span> (!-e $request_filename)&#123;</span><br><span class="line">        rewrite ^/(.*) /index.php last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Apache开启url重写方法2</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule ^(.*)\?*$ index.php/$<span class="number">1</span> [L,QSA]</span><br></pre></td></tr></table></figure><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><ul><li>分页获得所有的会员</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /users</span><br><span class="line">GET /users?page=<span class="number">2</span></span><br><span class="line">GET /users?fields=id,username,created_at</span><br><span class="line">GET /users?sort=id,-username</span><br></pre></td></tr></table></figure><ul><li>HTTP状态码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span>: OK。一切正常。</span><br><span class="line"><span class="number">201</span>: 响应 POST 请求时成功创建一个资源。Location header 包含的URL指向新创建的资源。</span><br><span class="line"><span class="number">204</span>: 该请求被成功处理，响应不包含正文内容 (类似 DELETE 请求)。</span><br><span class="line"><span class="number">304</span>: 资源没有被修改。可以使用缓存的版本。</span><br><span class="line"><span class="number">400</span>: 错误的请求。可能通过用户方面的多种原因引起的，例如在请求体内有无效的JSON 数据，无效的操作参数，等等。</span><br><span class="line"><span class="number">401</span>: 验证失败。</span><br><span class="line"><span class="number">403</span>: 已经经过身份验证的用户不允许访问指定的 API 末端。</span><br><span class="line"><span class="number">404</span>: 所请求的资源不存在。</span><br><span class="line"><span class="number">405</span>: 不被允许的方法。 请检查 Allow header 允许的HTTP方法。</span><br><span class="line"><span class="number">415</span>: 不支持的媒体类型。 所请求的内容类型或版本号是无效的。</span><br><span class="line"><span class="number">422</span>: 数据验证失败 (例如，响应一个 POST 请求)。 请检查响应体内详细的错误消息。</span><br><span class="line"><span class="number">429</span>: 请求过多。 由于限速请求被拒绝。</span><br><span class="line"><span class="number">500</span>: 内部服务器错误。 这可能是由于内部程序错误引起的。</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.yii-china.com/doc/detail/539#3" target="_blank" rel="noopener">Yii2 速查表</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Yii2 速查表&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架相关" scheme="http://blog.caoxl.com/categories/%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Yii2" scheme="http://blog.caoxl.com/tags/Yii2/"/>
    
      <category term="速查表" scheme="http://blog.caoxl.com/tags/%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 Yes It is</title>
    <link href="http://blog.caoxl.com/2019/12/15/Yii2-Learning-Notes/"/>
    <id>http://blog.caoxl.com/2019/12/15/Yii2-Learning-Notes/</id>
    <published>2019-12-15T02:18:49.000Z</published>
    <updated>2019-12-27T03:34:06.174Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Yii2 Yes It is</p></blockquote><a id="more"></a><h2 id="关于Yii"><a href="#关于Yii" class="headerlink" title="关于Yii"></a>关于Yii</h2><h3 id="Yii-是什么"><a href="#Yii-是什么" class="headerlink" title="Yii 是什么"></a>Yii 是什么</h3><p>Yii 是一个高性能，基于组件的 PHP 框架，用于快速开发现代 Web 应用程序。 名字 Yii （读作 易）在中文里有“极致简单与不断演变”两重含义， 也可看作 <strong>Yes It Is!</strong> 的缩写。</p><h3 id="Yii-版本"><a href="#Yii-版本" class="headerlink" title="Yii 版本"></a>Yii 版本</h3><p>Yii 当前有两个主要版本：1.1 和 2.0。 1.1 版是上代的老版本，现在处于维护状态。 2.0 版是一个完全重写的版本，采用了最新的技术和协议，包括<code>依赖包管理器 Composer</code>、<code>PHP 代码规范 PSR</code>、<code>命名空间</code>、<code>Traits（特质）</code>等等。 2.0 版代表新一代框架，是未来几年中我们的主要开发版本。</p><h2 id="安装-Yii"><a href="#安装-Yii" class="headerlink" title="安装 Yii"></a>安装 Yii</h2><ul><li>通过 Composer 安装</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist yiisoft/yii2-app-basic Yii2</span><br></pre></td></tr></table></figure><h3 id="验证安装的结果"><a href="#验证安装的结果" class="headerlink" title="验证安装的结果"></a>验证安装的结果</h3><p>当安装完成之后， 或配置你的Web服务器(看下面的文章)或使用内置Web Server， 当在项目 web 目录下可以通过下面的命令:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php yii serve</span><br></pre></td></tr></table></figure><h2 id="应用结构"><a href="#应用结构" class="headerlink" title="应用结构"></a>应用结构</h2><blockquote><ul><li>Yii2                  项目根目录<ul><li>assets</li><li>commands            控制台命令类目录</li><li>config              应用配置及其它配置目录<ul><li>console.php       控制台应用配置信息</li><li>web.php           Web 应用配置信息</li></ul></li><li>controllers         控制器类目录</li><li>mail                邮件类目录</li><li>models              模型类目录</li><li>runtime             Yii 在运行时生成的文件，例如日志和缓存文件</li><li>tests               单元测试</li><li>vagrant</li><li>vendor              已经安装的 Composer 包，包括 Yii 框架自身</li><li>views               视图目录</li><li>web                 Web 应用根目录，包含 Web 入口文件<ul><li>assets            Yii 发布的资源文件（javascript 和 css）</li><li>index.php         应用入口文件</li></ul></li><li>widgets</li><li>composer.json       Composer 配置文件, 描述包信息</li><li>composer.lock</li><li>yii  </li></ul></li></ul></blockquote><blockquote><p>一般来说，应用中的文件可被分为两类：在 basic/web 下的和在其它目录下的。 前者可以直接通过 HTTP 访问（例如浏览器），后者不能也不应该被直接访问。一般来说，应用中的文件可被分为两类：在 basic/web 下的和在其它目录下的。 前者可以直接通过 HTTP 访问（例如浏览器），后者不能也不应该被直接访问。</p></blockquote><h2 id="请求生命周期"><a href="#请求生命周期" class="headerlink" title="请求生命周期"></a>请求生命周期</h2><blockquote><ul><li><ol><li>用户提交指向 入口脚本 <code>web/index.php</code>的请求</li></ol></li><li><ol start="2"><li>入口脚本会加载 <code>配置数组</code> 并创建一个 <code>应用</code> 实例用于处理该请求</li></ol></li><li><ol start="3"><li>应用会通过 <code>request(请求)</code> 应用组件解析被请求的 <code>路由</code></li></ol></li><li><ol start="4"><li>应用创建一个 <code>controller(控制器)</code> 实例具体处理请求</li></ol></li><li><ol start="5"><li>控制器会创建一个 <code>action(动作)</code> 实例并为该动作执行相关的 <code>Filters(访问过滤器)</code></li></ol></li><li><ol start="6"><li>如果任何一个过滤器验证失败, 该动作会被取消</li></ol></li><li><ol start="7"><li>如果全部的过滤器都通过, 该动作就会被执行</li></ol></li><li><ol start="8"><li>动作后悔加载一个<code>数据模型</code>, 一般是从数据库中加载</li></ol></li><li><ol start="9"><li>动作后悔渲染一个<code>View(视图)</code>, 并为其提供所需的数据模型</li></ol></li><li><ol start="10"><li>渲染得到的结果会返回给 <code>response(响应)</code> 应用组件</li></ol></li><li><ol start="11"><li>响应组件会把渲染结果发回给用户的浏览器</li></ol></li></ul></blockquote><h2 id="说声-Hello"><a href="#说声-Hello" class="headerlink" title="说声 Hello"></a>说声 Hello</h2><p>这个章节，你将会掌握三件事：</p><ol><li>如何创建一个动作去响应请求，</li><li>如何创建一个视图去构造响应内容，</li><li>以及一个应用如何分派请求给动作。</li></ol><h3 id="创建动作"><a href="#创建动作" class="headerlink" title="创建动作"></a>创建动作</h3><p>操作必须声明在控制器中。为了简单起见， 你可以直接在 <code>SiteController</code> 控制器里声明 <code>say</code> 操作。 这个控制器是由文件 <code>controllers/SiteController.php</code> 定义的。以下是一个操作的声明：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...现存的代码...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionSay</span><span class="params">($message = <span class="string">'Hello'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'say'</span>, [<span class="string">'message'</span> =&gt; $message]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p>视图是你用来生成响应内容的脚本。为了说 “Hello”， 你需要创建一个 <code>say</code> 视图，以便显示从操作方法中传来的 <code>message</code> 参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?</span>= Html::encode($message) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>say</code> 视图应该存为 <code>views/site/say.php</code> 文件。当一个操作中调用了 <code>render()</code> 方法时， 它将会按 <code>views/控制器 ID/视图名.php</code>路径加载 <code>PHP</code> 文件。</p><h3 id="试运行"><a href="#试运行" class="headerlink" title="试运行"></a>试运行</h3><p>创建完动作和视图后，你就可以通过下面的 URL 访问新页面了：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>hostname<span class="regexp">/index.php?r=site/</span>say&amp;message=Hello+World</span><br></pre></td></tr></table></figure><h2 id="使用表单"><a href="#使用表单" class="headerlink" title="使用表单"></a>使用表单</h2><p>这个章节，你将会掌握三件事：</p><ol><li>创建一个模型代表用户通过表单输入的数据</li><li>声明规则去验证输入的数据</li><li>在视图中生成一个 HTML 表单</li></ol><h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>模型类 <code>EntryForm</code> 代表从用户那请求的数据， 该类如下所示并存储在 <code>models/EntryForm.php</code> 文件中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EntryForm</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [[<span class="string">'name'</span>, <span class="string">'email'</span>], <span class="string">'required'</span>],</span><br><span class="line">            [<span class="string">'email'</span>, <span class="string">'email'</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建动作-1"><a href="#创建动作-1" class="headerlink" title="创建动作"></a>创建动作</h3><p>下面你得在 <code>site</code> 控制器中创建一个 <code>entry</code> 操作用于新建的模型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">models</span>\<span class="title">EntryForm</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...现存的代码...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionEntry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $model = <span class="keyword">new</span> EntryForm;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($model-&gt;load(Yii::$app-&gt;request-&gt;post()) &amp;&amp; $model-&gt;validate()) &#123;</span><br><span class="line">            <span class="comment">// 验证 $model 收到的数据</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 做些有意义的事 ...</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'entry-confirm'</span>, [<span class="string">'model'</span> =&gt; $model]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 无论是初始化显示还是数据验证错误</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'entry'</span>, [<span class="string">'model'</span> =&gt; $model]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>表达式 <code>Yii::$app</code> 代表应用实例，它是一个全局可访问的单例。 同时它也是一个服务定位器， 能提供 <code>request</code>，<code>response</code>，<code>db</code> 等等特定功能的组件。 在上面的代码里就是使用 <code>request</code> 组件来访问应用实例收到的 <code>$_POST</code> 数据。</p></blockquote><h3 id="创建视图-1"><a href="#创建视图-1" class="headerlink" title="创建视图"></a>创建视图</h3><p>最后创建两个视图文件 <code>entry-confirm</code> 和 <code>entry</code>。 他们会被刚才创建的 <code>entry</code> 操作渲染。</p><p><code>entry-confirm</code> 视图简单地显示提交的 <code>name</code> 和 <code>email</code> 数据。视图文件应该保存在 <code>views/site/entry-confirm.php</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;p&gt;You have entered the following information:&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;Name&lt;/label&gt;: <span class="meta">&lt;?</span>= Html::encode($model-&gt;name) <span class="meta">?&gt;</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;Email&lt;/label&gt;: <span class="meta">&lt;?</span>= Html::encode($model-&gt;email) <span class="meta">?&gt;</span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><code>entry</code> 视图显示一个 HTML 表单。视图文件应该保存在 <code>views/site/entry.php</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">widgets</span>\<span class="title">ActiveForm</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> $form = ActiveForm::begin(); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?</span>= $form-&gt;field($model, <span class="string">'name'</span>) <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?</span>= $form-&gt;field($model, <span class="string">'email'</span>) <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;div class="form-group"&gt;</span><br><span class="line">        <span class="meta">&lt;?</span>= Html::submitButton(<span class="string">'Submit'</span>, [<span class="string">'class'</span> =&gt; <span class="string">'btn btn-primary'</span>]) <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> ActiveForm::end(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="尝试下"><a href="#尝试下" class="headerlink" title="尝试下"></a>尝试下</h3><p>用浏览器访问下面的 URL 看它能否工作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hostname/index.php?r=site/entry</span></span><br></pre></td></tr></table></figure><h2 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h2><p>这个章节，你将会掌握四件事：</p><ol><li>配置一个数据库连接</li><li>定义一个活动记录类</li><li>使用活动记录从数据库中查询数据</li><li>以分页方式在视图中显示数据</li></ol><h3 id="准备数据库"><a href="#准备数据库" class="headerlink" title="准备数据库"></a>准备数据库</h3><p>首先创建一个名为 <code>yii2</code> 的数据库，应用将从这个数据库中读取数据。</p><p>然后在数据库中创建一个名为 <code>country</code> 的表并插入简单的数据。可以执行下面的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `country` (</span><br><span class="line">  `code` CHAR(2) NOT NULL PRIMARY KEY,</span><br><span class="line">  `name` CHAR(52) NOT NULL,</span><br><span class="line">  `population` INT(11) NOT NULL DEFAULT &apos;0&apos;</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `country` VALUES (&apos;AU&apos;,&apos;Australia&apos;,18886000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;BR&apos;,&apos;Brazil&apos;,170115000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;CA&apos;,&apos;Canada&apos;,1147000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;CN&apos;,&apos;China&apos;,1277558000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;DE&apos;,&apos;Germany&apos;,82164700);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;FR&apos;,&apos;France&apos;,59225700);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;GB&apos;,&apos;United Kingdom&apos;,59623400);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;IN&apos;,&apos;India&apos;,1013662000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;RU&apos;,&apos;Russia&apos;,146934000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;US&apos;,&apos;United States&apos;,278357000);</span><br></pre></td></tr></table></figure><p>此时便有了一个名为 <code>yii2</code> 的数据库，在这个数据库中有一个包含三个字段的数据表 <code>country</code>，表中有十行数据。</p><h3 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h3><p>开始之前，请确保你已经安装了 PHP PDO 扩展和你所使用的数据库的 PDO 驱动（例如 MySQL 的 pdo_mysql）。 对于使用关系型数据库来讲，这是基本要求。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -m <span class="comment">// 查看即可</span></span><br></pre></td></tr></table></figure><p>驱动和扩展安装可用后，打开 <code>config/db.php</code> 修改里面的配置参数对应你的数据库配置。 该文件默认包含这些内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'yii\db\Connection'</span>,</span><br><span class="line">    <span class="string">'dsn'</span> =&gt; <span class="string">'mysql:host=localhost;dbname=yii2'</span>,</span><br><span class="line">    <span class="string">'username'</span> =&gt; <span class="string">'root'</span>,</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>上面配置的数据库连接可以在应用中通过 <code>Yii::$app-&gt;db</code> 表达式访问。</p></blockquote><h3 id="创建活动记录"><a href="#创建活动记录" class="headerlink" title="创建活动记录"></a>创建活动记录</h3><p>创建一个继承自活动记录类的类 <code>Country</code>， 把它放在 <code>models/Country.php</code> 文件，去代表和读取 <code>country</code> 表的数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>Country</code> 类继承自 <code>yii\db\ActiveRecord</code>。你不用在里面写任何代码。 只需要像现在这样，<code>Yii</code> 就能根据类名去猜测对应的数据表名。</p><p>使用 <code>Country</code> 类可以很容易地操作 <code>country</code> 表数据，就像这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">models</span>\<span class="title">Country</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 country 表的所有行并以 name 排序</span></span><br><span class="line">$countries = Country::find()-&gt;orderBy(<span class="string">'name'</span>)-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取主键为 “US” 的行</span></span><br><span class="line">$country = Country::findOne(<span class="string">'US'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 “United States”</span></span><br><span class="line"><span class="keyword">echo</span> $country-&gt;name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 name 为 “U.S.A.” 并在数据库中保存更改</span></span><br><span class="line">$country-&gt;name = <span class="string">'U.S.A.'</span>;</span><br><span class="line">$country-&gt;save();</span><br></pre></td></tr></table></figure><h3 id="创建动作-2"><a href="#创建动作-2" class="headerlink" title="创建动作"></a>创建动作</h3><p>新控制器名为 <code>CountryController</code>，并在其中创建一个 <code>index</code> 操作， 如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">data</span>\<span class="title">Pagination</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">models</span>\<span class="title">Country</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountryController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $query = Country::find();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页</span></span><br><span class="line">        $pagination = <span class="keyword">new</span> Pagination([</span><br><span class="line">            <span class="string">'defaultPageSize'</span> =&gt; <span class="number">5</span>,</span><br><span class="line">            <span class="string">'totalCount'</span> =&gt; $query-&gt;count(),</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        $countries = $query-&gt;orderBy(<span class="string">'name'</span>)</span><br><span class="line">            -&gt;offset($pagination-&gt;offset)</span><br><span class="line">            -&gt;limit($pagination-&gt;limit)</span><br><span class="line">            -&gt;all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 渲染</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'index'</span>, [</span><br><span class="line">            <span class="string">'countries'</span> =&gt; $countries,</span><br><span class="line">            <span class="string">'pagination'</span> =&gt; $pagination,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建视图-2"><a href="#创建视图-2" class="headerlink" title="创建视图"></a>创建视图</h3><p>在 <code>views</code> 目录下先创建一个名为 <code>country</code> 的子目录。 这个目录存储所有由 <code>country</code> 控制器渲染的视图。在 <code>views/country</code> 目录下 创建一个名为 <code>index.php</code> 的视图文件，内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">widgets</span>\<span class="title">LinkPager</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;h1&gt;Countries&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span> ($countries <span class="keyword">as</span> $country): <span class="meta">?&gt;</span></span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        <span class="meta">&lt;?</span>= Html::encode(<span class="string">"&#123;$country-&gt;name&#125; (&#123;$country-&gt;code&#125;)"</span>) <span class="meta">?&gt;</span>:</span><br><span class="line">        <span class="meta">&lt;?</span>= $country-&gt;population <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/li&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>; <span class="meta">?&gt;</span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?</span>= LinkPager::widget([<span class="string">'pagination'</span> =&gt; $pagination]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="试运行-1"><a href="#试运行-1" class="headerlink" title="试运行"></a>试运行</h3><p>浏览器访问下面的 URL 看看能否工作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hostname/index.php?r=country/index</span></span><br></pre></td></tr></table></figure><h3 id="打印SQL"><a href="#打印SQL" class="headerlink" title="打印SQL"></a>打印SQL</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、查询结构</span></span><br><span class="line">$record = Article::find()-&gt;joinWith(<span class="string">'articleClass'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、复制一下查询语句</span></span><br><span class="line">$query = <span class="keyword">clone</span> $record;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、调用createComment()和getSql()方法</span></span><br><span class="line">$sql = $query-&gt;createCommand()-&gt;getSql();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、打印出来</span></span><br><span class="line">var_dump($sql);<span class="keyword">die</span>();</span><br></pre></td></tr></table></figure><h2 id="使用-Gii-生成代码"><a href="#使用-Gii-生成代码" class="headerlink" title="使用 Gii 生成代码"></a>使用 Gii 生成代码</h2><p>本章节， 你将学到：</p><ol><li>在你的应用中开启 Gii</li><li>使用 Gii 去生成活动记录类</li><li>使用 Gii 去生成数据表操作的增查改删（CRUD）代码</li><li>自定义 Gii 生成的代码</li></ol><h3 id="开始-Gii"><a href="#开始-Gii" class="headerlink" title="开始 Gii"></a>开始 Gii</h3><p><code>Gii</code> 是 <code>Yii</code> 中的一个模块。 可以通过配置应用的 <code>modules</code> 属性开启它。通常来讲在 <code>config/web.php</code> 文件中会有以下配置代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$config = [ ... ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (YII_ENV_DEV) &#123;</span><br><span class="line">    $config[<span class="string">'bootstrap'</span>][] = <span class="string">'gii'</span>;</span><br><span class="line">    $config[<span class="string">'modules'</span>][<span class="string">'gii'</span>] = [</span><br><span class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\gii\Module'</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段配置表明，如果当前是开发环境， 应用会包含 <code>gii</code> 模块，模块类是 <code>yii\gii\Module</code>。</p><p>如果你检查应用的入口脚本 <code>web/index.php</code>， 将看到这行代码将 <code>YII_ENV_DEV</code> 设为 <code>true</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defined(<span class="string">'YII_ENV'</span>) <span class="keyword">or</span> define(<span class="string">'YII_ENV'</span>, <span class="string">'dev'</span>);</span><br></pre></td></tr></table></figure><p>鉴于这行代码的定义，应用处于开发模式下，按照上面的配置会打开 <code>Gii</code> 模块。你可以直接通过 <code>URL</code> 访问 <code>Gii</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hostname/index.php?r=gii</span></span><br></pre></td></tr></table></figure><blockquote><p>信息： 如果你通过本机以外的机器访问 Gii，请求会被出于安全原因拒绝。 你可以配置 Gii 为其添加允许访问的 IP 地址：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'gii'</span> =&gt; [</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'yii\gii\Module'</span>,</span><br><span class="line">    <span class="string">'allowedIPs'</span> =&gt; [<span class="string">'127.0.0.1'</span>, <span class="string">'::1'</span>, <span class="string">'192.168.0.*'</span>, <span class="string">'192.168.178.20'</span>] <span class="comment">// 按需调整这里</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="生成活动记录类"><a href="#生成活动记录类" class="headerlink" title="生成活动记录类"></a>生成活动记录类</h3><p>选择 <code>“Model Generator”</code>（点击 <code>Gii</code> 首页的链接）去生成活动记录类。并像这样填写表单：</p><ul><li>Table Name: <code>country</code></li><li>Model Class: <code>Country</code></li></ul><p>然后点击 <code>“Preview”</code> 按钮。你会看到 <code>models/Country.php</code> 被列在将要生成的文件列表中。可以点击文件名预览内容。</p><p>如果你已经创建过同样的文件，使用 <code>Gii</code> 会覆写它， 点击文件名旁边的 <code>diff</code> 能查看现有文件与将要 生成的文件的内容区别。</p><p>想要覆写已存在文件，选中 <code>“overwrite”</code> 下的复选框然后点击 <code>“Generator”</code>。如果是新文件，只点击 <code>“Generator”</code> 就好。</p><p>接下来你会看到一个包含已生成文件的说明页面。如果生成过程中覆写过文件， 还会有一条信息说明代码是重新生成覆盖的。</p><blockquote><p>Generating code using template “/Users/caoxl/WWW/Yii2/vendor/yiisoft/yii2-gii/src/generators/model/default”…<br>  overwrote models/Country.php<br>  done!</p></blockquote><h3 id="生成-CRUD-代码"><a href="#生成-CRUD-代码" class="headerlink" title="生成 CRUD 代码"></a>生成 CRUD 代码</h3><p><code>CRUD</code> 代表增，查，改，删操作，这是绝大多数 <code>Web</code> 站点常用的数据处理方式。选择 <code>Gii</code> 中的 <code>“CRUD Generator”</code> （点击 <code>Gii</code> 首页的链接）去创建 <code>CRUD</code> 功能。本例 <code>“country”</code> 中需要这样填写表单：</p><ul><li>Model Class: <code>app\models\Country</code></li><li>Search Model Class: <code>app\models\CountrySearch</code></li><li>Controller Class: <code>app\controllers\CountryController</code></li></ul><p>如果你之前创建过 <code>controllers/CountryController.php</code> 和 <code>views/country/index.php</code> 文件（在指南的使用数据库章节）， 选中 <code>“overwrite”</code> 下的复选框覆写它们（之前的文件没能全部支持 <code>CRUD</code>）。</p><blockquote><p>Generating code using template “/Users/caoxl/WWW/Yii2/vendor/yiisoft/yii2-gii/src/generators/crud/default”…<br>  overwrote controllers/CountryController.php<br>  generated models/CountrySearch.php<br>  generated views/country/_form.php<br>  generated views/country/_search.php<br>  generated views/country/create.php<br>  overwrote views/country/index.php<br>  generated views/country/update.php<br>  generated views/country/view.php<br>  done!</p></blockquote><h3 id="试运行-2"><a href="#试运行-2" class="headerlink" title="试运行"></a>试运行</h3><p>用浏览器访问下面的 <code>URL</code> 查看生成代码的运行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hostname/index.php?r=country/index</span></span><br></pre></td></tr></table></figure><p>下面列出由 <code>Gii</code> 生成的文件，以便你研习功能和实现， 或修改它们。</p><ul><li>控制器：<code>controllers/CountryController.php</code></li><li>模型：<code>models/Country.php</code> 和 <code>models/CountrySearch.php</code></li><li>视图：<code>views/country/*.php</code></li></ul><h2 id="应用结构-1"><a href="#应用结构-1" class="headerlink" title="应用结构"></a>应用结构</h2><h3 id="入口脚本"><a href="#入口脚本" class="headerlink" title="入口脚本"></a>入口脚本</h3><p>入口脚本主要完成以下工作：</p><ul><li>定义全局常量；</li><li>注册 <code>Composer</code> 自动加载器；</li><li>包含 <code>Yii</code> 类文件；</li><li>加载应用配置；</li><li>创建一个应用实例并配置;</li><li>调用 <code>yii\base\Application::run()</code> 来处理请求。</li></ul><h4 id="Web-应用"><a href="#Web-应用" class="headerlink" title="Web 应用"></a>Web 应用</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">defined(<span class="string">'YII_DEBUG'</span>) <span class="keyword">or</span> define(<span class="string">'YII_DEBUG'</span>, <span class="keyword">true</span>);</span><br><span class="line">defined(<span class="string">'YII_ENV'</span>) <span class="keyword">or</span> define(<span class="string">'YII_ENV'</span>, <span class="string">'dev'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 Composer 自动加载器</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含 Yii 类文件</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../vendor/yiisoft/yii2/Yii.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载应用配置</span></span><br><span class="line">$config = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../config/web.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建、配置、运行一个应用</span></span><br><span class="line">(<span class="keyword">new</span> yii\web\Application($config))-&gt;run();</span><br></pre></td></tr></table></figure><ul><li><p>当运行 <code>入口脚本</code> 处理请求时， 应用主体会经历以下生命周期:</p></li><li><ol><li>入口脚本加载应用主体配置数组。</li></ol></li><li><ol start="2"><li>入口脚本创建一个应用主体实例：</li></ol><ul><li>调用 <code>preInit()</code> 配置几个高级别应用主体属性， 比如 <code>basePath</code>。</li><li>注册 <code>error handler</code> 错误处理方法。</li><li>配置应用主体属性。</li><li>调用 <code>init()</code> 初始化，该函数会调用 <code>bootstrap()</code> 运行引导启动组件。</li></ul></li><li><ol start="3"><li>入口脚本调用 <code>yii\base\Application::run()</code> 运行应用主体:</li></ol><ul><li>触发 <code>EVENT_BEFORE_REQUEST</code> 事件。</li><li>处理请求：解析请求 路由 和相关参数； 创建路由指定的模块、控制器和动作对应的类，并运行动作。</li><li>触发 <code>EVENT_AFTER_REQUEST</code> 事件。</li><li>发送响应到终端用户。</li></ul></li><li><ol start="4"><li>入口脚本接收应用主体传来的退出状态并完成请求的处理。</li></ol></li></ul><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>过滤器是 控制器动作 执行之前或之后执行的对象。</p><h4 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h4><p>过滤器本质上是一类特殊的 <code>行为</code>， 所以<code>使用过滤器</code>和 <code>使用行为</code>一样。 可以在控制器类中覆盖它的 <code>behaviors()</code> 方法来声明过滤器，如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\filters\HttpCache'</span>,</span><br><span class="line">            <span class="string">'only'</span>  =&gt; [<span class="string">'index'</span>, <span class="string">'view'</span>],</span><br><span class="line">            <span class="string">'lastModified'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($action, $params)</span> </span>&#123;</span><br><span class="line">                $q = <span class="keyword">new</span> \yii\db\Query();</span><br><span class="line">                <span class="keyword">return</span> $q-&gt;from(<span class="string">'user'</span>)-&gt;max(<span class="string">'updated_at'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个动作有多个过滤器时，根据以下规则先后执行：</p><ul><li>预过滤<ul><li>按顺序执行应用主体中 <code>behaviors()</code> 列出的过滤器。</li><li>按顺序执行模块中 <code>behaviors()</code> 列出的过滤器。</li><li>按顺序执行控制器中 <code>behaviors()</code> 列出的过滤器。</li><li>如果任意过滤器终止动作执行， 后面的过滤器（包括预过滤和后过滤）不再执行。</li></ul></li><li>成功通过预过滤后执行动作。</li><li>后过滤<ul><li>倒序执行控制器中 <code>behaviors()</code> 列出的过滤器。</li><li>倒序执行模块中 <code>behaviors()</code> 列出的过滤器。</li><li>倒序执行应用主体中 <code>behaviors()</code> 列出的过滤器。</li></ul></li></ul><h4 id="创建过滤器"><a href="#创建过滤器" class="headerlink" title="创建过滤器"></a>创建过滤器</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">components</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">ActionFilter</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionTimeFilter</span> <span class="keyword">extends</span> <span class="title">ActionFilter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_startTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeAction</span><span class="params">($action)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_startTime = microtime(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::beforeAction($action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterAction</span><span class="params">($action, $result)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $time = microtime(<span class="keyword">true</span>) - <span class="keyword">$this</span>-&gt;_startTime;</span><br><span class="line">        Yii::debug(<span class="string">"Action '&#123;$action-&gt;uniqueId&#125;' spent $time second."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::afterAction($action, $result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="核心扩展"><a href="#核心扩展" class="headerlink" title="核心扩展"></a>核心扩展</h4><ul><li><code>yiisoft/yii2-apidoc</code>： 提供了一个可扩展的、高效的 API 文档生成器。核心框架的 API 文档也是用它生成的。</li><li><code>yiisoft/yii2-authclient</code>： 提供了一套常用的认证客户端，例如 Facebook OAuth2 客户端、GitHub OAuth2 客户端。</li><li><code>yiisoft/yii2-bootstrap</code>： 提供了一套挂件，封装了 Bootstrap 的组件和插件。</li><li><code>yiisoft/yii2-codeception</code>： 提供了基于 Codeception 的测试支持。</li><li><code>yiisoft/yii2-debug</code>： 提供了对 Yii 应用的调试支持。当使用该扩展是， 在每个页面的底部将显示一个调试工具条。 该扩展还提供了一个独立的页面，以显示更详细的调试信息。</li><li><code>yiisoft/yii2-elasticsearch</code>： 提供对 Elasticsearch 的使用支持。它包含基本的查询/搜索支持， 并实现了 Active Record 模式让你可以将活动记录 存储在 Elasticsearch 中。</li><li><code>yiisoft/yii2-faker</code>： 提供了使用 Faker 的支持，为你生成模拟数据。</li><li><code>yiisoft/yii2-gii</code>： 提供了一个基于页面的代码生成器，具有高可扩展性，并能用来快速生成模型、 表单、模块、CRUD 等。</li><li><code>yiisoft/yii2-httpclient</code>： 提供 HTTP 客户端。</li><li><code>yiisoft/yii2-imagine</code>： 提供了基于 Imagine 的常用图像处理功能。</li><li><code>yiisoft/yii2-jui</code>： 提供了一套封装 JQuery UI 的挂件以及它们的交互。</li><li><code>yiisoft/yii2-mongodb</code>： 提供了对 MongoDB 的使用支持。它包含基本 的查询、活动记录、数据迁移、缓存、代码生成等特性。</li><li><code>yiisoft/yii2-queue</code>： 通过队列异步提供运行任务的支持。 它支持基于 DB，Redis，RabbitMQ，AMQP，Beanstalk 和 Gearman 的队列。</li><li><code>yiisoft/yii2-redis</code>： 提供了对 redis 的使用支持。它包含基本的 查询、活动记录、缓存等特性。</li><li><code>yiisoft/yii2-shell</code>： 提供基于 psysh 的交互式 shell。</li><li><code>yiisoft/yii2-smarty</code>： 提供了一个基于 Smarty 的模板引擎。</li><li><code>yiisoft/yii2-sphinx</code>： 提供了对 Sphinx 的使用支持。它包含基本的 查询、活动记录、代码生成等特性。</li><li><code>yiisoft/yii2-swiftmailer</code>： 提供了基于 swiftmailer 的邮件发送功能。</li><li><code>yiisoft/yii2-twig</code>： 提供了一个基于 Twig 的模板引擎。</li></ul><p>以下官方扩展适用于 Yii 2.1 及以上版本。 您不需要为 Yii 2.0 安装它们，因为它们包含在核心框架中。</p><ul><li><code>yiisoft/yii2-captcha</code>： 提供 CAPTCHA。</li><li><code>yiisoft/yii2-jquery</code>： 为 jQuery 提供支持。</li><li><code>yiisoft/yii2-maskedinput</code>： 提供基于 jQuery Input Mask plugin 的格式化输入小部件。</li><li><code>yiisoft/yii2-mssql</code>： 提供对使用 MSSQL 的支持。</li><li><code>yiisoft/yii2-oracle</code>： 提供对使用 Oracle 的支持。</li><li><code>yiisoft/yii2-rest</code>： 提供对 REST API 的支持。</li></ul><h2 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h2><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h4><p>要获取请求参数，你可以调用 <code>request</code> 组件的 <code>get()</code> 方法和 <code>post()</code> 方法。 他们分别返回 <code>$_GET</code> 和 <code>$_POST</code> 的值。例如，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$request = Yii::$app-&gt;request;</span><br><span class="line"></span><br><span class="line">$get = $request-&gt;get(); </span><br><span class="line"><span class="comment">// 等价于: $get = $_GET;</span></span><br><span class="line"></span><br><span class="line">$id = $request-&gt;get(<span class="string">'id'</span>);   </span><br><span class="line"><span class="comment">// 等价于: $id = isset($_GET['id']) ? $_GET['id'] : null;</span></span><br><span class="line"></span><br><span class="line">$id = $request-&gt;get(<span class="string">'id'</span>, <span class="number">1</span>);   </span><br><span class="line"><span class="comment">// 等价于: $id = isset($_GET['id']) ? $_GET['id'] : 1;</span></span><br><span class="line"></span><br><span class="line">$post = $request-&gt;post(); </span><br><span class="line"><span class="comment">// 等价于: $post = $_POST;</span></span><br><span class="line"></span><br><span class="line">$name = $request-&gt;post(<span class="string">'name'</span>);   </span><br><span class="line"><span class="comment">// 等价于: $name = isset($_POST['name']) ? $_POST['name'] : null;</span></span><br><span class="line"></span><br><span class="line">$name = $request-&gt;post(<span class="string">'name'</span>, <span class="string">''</span>);   </span><br><span class="line"><span class="comment">// 等价于: $name = isset($_POST['name']) ? $_POST['name'] : '';</span></span><br></pre></td></tr></table></figure><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>你可以通过 <code>Yii::$app-&gt;request-&gt;method</code> 表达式来获取当前请求使用的HTTP方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$request = Yii::$app-&gt;request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isAjax) &#123; <span class="comment">/* 该请求是一个 AJAX 请求 */</span> &#125;</span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isGet)  &#123; <span class="comment">/* 请求方法是 GET */</span> &#125;</span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isPost) &#123; <span class="comment">/* 请求方法是 POST */</span> &#125;</span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isPut)  &#123; <span class="comment">/* 请求方法是 PUT */</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="请求URLs"><a href="#请求URLs" class="headerlink" title="请求URLs"></a>请求URLs</h4><p>假设被请求的 <code>URL</code> 是 <code>http://example.com/admin/index.php/product?id=100</code>， 你可以像下面描述的那样获取 <code>URL</code> 的各个部分：</p><ul><li><code>url</code>：返回 <code>/admin/index.php/product?id=100</code>, 此 <code>URL</code> 不包括主机信息部分。</li><li><code>absoluteUrl</code>：返回 <code>http://example.com/admin/index.php/product?id=100</code>, 包含<code>host info</code>的整个URL。</li><li><code>hostInfo</code>：返回 <code>http://example.com</code>, 只有主机信息部分。</li><li><code>pathInfo</code>：返回 <code>/product</code>， 这个是入口脚本之后，问号之前（查询字符串）的部分。</li><li><code>queryString</code>：返回 <code>id=100</code>，问号之后的部分。</li><li><code>baseUrl</code>：返回 <code>/admin</code>，主机信息之后， 入口脚本之前的部分。</li><li><code>scriptUrl</code>：返回 <code>/admin/index.php</code>，没有路径信息和查询字符串部分。</li><li><code>serverName</code>：返回 <code>example.com</code>，URL 中的主机名。</li><li><code>serverPort</code>：返回 <code>80</code>，这是 <code>web</code> 服务中使用的端口。</li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;statusCode = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><p>尽管如此，大多数情况下不需要明确设置状态码， 因为 <code>yii\web\Response::$statusCode</code> 状态码默认为 <code>200</code>， 如果需要指定请求失败，可抛出对应的 <code>HTTP</code> 异常，如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> \yii\web\NotFoundHttpException;</span><br></pre></td></tr></table></figure><h4 id="HTTP-头部"><a href="#HTTP-头部" class="headerlink" title="HTTP 头部"></a>HTTP 头部</h4><p>可在 <code>response</code> 组件中操控 <code>header collection</code> 来发送 <code>HTTP</code> 头部信息， 例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$headers = Yii::$app-&gt;response-&gt;headers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一个 Pragma 头，已存在的Pragma 头不会被覆盖。</span></span><br><span class="line">$headers-&gt;add(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个Pragma 头. 任何已存在的Pragma 头都会被丢弃</span></span><br><span class="line">$headers-&gt;set(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除Pragma 头并返回删除的Pragma 头的值到数组</span></span><br><span class="line">$values = $headers-&gt;remove(<span class="string">'Pragma'</span>);</span><br></pre></td></tr></table></figure><h4 id="响应主体"><a href="#响应主体" class="headerlink" title="响应主体"></a>响应主体</h4><p>如果已有格式化好的主体字符串，可赋值到响应的 <code>yii\web\Response::$content</code> 属性， 例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;content = <span class="string">'hello world!'</span>;</span><br></pre></td></tr></table></figure><h4 id="发送响应"><a href="#发送响应" class="headerlink" title="发送响应"></a>发送响应</h4><p>在 <code>yii\web\Response::send()</code> 方法调用前响应中的内容不会发送给用户， 该方法默认在 <code>yii\base\Application::run()</code> 结尾自动调用，尽管如此，可以明确调用该方法强制立即发送响应。</p><p><code>yii\web\Response::send()</code> 方法使用以下步骤来发送响应：</p><ol><li>触发 <code>yii\web\Response::EVENT_BEFORE_SEND</code> 事件。</li><li>调用 <code>yii\web\Response::prepare()</code> 来格式化 <code>response data</code> 为 <code>response content</code>。</li><li>触发 <code>yii\web\Response::EVENT_AFTER_PREPARE</code> 事件。</li><li>调用 <code>yii\web\Response::sendHeaders()</code> 来发送注册的HTTP头</li><li>调用 <code>yii\web\Response::sendContent()</code> 来发送响应主体内容</li><li>触发 <code>yii\web\Response::EVENT_AFTER_SEND</code> 事件。</li></ol><h3 id="Sessions-和-Cookies"><a href="#Sessions-和-Cookies" class="headerlink" title="Sessions 和 Cookies"></a>Sessions 和 Cookies</h3><h4 id="Sessions"><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h4><h5 id="开启和关闭-Sessions"><a href="#开启和关闭-Sessions" class="headerlink" title="开启和关闭 Sessions"></a>开启和关闭 Sessions</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$session = Yii::$app-&gt;session;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查session是否开启 </span></span><br><span class="line"><span class="keyword">if</span> ($session-&gt;isActive) ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启session</span></span><br><span class="line">$session-&gt;open();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭session</span></span><br><span class="line">$session-&gt;close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁session中所有已注册的数据</span></span><br><span class="line">$session-&gt;destroy();</span><br></pre></td></tr></table></figure><h5 id="访问-Session-数据"><a href="#访问-Session-数据" class="headerlink" title="访问 Session 数据"></a>访问 Session 数据</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$session = Yii::$app-&gt;session;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取session中的变量值，以下用法是相同的：</span></span><br><span class="line">$language = $session-&gt;get(<span class="string">'language'</span>);</span><br><span class="line">$language = $session[<span class="string">'language'</span>];</span><br><span class="line">$language = <span class="keyword">isset</span>($_SESSION[<span class="string">'language'</span>]) ? $_SESSION[<span class="string">'language'</span>] : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个session变量，以下用法是相同的：</span></span><br><span class="line">$session-&gt;set(<span class="string">'language'</span>, <span class="string">'en-US'</span>);</span><br><span class="line">$session[<span class="string">'language'</span>] = <span class="string">'en-US'</span>;</span><br><span class="line">$_SESSION[<span class="string">'language'</span>] = <span class="string">'en-US'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个session变量，以下用法是相同的：</span></span><br><span class="line">$session-&gt;remove(<span class="string">'language'</span>);</span><br><span class="line"><span class="keyword">unset</span>($session[<span class="string">'language'</span>]);</span><br><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">'language'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查session变量是否已存在，以下用法是相同的：</span></span><br><span class="line"><span class="keyword">if</span> ($session-&gt;has(<span class="string">'language'</span>)) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($session[<span class="string">'language'</span>])) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'language'</span>])) ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有session变量，以下用法是相同的：</span></span><br><span class="line"><span class="keyword">foreach</span> ($session <span class="keyword">as</span> $name =&gt; $value) ...</span><br><span class="line"><span class="keyword">foreach</span> ($_SESSION <span class="keyword">as</span> $name =&gt; $value) ...</span><br></pre></td></tr></table></figure><h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><h5 id="读取-Cookies"><a href="#读取-Cookies" class="headerlink" title="读取 Cookies"></a>读取 Cookies</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 "request" 组件中获取 cookie 集合(yii\web\CookieCollection)</span></span><br><span class="line">$cookies = Yii::$app-&gt;request-&gt;cookies;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取名为 "language" cookie 的值，如果不存在，返回默认值 "en"</span></span><br><span class="line">$language = $cookies-&gt;getValue(<span class="string">'language'</span>, <span class="string">'en'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种方式获取名为 "language" cookie 的值</span></span><br><span class="line"><span class="keyword">if</span> (($cookie = $cookies-&gt;get(<span class="string">'language'</span>)) !== <span class="keyword">null</span>) &#123;</span><br><span class="line">    $language = $cookie-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可将 $cookies 当作数组使用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($cookies[<span class="string">'language'</span>])) &#123;</span><br><span class="line">    $language = $cookies[<span class="string">'language'</span>]-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否存在名为 "language" 的 cookie</span></span><br><span class="line"><span class="keyword">if</span> ($cookies-&gt;has(<span class="string">'language'</span>)) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($cookies[<span class="string">'language'</span>])) ...</span><br></pre></td></tr></table></figure><h5 id="发送-Cookies"><a href="#发送-Cookies" class="headerlink" title="发送 Cookies"></a>发送 Cookies</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 "response" 组件中获取 cookie 集合(yii\web\CookieCollection)</span></span><br><span class="line">$cookies = Yii::$app-&gt;response-&gt;cookies;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在要发送的响应中添加一个新的 cookie</span></span><br><span class="line">$cookies-&gt;add(<span class="keyword">new</span> \yii\web\Cookie([</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'language'</span>,</span><br><span class="line">    <span class="string">'value'</span> =&gt; <span class="string">'zh-CN'</span>,</span><br><span class="line">]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个 cookie</span></span><br><span class="line">$cookies-&gt;remove(<span class="string">'language'</span>);</span><br><span class="line"><span class="comment">// 等同于以下删除代码</span></span><br><span class="line"><span class="keyword">unset</span>($cookies[<span class="string">'language'</span>]);</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p><code>Yii</code> 内置了一个 <code>error handler</code> 错误处理器，它使错误处理更方便， <code>Yii错误处理器</code>做以下工作来提升错误处理效果</p><h4 id="使用错误处理器"><a href="#使用错误处理器" class="headerlink" title="使用错误处理器"></a>使用错误处理器</h4><p><code>error handler</code> 注册成一个名称为<code>errorHandler</code>应用组件， 可以在应用配置中配置它类似如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'components'</span> =&gt; [</span><br><span class="line">        <span class="string">'errorHandler'</span> =&gt; [</span><br><span class="line">            <span class="string">'maxSourceLines'</span> =&gt; <span class="number">20</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="日志消息"><a href="#日志消息" class="headerlink" title="日志消息"></a>日志消息</h4><p>记录日志消息就跟调用下面的日志方法一样简单：</p><ul><li><code>Yii::trace()</code>：记录一条消息去跟踪一段代码是怎样运行的。这主要在开发的时候使用。</li><li><code>Yii::info()</code>：记录一条消息来传达一些有用的信息。</li><li><code>Yii::warning()</code>：记录一个警告消息用来指示一些已经发生的意外。</li><li><code>Yii::error()</code>：记录一个致命的错误，这个错误应该尽快被检查。</li></ul><h2 id="Restful-web-服务"><a href="#Restful-web-服务" class="headerlink" title="Restful web 服务"></a>Restful web 服务</h2><h2 id="助手类"><a href="#助手类" class="headerlink" title="助手类"></a>助手类</h2><h3 id="Array-助手-ArrayHelper"><a href="#Array-助手-ArrayHelper" class="headerlink" title="Array 助手(ArrayHelper)"></a>Array 助手(ArrayHelper)</h3><h4 id="获取值（Getting-Values）"><a href="#获取值（Getting-Values）" class="headerlink" title="获取值（Getting Values）"></a>获取值（Getting Values）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value = ArrayHelper::getValue($array, <span class="string">'foo.bar.name'</span>);</span><br></pre></td></tr></table></figure><h4 id="设定值（Setting-values）"><a href="#设定值（Setting-values）" class="headerlink" title="设定值（Setting values）"></a>设定值（Setting values）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$array = [</span><br><span class="line">    <span class="string">'key'</span> =&gt; [</span><br><span class="line">        <span class="string">'in'</span> =&gt; [<span class="string">'k'</span> =&gt; <span class="string">'value'</span>]</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">ArrayHelper::setValue($array, <span class="string">'key.in'</span>, [<span class="string">'arr'</span> =&gt; <span class="string">'val'</span>]);</span><br><span class="line"><span class="comment">// 在 `$array` 中写入值的路径可以被指定为一个数组</span></span><br><span class="line">ArrayHelper::setValue($array, [<span class="string">'key'</span>, <span class="string">'in'</span>], [<span class="string">'arr'</span> =&gt; <span class="string">'val'</span>]);</span><br></pre></td></tr></table></figure><h4 id="检查键名的存在（Checking-Existence-of-Keys）"><a href="#检查键名的存在（Checking-Existence-of-Keys）" class="headerlink" title="检查键名的存在（Checking Existence of Keys）"></a>检查键名的存在（Checking Existence of Keys）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$data1 = [</span><br><span class="line">    <span class="string">'userName'</span> =&gt; <span class="string">'Alex'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$data2 = [</span><br><span class="line">    <span class="string">'username'</span> =&gt; <span class="string">'Carsten'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ArrayHelper::keyExists(<span class="string">'username'</span>, $data1, <span class="keyword">false</span>) || !ArrayHelper::keyExists(<span class="string">'username'</span>, $data2, <span class="keyword">false</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Please provide username."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多维排序（Multidimensional-Sorting）"><a href="#多维排序（Multidimensional-Sorting）" class="headerlink" title="多维排序（Multidimensional Sorting）"></a>多维排序（Multidimensional Sorting）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$data = [</span><br><span class="line">    [<span class="string">'age'</span> =&gt; <span class="number">30</span>, <span class="string">'name'</span> =&gt; <span class="string">'Alexander'</span>],</span><br><span class="line">    [<span class="string">'age'</span> =&gt; <span class="number">30</span>, <span class="string">'name'</span> =&gt; <span class="string">'Brian'</span>],</span><br><span class="line">    [<span class="string">'age'</span> =&gt; <span class="number">19</span>, <span class="string">'name'</span> =&gt; <span class="string">'Barney'</span>],</span><br><span class="line">];</span><br><span class="line">ArrayHelper::multisort($data, [<span class="string">'age'</span>, <span class="string">'name'</span>], [SORT_ASC, SORT_DESC]);</span><br></pre></td></tr></table></figure><h4 id="对象转换为数组（Converting-Objects-to-Arrays）"><a href="#对象转换为数组（Converting-Objects-to-Arrays）" class="headerlink" title="对象转换为数组（Converting Objects to Arrays）"></a>对象转换为数组（Converting Objects to Arrays）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$posts = Post::find()-&gt;limit(<span class="number">10</span>)-&gt;all();</span><br><span class="line">$data = ArrayHelper::toArray($posts, [</span><br><span class="line">    <span class="string">'app\models\Post'</span> =&gt; [</span><br><span class="line">        <span class="string">'id'</span>,</span><br><span class="line">        <span class="string">'title'</span>,</span><br><span class="line">        <span class="comment">// the key name in array result =&gt; property name</span></span><br><span class="line">        <span class="string">'createTime'</span> =&gt; <span class="string">'created_at'</span>,</span><br><span class="line">        <span class="comment">// the key name in array result =&gt; anonymous function</span></span><br><span class="line">        <span class="string">'length'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($post)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> strlen($post-&gt;content);</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="Html-助手-Html"><a href="#Html-助手-Html" class="headerlink" title="Html 助手(Html)"></a>Html 助手(Html)</h3><h4 id="生成标签（Generating-Tags）"><a href="#生成标签（Generating-Tags）" class="headerlink" title="生成标签（Generating Tags）"></a>生成标签（Generating Tags）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>= Html::tag(<span class="string">'p'</span>, Html::encode($user-&gt;name), [<span class="string">'class'</span> =&gt; <span class="string">'username'</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="生成-CSS-类和样式（Forming-CSS-Classes-and-Styles）"><a href="#生成-CSS-类和样式（Forming-CSS-Classes-and-Styles）" class="headerlink" title="生成 CSS 类和样式（Forming CSS Classes and Styles）"></a>生成 CSS 类和样式（Forming CSS Classes and Styles）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$options = [<span class="string">'class'</span> =&gt; <span class="string">'btn btn-default'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($type === <span class="string">'success'</span>) &#123;</span><br><span class="line">    Html::removeCssClass($options, <span class="string">'btn-default'</span>);</span><br><span class="line">    Html::addCssClass($options, <span class="string">'btn-success'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> Html::tag(<span class="string">'div'</span>, <span class="string">'Pwede na'</span>, $options);</span><br><span class="line"></span><br><span class="line"><span class="comment">// in case of $type of 'success' it will render</span></span><br></pre></td></tr></table></figure><h4 id="创建表单（Creating-Forms）"><a href="#创建表单（Creating-Forms）" class="headerlink" title="创建表单（Creating Forms）"></a>创建表单（Creating Forms）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>= Html::beginForm([<span class="string">'order/update'</span>, <span class="string">'id'</span> =&gt; $id], <span class="string">'post'</span>, [<span class="string">'enctype'</span> =&gt; <span class="string">'multipart/form-data'</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Url-助手-Url"><a href="#Url-助手-Url" class="headerlink" title="Url 助手(Url)"></a>Url 助手(Url)</h3><h4 id="获得通用-URL（Getting-Common-URLs）"><a href="#获得通用-URL（Getting-Common-URLs）" class="headerlink" title="获得通用 URL（Getting Common URLs）"></a>获得通用 URL（Getting Common URLs）</h4><p>有两种获取通用 <code>URLS</code> 的方法 ：当前请求的 <code>home URL</code> 和 <code>base URL</code> 。 </p><ul><li>为了获取 <code>home URL</code> ，使用如下代码：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$relativeHomeUrl = Url::home();</span><br><span class="line">$absoluteHomeUrl = Url::home(<span class="keyword">true</span>);</span><br><span class="line">$httpsAbsoluteHomeUrl = Url::home(<span class="string">'https'</span>);</span><br></pre></td></tr></table></figure><ul><li>如下代码可以获得当前请求的 <code>base URL</code>：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$relativeBaseUrl = Url::base();</span><br><span class="line">$absoluteBaseUrl = Url::base(<span class="keyword">true</span>);</span><br><span class="line">$httpsAbsoluteBaseUrl = Url::base(<span class="string">'https'</span>);</span><br></pre></td></tr></table></figure><h4 id="创建-URLs（Creating-URLs）"><a href="#创建-URLs（Creating-URLs）" class="headerlink" title="创建 URLs（Creating URLs）"></a>创建 URLs（Creating URLs）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$url = Url::toRoute([<span class="string">'product/view'</span>, <span class="string">'id'</span> =&gt; <span class="number">42</span>]);</span><br></pre></td></tr></table></figure><h4 id="记住-URLs（Remember-URLs）"><a href="#记住-URLs（Remember-URLs）" class="headerlink" title="记住 URLs（Remember URLs）"></a>记住 URLs（Remember URLs）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记住当前 URL </span></span><br><span class="line">Url::remember();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记住指定的 URL。参数格式请参阅 Url::to()。</span></span><br><span class="line">Url::remember([<span class="string">'product/view'</span>, <span class="string">'id'</span> =&gt; <span class="number">42</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记住用给定名称指定的 URL</span></span><br><span class="line">Url::remember([<span class="string">'product/view'</span>, <span class="string">'id'</span> =&gt; <span class="number">42</span>], <span class="string">'product'</span>);</span><br></pre></td></tr></table></figure><h4 id="检查相对-URLs（Checking-Relative-URLs）"><a href="#检查相对-URLs（Checking-Relative-URLs）" class="headerlink" title="检查相对 URLs（Checking Relative URLs）"></a>检查相对 URLs（Checking Relative URLs）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$isRelative = Url::isRelative(<span class="string">'test/it'</span>);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.yiichina.com/doc/guide/2.0" target="_blank" rel="noopener">Yii 2.0 权威指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Yii2 Yes It is&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架相关" scheme="http://blog.caoxl.com/categories/%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Yii2" scheme="http://blog.caoxl.com/tags/Yii2/"/>
    
  </entry>
  
</feed>
