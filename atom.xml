<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep It Simple And Stupid</title>
  
  <subtitle>Caoxl-Hexo-caoxl.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.caoxl.com/"/>
  <updated>2019-12-23T08:25:43.815Z</updated>
  <id>http://blog.caoxl.com/</id>
  
  <author>
    <name>CAO XIAN LIANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 查看CPU信息</title>
    <link href="http://blog.caoxl.com/2019/12/23/Linux-CPU-Information/"/>
    <id>http://blog.caoxl.com/2019/12/23/Linux-CPU-Information/</id>
    <published>2019-12-23T07:59:39.000Z</published>
    <updated>2019-12-23T08:25:43.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>总核数 = 物理CPU个数 X 每颗物理CPU的核数<br>总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</p></blockquote><a id="more"></a><h2 id="查看物理CPU个数"><a href="#查看物理CPU个数" class="headerlink" title="查看物理CPU个数"></a>查看物理CPU个数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="查看每个物理CPU中core的个数-即核数"><a href="#查看每个物理CPU中core的个数-即核数" class="headerlink" title="查看每个物理CPU中core的个数(即核数)"></a>查看每个物理CPU中core的个数(即核数)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep "cpu cores" | uniq</span></span><br><span class="line">cpu cores: <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="查看逻辑CPU的个数"><a href="#查看逻辑CPU的个数" class="headerlink" title="查看逻辑CPU的个数"></a>查看逻辑CPU的个数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep "processor" | wc -l</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="查看位于相同物理封装的处理器中的逻辑处理器的数量。"><a href="#查看位于相同物理封装的处理器中的逻辑处理器的数量。" class="headerlink" title="查看位于相同物理封装的处理器中的逻辑处理器的数量。"></a>查看位于相同物理封装的处理器中的逻辑处理器的数量。</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep "siblings" | sort | uniq</span></span><br><span class="line">siblings: <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="查看CPU信息（型号）"><a href="#查看CPU信息（型号）" class="headerlink" title="查看CPU信息（型号）"></a>查看CPU信息（型号）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span></span><br><span class="line">      <span class="number">2</span>  Intel(R) Xeon(R) CPU E5<span class="number">-2682</span> v4 @ <span class="number">2.50</span>GHz</span><br></pre></td></tr></table></figure><h2 id="proc-cpuinfo"><a href="#proc-cpuinfo" class="headerlink" title="/proc/cpuinfo"></a><code>/proc/cpuinfo</code></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># cat /proc/cpuinfo</span></span><br><span class="line">processor: <span class="number">0</span></span><br><span class="line">vendor_id: GenuineIntel</span><br><span class="line">cpu family: <span class="number">6</span></span><br><span class="line">model: <span class="number">79</span></span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5<span class="number">-2682</span> v4 @ <span class="number">2.50</span>GHz</span><br><span class="line">stepping: <span class="number">1</span></span><br><span class="line">microcode: <span class="number">0x1</span></span><br><span class="line">cpu MHz: <span class="number">2499.996</span></span><br><span class="line">cache size: <span class="number">40960</span> KB</span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">siblings: <span class="number">2</span></span><br><span class="line">core id: <span class="number">0</span></span><br><span class="line">cpu cores: <span class="number">1</span></span><br><span class="line">apicid: <span class="number">0</span></span><br><span class="line">initial apicid: <span class="number">0</span></span><br><span class="line">fpu: yes</span><br><span class="line">fpu_exception: yes</span><br><span class="line">cpuid level: <span class="number">13</span></span><br><span class="line">wp: yes</span><br><span class="line">flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm <span class="number">3</span>dnowprefetch ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx smap xsaveopt spec_ctrl intel_stibp</span><br><span class="line">bogomips: <span class="number">4999.99</span></span><br><span class="line">clflush size: <span class="number">64</span></span><br><span class="line">cache_alignment: <span class="number">64</span></span><br><span class="line">address sizes: <span class="number">46</span> bits physical, <span class="number">48</span> bits virtual</span><br><span class="line">power management:</span><br><span class="line"></span><br><span class="line">processor: <span class="number">1</span></span><br><span class="line">vendor_id: GenuineIntel</span><br><span class="line">cpu family: <span class="number">6</span></span><br><span class="line">model: <span class="number">79</span></span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5<span class="number">-2682</span> v4 @ <span class="number">2.50</span>GHz</span><br><span class="line">stepping: <span class="number">1</span></span><br><span class="line">microcode: <span class="number">0x1</span></span><br><span class="line">cpu MHz: <span class="number">2499.996</span></span><br><span class="line">cache size: <span class="number">40960</span> KB</span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">siblings: <span class="number">2</span></span><br><span class="line">core id: <span class="number">0</span></span><br><span class="line">cpu cores: <span class="number">1</span></span><br><span class="line">apicid: <span class="number">1</span></span><br><span class="line">initial apicid: <span class="number">1</span></span><br><span class="line">fpu: yes</span><br><span class="line">fpu_exception: yes</span><br><span class="line">cpuid level: <span class="number">13</span></span><br><span class="line">wp: yes</span><br><span class="line">flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm <span class="number">3</span>dnowprefetch ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx smap xsaveopt spec_ctrl intel_stibp</span><br><span class="line">bogomips: <span class="number">4999.99</span></span><br><span class="line">clflush size: <span class="number">64</span></span><br><span class="line">cache_alignment: <span class="number">64</span></span><br><span class="line">address sizes: <span class="number">46</span> bits physical, <span class="number">48</span> bits virtual</span><br><span class="line">power management:</span><br></pre></td></tr></table></figure><ul><li>以上输出项的含义如下：</li></ul><blockquote><p><code>processor</code>　：系统中逻辑处理核的编号。对于单核处理器，则可认为是其CPU编号，对于多核处理器则可以是物理核、或者使用超线程技术虚拟的逻辑核<br><code>vendor_id</code>：CPU制造商<br><code>cpu family</code>：CPU产品系列代号<br><code>model</code>：CPU属于其系列中的哪一代的代号<br><code>model name</code>：CPU属于的名字及其编号、标称主频<br><code>stepping</code>：CPU属于制作更新版本<br><code>cpu MHz</code>：CPU的实际使用主频<br><code>cache size</code>：CPU二级缓存大小<br><code>physical id</code>：单个CPU的标号<br><code>siblings</code>：单个CPU逻辑物理核数<br><code>core id</code>：当前物理核在其所处CPU中的编号，这个编号不一定连续<br><code>cpu cores</code>：该逻辑核所处CPU的物理核数<br><code>apicid</code>：用来区分不同逻辑核的编号，系统中每个逻辑核的此编号必然不同，此编号不一定连续<br><code>fpu</code>：是否具有浮点运算单元（Floating Point Unit）<br><code>fpu_exception</code>：是否支持浮点计算异常<br><code>cpuid level</code>：执行cpuid指令前，eax寄存器中的值，根据不同的值cpuid指令会返回不同的内容<br><code>wp</code>：表明当前CPU是否在内核态支持对用户空间的写保护（Write Protection）<br><code>flags</code>：当前CPU支持的功能<br><code>bogomips</code>：在系统内核启动时粗略测算的CPU速度（Million Instructions Per Second）<br><code>clflush size</code>：每次刷新缓存的大小单位<br><code>cache_alignment</code>：缓存地址对齐单位<br><code>address sizes</code>：可访问地址空间位数<br><code>power management</code>：对能源管理的支持</p></blockquote><h2 id="lscpu命令"><a href="#lscpu命令" class="headerlink" title="lscpu命令"></a><code>lscpu</code>命令</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># lscpu</span></span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        <span class="number">32</span>-bit, <span class="number">64</span>-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                <span class="number">24</span></span><br><span class="line">On-line CPU(s) <span class="keyword">list</span>:   <span class="number">0</span><span class="number">-23</span></span><br><span class="line">Thread(s) per core:    <span class="number">2</span></span><br><span class="line">Core(s) per socket:    <span class="number">12</span></span><br><span class="line">Socket(s):             <span class="number">1</span></span><br><span class="line">NUMA node(s):          <span class="number">1</span></span><br><span class="line">Vendor ID:             GenuineIntel</span><br><span class="line">CPU family:            <span class="number">6</span></span><br><span class="line">Model:                 <span class="number">85</span></span><br><span class="line">Model name:            Intel(R) Xeon(R) Platinum <span class="number">8163</span> CPU @ <span class="number">2.50</span>GHz</span><br><span class="line">Stepping:              <span class="number">4</span></span><br><span class="line">CPU MHz:               <span class="number">2494.132</span></span><br><span class="line">BogoMIPS:              <span class="number">4988.26</span></span><br><span class="line">Hypervisor vendor:     KVM</span><br><span class="line">Virtualization type:   full</span><br><span class="line">L1d cache:             <span class="number">32</span>K</span><br><span class="line">L1i cache:             <span class="number">32</span>K</span><br><span class="line">L2 cache:              <span class="number">1024</span>K</span><br><span class="line">L3 cache:              <span class="number">33792</span>K</span><br><span class="line">NUMA node0 CPU(s):     <span class="number">0</span><span class="number">-23</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;总核数 = 物理CPU个数 X 每颗物理CPU的核数&lt;br&gt;总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.caoxl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.caoxl.com/tags/Linux/"/>
    
      <category term="CPU" scheme="http://blog.caoxl.com/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 速查表</title>
    <link href="http://blog.caoxl.com/2019/12/20/Yii2-Cheat-Sheet/"/>
    <id>http://blog.caoxl.com/2019/12/20/Yii2-Cheat-Sheet/</id>
    <published>2019-12-20T06:21:48.000Z</published>
    <updated>2019-12-20T09:20:40.704Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Yii2 速查表</p></blockquote><a id="more"></a><h2 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h2><ul><li>安装yii程序</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist yiisoft/yii2-app-basic basic</span><br></pre></td></tr></table></figure><ul><li>通过<code>composer.json</code>安装扩展</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer install</span><br></pre></td></tr></table></figure><ul><li>更新本地<code>composer</code>扩展库</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure><ul><li>直接安装某个<code>composer</code>扩展</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> [options] [--] [vendor/packages]...</span><br></pre></td></tr></table></figure><h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><blockquote><p>Yii的数据库读取对象，在PDO之上，DAO后有了Query Builder和AR</p></blockquote><ul><li>获得数据库连接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$conn = Yii::$app-&gt;db;</span><br></pre></td></tr></table></figure><ul><li>执行数据库查询语句</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user`"</span>);</span><br><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user` WHERE uid=:uid"</span>,[<span class="string">":uid"</span>=&gt;<span class="number">1</span>]);</span><br><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user` WHERE uid=:uid"</span>)-&gt;addValue([<span class="string">":uid"</span>=&gt;<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><ul><li>SQL语句插入数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db</span><br><span class="line">-&gt;createCommand(<span class="string">'INSERT INTO user (email, password) VALUES("test3@example.com", "test3");'</span>)-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>数组形式插入数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;insert(<span class="string">'user'</span>, [</span><br><span class="line">    <span class="string">'email'</span> =&gt; <span class="string">'test4@example.com'</span>,</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">'changeme7'</span>,</span><br><span class="line">    <span class="string">'first_name'</span> =&gt; <span class="string">'Test'</span></span><br><span class="line">])-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>批量插入数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;batchInsert(<span class="string">'user'</span>, [<span class="string">'email'</span>, <span class="string">'password'</span>, <span class="string">'first_name'</span>],[</span><br><span class="line">    [<span class="string">'james.franklin@example.com'</span>, <span class="string">'changeme7'</span>, <span class="string">'James'</span>],</span><br><span class="line">    [<span class="string">'linda.marks@example.com'</span>, <span class="string">'changeme7'</span>, <span class="string">'Linda'</span>]</span><br><span class="line">    [<span class="string">'roger.martin@example.com'</span>, <span class="string">'changeme7'</span>]</span><br><span class="line">])-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>更新数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;update(<span class="string">'user'</span>, [<span class="string">'updated_at'</span> =&gt; time()], <span class="string">'id = 2'</span>)-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;delete(<span class="string">'user'</span>, <span class="string">'id = 3'</span>)-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li>获取所有数据(数组形式返回)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user`"</span>)-&gt;queryAll();</span><br></pre></td></tr></table></figure><ul><li>获取一条数据（一维数组）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT * FROM `user` WHERE id = 1"</span>)-&gt;queryOne();</span><br></pre></td></tr></table></figure><ul><li>获取一个值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT count(*) AS total FROM `user` WHERE id = 1"</span>)-&gt;queryScalar();</span><br></pre></td></tr></table></figure><ul><li>获取某一列（放到一位数组中）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;db-&gt;createCommand(<span class="string">"SELECT username FROM `user`"</span>)-&gt;queryColumn();</span><br></pre></td></tr></table></figure><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><ul><li><code>trace</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::trace($message,$category)</span><br></pre></td></tr></table></figure><ul><li><code>info</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::info($message,$category)</span><br></pre></td></tr></table></figure><ul><li><code>warning</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::warning($message,$category)</span><br></pre></td></tr></table></figure><ul><li><code>error</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::error($message,$category)</span><br></pre></td></tr></table></figure><h2 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h2><blockquote><p>数据验证，最常用于模型的<code>rules()</code>函数</p></blockquote><ul><li><code>required</code> 必须值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"username"</span>,<span class="string">'required'</span>]</span><br><span class="line">[[<span class="string">"username"</span>,<span class="string">"email"</span>],<span class="string">'required'</span>]</span><br><span class="line">[[<span class="string">"username"</span>],<span class="string">'required'</span>,<span class="string">"message"</span>=&gt;<span class="string">"&#123;attribute&#125;必须填写"</span>]</span><br><span class="line">[[<span class="string">"username"</span>],<span class="string">'required'</span>,<span class="string">'requiredValue'</span>=&gt;<span class="string">"abei"</span>] <span class="comment">// 用户填写的值必须等于requiredValue才能通过验证。</span></span><br></pre></td></tr></table></figure><ul><li><code>Email</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"email"</span>,<span class="string">'email'</span>]</span><br><span class="line">[[<span class="string">"email"</span>,<span class="string">"work_email"</span>],<span class="string">'email'</span>]</span><br></pre></td></tr></table></figure><ul><li><code>Boolean</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'sex'</span>, <span class="string">'boolean'</span>, <span class="string">'trueValue'</span> =&gt; <span class="keyword">true</span>, <span class="string">'falseValue'</span> =&gt; <span class="keyword">false</span>, <span class="string">'strict'</span> =&gt; <span class="keyword">true</span>];<span class="comment">// 可以认为置顶 true / false 值。</span></span><br></pre></td></tr></table></figure><ul><li><code>captcha</code>验证码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'verificationCode'</span>, <span class="string">'captcha'</span>];</span><br></pre></td></tr></table></figure><ul><li><code>compare</code>比较</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'username'</span>, <span class="string">'compare'</span>, <span class="string">'compareAttribute'</span> =&gt; <span class="string">'province'</span>,<span class="string">'message'</span>=&gt;<span class="string">'username和province必须一样'</span>] <span class="comment">//错误信息将提示给username</span></span><br><span class="line">[<span class="string">'age'</span>, <span class="string">'compare'</span>, <span class="string">'compareValue'</span> =&gt; <span class="number">30</span>, <span class="string">'operator'</span> =&gt; <span class="string">'&gt;='</span>,<span class="string">'type'</span> =&gt; <span class="string">'number'</span>];<span class="comment">//compareValue:比较常量值 operator:比较操作符 type为值类型，默认为string，会一个每个字符对比，若为number则直接判断数值</span></span><br><span class="line"><span class="comment">// operator 待选值==、===、!=、!==、&gt;、&gt;=、&lt;、&lt;=</span></span><br></pre></td></tr></table></figure><ul><li><code>date</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"birth"</span>,<span class="string">"date"</span>,<span class="string">"format"</span>=&gt;<span class="string">"Y-m-d"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>default</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'age'</span>,<span class="string">'default'</span>,<span class="string">'value'</span>=&gt;<span class="keyword">null</span>] <span class="comment">// 当age为空的时候设置为null</span></span><br><span class="line">[<span class="string">'country'</span>,<span class="string">'default'</span>,<span class="string">'value'</span>=&gt;<span class="string">'USA'</span>] <span class="comment">// 当 country为空时设置为USA</span></span><br><span class="line"><span class="comment">/* 如果from为空，则=今天+3天，如果to为空，则=今天+6天 */</span></span><br><span class="line">[[<span class="string">'from'</span>,<span class="string">'to'</span>],<span class="string">'default'</span>,<span class="string">'value'</span>=&gt;<span class="function"><span class="keyword">function</span><span class="params">($model,$attribute)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date(<span class="string">'Y-m-d'</span>, strtotime($attribute === <span class="string">'to'</span> ? <span class="string">'+3 days'</span> : <span class="string">'+6 days'</span>));</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><ul><li><code>double/number</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'v'</span>,<span class="string">'double'</span>] <span class="comment">// 判断v是否为数字</span></span><br><span class="line">[<span class="string">'v'</span>,<span class="string">'double'</span>,<span class="string">'max'</span>=&gt;<span class="number">90</span>,<span class="string">'min'</span>=&gt;<span class="number">1</span>]<span class="comment">//判断v是否为数字且大于等于1、小于等于90</span></span><br></pre></td></tr></table></figure><ul><li>数组各元素验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 要求验证的元素必须为数组，否则会返回假并报错 */</span></span><br><span class="line">[<span class="string">"categoryIds"</span>,<span class="string">"each"</span>,<span class="string">"rule"</span>=&gt;[<span class="string">'integer'</span>]]</span><br></pre></td></tr></table></figure><ul><li><code>exist</code>是否存在验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 所谓对存在的检查实质为where的与操作，必须同时满足的记录存在方可。兄弟们可以研究下，exist是对sql语句EXISTS的应用*/</span></span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"exist"</span>] <span class="comment">// username输入的值已经存在</span></span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"exist"</span>,<span class="string">"targetAttribute"</span>=&gt;<span class="string">"province"</span>] <span class="comment">// username的输入值必须在province列存在</span></span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"exist"</span>,<span class="string">'targetAttribute'</span> =&gt; [<span class="string">'username'</span>, <span class="string">'province'</span>]] <span class="comment">// username的输入值必须在username和province中存在</span></span><br><span class="line">[[<span class="string">"username"</span>,<span class="string">"province"</span>],<span class="string">"exist"</span>,<span class="string">'targetAttribute'</span> =&gt; [<span class="string">'username'</span>, <span class="string">'province'</span>]] <span class="comment">// username和province的输入值必须在username和province中存在</span></span><br></pre></td></tr></table></figure><ul><li>file验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* maxFiles代表一次最多传几个，mimeTypes代表上传文件类型 */</span></span><br><span class="line">[<span class="string">'primaryImage'</span>, <span class="string">'file'</span>, <span class="string">'extensions'</span> =&gt; [<span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'gif'</span>],<span class="string">'mimeTypes'</span>=&gt;[<span class="string">"image/*"</span>], <span class="string">'maxSize'</span> =&gt; <span class="number">1024</span>*<span class="number">1024</span>,<span class="string">'minSize'</span>=&gt;<span class="number">100</span>*<span class="number">1024</span>,<span class="string">'maxFiles'</span>=&gt;<span class="number">6</span>,<span class="string">'checkExtensionByMimeType'</span>=&gt;<span class="keyword">true</span>],</span><br></pre></td></tr></table></figure><ul><li><code>filter</code>过滤验证函数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">'username'</span>, <span class="string">'email'</span>], <span class="string">'filter'</span>, <span class="string">'filter'</span> =&gt; <span class="string">'trim'</span>, <span class="string">'skipOnArray'</span> =&gt; <span class="keyword">true</span>],</span><br><span class="line">[<span class="string">'phone'</span>, <span class="string">'filter'</span>, <span class="string">'filter'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// normalize phone input here</span></span><br><span class="line">        <span class="keyword">return</span> $value;</span><br><span class="line">&#125;],</span><br></pre></td></tr></table></figure><ul><li><code>image</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 上传png/jpg格式，最大宽度不能超过1000px，最小宽度不能低于100px，最大高度不能高于1000px。最小高度不能低于100px */</span></span><br><span class="line">[<span class="string">'primaryImage'</span>, <span class="string">'image'</span>, <span class="string">'extensions'</span> =&gt; <span class="string">'png, jpg'</span>,<span class="string">'minWidth'</span> =&gt; <span class="number">100</span>, <span class="string">'maxWidth'</span> =&gt; <span class="number">1000</span>,<span class="string">'minHeight'</span> =&gt; <span class="number">100</span>, <span class="string">'maxHeight'</span> =&gt; <span class="number">1000</span>]</span><br></pre></td></tr></table></figure><ul><li><code>ip</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"ip_addess"</span>,<span class="string">"ip"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>in</code>方法验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"level"</span>,<span class="string">"in"</span>,<span class="string">"range"</span>=&gt;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><ul><li><code>integer</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"age"</span>,<span class="string">'integer'</span>];</span><br><span class="line">[<span class="string">"age"</span>,<span class="string">"integer"</span>,<span class="string">"max"</span>=&gt;<span class="number">90</span>,<span class="string">"min"</span>=&gt;<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>正则匹配验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"username"</span>,<span class="string">"match"</span>,<span class="string">"pattern"</span>=&gt;<span class="string">"/^[a-z]\w*$/i"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>in</code>方法验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"level"</span>,<span class="string">"in"</span>,<span class="string">"range"</span>=&gt;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><ul><li><code>safe</code>验证（多用于设置一个model的attribute）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"description"</span>,<span class="string">"safe"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>string</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"username"</span>,<span class="string">"string"</span>,<span class="string">"length"</span>=&gt;[<span class="number">4</span>,<span class="number">24</span>]];</span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"string"</span>,<span class="string">"min"</span>=&gt;<span class="number">4</span>];</span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"string"</span>,<span class="string">"max"</span>=&gt;<span class="number">32</span>];</span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"string"</span>,<span class="string">"encoding"</span>=&gt;<span class="string">"UTF-8"</span>];</span><br></pre></td></tr></table></figure><ul><li><code>unique</code>唯一验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"username"</span>,<span class="string">"unique"</span>]</span><br><span class="line">[<span class="string">"username"</span>,<span class="string">"unique"</span>,<span class="string">"targetAttribute"</span>=&gt;<span class="string">"province"</span>]</span><br></pre></td></tr></table></figure><ul><li><code>url</code>验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"website"</span>,<span class="string">"url"</span>]</span><br><span class="line">[<span class="string">"website"</span>,<span class="string">"url"</span>,<span class="string">"validSchemes"</span>=&gt;[<span class="string">"http"</span>,<span class="string">"https"</span>]]</span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>一个字符串中单词数量</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::countWords(<span class="string">"hello world"</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>返回路径中的文件名部分</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::basename(<span class="string">"/path/hello.txt"</span>,<span class="string">".txt"</span>); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><ul><li>返回路径中的目录名</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::dirname(<span class="string">"/home/path/hello.txt"</span>);<span class="comment">// /home/path</span></span><br></pre></td></tr></table></figure><ul><li>超出内容用…代替(不含HTML)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::truncate(<span class="string">"hello world"</span>,<span class="number">7</span>,<span class="string">'...'</span>); <span class="comment">//hello w...</span></span><br></pre></td></tr></table></figure><ul><li>超出内容用…代替(识别HTML)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::truncate(<span class="string">"hello world"</span>,<span class="number">7</span>,<span class="string">'...'</span>,<span class="keyword">null</span>,<span class="keyword">true</span>); <span class="comment">// hello w...</span></span><br></pre></td></tr></table></figure><ul><li>以单词为单位超出部分用..代替（不解析HTML）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::truncateWords(<span class="string">'This is a test sentance'</span>, <span class="number">4</span>, <span class="string">'...'</span>) <span class="comment">//This is a test ...</span></span><br></pre></td></tr></table></figure><ul><li>以单词为单位超出部分用..代替（解析HTML）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::truncateWords(<span class="string">'This is a test for a sentance'</span>, <span class="number">5</span>, <span class="string">'...'</span>,<span class="keyword">true</span>) <span class="comment">//This is a test for...</span></span><br></pre></td></tr></table></figure><ul><li>一个字符串是否以另一个字符串开始</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::startsWith(<span class="string">"hello world"</span>,<span class="string">"he"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>一个字符串是否以另一个字符串结尾</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::endsWith(<span class="string">"hello world"</span>,<span class="string">"ald"</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li>按照分隔符分隔字符串为数组</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringHelper::explode(<span class="string">'It, is, a first, test'</span>));<span class="comment">//['It','is','a first','test']</span></span><br><span class="line">StringHelper::explode(<span class="string">"a@b@c"</span>,<span class="string">"@"</span>);[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">StringHelper::explode(<span class="string">"a, b ,c "</span>);[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br></pre></td></tr></table></figure><h2 id="Session-amp-Cookie"><a href="#Session-amp-Cookie" class="headerlink" title="Session&amp;Cookie"></a>Session&amp;Cookie</h2><blockquote><p><code>Session</code>被封装成一个应用组件，直接通过 <code>Yii::$app-&gt;session</code> 来访问；<br><code>Cookie</code>通过Request和Response来操作。</p></blockquote><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul><li>获得session</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$session = Yii::$app-&gt;session;</span><br></pre></td></tr></table></figure><ul><li>检查session是否开启</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;isActive</span><br></pre></td></tr></table></figure><ul><li>开启一个<code>session</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;open()</span><br></pre></td></tr></table></figure><ul><li>关闭<code>session</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;close();</span><br></pre></td></tr></table></figure><ul><li>销毁<code>session</code>中所有已注册的数据</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;destroy();</span><br></pre></td></tr></table></figure><ul><li>访问一个<code>session</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以下三种方法效果等同 */</span></span><br><span class="line">$language = $session-&gt;get(<span class="string">'language'</span>);</span><br><span class="line">$language = $session[<span class="string">'language'</span>];</span><br><span class="line">$language = <span class="keyword">isset</span>($_SESSION[<span class="string">'language'</span>]) ? $_SESSION[<span class="string">'language'</span>] : <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><ul><li>设置一个<code>session</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以下三种方法效果等同 */</span></span><br><span class="line">$session-&gt;set(<span class="string">'language'</span>, <span class="string">'en-US'</span>);</span><br><span class="line">$session[<span class="string">'language'</span>] = <span class="string">'en-US'</span>;</span><br><span class="line">$_SESSION[<span class="string">'language'</span>] = <span class="string">'en-US'</span>;</span><br></pre></td></tr></table></figure><ul><li>删除一个<code>session</code>变量</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 下面三种方法效果等同 */</span></span><br><span class="line">$session-&gt;remove(<span class="string">'language'</span>);</span><br><span class="line"><span class="keyword">unset</span>($session[<span class="string">'language'</span>]);</span><br><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">'language'</span>]);</span><br></pre></td></tr></table></figure><ul><li>检查一个<code>session</code>变量是否存在</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以下三种方法效果一致 */</span></span><br><span class="line"><span class="keyword">if</span> ($session-&gt;has(<span class="string">'language'</span>)) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($session[<span class="string">'language'</span>])) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'language'</span>])) ...</span><br></pre></td></tr></table></figure><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li>获取<code>cookie</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cookies = Yii::$app-&gt;request-&gt;cookies;</span><br></pre></td></tr></table></figure><ul><li>设置<code>cookie</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cookies = Yii::$app-&gt;response-&gt;cookies;</span><br></pre></td></tr></table></figure><ul><li>获取一个<code>cookie</code>值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$language = $cookies-&gt;getValue(<span class="string">'language'</span>, <span class="string">'en'</span>);<span class="comment">// 如果获取language失败，则返回"en"代替</span></span><br></pre></td></tr></table></figure><ul><li>另一种获取<code>cookie</code>值方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (($cookie = $cookies-&gt;get(<span class="string">'language'</span>)) !== <span class="keyword">null</span>) &#123;</span><br><span class="line">    $language = $cookie-&gt;value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组方式获取<code>cookie</code>值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($cookies[<span class="string">'language'</span>])) &#123;</span><br><span class="line">    $language = $cookies[<span class="string">'language'</span>]-&gt;value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>检查一个<code>cookie</code>是否存在</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($cookies-&gt;has(<span class="string">'language'</span>)) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($cookies[<span class="string">'language'</span>])) ...</span><br></pre></td></tr></table></figure><ul><li>新增一个<code>cookie</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$cookies-&gt;add(<span class="keyword">new</span> \yii\web\Cookie([</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'language'</span>,</span><br><span class="line">    <span class="string">'value'</span> =&gt; <span class="string">'zh-CN'</span>,</span><br><span class="line">]));</span><br></pre></td></tr></table></figure><ul><li>删除一个<code>cookie</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$cookies-&gt;remove(<span class="string">'language'</span>);</span><br><span class="line"><span class="keyword">unset</span>($cookies[<span class="string">'language'</span>]);</span><br></pre></td></tr></table></figure><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><blockquote><p><code>Request</code> 被配置为一个应用组件，我们可以通过<code>Yii::$app-&gt;request</code>访问它。</p></blockquote><h3 id="URL相关"><a href="#URL相关" class="headerlink" title="URL相关"></a>URL相关</h3><ul><li>获得当前请求的绝对<code>url</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getAbsoluteUrl();</span><br></pre></td></tr></table></figure><ul><li>返回一个请求URL的<code>hostInfo</code>部分</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getHostInfo();</span><br></pre></td></tr></table></figure><ul><li>获得URL问号后的参数字符串</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getQueryString()</span><br></pre></td></tr></table></figure><ul><li>返回服务器端口</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getServerPort();</span><br></pre></td></tr></table></figure><h3 id="HTTP头"><a href="#HTTP头" class="headerlink" title="HTTP头"></a>HTTP头</h3><ul><li>返回用户接受的内容类型</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt; getAcceptableContentTypes (); <span class="comment">// Header Accept</span></span><br></pre></td></tr></table></figure><ul><li>返回用户可接受的语言</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt; getAcceptableLanguages(); <span class="comment">// Header Accept-Language</span></span><br></pre></td></tr></table></figure><ul><li>返回<code>GET</code>/<code>POST</code>请求</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;get();</span><br><span class="line">Yii::$app-&gt;request-&gt;get(<span class="string">"id"</span>);</span><br><span class="line">Yii::$app-&gt;request-&gt;POST();</span><br><span class="line">Yii::$app-&gt;request-&gt;POST(<span class="string">"username"</span>);</span><br></pre></td></tr></table></figure><ul><li>判断请求类型（返回boolean）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;isAjax <span class="comment">// 判断是否为ajax请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isConsoleRequest <span class="comment">// 判断是否为控制发起的请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isDelete <span class="comment">// 判断是否为DELETE请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isGet <span class="comment">// 判断是否为GET请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isPost <span class="comment">// 判断是否为POST请求</span></span><br><span class="line">Yii::$app-&gt;request-&gt;isPjax <span class="comment">// 判断是否为isPjax请求</span></span><br></pre></td></tr></table></figure><ul><li>返回用户的 IP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;request-&gt;getUserIP();</span><br></pre></td></tr></table></figure><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><blockquote><p>和Request一样，Response被封装成Yii的一个组件，你可以通过<code>Yii::$app-&gt;response</code>轻松的访问它。</p></blockquote><h3 id="Status-Code状态码"><a href="#Status-Code状态码" class="headerlink" title="Status Code状态码"></a>Status Code状态码</h3><ul><li>设置一个<code>Status Code</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;statusCode = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><ul><li>Yii内置的通过异常形式返回状态码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yii\web\BadRequestHttpException: status code <span class="number">400.</span></span><br><span class="line">yii\web\ConflictHttpException: status code <span class="number">409.</span></span><br><span class="line">yii\web\ForbiddenHttpException: status code <span class="number">403.</span></span><br><span class="line">yii\web\GoneHttpException: status code <span class="number">410.</span></span><br><span class="line">yii\web\MethodNotAllowedHttpException: status code <span class="number">405.</span></span><br><span class="line">yii\web\NotAcceptableHttpException: status code <span class="number">406.</span></span><br><span class="line">yii\web\NotFoundHttpException: status code <span class="number">404.</span></span><br><span class="line">yii\web\ServerErrorHttpException: status code <span class="number">500.</span></span><br><span class="line">yii\web\TooManyRequestsHttpException: status code <span class="number">429.</span></span><br><span class="line">yii\web\UnauthorizedHttpException: status code <span class="number">401.</span></span><br><span class="line">yii\web\UnsupportedMediaTypeHttpException: status code <span class="number">415.</span></span><br></pre></td></tr></table></figure><h3 id="HTTP-Headers"><a href="#HTTP-Headers" class="headerlink" title="HTTP Headers"></a>HTTP Headers</h3><ul><li>添加设置删除<code>Http Headers</code>内容</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$headers = Yii::$app-&gt;response-&gt;headers;</span><br><span class="line"><span class="comment">// add a Pragma header. Existing Pragma headers will NOT be overwritten.</span></span><br><span class="line">$headers-&gt;add(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"><span class="comment">// set a Pragma header. Any existing Pragma headers will be discarded.</span></span><br><span class="line">$headers-&gt;set(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"><span class="comment">// remove Pragma header(s) and return the removed Pragma header values in an array</span></span><br><span class="line">$values = $headers-&gt;remove(<span class="string">'Pragma'</span>);</span><br></pre></td></tr></table></figure><h3 id="Response-Body"><a href="#Response-Body" class="headerlink" title="Response Body"></a><code>Response Body</code></h3><ul><li>相应主体</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;content = <span class="string">'hello world!'</span>;</span><br></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><blockquote><p>控制器，可在<code>action</code>内直接用<code>$this</code>调用。</p></blockquote><ul><li>渲染一个视图（如果布局有效则使用布局）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;render(<span class="string">'index'</span>, [<span class="string">'model'</span> =&gt; $model])</span><br></pre></td></tr></table></figure><ul><li>渲染视图（不使用布局）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;renderPartial(<span class="string">'index'</span>,[<span class="string">'model'</span>=&gt;$model])</span><br></pre></td></tr></table></figure><ul><li>渲染视图（不使用布局）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入所有注册的JS/CSS脚本和文件,通常使用在响应AJAX网页请求的情况下</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;renderAjax(<span class="string">'index'</span>,[<span class="string">'model'</span>=&gt;$model])</span><br></pre></td></tr></table></figure><ul><li>只渲染布局</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;renderContent($content);</span><br></pre></td></tr></table></figure><h2 id="ActiveForm"><a href="#ActiveForm" class="headerlink" title="ActiveForm"></a>ActiveForm</h2><blockquote><p>重点！列出最常用的ActiveForm方法。</p></blockquote><ul><li>取消客户端规则验证</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">'enableClientValidation'</span>=&gt;<span class="keyword">false</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>取消<code>yii.js</code>的引入</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">'enableClientScript'</span>=&gt;<span class="keyword">false</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>表单目标地址设置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">"action"</span>=&gt;$url </span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>GET &amp; POST 方法设置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">"method"</span>=&gt;<span class="string">"POST"</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>设置Form的类及自己定义标签属性</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$form = ActiveForm::begin([</span><br><span class="line">    <span class="string">'options'</span>=&gt;[<span class="string">"class"</span>=&gt;<span class="string">"f"</span>,<span class="string">"data-name"</span>=&gt;<span class="string">"xxx"</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>生成文本框</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model, <span class="string">'date'</span>)-&gt;textInput([<span class="string">"key"</span>=&gt;<span class="string">"value"</span>]);</span><br></pre></td></tr></table></figure><ul><li>生成文本域</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model, <span class="string">'date'</span>)-&gt;textarea([<span class="string">"key"</span>=&gt;<span class="string">"value"</span>]);</span><br></pre></td></tr></table></figure><ul><li>单选列表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">'sex'</span>)-&gt;radioList($arr,[<span class="string">"key"</span>=&gt;<span class="string">"value"</span>]);</span><br></pre></td></tr></table></figure><ul><li>密码框 </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">"password"</span>)-&gt;passwordInput();</span><br></pre></td></tr></table></figure><ul><li>复选框</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">"city_id"</span>)-&gt;checkboxList($arr);</span><br></pre></td></tr></table></figure><ul><li>文件上传</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">"image"</span>)-&gt;fileInput();</span><br></pre></td></tr></table></figure><ul><li>隐藏域</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$form-&gt;field($model,<span class="string">"name"</span>)-&gt;hiddenInput();</span><br></pre></td></tr></table></figure><h2 id="FileHelper"><a href="#FileHelper" class="headerlink" title="FileHelper"></a>FileHelper</h2><blockquote><p>几个常用也好用的文件帮助方法</p></blockquote><ul><li>遍历一个文件夹下文件&amp;子文件夹</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::findFiles(<span class="string">'/path/to/search/'</span>);</span><br><span class="line">FileHelper::findFiles(<span class="string">'.'</span>, [<span class="string">'only'</span> =&gt; [<span class="string">'*.php'</span>, <span class="string">'*.txt'</span>]]); <span class="comment">// 只返回php和txt文件</span></span><br><span class="line">FileHelper::findFiles(<span class="string">'.'</span>, [<span class="string">'except'</span> =&gt; [<span class="string">'*.php'</span>, <span class="string">'*.txt'</span>]]); <span class="comment">// 排除php和txt文件</span></span><br></pre></td></tr></table></figure><ul><li>获得指定文件的MIME类型</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::getMimeType(<span class="string">'/path/to/img.jpeg'</span>);</span><br></pre></td></tr></table></figure><ul><li>复制文件夹</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::copyDirectory($src, $dst, $options = [])</span><br></pre></td></tr></table></figure><ul><li>删除一个目录及内容</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::removeDirectory($dir, $options = [])</span><br></pre></td></tr></table></figure><ul><li>生成一个文件夹（同时设置权限）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHelper::createDirectory($path, $mode = <span class="number">0775</span>, $recursive = <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><h2 id="UploadedFile"><a href="#UploadedFile" class="headerlink" title="UploadedFile"></a>UploadedFile</h2><blockquote><p>上传文件帮助类</p></blockquote><ul><li>通过模型的属性获取一个文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file = UploadedFile::getInstance($model,<span class="string">'avatar'</span>)</span><br></pre></td></tr></table></figure><ul><li>通过模型的属性来获取一组文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$files = UploadedFile::getInstances($model,<span class="string">'avatar'</span>)</span><br><span class="line"><span class="comment">//view $form-&gt;field($model,'avatar[]')-&gt;fileInput()</span></span><br></pre></td></tr></table></figure><ul><li>通过名字上传一个文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file = UploadedFile::getInstanceByName(<span class="string">'avatar'</span>);</span><br></pre></td></tr></table></figure><ul><li>通过名字获取一组上传的文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$file = UploadedFile::getInstancesByName(<span class="string">'avatar'</span>);</span><br><span class="line"><span class="comment">// view Html::fileInput('avatar[]')</span></span><br></pre></td></tr></table></figure><ul><li>保存一个文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;saveAs(Yii::getAlias(<span class="string">"@webroot"</span>).<span class="string">'/data/test.jpg'</span>);</span><br></pre></td></tr></table></figure><ul><li>获取上传文件原始名(不含扩展名)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;getBaseName(); <span class="comment">// test.jpg ===&gt; test</span></span><br></pre></td></tr></table></figure><ul><li>获取上传文件的扩展名(已经自动格式化为小写)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;getExtension(); <span class="comment">// 是png、不是image/png</span></span><br></pre></td></tr></table></figure><ul><li>获取文件的原始名</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;name; <span class="comment">// test.jpg</span></span><br></pre></td></tr></table></figure><ul><li>获取文件媒体类型</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;type; <span class="comment">// image/png</span></span><br></pre></td></tr></table></figure><ul><li>获取文件临时名</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;tempName;</span><br></pre></td></tr></table></figure><ul><li>获取文件大小</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file-&gt;size; <span class="comment">// 21744</span></span><br></pre></td></tr></table></figure><h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><blockquote><p>通过Html类的一些静态方法生成Html标签。</p></blockquote><ul><li>生成一个超级链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::a(<span class="string">'链接的文本'</span>, $url);</span><br></pre></td></tr></table></figure><ul><li>通过Yii2的路由生成一个链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html::a(<span class="string">'链接文本'</span>, Url::to([<span class="string">'/site/index'</span>], <span class="keyword">true</span>));</span><br><span class="line">Html::a(<span class="string">'链接文本'</span>, Yii::$app-&gt;urlManager-&gt;createUrl([<span class="string">'/site/index'</span>]));</span><br></pre></td></tr></table></figure><ul><li>生成一个图片链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::img(<span class="string">"/images/logo.png"</span>,[<span class="string">'class'</span>=&gt;<span class="string">'img'</span>]);</span><br></pre></td></tr></table></figure><ul><li>生成一个按钮</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::button(<span class="string">"按钮文本"</span>,[<span class="string">'class'</span>=&gt;<span class="string">'button-action'</span>]);</span><br></pre></td></tr></table></figure><ul><li>发送邮件链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::mailto(<span class="string">"阿北"</span>,<span class="string">'abei@nai8.me'</span>,$options);</span><br></pre></td></tr></table></figure><ul><li>生成有序列表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$list = [<span class="string">'china'</span>,<span class="string">'usa'</span>];</span><br><span class="line">Html::ol($list);</span><br></pre></td></tr></table></figure><ul><li>生成无须列表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$list = [<span class="string">'china'</span>,<span class="string">'usa'</span>,<span class="string">'japan'</span>];</span><br><span class="line">Html::ul($list);</span><br></pre></td></tr></table></figure><ul><li>生成<code>javascript</code>代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::script(<span class="string">"alert('hello world');"</span>)</span><br></pre></td></tr></table></figure><ul><li>生成<code>style</code>代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html::style(<span class="string">"color:#F60"</span>);</span><br><span class="line">Html::style(<span class="string">".list &#123;background:#FFF;&#125;"</span>);</span><br></pre></td></tr></table></figure><ul><li>生成一个css引用链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::cssFile(<span class="string">"http://baidu.com/style.css"</span>,[]);</span><br></pre></td></tr></table></figure><ul><li>生成一个js文件引用</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::jsFile($url,[]);</span><br></pre></td></tr></table></figure><ul><li>把字符 “&lt;” （小于）和 “&gt;” （大于）转换为HTML实体</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::encode($html);</span><br></pre></td></tr></table></figure><ul><li>将特色的HTML实体转化为&gt;和&lt;</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Html::decode($string);</span><br></pre></td></tr></table></figure><h2 id="Query-Builder"><a href="#Query-Builder" class="headerlink" title="Query Builder"></a>Query Builder</h2><blockquote><p>主要解决DAO在查询语句上的繁琐问题，无需输入原生SQL语句就可以完成数据库检索。</p></blockquote><ul><li>使用<code>Query Builder</code>需要使用的类</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query = (<span class="keyword">new</span> \yii\db\Query()); <span class="comment">// yii2使用Query对象来采集SQL的各个部分，然后由Query Builder组成SQL语句后由DAO发给数据库获得请求。</span></span><br></pre></td></tr></table></figure><ul><li><code>SELECT</code>方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;select(<span class="string">"id,username"</span>); <span class="comment">// 字符串形式</span></span><br><span class="line">$query-&gt;select([<span class="string">'id'</span>,<span class="string">'username'</span>]); <span class="comment">// 数组形式</span></span><br><span class="line">$query-&gt;select([<span class="string">"userId"</span>=&gt;<span class="string">"id"</span>,<span class="string">"fName"</span>=&gt;<span class="string">"user.frist_name"</span>]); <span class="comment">// 起别名</span></span><br><span class="line">$query-&gt;select([<span class="string">"full_name"</span>=&gt;<span class="string">"CONCAT(id,'-',username)"</span>]); <span class="comment">// 支持MYSQL函数</span></span><br></pre></td></tr></table></figure><ul><li><code>FROM</code>方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;from(<span class="string">"user"</span>); <span class="comment">// 字符串形式</span></span><br><span class="line">$query-&gt;from([<span class="string">"u"</span>=&gt;<span class="string">"user"</span>]); <span class="comment">// 数据表别名</span></span><br></pre></td></tr></table></figure><ul><li>过滤掉重复记录</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;select(<span class="string">"username"</span>)-&gt;distinct()-&gt;from(<span class="string">"user"</span>); <span class="comment">// distinct</span></span><br></pre></td></tr></table></figure><ul><li><code>WHERE</code>函数用法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 传递字符串 */</span></span><br><span class="line">$query-&gt;where(<span class="string">"id = 1"</span>);</span><br><span class="line">$query-&gt;where(<span class="string">"id = :id"</span>)-&gt;addParams([<span class="string">":id"</span>=&gt;<span class="number">1</span>]);</span><br><span class="line">$query-&gt;where(<span class="string">"id = :id"</span>,[<span class="string">":id"</span>=&gt;<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 传递数组 */</span></span><br><span class="line">$query-&gt;where([<span class="string">"username"</span>=&gt;<span class="string">"abei"</span>,<span class="string">"age"</span>=&gt;[<span class="number">20</span>,<span class="number">19</span>,<span class="number">26</span>]])-&gt;from(<span class="string">"user"</span>);<span class="comment">// select * from user where username="abei" AND age in (20,19,26)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作符 */</span></span><br><span class="line">$query-&gt;where([<span class="string">"&gt;"</span>,<span class="string">"id"</span>,<span class="number">10</span>]);<span class="comment">// id &gt; 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"&lt;"</span>,<span class="string">"id"</span>,<span class="number">10</span>]); <span class="comment">// id &lt; 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"&lt;&gt;"</span>,<span class="string">"id"</span>,<span class="number">10</span>]); <span class="comment">// id &lt;&gt; 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"in"</span>,<span class="string">"id"</span>,[<span class="number">10</span>,<span class="number">12</span>]]);<span class="comment">// id in (10,20)</span></span><br><span class="line">$query-&gt;where([<span class="string">"not in"</span>,<span class="string">"id"</span>,[<span class="number">10</span>,<span class="number">12</span>]]);<span class="comment">// id not in (10,20)</span></span><br><span class="line">$query-&gt;where([<span class="string">"and"</span>,<span class="string">"id=1"</span>,<span class="string">"id=2"</span>]); id=<span class="number">1</span> <span class="keyword">AND</span> id=<span class="number">2</span></span><br><span class="line">$query-&gt;where([<span class="string">'or'</span>, [<span class="string">'type'</span> =&gt; [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]], [<span class="string">'id'</span> =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]]); <span class="comment">// (type IN (7, 8, 9) OR (id IN (1, 2, 3)))</span></span><br><span class="line">$query-&gt;where([<span class="string">"between"</span>, <span class="string">'id'</span>, <span class="number">1</span>, <span class="number">10</span>]);<span class="comment">// id between 1 AND 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"not"</span>,[<span class="string">"id"</span>=&gt;<span class="number">5</span>]]);<span class="comment">// not (id=5)</span></span><br><span class="line">$query-&gt;where([<span class="string">"not between"</span>,<span class="string">"id"</span>,<span class="number">1</span>,<span class="number">10</span>]);<span class="comment">// id not between 1 AND 10</span></span><br><span class="line">$query-&gt;where([<span class="string">"like"</span>,<span class="string">"username"</span>,<span class="string">"abei"</span>]); <span class="comment">// username like "%abei%"</span></span><br><span class="line">$query-&gt;where([[<span class="string">'like'</span>, <span class="string">'username'</span>, [<span class="string">'abei'</span>, <span class="string">'liuhuan'</span>]]]); <span class="comment">// username like "%abei%" AND username like "%liuhuan%"</span></span><br><span class="line">$query-&gt;where([<span class="string">'like'</span>, <span class="string">'username'</span>, <span class="string">'%abei'</span>, <span class="keyword">false</span>]); <span class="comment">// username like "%abei"</span></span><br><span class="line">$query-&gt;where([<span class="string">"or like"</span>, <span class="string">'username'</span>, [<span class="string">'abei'</span>, <span class="string">'liuhuan'</span>]]);<span class="comment">// username like "%abei%" OR username like "%liuhuan%"，只作用于范围为数组的形式</span></span><br><span class="line">$query-&gt;where([<span class="string">"not like"</span>,xxxxx]);<span class="comment">// 与like用法一致</span></span><br><span class="line">$query-&gt;where([<span class="string">"or not like"</span>,xxx])<span class="comment">// 与not like用法一致</span></span><br></pre></td></tr></table></figure><ul><li>一个要单独说明的<code>exists</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* EXISTS用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False */</span></span><br><span class="line">$query-&gt;where([<span class="string">'exists'</span>, (<span class="keyword">new</span> Query())-&gt;select(<span class="string">'id'</span>)-&gt;from(<span class="string">'user'</span>)-&gt;where([<span class="string">'id'</span> =&gt; <span class="number">1</span>])]);</span><br></pre></td></tr></table></figure><ul><li><code>ORDER BY</code> 方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;orderBy(<span class="string">"id DESC"</span>);</span><br><span class="line">$query-&gt;orderBy([<span class="string">"id"</span>=&gt;SORT_DESC]);</span><br><span class="line">$query-&gt;orderBy([<span class="string">"id"</span>=&gt;SORT_DESC,<span class="string">'create_time'</span>=&gt;SORT_ASC]);</span><br></pre></td></tr></table></figure><ul><li><code>GROUP BY</code> &amp;&amp; <code>HAVING</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;groupBy([<span class="string">"username"</span>]);</span><br><span class="line">$query-&gt;groupBy([<span class="string">"id"</span>])-&gt;having([<span class="string">"&gt;"</span>,<span class="string">'id'</span>,<span class="number">20</span>]);</span><br></pre></td></tr></table></figure><ul><li>获取生成的SQL语句</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;createCommand()-&gt;sql;</span><br></pre></td></tr></table></figure><h3 id="获得查询结果"><a href="#获得查询结果" class="headerlink" title="获得查询结果"></a>获得查询结果</h3><ul><li>获取所有结果</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;all();<span class="comment">// 二位数组</span></span><br></pre></td></tr></table></figure><ul><li>获取一条记录</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;one();</span><br></pre></td></tr></table></figure><ul><li>检查一个数据库中是否含有某个表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> \yii\db\Query)-&gt;from(<span class="string">'user'</span>)-&gt;exists();</span><br></pre></td></tr></table></figure><ul><li>获取<code>count</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;count();</span><br></pre></td></tr></table></figure><ul><li>获取一个值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;scalar();</span><br></pre></td></tr></table></figure><ul><li>获取一列值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;column();  <span class="comment">// 一位数组</span></span><br></pre></td></tr></table></figure><ul><li>获取一个user表的内容</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$query = <span class="keyword">new</span> \yii\db\Query;</span><br><span class="line">$query-&gt;from(<span class="string">"user"</span>);</span><br><span class="line">$query-&gt;select([<span class="string">"fname"</span>=&gt;<span class="string">"username"</span>]);</span><br><span class="line">$query-&gt;where([<span class="string">"&gt;"</span>,<span class="string">'id'</span>,<span class="number">10</span>]);</span><br><span class="line">$query-&gt;all();</span><br></pre></td></tr></table></figure><h2 id="Migrate"><a href="#Migrate" class="headerlink" title="Migrate"></a>Migrate</h2><ul><li>生成一个迁移文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./yii migrate/create script_name <span class="comment">// script_name为脚本名字（需要英文格式）</span></span><br></pre></td></tr></table></figure><ul><li>执行所有没有迁移的脚本</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./yii migrate</span><br><span class="line">./yii migrate/up</span><br></pre></td></tr></table></figure><ul><li>执行置顶的迁移</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./yii migrate/up 脚本名 <span class="comment">// 不用含有扩展名</span></span><br></pre></td></tr></table></figure><h2 id="Asset-Management"><a href="#Asset-Management" class="headerlink" title="Asset Management"></a>Asset Management</h2><blockquote><p>Asset资源管理</p></blockquote><ul><li>类属性说明</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$basePath <span class="comment">// 资源文件所在的web服务器目录路径，一般为@webroot</span></span><br><span class="line">$baseUrl <span class="comment">// js和css文件相对url基地址</span></span><br><span class="line">$css <span class="comment">// asset bundle 所包含的css文件数组</span></span><br><span class="line">$cssOptions <span class="comment">// 对link标签的属性控制</span></span><br><span class="line">$js <span class="comment">// asset bundle 所包含的js文件数组</span></span><br><span class="line">$jsOptions <span class="comment">// 对script标签的属性控制</span></span><br><span class="line">$publishOptions <span class="comment">// 发布操作</span></span><br><span class="line">$sourcePath <span class="comment">// 当资源网络不可以访问，则必须指定此目录。</span></span><br></pre></td></tr></table></figure><ul><li>去掉浏览器缓存</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'appendTimestamp'</span> =&gt; <span class="keyword">true</span> <span class="comment">// 在web.php里的components - assetManager</span></span><br></pre></td></tr></table></figure><ul><li>发布资源筛选</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $publishOptions = [</span><br><span class="line">    <span class="string">'only'</span> =&gt; [</span><br><span class="line">        <span class="string">'fonts/*'</span>,</span><br><span class="line">        <span class="string">'css/*'</span>,</span><br><span class="line">        <span class="string">'test.js'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'except'</span>=&gt;[</span><br><span class="line">        <span class="string">'img'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>js文件在页面的位置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $jsOptions = [<span class="string">'position'</span> =&gt; \yii\web\View::POS_HEAD];<span class="comment">//js文件发布到head标签内</span></span><br><span class="line"><span class="keyword">public</span> $jsOptions = [<span class="string">'position'</span> =&gt; \yii\web\View::POS_END];<span class="comment">//js文件发布到body标签底部</span></span><br><span class="line"><span class="keyword">public</span> $jsOptions = [<span class="string">'position'</span> =&gt; \yii\web\View::POS_BEGIN];<span class="comment">//js文件放到body标签开始处</span></span><br></pre></td></tr></table></figure><ul><li>浏览器兼容问题</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $cssOptions = [<span class="string">'condition'</span> =&gt; <span class="string">'IE 11'</span>];<span class="comment">// 代表兼容ie11</span></span><br></pre></td></tr></table></figure><ul><li>是否使用符号链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'linkAssets'</span> =&gt; <span class="keyword">true</span> <span class="comment">// 在web.php里的components - assetManager</span></span><br></pre></td></tr></table></figure><ul><li>配置yii自身的asset资源</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在web.php里的components - assetManager，配置自定义的也可以</span></span><br><span class="line"><span class="string">'bundles'</span> =&gt;  [</span><br><span class="line">    <span class="string">'yii/web/YiiAsset'</span>=&gt;[</span><br><span class="line">        <span class="string">'js'</span>=&gt;[],</span><br><span class="line">        ......</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><blockquote><p>有关事件的所有，系统自带事件通通给你。</p></blockquote><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><ul><li>应用处理请求<code>before</code>之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application::EVENT_BEFORE_REQUEST</span><br></pre></td></tr></table></figure><ul><li>应用处理请求<code>after</code>之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application::EVENT_AFTER_REQUEST</span><br></pre></td></tr></table></figure><h3 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h3><ul><li>在每个<code>Action</code>运行之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Controller::EVENT_BEFORE_ACTION</span><br></pre></td></tr></table></figure><ul><li>在每个Action运行之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Controller::EVENT_AFTER_ACTION</span><br></pre></td></tr></table></figure><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><ul><li>在验证Model属性之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model::EVENT_BEFORE_VALIDATE</span><br></pre></td></tr></table></figure><ul><li>在验证Model属性之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model::EVENT_AFTER_VALIDATE</span><br></pre></td></tr></table></figure><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><ul><li>一个模块的Action运行前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module::EVENT_BEFORE_ACTION</span><br></pre></td></tr></table></figure><ul><li>一个模块的Action运行后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module::EVENT_AFTER_ACTION</span><br></pre></td></tr></table></figure><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><ul><li>执行视图的<code>beforePage</code>时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_BEGIN_PAGE</span><br></pre></td></tr></table></figure><ul><li>执行视图的<code>endPage</code>函数时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_END_PAGE</span><br></pre></td></tr></table></figure><ul><li>在<code>renderFile</code>渲染一个视图文件之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_BEFORE_RENDER</span><br></pre></td></tr></table></figure><ul><li>在<code>renderFile</code>渲染一个视图文件之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_AFTER_RENDER</span><br></pre></td></tr></table></figure><ul><li>执行视图的<code>beginBody</code>函数时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_BEGIN_BODY</span><br></pre></td></tr></table></figure><ul><li>执行视图的<code>endBody</code>函数时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View::EVENT_END_BODY</span><br></pre></td></tr></table></figure><h3 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h3><ul><li>Widget初始化时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Widget::EVENT_INIT</span><br></pre></td></tr></table></figure><ul><li>Widget执行前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Widget::EVENT_BEFORE_RUN</span><br></pre></td></tr></table></figure><ul><li>Widget执行之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Widget::EVENT_AFTER_RUN</span><br></pre></td></tr></table></figure><h3 id="ActiveQuery"><a href="#ActiveQuery" class="headerlink" title="ActiveQuery"></a>ActiveQuery</h3><ul><li>由ActiveQuery的init函数触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActiveQuery::EVENT_INIT</span><br></pre></td></tr></table></figure><h3 id="BaseActiveRecord-amp-ActiveRecord"><a href="#BaseActiveRecord-amp-ActiveRecord" class="headerlink" title="BaseActiveRecord &amp; ActiveRecord"></a>BaseActiveRecord &amp; ActiveRecord</h3><ul><li>AR对象被初始化init时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_INIT</span><br></pre></td></tr></table></figure><ul><li>AR执行查询结束时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_FIND</span><br></pre></td></tr></table></figure><ul><li>插入结束时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_BEFORE_INSERT</span><br></pre></td></tr></table></figure><ul><li>插入之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_INSERT</span><br></pre></td></tr></table></figure><ul><li>更新记录之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_BEFORE_UPDATE</span><br></pre></td></tr></table></figure><ul><li>更新记录之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_UPDATE</span><br></pre></td></tr></table></figure><ul><li>删除记录之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_BEFORE_DELETE</span><br></pre></td></tr></table></figure><ul><li>删除记录之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_DELETE</span><br></pre></td></tr></table></figure><ul><li>在数据refresh成功之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseActiveRecord::EVENT_AFTER_REFRESH</span><br></pre></td></tr></table></figure><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><ul><li>数据库连接被打开后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection::EVENT_AFTER_OPEN</span><br></pre></td></tr></table></figure><ul><li>事务被启动时触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection::EVENT_BEGIN_TRANSACTION</span><br></pre></td></tr></table></figure><ul><li>事务被提交后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection::EVENT_COMMIT_TRANSACTION</span><br></pre></td></tr></table></figure><ul><li>事务回滚后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection::EVENT_ROLLBACK_TRANSACTION</span><br></pre></td></tr></table></figure><h3 id="Response-1"><a href="#Response-1" class="headerlink" title="Response"></a>Response</h3><ul><li>Response响应发送之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response::EVENT_BEFORE_SEND</span><br></pre></td></tr></table></figure><ul><li>Response响应发送之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response::EVENT_AFTER_SEND</span><br></pre></td></tr></table></figure><ul><li>Response响应内容准备好之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response::EVENT_AFTER_PREPARE</span><br></pre></td></tr></table></figure><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><ul><li>登陆之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::EVENT_BEFORE_LOGIN</span><br></pre></td></tr></table></figure><ul><li>登陆之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::EVENT_AFTER_LOGIN</span><br></pre></td></tr></table></figure><ul><li>注销之前触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::EVENT_BEFORE_LOGOUT</span><br></pre></td></tr></table></figure><ul><li>注销之后触发</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::EVENT_AFTER_LOGOUT</span><br></pre></td></tr></table></figure><h2 id="Route-amp-UrlManager"><a href="#Route-amp-UrlManager" class="headerlink" title="Route&amp;UrlManager"></a>Route&amp;UrlManager</h2><ul><li>URL美化配置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// conf/web.php</span></span><br><span class="line"><span class="string">'urlManager'</span> =&gt; [</span><br><span class="line">    <span class="string">'enablePrettyUrl'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">'showScriptName'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">'suffix'</span>=&gt;<span class="string">'.html'</span>,<span class="comment">// 统一后缀名，若不需要则无需配置</span></span><br><span class="line">    <span class="string">'enableStrictParsing'</span>=&gt;<span class="keyword">false</span>,<span class="comment">//默认为false，是否采用严格解析</span></span><br><span class="line">    <span class="string">'rules'</span> =&gt; [</span><br><span class="line">    ],        </span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>Apache开启url重写方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Apache需要支持url重写其AllowOverride为all</span></span><br><span class="line">AllowOverride:all</span><br><span class="line"></span><br><span class="line"><span class="comment">//web目录下增加.htaccess，隐藏index.php文件 内容如下</span></span><br><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule . index.php</span><br></pre></td></tr></table></figure><ul><li>Nginx支持url重写</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    <span class="keyword">if</span> (!-e $request_filename)&#123;</span><br><span class="line">        rewrite ^/(.*) /index.php last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Apache开启url重写方法2</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule ^(.*)\?*$ index.php/$<span class="number">1</span> [L,QSA]</span><br></pre></td></tr></table></figure><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><ul><li>分页获得所有的会员</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /users</span><br><span class="line">GET /users?page=<span class="number">2</span></span><br><span class="line">GET /users?fields=id,username,created_at</span><br><span class="line">GET /users?sort=id,-username</span><br></pre></td></tr></table></figure><ul><li>HTTP状态码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span>: OK。一切正常。</span><br><span class="line"><span class="number">201</span>: 响应 POST 请求时成功创建一个资源。Location header 包含的URL指向新创建的资源。</span><br><span class="line"><span class="number">204</span>: 该请求被成功处理，响应不包含正文内容 (类似 DELETE 请求)。</span><br><span class="line"><span class="number">304</span>: 资源没有被修改。可以使用缓存的版本。</span><br><span class="line"><span class="number">400</span>: 错误的请求。可能通过用户方面的多种原因引起的，例如在请求体内有无效的JSON 数据，无效的操作参数，等等。</span><br><span class="line"><span class="number">401</span>: 验证失败。</span><br><span class="line"><span class="number">403</span>: 已经经过身份验证的用户不允许访问指定的 API 末端。</span><br><span class="line"><span class="number">404</span>: 所请求的资源不存在。</span><br><span class="line"><span class="number">405</span>: 不被允许的方法。 请检查 Allow header 允许的HTTP方法。</span><br><span class="line"><span class="number">415</span>: 不支持的媒体类型。 所请求的内容类型或版本号是无效的。</span><br><span class="line"><span class="number">422</span>: 数据验证失败 (例如，响应一个 POST 请求)。 请检查响应体内详细的错误消息。</span><br><span class="line"><span class="number">429</span>: 请求过多。 由于限速请求被拒绝。</span><br><span class="line"><span class="number">500</span>: 内部服务器错误。 这可能是由于内部程序错误引起的。</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.yii-china.com/doc/detail/539#3" target="_blank" rel="noopener">Yii2 速查表</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Yii2 速查表&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架相关" scheme="http://blog.caoxl.com/categories/%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Yii2" scheme="http://blog.caoxl.com/tags/Yii2/"/>
    
      <category term="速查表" scheme="http://blog.caoxl.com/tags/%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 Yes It is</title>
    <link href="http://blog.caoxl.com/2019/12/15/Yii2-Learning-Notes/"/>
    <id>http://blog.caoxl.com/2019/12/15/Yii2-Learning-Notes/</id>
    <published>2019-12-15T02:18:49.000Z</published>
    <updated>2019-12-16T01:05:14.235Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Yii2 Yes It is</p></blockquote><a id="more"></a><h2 id="关于Yii"><a href="#关于Yii" class="headerlink" title="关于Yii"></a>关于Yii</h2><h3 id="Yii-是什么"><a href="#Yii-是什么" class="headerlink" title="Yii 是什么"></a>Yii 是什么</h3><p>Yii 是一个高性能，基于组件的 PHP 框架，用于快速开发现代 Web 应用程序。 名字 Yii （读作 易）在中文里有“极致简单与不断演变”两重含义， 也可看作 <strong>Yes It Is!</strong> 的缩写。</p><h3 id="Yii-版本"><a href="#Yii-版本" class="headerlink" title="Yii 版本"></a>Yii 版本</h3><p>Yii 当前有两个主要版本：1.1 和 2.0。 1.1 版是上代的老版本，现在处于维护状态。 2.0 版是一个完全重写的版本，采用了最新的技术和协议，包括<code>依赖包管理器 Composer</code>、<code>PHP 代码规范 PSR</code>、<code>命名空间</code>、<code>Traits（特质）</code>等等。 2.0 版代表新一代框架，是未来几年中我们的主要开发版本。</p><h2 id="安装-Yii"><a href="#安装-Yii" class="headerlink" title="安装 Yii"></a>安装 Yii</h2><ul><li>通过 Composer 安装</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist yiisoft/yii2-app-basic Yii2</span><br></pre></td></tr></table></figure><h3 id="验证安装的结果"><a href="#验证安装的结果" class="headerlink" title="验证安装的结果"></a>验证安装的结果</h3><p>当安装完成之后， 或配置你的Web服务器(看下面的文章)或使用内置Web Server， 当在项目 web 目录下可以通过下面的命令:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php yii serve</span><br></pre></td></tr></table></figure><h2 id="应用结构"><a href="#应用结构" class="headerlink" title="应用结构"></a>应用结构</h2><blockquote><ul><li>Yii2                  项目根目录<ul><li>assets</li><li>commands            控制台命令类目录</li><li>config              应用配置及其它配置目录<ul><li>console.php       控制台应用配置信息</li><li>web.php           Web 应用配置信息</li></ul></li><li>controllers         控制器类目录</li><li>mail                邮件类目录</li><li>models              模型类目录</li><li>runtime             Yii 在运行时生成的文件，例如日志和缓存文件</li><li>tests               单元测试</li><li>vagrant</li><li>vendor              已经安装的 Composer 包，包括 Yii 框架自身</li><li>views               视图目录</li><li>web                 Web 应用根目录，包含 Web 入口文件<ul><li>assets            Yii 发布的资源文件（javascript 和 css）</li><li>index.php         应用入口文件</li></ul></li><li>widgets</li><li>composer.json       Composer 配置文件, 描述包信息</li><li>composer.lock</li><li>yii  </li></ul></li></ul></blockquote><blockquote><p>一般来说，应用中的文件可被分为两类：在 basic/web 下的和在其它目录下的。 前者可以直接通过 HTTP 访问（例如浏览器），后者不能也不应该被直接访问。一般来说，应用中的文件可被分为两类：在 basic/web 下的和在其它目录下的。 前者可以直接通过 HTTP 访问（例如浏览器），后者不能也不应该被直接访问。</p></blockquote><h2 id="请求生命周期"><a href="#请求生命周期" class="headerlink" title="请求生命周期"></a>请求生命周期</h2><blockquote><ul><li><ol><li>用户提交指向 入口脚本 <code>web/index.php</code>的请求</li></ol></li><li><ol start="2"><li>入口脚本会加载 <code>配置数组</code> 并创建一个 <code>应用</code> 实例用于处理该请求</li></ol></li><li><ol start="3"><li>应用会通过 <code>request(请求)</code> 应用组件解析被请求的 <code>路由</code></li></ol></li><li><ol start="4"><li>应用创建一个 <code>controller(控制器)</code> 实例具体处理请求</li></ol></li><li><ol start="5"><li>控制器会创建一个 <code>action(动作)</code> 实例并为该动作执行相关的 <code>Filters(访问过滤器)</code></li></ol></li><li><ol start="6"><li>如果任何一个过滤器验证失败, 该动作会被取消</li></ol></li><li><ol start="7"><li>如果全部的过滤器都通过, 该动作就会被执行</li></ol></li><li><ol start="8"><li>动作后悔加载一个<code>数据模型</code>, 一般是从数据库中加载</li></ol></li><li><ol start="9"><li>动作后悔渲染一个<code>View(视图)</code>, 并为其提供所需的数据模型</li></ol></li><li><ol start="10"><li>渲染得到的结果会返回给 <code>response(响应)</code> 应用组件</li></ol></li><li><ol start="11"><li>响应组件会把渲染结果发回给用户的浏览器</li></ol></li></ul></blockquote><h2 id="说声-Hello"><a href="#说声-Hello" class="headerlink" title="说声 Hello"></a>说声 Hello</h2><p>这个章节，你将会掌握三件事：</p><ol><li>如何创建一个动作去响应请求，</li><li>如何创建一个视图去构造响应内容，</li><li>以及一个应用如何分派请求给动作。</li></ol><h3 id="创建动作"><a href="#创建动作" class="headerlink" title="创建动作"></a>创建动作</h3><p>操作必须声明在控制器中。为了简单起见， 你可以直接在 <code>SiteController</code> 控制器里声明 <code>say</code> 操作。 这个控制器是由文件 <code>controllers/SiteController.php</code> 定义的。以下是一个操作的声明：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...现存的代码...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionSay</span><span class="params">($message = <span class="string">'Hello'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'say'</span>, [<span class="string">'message'</span> =&gt; $message]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p>视图是你用来生成响应内容的脚本。为了说 “Hello”， 你需要创建一个 <code>say</code> 视图，以便显示从操作方法中传来的 <code>message</code> 参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?</span>= Html::encode($message) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>say</code> 视图应该存为 <code>views/site/say.php</code> 文件。当一个操作中调用了 <code>render()</code> 方法时， 它将会按 <code>views/控制器 ID/视图名.php</code>路径加载 <code>PHP</code> 文件。</p><h3 id="试运行"><a href="#试运行" class="headerlink" title="试运行"></a>试运行</h3><p>创建完动作和视图后，你就可以通过下面的 URL 访问新页面了：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>hostname<span class="regexp">/index.php?r=site/</span>say&amp;message=Hello+World</span><br></pre></td></tr></table></figure><h2 id="使用表单"><a href="#使用表单" class="headerlink" title="使用表单"></a>使用表单</h2><p>这个章节，你将会掌握三件事：</p><ol><li>创建一个模型代表用户通过表单输入的数据</li><li>声明规则去验证输入的数据</li><li>在视图中生成一个 HTML 表单</li></ol><h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>模型类 <code>EntryForm</code> 代表从用户那请求的数据， 该类如下所示并存储在 <code>models/EntryForm.php</code> 文件中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EntryForm</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [[<span class="string">'name'</span>, <span class="string">'email'</span>], <span class="string">'required'</span>],</span><br><span class="line">            [<span class="string">'email'</span>, <span class="string">'email'</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建动作-1"><a href="#创建动作-1" class="headerlink" title="创建动作"></a>创建动作</h3><p>下面你得在 <code>site</code> 控制器中创建一个 <code>entry</code> 操作用于新建的模型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">models</span>\<span class="title">EntryForm</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...现存的代码...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionEntry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $model = <span class="keyword">new</span> EntryForm;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($model-&gt;load(Yii::$app-&gt;request-&gt;post()) &amp;&amp; $model-&gt;validate()) &#123;</span><br><span class="line">            <span class="comment">// 验证 $model 收到的数据</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 做些有意义的事 ...</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'entry-confirm'</span>, [<span class="string">'model'</span> =&gt; $model]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 无论是初始化显示还是数据验证错误</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'entry'</span>, [<span class="string">'model'</span> =&gt; $model]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>表达式 <code>Yii::$app</code> 代表应用实例，它是一个全局可访问的单例。 同时它也是一个服务定位器， 能提供 <code>request</code>，<code>response</code>，<code>db</code> 等等特定功能的组件。 在上面的代码里就是使用 <code>request</code> 组件来访问应用实例收到的 <code>$_POST</code> 数据。</p></blockquote><h3 id="创建视图-1"><a href="#创建视图-1" class="headerlink" title="创建视图"></a>创建视图</h3><p>最后创建两个视图文件 <code>entry-confirm</code> 和 <code>entry</code>。 他们会被刚才创建的 <code>entry</code> 操作渲染。</p><p><code>entry-confirm</code> 视图简单地显示提交的 <code>name</code> 和 <code>email</code> 数据。视图文件应该保存在 <code>views/site/entry-confirm.php</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;p&gt;You have entered the following information:&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;Name&lt;/label&gt;: <span class="meta">&lt;?</span>= Html::encode($model-&gt;name) <span class="meta">?&gt;</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;Email&lt;/label&gt;: <span class="meta">&lt;?</span>= Html::encode($model-&gt;email) <span class="meta">?&gt;</span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><code>entry</code> 视图显示一个 HTML 表单。视图文件应该保存在 <code>views/site/entry.php</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">widgets</span>\<span class="title">ActiveForm</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> $form = ActiveForm::begin(); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?</span>= $form-&gt;field($model, <span class="string">'name'</span>) <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?</span>= $form-&gt;field($model, <span class="string">'email'</span>) <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;div class="form-group"&gt;</span><br><span class="line">        <span class="meta">&lt;?</span>= Html::submitButton(<span class="string">'Submit'</span>, [<span class="string">'class'</span> =&gt; <span class="string">'btn btn-primary'</span>]) <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> ActiveForm::end(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="尝试下"><a href="#尝试下" class="headerlink" title="尝试下"></a>尝试下</h3><p>用浏览器访问下面的 URL 看它能否工作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hostname/index.php?r=site/entry</span></span><br></pre></td></tr></table></figure><h2 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h2><p>这个章节，你将会掌握四件事：</p><ol><li>配置一个数据库连接</li><li>定义一个活动记录类</li><li>使用活动记录从数据库中查询数据</li><li>以分页方式在视图中显示数据</li></ol><h3 id="准备数据库"><a href="#准备数据库" class="headerlink" title="准备数据库"></a>准备数据库</h3><p>首先创建一个名为 <code>yii2</code> 的数据库，应用将从这个数据库中读取数据。</p><p>然后在数据库中创建一个名为 <code>country</code> 的表并插入简单的数据。可以执行下面的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `country` (</span><br><span class="line">  `code` CHAR(2) NOT NULL PRIMARY KEY,</span><br><span class="line">  `name` CHAR(52) NOT NULL,</span><br><span class="line">  `population` INT(11) NOT NULL DEFAULT &apos;0&apos;</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `country` VALUES (&apos;AU&apos;,&apos;Australia&apos;,18886000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;BR&apos;,&apos;Brazil&apos;,170115000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;CA&apos;,&apos;Canada&apos;,1147000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;CN&apos;,&apos;China&apos;,1277558000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;DE&apos;,&apos;Germany&apos;,82164700);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;FR&apos;,&apos;France&apos;,59225700);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;GB&apos;,&apos;United Kingdom&apos;,59623400);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;IN&apos;,&apos;India&apos;,1013662000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;RU&apos;,&apos;Russia&apos;,146934000);</span><br><span class="line">INSERT INTO `country` VALUES (&apos;US&apos;,&apos;United States&apos;,278357000);</span><br></pre></td></tr></table></figure><p>此时便有了一个名为 <code>yii2</code> 的数据库，在这个数据库中有一个包含三个字段的数据表 <code>country</code>，表中有十行数据。</p><h3 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h3><p>开始之前，请确保你已经安装了 PHP PDO 扩展和你所使用的数据库的 PDO 驱动（例如 MySQL 的 pdo_mysql）。 对于使用关系型数据库来讲，这是基本要求。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -m <span class="comment">// 查看即可</span></span><br></pre></td></tr></table></figure><p>驱动和扩展安装可用后，打开 <code>config/db.php</code> 修改里面的配置参数对应你的数据库配置。 该文件默认包含这些内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'yii\db\Connection'</span>,</span><br><span class="line">    <span class="string">'dsn'</span> =&gt; <span class="string">'mysql:host=localhost;dbname=yii2'</span>,</span><br><span class="line">    <span class="string">'username'</span> =&gt; <span class="string">'root'</span>,</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>上面配置的数据库连接可以在应用中通过 <code>Yii::$app-&gt;db</code> 表达式访问。</p></blockquote><h3 id="创建活动记录"><a href="#创建活动记录" class="headerlink" title="创建活动记录"></a>创建活动记录</h3><p>创建一个继承自活动记录类的类 <code>Country</code>， 把它放在 <code>models/Country.php</code> 文件，去代表和读取 <code>country</code> 表的数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>Country</code> 类继承自 <code>yii\db\ActiveRecord</code>。你不用在里面写任何代码。 只需要像现在这样，<code>Yii</code> 就能根据类名去猜测对应的数据表名。</p><p>使用 <code>Country</code> 类可以很容易地操作 <code>country</code> 表数据，就像这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">models</span>\<span class="title">Country</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 country 表的所有行并以 name 排序</span></span><br><span class="line">$countries = Country::find()-&gt;orderBy(<span class="string">'name'</span>)-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取主键为 “US” 的行</span></span><br><span class="line">$country = Country::findOne(<span class="string">'US'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 “United States”</span></span><br><span class="line"><span class="keyword">echo</span> $country-&gt;name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 name 为 “U.S.A.” 并在数据库中保存更改</span></span><br><span class="line">$country-&gt;name = <span class="string">'U.S.A.'</span>;</span><br><span class="line">$country-&gt;save();</span><br></pre></td></tr></table></figure><h3 id="创建动作-2"><a href="#创建动作-2" class="headerlink" title="创建动作"></a>创建动作</h3><p>新控制器名为 <code>CountryController</code>，并在其中创建一个 <code>index</code> 操作， 如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">data</span>\<span class="title">Pagination</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">models</span>\<span class="title">Country</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountryController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $query = Country::find();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页</span></span><br><span class="line">        $pagination = <span class="keyword">new</span> Pagination([</span><br><span class="line">            <span class="string">'defaultPageSize'</span> =&gt; <span class="number">5</span>,</span><br><span class="line">            <span class="string">'totalCount'</span> =&gt; $query-&gt;count(),</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        $countries = $query-&gt;orderBy(<span class="string">'name'</span>)</span><br><span class="line">            -&gt;offset($pagination-&gt;offset)</span><br><span class="line">            -&gt;limit($pagination-&gt;limit)</span><br><span class="line">            -&gt;all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 渲染</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'index'</span>, [</span><br><span class="line">            <span class="string">'countries'</span> =&gt; $countries,</span><br><span class="line">            <span class="string">'pagination'</span> =&gt; $pagination,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建视图-2"><a href="#创建视图-2" class="headerlink" title="创建视图"></a>创建视图</h3><p>在 <code>views</code> 目录下先创建一个名为 <code>country</code> 的子目录。 这个目录存储所有由 <code>country</code> 控制器渲染的视图。在 <code>views/country</code> 目录下 创建一个名为 <code>index.php</code> 的视图文件，内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">widgets</span>\<span class="title">LinkPager</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;h1&gt;Countries&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span> ($countries <span class="keyword">as</span> $country): <span class="meta">?&gt;</span></span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        <span class="meta">&lt;?</span>= Html::encode(<span class="string">"&#123;$country-&gt;name&#125; (&#123;$country-&gt;code&#125;)"</span>) <span class="meta">?&gt;</span>:</span><br><span class="line">        <span class="meta">&lt;?</span>= $country-&gt;population <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/li&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>; <span class="meta">?&gt;</span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?</span>= LinkPager::widget([<span class="string">'pagination'</span> =&gt; $pagination]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="试运行-1"><a href="#试运行-1" class="headerlink" title="试运行"></a>试运行</h3><p>浏览器访问下面的 URL 看看能否工作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hostname/index.php?r=country/index</span></span><br></pre></td></tr></table></figure><h2 id="使用-Gii-生成代码"><a href="#使用-Gii-生成代码" class="headerlink" title="使用 Gii 生成代码"></a>使用 Gii 生成代码</h2><p>本章节， 你将学到：</p><ol><li>在你的应用中开启 Gii</li><li>使用 Gii 去生成活动记录类</li><li>使用 Gii 去生成数据表操作的增查改删（CRUD）代码</li><li>自定义 Gii 生成的代码</li></ol><h3 id="开始-Gii"><a href="#开始-Gii" class="headerlink" title="开始 Gii"></a>开始 Gii</h3><p><code>Gii</code> 是 <code>Yii</code> 中的一个模块。 可以通过配置应用的 <code>modules</code> 属性开启它。通常来讲在 <code>config/web.php</code> 文件中会有以下配置代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$config = [ ... ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (YII_ENV_DEV) &#123;</span><br><span class="line">    $config[<span class="string">'bootstrap'</span>][] = <span class="string">'gii'</span>;</span><br><span class="line">    $config[<span class="string">'modules'</span>][<span class="string">'gii'</span>] = [</span><br><span class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\gii\Module'</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段配置表明，如果当前是开发环境， 应用会包含 <code>gii</code> 模块，模块类是 <code>yii\gii\Module</code>。</p><p>如果你检查应用的入口脚本 <code>web/index.php</code>， 将看到这行代码将 <code>YII_ENV_DEV</code> 设为 <code>true</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defined(<span class="string">'YII_ENV'</span>) <span class="keyword">or</span> define(<span class="string">'YII_ENV'</span>, <span class="string">'dev'</span>);</span><br></pre></td></tr></table></figure><p>鉴于这行代码的定义，应用处于开发模式下，按照上面的配置会打开 <code>Gii</code> 模块。你可以直接通过 <code>URL</code> 访问 <code>Gii</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hostname/index.php?r=gii</span></span><br></pre></td></tr></table></figure><blockquote><p>信息： 如果你通过本机以外的机器访问 Gii，请求会被出于安全原因拒绝。 你可以配置 Gii 为其添加允许访问的 IP 地址：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'gii'</span> =&gt; [</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'yii\gii\Module'</span>,</span><br><span class="line">    <span class="string">'allowedIPs'</span> =&gt; [<span class="string">'127.0.0.1'</span>, <span class="string">'::1'</span>, <span class="string">'192.168.0.*'</span>, <span class="string">'192.168.178.20'</span>] <span class="comment">// 按需调整这里</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="生成活动记录类"><a href="#生成活动记录类" class="headerlink" title="生成活动记录类"></a>生成活动记录类</h3><p>选择 <code>“Model Generator”</code>（点击 <code>Gii</code> 首页的链接）去生成活动记录类。并像这样填写表单：</p><ul><li>Table Name: <code>country</code></li><li>Model Class: <code>Country</code></li></ul><p>然后点击 <code>“Preview”</code> 按钮。你会看到 <code>models/Country.php</code> 被列在将要生成的文件列表中。可以点击文件名预览内容。</p><p>如果你已经创建过同样的文件，使用 <code>Gii</code> 会覆写它， 点击文件名旁边的 <code>diff</code> 能查看现有文件与将要 生成的文件的内容区别。</p><p>想要覆写已存在文件，选中 <code>“overwrite”</code> 下的复选框然后点击 <code>“Generator”</code>。如果是新文件，只点击 <code>“Generator”</code> 就好。</p><p>接下来你会看到一个包含已生成文件的说明页面。如果生成过程中覆写过文件， 还会有一条信息说明代码是重新生成覆盖的。</p><blockquote><p>Generating code using template “/Users/caoxl/WWW/Yii2/vendor/yiisoft/yii2-gii/src/generators/model/default”…<br>  overwrote models/Country.php<br>  done!</p></blockquote><h3 id="生成-CRUD-代码"><a href="#生成-CRUD-代码" class="headerlink" title="生成 CRUD 代码"></a>生成 CRUD 代码</h3><p><code>CRUD</code> 代表增，查，改，删操作，这是绝大多数 <code>Web</code> 站点常用的数据处理方式。选择 <code>Gii</code> 中的 <code>“CRUD Generator”</code> （点击 <code>Gii</code> 首页的链接）去创建 <code>CRUD</code> 功能。本例 <code>“country”</code> 中需要这样填写表单：</p><ul><li>Model Class: <code>app\models\Country</code></li><li>Search Model Class: <code>app\models\CountrySearch</code></li><li>Controller Class: <code>app\controllers\CountryController</code></li></ul><p>如果你之前创建过 <code>controllers/CountryController.php</code> 和 <code>views/country/index.php</code> 文件（在指南的使用数据库章节）， 选中 <code>“overwrite”</code> 下的复选框覆写它们（之前的文件没能全部支持 <code>CRUD</code>）。</p><blockquote><p>Generating code using template “/Users/caoxl/WWW/Yii2/vendor/yiisoft/yii2-gii/src/generators/crud/default”…<br>  overwrote controllers/CountryController.php<br>  generated models/CountrySearch.php<br>  generated views/country/_form.php<br>  generated views/country/_search.php<br>  generated views/country/create.php<br>  overwrote views/country/index.php<br>  generated views/country/update.php<br>  generated views/country/view.php<br>  done!</p></blockquote><h3 id="试运行-2"><a href="#试运行-2" class="headerlink" title="试运行"></a>试运行</h3><p>用浏览器访问下面的 <code>URL</code> 查看生成代码的运行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hostname/index.php?r=country/index</span></span><br></pre></td></tr></table></figure><p>下面列出由 <code>Gii</code> 生成的文件，以便你研习功能和实现， 或修改它们。</p><ul><li>控制器：<code>controllers/CountryController.php</code></li><li>模型：<code>models/Country.php</code> 和 <code>models/CountrySearch.php</code></li><li>视图：<code>views/country/*.php</code></li></ul><h2 id="应用结构-1"><a href="#应用结构-1" class="headerlink" title="应用结构"></a>应用结构</h2><h3 id="入口脚本"><a href="#入口脚本" class="headerlink" title="入口脚本"></a>入口脚本</h3><p>入口脚本主要完成以下工作：</p><ul><li>定义全局常量；</li><li>注册 <code>Composer</code> 自动加载器；</li><li>包含 <code>Yii</code> 类文件；</li><li>加载应用配置；</li><li>创建一个应用实例并配置;</li><li>调用 <code>yii\base\Application::run()</code> 来处理请求。</li></ul><h4 id="Web-应用"><a href="#Web-应用" class="headerlink" title="Web 应用"></a>Web 应用</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">defined(<span class="string">'YII_DEBUG'</span>) <span class="keyword">or</span> define(<span class="string">'YII_DEBUG'</span>, <span class="keyword">true</span>);</span><br><span class="line">defined(<span class="string">'YII_ENV'</span>) <span class="keyword">or</span> define(<span class="string">'YII_ENV'</span>, <span class="string">'dev'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 Composer 自动加载器</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含 Yii 类文件</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../vendor/yiisoft/yii2/Yii.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载应用配置</span></span><br><span class="line">$config = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../config/web.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建、配置、运行一个应用</span></span><br><span class="line">(<span class="keyword">new</span> yii\web\Application($config))-&gt;run();</span><br></pre></td></tr></table></figure><ul><li><p>当运行 <code>入口脚本</code> 处理请求时， 应用主体会经历以下生命周期:</p></li><li><ol><li>入口脚本加载应用主体配置数组。</li></ol></li><li><ol start="2"><li>入口脚本创建一个应用主体实例：</li></ol><ul><li>调用 <code>preInit()</code> 配置几个高级别应用主体属性， 比如 <code>basePath</code>。</li><li>注册 <code>error handler</code> 错误处理方法。</li><li>配置应用主体属性。</li><li>调用 <code>init()</code> 初始化，该函数会调用 <code>bootstrap()</code> 运行引导启动组件。</li></ul></li><li><ol start="3"><li>入口脚本调用 <code>yii\base\Application::run()</code> 运行应用主体:</li></ol><ul><li>触发 <code>EVENT_BEFORE_REQUEST</code> 事件。</li><li>处理请求：解析请求 路由 和相关参数； 创建路由指定的模块、控制器和动作对应的类，并运行动作。</li><li>触发 <code>EVENT_AFTER_REQUEST</code> 事件。</li><li>发送响应到终端用户。</li></ul></li><li><ol start="4"><li>入口脚本接收应用主体传来的退出状态并完成请求的处理。</li></ol></li></ul><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>过滤器是 控制器动作 执行之前或之后执行的对象。</p><h4 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h4><p>过滤器本质上是一类特殊的 <code>行为</code>， 所以<code>使用过滤器</code>和 <code>使用行为</code>一样。 可以在控制器类中覆盖它的 <code>behaviors()</code> 方法来声明过滤器，如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\filters\HttpCache'</span>,</span><br><span class="line">            <span class="string">'only'</span>  =&gt; [<span class="string">'index'</span>, <span class="string">'view'</span>],</span><br><span class="line">            <span class="string">'lastModified'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($action, $params)</span> </span>&#123;</span><br><span class="line">                $q = <span class="keyword">new</span> \yii\db\Query();</span><br><span class="line">                <span class="keyword">return</span> $q-&gt;from(<span class="string">'user'</span>)-&gt;max(<span class="string">'updated_at'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个动作有多个过滤器时，根据以下规则先后执行：</p><ul><li>预过滤<ul><li>按顺序执行应用主体中 <code>behaviors()</code> 列出的过滤器。</li><li>按顺序执行模块中 <code>behaviors()</code> 列出的过滤器。</li><li>按顺序执行控制器中 <code>behaviors()</code> 列出的过滤器。</li><li>如果任意过滤器终止动作执行， 后面的过滤器（包括预过滤和后过滤）不再执行。</li></ul></li><li>成功通过预过滤后执行动作。</li><li>后过滤<ul><li>倒序执行控制器中 <code>behaviors()</code> 列出的过滤器。</li><li>倒序执行模块中 <code>behaviors()</code> 列出的过滤器。</li><li>倒序执行应用主体中 <code>behaviors()</code> 列出的过滤器。</li></ul></li></ul><h4 id="创建过滤器"><a href="#创建过滤器" class="headerlink" title="创建过滤器"></a>创建过滤器</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">components</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">ActionFilter</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionTimeFilter</span> <span class="keyword">extends</span> <span class="title">ActionFilter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_startTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeAction</span><span class="params">($action)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_startTime = microtime(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::beforeAction($action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterAction</span><span class="params">($action, $result)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $time = microtime(<span class="keyword">true</span>) - <span class="keyword">$this</span>-&gt;_startTime;</span><br><span class="line">        Yii::debug(<span class="string">"Action '&#123;$action-&gt;uniqueId&#125;' spent $time second."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::afterAction($action, $result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="核心扩展"><a href="#核心扩展" class="headerlink" title="核心扩展"></a>核心扩展</h4><ul><li><code>yiisoft/yii2-apidoc</code>： 提供了一个可扩展的、高效的 API 文档生成器。核心框架的 API 文档也是用它生成的。</li><li><code>yiisoft/yii2-authclient</code>： 提供了一套常用的认证客户端，例如 Facebook OAuth2 客户端、GitHub OAuth2 客户端。</li><li><code>yiisoft/yii2-bootstrap</code>： 提供了一套挂件，封装了 Bootstrap 的组件和插件。</li><li><code>yiisoft/yii2-codeception</code>： 提供了基于 Codeception 的测试支持。</li><li><code>yiisoft/yii2-debug</code>： 提供了对 Yii 应用的调试支持。当使用该扩展是， 在每个页面的底部将显示一个调试工具条。 该扩展还提供了一个独立的页面，以显示更详细的调试信息。</li><li><code>yiisoft/yii2-elasticsearch</code>： 提供对 Elasticsearch 的使用支持。它包含基本的查询/搜索支持， 并实现了 Active Record 模式让你可以将活动记录 存储在 Elasticsearch 中。</li><li><code>yiisoft/yii2-faker</code>： 提供了使用 Faker 的支持，为你生成模拟数据。</li><li><code>yiisoft/yii2-gii</code>： 提供了一个基于页面的代码生成器，具有高可扩展性，并能用来快速生成模型、 表单、模块、CRUD 等。</li><li><code>yiisoft/yii2-httpclient</code>： 提供 HTTP 客户端。</li><li><code>yiisoft/yii2-imagine</code>： 提供了基于 Imagine 的常用图像处理功能。</li><li><code>yiisoft/yii2-jui</code>： 提供了一套封装 JQuery UI 的挂件以及它们的交互。</li><li><code>yiisoft/yii2-mongodb</code>： 提供了对 MongoDB 的使用支持。它包含基本 的查询、活动记录、数据迁移、缓存、代码生成等特性。</li><li><code>yiisoft/yii2-queue</code>： 通过队列异步提供运行任务的支持。 它支持基于 DB，Redis，RabbitMQ，AMQP，Beanstalk 和 Gearman 的队列。</li><li><code>yiisoft/yii2-redis</code>： 提供了对 redis 的使用支持。它包含基本的 查询、活动记录、缓存等特性。</li><li><code>yiisoft/yii2-shell</code>： 提供基于 psysh 的交互式 shell。</li><li><code>yiisoft/yii2-smarty</code>： 提供了一个基于 Smarty 的模板引擎。</li><li><code>yiisoft/yii2-sphinx</code>： 提供了对 Sphinx 的使用支持。它包含基本的 查询、活动记录、代码生成等特性。</li><li><code>yiisoft/yii2-swiftmailer</code>： 提供了基于 swiftmailer 的邮件发送功能。</li><li><code>yiisoft/yii2-twig</code>： 提供了一个基于 Twig 的模板引擎。</li></ul><p>以下官方扩展适用于 Yii 2.1 及以上版本。 您不需要为 Yii 2.0 安装它们，因为它们包含在核心框架中。</p><ul><li><code>yiisoft/yii2-captcha</code>： 提供 CAPTCHA。</li><li><code>yiisoft/yii2-jquery</code>： 为 jQuery 提供支持。</li><li><code>yiisoft/yii2-maskedinput</code>： 提供基于 jQuery Input Mask plugin 的格式化输入小部件。</li><li><code>yiisoft/yii2-mssql</code>： 提供对使用 MSSQL 的支持。</li><li><code>yiisoft/yii2-oracle</code>： 提供对使用 Oracle 的支持。</li><li><code>yiisoft/yii2-rest</code>： 提供对 REST API 的支持。</li></ul><h2 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h2><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h4><p>要获取请求参数，你可以调用 <code>request</code> 组件的 <code>get()</code> 方法和 <code>post()</code> 方法。 他们分别返回 <code>$_GET</code> 和 <code>$_POST</code> 的值。例如，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$request = Yii::$app-&gt;request;</span><br><span class="line"></span><br><span class="line">$get = $request-&gt;get(); </span><br><span class="line"><span class="comment">// 等价于: $get = $_GET;</span></span><br><span class="line"></span><br><span class="line">$id = $request-&gt;get(<span class="string">'id'</span>);   </span><br><span class="line"><span class="comment">// 等价于: $id = isset($_GET['id']) ? $_GET['id'] : null;</span></span><br><span class="line"></span><br><span class="line">$id = $request-&gt;get(<span class="string">'id'</span>, <span class="number">1</span>);   </span><br><span class="line"><span class="comment">// 等价于: $id = isset($_GET['id']) ? $_GET['id'] : 1;</span></span><br><span class="line"></span><br><span class="line">$post = $request-&gt;post(); </span><br><span class="line"><span class="comment">// 等价于: $post = $_POST;</span></span><br><span class="line"></span><br><span class="line">$name = $request-&gt;post(<span class="string">'name'</span>);   </span><br><span class="line"><span class="comment">// 等价于: $name = isset($_POST['name']) ? $_POST['name'] : null;</span></span><br><span class="line"></span><br><span class="line">$name = $request-&gt;post(<span class="string">'name'</span>, <span class="string">''</span>);   </span><br><span class="line"><span class="comment">// 等价于: $name = isset($_POST['name']) ? $_POST['name'] : '';</span></span><br></pre></td></tr></table></figure><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>你可以通过 <code>Yii::$app-&gt;request-&gt;method</code> 表达式来获取当前请求使用的HTTP方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$request = Yii::$app-&gt;request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isAjax) &#123; <span class="comment">/* 该请求是一个 AJAX 请求 */</span> &#125;</span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isGet)  &#123; <span class="comment">/* 请求方法是 GET */</span> &#125;</span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isPost) &#123; <span class="comment">/* 请求方法是 POST */</span> &#125;</span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isPut)  &#123; <span class="comment">/* 请求方法是 PUT */</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="请求URLs"><a href="#请求URLs" class="headerlink" title="请求URLs"></a>请求URLs</h4><p>假设被请求的 <code>URL</code> 是 <code>http://example.com/admin/index.php/product?id=100</code>， 你可以像下面描述的那样获取 <code>URL</code> 的各个部分：</p><ul><li><code>url</code>：返回 <code>/admin/index.php/product?id=100</code>, 此 <code>URL</code> 不包括主机信息部分。</li><li><code>absoluteUrl</code>：返回 <code>http://example.com/admin/index.php/product?id=100</code>, 包含<code>host info</code>的整个URL。</li><li><code>hostInfo</code>：返回 <code>http://example.com</code>, 只有主机信息部分。</li><li><code>pathInfo</code>：返回 <code>/product</code>， 这个是入口脚本之后，问号之前（查询字符串）的部分。</li><li><code>queryString</code>：返回 <code>id=100</code>，问号之后的部分。</li><li><code>baseUrl</code>：返回 <code>/admin</code>，主机信息之后， 入口脚本之前的部分。</li><li><code>scriptUrl</code>：返回 <code>/admin/index.php</code>，没有路径信息和查询字符串部分。</li><li><code>serverName</code>：返回 <code>example.com</code>，URL 中的主机名。</li><li><code>serverPort</code>：返回 <code>80</code>，这是 <code>web</code> 服务中使用的端口。</li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;statusCode = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><p>尽管如此，大多数情况下不需要明确设置状态码， 因为 <code>yii\web\Response::$statusCode</code> 状态码默认为 <code>200</code>， 如果需要指定请求失败，可抛出对应的 <code>HTTP</code> 异常，如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> \yii\web\NotFoundHttpException;</span><br></pre></td></tr></table></figure><h4 id="HTTP-头部"><a href="#HTTP-头部" class="headerlink" title="HTTP 头部"></a>HTTP 头部</h4><p>可在 <code>response</code> 组件中操控 <code>header collection</code> 来发送 <code>HTTP</code> 头部信息， 例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$headers = Yii::$app-&gt;response-&gt;headers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一个 Pragma 头，已存在的Pragma 头不会被覆盖。</span></span><br><span class="line">$headers-&gt;add(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个Pragma 头. 任何已存在的Pragma 头都会被丢弃</span></span><br><span class="line">$headers-&gt;set(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除Pragma 头并返回删除的Pragma 头的值到数组</span></span><br><span class="line">$values = $headers-&gt;remove(<span class="string">'Pragma'</span>);</span><br></pre></td></tr></table></figure><h4 id="响应主体"><a href="#响应主体" class="headerlink" title="响应主体"></a>响应主体</h4><p>如果已有格式化好的主体字符串，可赋值到响应的 <code>yii\web\Response::$content</code> 属性， 例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;content = <span class="string">'hello world!'</span>;</span><br></pre></td></tr></table></figure><h4 id="发送响应"><a href="#发送响应" class="headerlink" title="发送响应"></a>发送响应</h4><p>在 <code>yii\web\Response::send()</code> 方法调用前响应中的内容不会发送给用户， 该方法默认在 <code>yii\base\Application::run()</code> 结尾自动调用，尽管如此，可以明确调用该方法强制立即发送响应。</p><p><code>yii\web\Response::send()</code> 方法使用以下步骤来发送响应：</p><ol><li>触发 <code>yii\web\Response::EVENT_BEFORE_SEND</code> 事件。</li><li>调用 <code>yii\web\Response::prepare()</code> 来格式化 <code>response data</code> 为 <code>response content</code>。</li><li>触发 <code>yii\web\Response::EVENT_AFTER_PREPARE</code> 事件。</li><li>调用 <code>yii\web\Response::sendHeaders()</code> 来发送注册的HTTP头</li><li>调用 <code>yii\web\Response::sendContent()</code> 来发送响应主体内容</li><li>触发 <code>yii\web\Response::EVENT_AFTER_SEND</code> 事件。</li></ol><h3 id="Sessions-和-Cookies"><a href="#Sessions-和-Cookies" class="headerlink" title="Sessions 和 Cookies"></a>Sessions 和 Cookies</h3><h4 id="Sessions"><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h4><h5 id="开启和关闭-Sessions"><a href="#开启和关闭-Sessions" class="headerlink" title="开启和关闭 Sessions"></a>开启和关闭 Sessions</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$session = Yii::$app-&gt;session;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查session是否开启 </span></span><br><span class="line"><span class="keyword">if</span> ($session-&gt;isActive) ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启session</span></span><br><span class="line">$session-&gt;open();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭session</span></span><br><span class="line">$session-&gt;close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁session中所有已注册的数据</span></span><br><span class="line">$session-&gt;destroy();</span><br></pre></td></tr></table></figure><h5 id="访问-Session-数据"><a href="#访问-Session-数据" class="headerlink" title="访问 Session 数据"></a>访问 Session 数据</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$session = Yii::$app-&gt;session;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取session中的变量值，以下用法是相同的：</span></span><br><span class="line">$language = $session-&gt;get(<span class="string">'language'</span>);</span><br><span class="line">$language = $session[<span class="string">'language'</span>];</span><br><span class="line">$language = <span class="keyword">isset</span>($_SESSION[<span class="string">'language'</span>]) ? $_SESSION[<span class="string">'language'</span>] : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个session变量，以下用法是相同的：</span></span><br><span class="line">$session-&gt;set(<span class="string">'language'</span>, <span class="string">'en-US'</span>);</span><br><span class="line">$session[<span class="string">'language'</span>] = <span class="string">'en-US'</span>;</span><br><span class="line">$_SESSION[<span class="string">'language'</span>] = <span class="string">'en-US'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个session变量，以下用法是相同的：</span></span><br><span class="line">$session-&gt;remove(<span class="string">'language'</span>);</span><br><span class="line"><span class="keyword">unset</span>($session[<span class="string">'language'</span>]);</span><br><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">'language'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查session变量是否已存在，以下用法是相同的：</span></span><br><span class="line"><span class="keyword">if</span> ($session-&gt;has(<span class="string">'language'</span>)) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($session[<span class="string">'language'</span>])) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'language'</span>])) ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有session变量，以下用法是相同的：</span></span><br><span class="line"><span class="keyword">foreach</span> ($session <span class="keyword">as</span> $name =&gt; $value) ...</span><br><span class="line"><span class="keyword">foreach</span> ($_SESSION <span class="keyword">as</span> $name =&gt; $value) ...</span><br></pre></td></tr></table></figure><h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><h5 id="读取-Cookies"><a href="#读取-Cookies" class="headerlink" title="读取 Cookies"></a>读取 Cookies</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 "request" 组件中获取 cookie 集合(yii\web\CookieCollection)</span></span><br><span class="line">$cookies = Yii::$app-&gt;request-&gt;cookies;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取名为 "language" cookie 的值，如果不存在，返回默认值 "en"</span></span><br><span class="line">$language = $cookies-&gt;getValue(<span class="string">'language'</span>, <span class="string">'en'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种方式获取名为 "language" cookie 的值</span></span><br><span class="line"><span class="keyword">if</span> (($cookie = $cookies-&gt;get(<span class="string">'language'</span>)) !== <span class="keyword">null</span>) &#123;</span><br><span class="line">    $language = $cookie-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可将 $cookies 当作数组使用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($cookies[<span class="string">'language'</span>])) &#123;</span><br><span class="line">    $language = $cookies[<span class="string">'language'</span>]-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否存在名为 "language" 的 cookie</span></span><br><span class="line"><span class="keyword">if</span> ($cookies-&gt;has(<span class="string">'language'</span>)) ...</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($cookies[<span class="string">'language'</span>])) ...</span><br></pre></td></tr></table></figure><h5 id="发送-Cookies"><a href="#发送-Cookies" class="headerlink" title="发送 Cookies"></a>发送 Cookies</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 "response" 组件中获取 cookie 集合(yii\web\CookieCollection)</span></span><br><span class="line">$cookies = Yii::$app-&gt;response-&gt;cookies;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在要发送的响应中添加一个新的 cookie</span></span><br><span class="line">$cookies-&gt;add(<span class="keyword">new</span> \yii\web\Cookie([</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'language'</span>,</span><br><span class="line">    <span class="string">'value'</span> =&gt; <span class="string">'zh-CN'</span>,</span><br><span class="line">]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个 cookie</span></span><br><span class="line">$cookies-&gt;remove(<span class="string">'language'</span>);</span><br><span class="line"><span class="comment">// 等同于以下删除代码</span></span><br><span class="line"><span class="keyword">unset</span>($cookies[<span class="string">'language'</span>]);</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p><code>Yii</code> 内置了一个 <code>error handler</code> 错误处理器，它使错误处理更方便， <code>Yii错误处理器</code>做以下工作来提升错误处理效果</p><h4 id="使用错误处理器"><a href="#使用错误处理器" class="headerlink" title="使用错误处理器"></a>使用错误处理器</h4><p><code>error handler</code> 注册成一个名称为<code>errorHandler</code>应用组件， 可以在应用配置中配置它类似如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'components'</span> =&gt; [</span><br><span class="line">        <span class="string">'errorHandler'</span> =&gt; [</span><br><span class="line">            <span class="string">'maxSourceLines'</span> =&gt; <span class="number">20</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="日志消息"><a href="#日志消息" class="headerlink" title="日志消息"></a>日志消息</h4><p>记录日志消息就跟调用下面的日志方法一样简单：</p><ul><li><code>Yii::trace()</code>：记录一条消息去跟踪一段代码是怎样运行的。这主要在开发的时候使用。</li><li><code>Yii::info()</code>：记录一条消息来传达一些有用的信息。</li><li><code>Yii::warning()</code>：记录一个警告消息用来指示一些已经发生的意外。</li><li><code>Yii::error()</code>：记录一个致命的错误，这个错误应该尽快被检查。</li></ul><h2 id="Restful-web-服务"><a href="#Restful-web-服务" class="headerlink" title="Restful web 服务"></a>Restful web 服务</h2><h2 id="助手类"><a href="#助手类" class="headerlink" title="助手类"></a>助手类</h2><h3 id="Array-助手-ArrayHelper"><a href="#Array-助手-ArrayHelper" class="headerlink" title="Array 助手(ArrayHelper)"></a>Array 助手(ArrayHelper)</h3><h4 id="获取值（Getting-Values）"><a href="#获取值（Getting-Values）" class="headerlink" title="获取值（Getting Values）"></a>获取值（Getting Values）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value = ArrayHelper::getValue($array, <span class="string">'foo.bar.name'</span>);</span><br></pre></td></tr></table></figure><h4 id="设定值（Setting-values）"><a href="#设定值（Setting-values）" class="headerlink" title="设定值（Setting values）"></a>设定值（Setting values）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$array = [</span><br><span class="line">    <span class="string">'key'</span> =&gt; [</span><br><span class="line">        <span class="string">'in'</span> =&gt; [<span class="string">'k'</span> =&gt; <span class="string">'value'</span>]</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">ArrayHelper::setValue($array, <span class="string">'key.in'</span>, [<span class="string">'arr'</span> =&gt; <span class="string">'val'</span>]);</span><br><span class="line"><span class="comment">// 在 `$array` 中写入值的路径可以被指定为一个数组</span></span><br><span class="line">ArrayHelper::setValue($array, [<span class="string">'key'</span>, <span class="string">'in'</span>], [<span class="string">'arr'</span> =&gt; <span class="string">'val'</span>]);</span><br></pre></td></tr></table></figure><h4 id="检查键名的存在（Checking-Existence-of-Keys）"><a href="#检查键名的存在（Checking-Existence-of-Keys）" class="headerlink" title="检查键名的存在（Checking Existence of Keys）"></a>检查键名的存在（Checking Existence of Keys）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$data1 = [</span><br><span class="line">    <span class="string">'userName'</span> =&gt; <span class="string">'Alex'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$data2 = [</span><br><span class="line">    <span class="string">'username'</span> =&gt; <span class="string">'Carsten'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ArrayHelper::keyExists(<span class="string">'username'</span>, $data1, <span class="keyword">false</span>) || !ArrayHelper::keyExists(<span class="string">'username'</span>, $data2, <span class="keyword">false</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Please provide username."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多维排序（Multidimensional-Sorting）"><a href="#多维排序（Multidimensional-Sorting）" class="headerlink" title="多维排序（Multidimensional Sorting）"></a>多维排序（Multidimensional Sorting）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$data = [</span><br><span class="line">    [<span class="string">'age'</span> =&gt; <span class="number">30</span>, <span class="string">'name'</span> =&gt; <span class="string">'Alexander'</span>],</span><br><span class="line">    [<span class="string">'age'</span> =&gt; <span class="number">30</span>, <span class="string">'name'</span> =&gt; <span class="string">'Brian'</span>],</span><br><span class="line">    [<span class="string">'age'</span> =&gt; <span class="number">19</span>, <span class="string">'name'</span> =&gt; <span class="string">'Barney'</span>],</span><br><span class="line">];</span><br><span class="line">ArrayHelper::multisort($data, [<span class="string">'age'</span>, <span class="string">'name'</span>], [SORT_ASC, SORT_DESC]);</span><br></pre></td></tr></table></figure><h4 id="对象转换为数组（Converting-Objects-to-Arrays）"><a href="#对象转换为数组（Converting-Objects-to-Arrays）" class="headerlink" title="对象转换为数组（Converting Objects to Arrays）"></a>对象转换为数组（Converting Objects to Arrays）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$posts = Post::find()-&gt;limit(<span class="number">10</span>)-&gt;all();</span><br><span class="line">$data = ArrayHelper::toArray($posts, [</span><br><span class="line">    <span class="string">'app\models\Post'</span> =&gt; [</span><br><span class="line">        <span class="string">'id'</span>,</span><br><span class="line">        <span class="string">'title'</span>,</span><br><span class="line">        <span class="comment">// the key name in array result =&gt; property name</span></span><br><span class="line">        <span class="string">'createTime'</span> =&gt; <span class="string">'created_at'</span>,</span><br><span class="line">        <span class="comment">// the key name in array result =&gt; anonymous function</span></span><br><span class="line">        <span class="string">'length'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($post)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> strlen($post-&gt;content);</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="Html-助手-Html"><a href="#Html-助手-Html" class="headerlink" title="Html 助手(Html)"></a>Html 助手(Html)</h3><h4 id="生成标签（Generating-Tags）"><a href="#生成标签（Generating-Tags）" class="headerlink" title="生成标签（Generating Tags）"></a>生成标签（Generating Tags）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>= Html::tag(<span class="string">'p'</span>, Html::encode($user-&gt;name), [<span class="string">'class'</span> =&gt; <span class="string">'username'</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="生成-CSS-类和样式（Forming-CSS-Classes-and-Styles）"><a href="#生成-CSS-类和样式（Forming-CSS-Classes-and-Styles）" class="headerlink" title="生成 CSS 类和样式（Forming CSS Classes and Styles）"></a>生成 CSS 类和样式（Forming CSS Classes and Styles）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$options = [<span class="string">'class'</span> =&gt; <span class="string">'btn btn-default'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($type === <span class="string">'success'</span>) &#123;</span><br><span class="line">    Html::removeCssClass($options, <span class="string">'btn-default'</span>);</span><br><span class="line">    Html::addCssClass($options, <span class="string">'btn-success'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> Html::tag(<span class="string">'div'</span>, <span class="string">'Pwede na'</span>, $options);</span><br><span class="line"></span><br><span class="line"><span class="comment">// in case of $type of 'success' it will render</span></span><br></pre></td></tr></table></figure><h4 id="创建表单（Creating-Forms）"><a href="#创建表单（Creating-Forms）" class="headerlink" title="创建表单（Creating Forms）"></a>创建表单（Creating Forms）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>= Html::beginForm([<span class="string">'order/update'</span>, <span class="string">'id'</span> =&gt; $id], <span class="string">'post'</span>, [<span class="string">'enctype'</span> =&gt; <span class="string">'multipart/form-data'</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Url-助手-Url"><a href="#Url-助手-Url" class="headerlink" title="Url 助手(Url)"></a>Url 助手(Url)</h3><h4 id="获得通用-URL（Getting-Common-URLs）"><a href="#获得通用-URL（Getting-Common-URLs）" class="headerlink" title="获得通用 URL（Getting Common URLs）"></a>获得通用 URL（Getting Common URLs）</h4><p>有两种获取通用 <code>URLS</code> 的方法 ：当前请求的 <code>home URL</code> 和 <code>base URL</code> 。 </p><ul><li>为了获取 <code>home URL</code> ，使用如下代码：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$relativeHomeUrl = Url::home();</span><br><span class="line">$absoluteHomeUrl = Url::home(<span class="keyword">true</span>);</span><br><span class="line">$httpsAbsoluteHomeUrl = Url::home(<span class="string">'https'</span>);</span><br></pre></td></tr></table></figure><ul><li>如下代码可以获得当前请求的 <code>base URL</code>：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$relativeBaseUrl = Url::base();</span><br><span class="line">$absoluteBaseUrl = Url::base(<span class="keyword">true</span>);</span><br><span class="line">$httpsAbsoluteBaseUrl = Url::base(<span class="string">'https'</span>);</span><br></pre></td></tr></table></figure><h4 id="创建-URLs（Creating-URLs）"><a href="#创建-URLs（Creating-URLs）" class="headerlink" title="创建 URLs（Creating URLs）"></a>创建 URLs（Creating URLs）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$url = Url::toRoute([<span class="string">'product/view'</span>, <span class="string">'id'</span> =&gt; <span class="number">42</span>]);</span><br></pre></td></tr></table></figure><h4 id="记住-URLs（Remember-URLs）"><a href="#记住-URLs（Remember-URLs）" class="headerlink" title="记住 URLs（Remember URLs）"></a>记住 URLs（Remember URLs）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记住当前 URL </span></span><br><span class="line">Url::remember();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记住指定的 URL。参数格式请参阅 Url::to()。</span></span><br><span class="line">Url::remember([<span class="string">'product/view'</span>, <span class="string">'id'</span> =&gt; <span class="number">42</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记住用给定名称指定的 URL</span></span><br><span class="line">Url::remember([<span class="string">'product/view'</span>, <span class="string">'id'</span> =&gt; <span class="number">42</span>], <span class="string">'product'</span>);</span><br></pre></td></tr></table></figure><h4 id="检查相对-URLs（Checking-Relative-URLs）"><a href="#检查相对-URLs（Checking-Relative-URLs）" class="headerlink" title="检查相对 URLs（Checking Relative URLs）"></a>检查相对 URLs（Checking Relative URLs）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$isRelative = Url::isRelative(<span class="string">'test/it'</span>);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.yiichina.com/doc/guide/2.0" target="_blank" rel="noopener">Yii 2.0 权威指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Yii2 Yes It is&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架相关" scheme="http://blog.caoxl.com/categories/%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Yii2" scheme="http://blog.caoxl.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>面试/笔试实战 II</title>
    <link href="http://blog.caoxl.com/2019/12/11/Learning-From-Interview-II/"/>
    <id>http://blog.caoxl.com/2019/12/11/Learning-From-Interview-II/</id>
    <published>2019-12-11T10:17:37.000Z</published>
    <updated>2019-12-23T03:34:41.556Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>从面试中学习，从面试中成长。</p></blockquote><a id="more"></a><h2 id="禁用COOKIE后SESSION还能用吗"><a href="#禁用COOKIE后SESSION还能用吗" class="headerlink" title="禁用COOKIE后SESSION还能用吗 ?"></a>禁用COOKIE后SESSION还能用吗 ?</h2><blockquote><p>客户端禁用<code>cookie</code>采用<strong>url重写</strong>的方式 ，<br>也就是将<code>sessionid</code>写在<code>url</code>上，</p></blockquote><h2 id="抓取远程图片到本地，你会用什么函数"><a href="#抓取远程图片到本地，你会用什么函数" class="headerlink" title="抓取远程图片到本地，你会用什么函数 ?"></a>抓取远程图片到本地，你会用什么函数 ?</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file<span class="emphasis">_get_</span>contents($url);</span><br></pre></td></tr></table></figure><h2 id="什么是CGI-什么是FastCGI-php-fpm-FastCGI-Nginx之间是什么关系"><a href="#什么是CGI-什么是FastCGI-php-fpm-FastCGI-Nginx之间是什么关系" class="headerlink" title="什么是CGI? 什么是FastCGI? php-fpm,FastCGI,Nginx之间是什么关系?"></a>什么是CGI? 什么是FastCGI? php-fpm,FastCGI,Nginx之间是什么关系?</h2><blockquote><ul><li><code>CGI</code>: 公共网关接口（Common Gateway Interface，CGI）是Web 服务器运行时外部程序的规范</li><li><code>FastCGI</code>: 快速通用网关接口（Fast Common Gateway Interface／FastCGI）是一种让交互程序与Web服务器通信的协议。FastCGI是早期通用网关接口（CGI）的增强版本。</li><li><code>php-fpm</code>: PHP-FPM(FastCGI Process Manager：FastCGI进程管理器)是一个PHPFastCGI管理器</li></ul></blockquote><ul><li>关系:</li></ul><blockquote><p>用户的请求通过WEB服务器（如<strong>Nginx</strong>）转发给<strong>FastCGI</strong>进程，<strong>FastCGI</strong>进程再调用应用程序进行处理（如<strong>PHP解析器</strong>），应用程序的处理结果如<code>html</code>返回给<strong>FastCGI</strong>，<strong>FastCGI</strong>返回给<strong>Nginx</strong>进行输出。</p></blockquote><h2 id="简述POST和GET传输的最大容量分别是多少"><a href="#简述POST和GET传输的最大容量分别是多少" class="headerlink" title="简述POST和GET传输的最大容量分别是多少?"></a>简述POST和GET传输的最大容量分别是多少?</h2><ul><li>GET</li></ul><blockquote><p><code>get</code> 是通过URL提交数据，因此GET可提交的数据量就跟URL所能达到的最大长度有直接关系。<strong>很多文章都说GET方式提交的数据最多只能是1024字节</strong>，而 实际上，URL不存在参数上限的问题，HTTP协议规范也没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制 是2083字节(2K+35字节)。对于其他浏览器，如FireFox，Netscape等，则没有长度限制，这个时候其限制取决于服务器的操作系统。即 如果url太长，服务器可能会因为安全方面的设置从而拒绝请求或者发生不完整的数据请求。</p></blockquote><ul><li>POST</li></ul><blockquote><p><code>post</code> 理论上讲是没有大小限制的，HTTP协议规范也没有进行大小限制，但实际上<strong>post所能传递的数据量大小取决于服务器的设置和内存大小</strong>。因为我们一般 post的数据量很少超过MB的，所以我们很少能感觉的到post的数据量限制，但实际中如果你上传文件的过程中可能会发现这样一个问题，即上传个头比较 大的文件到服务器时候，可能上传不上去，以php语言来说，查原因的时候你也许会看到有说PHP上传文件涉及到的参数PHP默认的上传有限定，一般这个值是<strong>2MB</strong>，更改这个值需要更改<code>php.conf</code>的<code>post_max_size</code>这个值。</p></blockquote><h2 id="列出能够使HTML和PHP分离开使用的模板"><a href="#列出能够使HTML和PHP分离开使用的模板" class="headerlink" title="列出能够使HTML和PHP分离开使用的模板"></a>列出能够使HTML和PHP分离开使用的模板</h2><blockquote><p>有<code>Smarty</code>, <code>Dwoo</code>, <code>tinyButStrong</code>, <code>phemplate</code>, <code>XTemplate</code>等模板引擎。</p></blockquote><h2 id="请写一个函数，实现以下功能：-字符串”open-door”转换成”OpenDoor”"><a href="#请写一个函数，实现以下功能：-字符串”open-door”转换成”OpenDoor”" class="headerlink" title="请写一个函数，实现以下功能： 字符串”open_door”转换成”OpenDoor”."></a>请写一个函数，实现以下功能： 字符串”open_door”转换成”OpenDoor”.</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span><span class="params">($string = <span class="string">'open_door'</span>)</span> </span>&#123;</span><br><span class="line">    $array = explode(<span class="string">'_'</span>, $string);</span><br><span class="line">    array_walk($array, <span class="function"><span class="keyword">function</span> <span class="params">(&amp;$v)</span> </span>&#123;</span><br><span class="line">        $v = ucwords($v);</span><br><span class="line">    &#125;);</span><br><span class="line">    $string = implode(<span class="string">''</span>, $array);</span><br><span class="line"></span><br><span class="line">    var_dump($string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">convert();</span><br></pre></td></tr></table></figure><h2 id="echo-print-print-r-的区别"><a href="#echo-print-print-r-的区别" class="headerlink" title="echo(), print(), print_r()的区别?"></a>echo(), print(), print_r()的区别?</h2><ul><li><code>echo()</code>是语言结构(language construct)，而并不是真正的函数，没有返回值。</li><li><code>pirnt()</code>实际上也不是函数（而是语言结构），所以可以不用圆括号包围参数列表。</li><li><code>print_r()</code>可以把字符串和数字简单地打印出来，而数组则以括起来的键和值得列表形式显示，并以Array开头。</li><li><code>printf()</code>函数返回一个格式化后的字符串。</li></ul><h2 id="isset-empty-is-null的区别"><a href="#isset-empty-is-null的区别" class="headerlink" title="isset, empty(), is_null的区别?"></a>isset, empty(), is_null的区别?</h2><ul><li><code>isset</code> 判断变量是否已存在，如果变量存在则返回 TRUE，否则返回 FALSE。</li><li><code>empty</code> 判断变量是否为空，如果变量是非空 或非零 的值，则 empty() 返回 FALSE。</li><li><code>is_null</code> 判断变量是否为NULL</li></ul><h2 id="FILE表示什么意思"><a href="#FILE表示什么意思" class="headerlink" title="FILE表示什么意思?"></a><strong>FILE</strong>表示什么意思?</h2><blockquote><ul><li><code>__FILE__</code>      文件的完整路径和文件名。</li><li><code>__LINE__</code>        文件中的当前行号。</li><li><code>__DIR__</code>        文件所在的目录。</li><li><code>__FUNCTION__</code>    函数名称（PHP 4.3.0 新加）。</li><li><code>__CLASS__</code>        类的名称（PHP 4.3.0 新加）。</li><li><code>__TRAIT__</code>        Trait 的名字（PHP 5.4.0 新加）</li><li><code>__METHOD__</code>    类的方法名（PHP 5.0.0 新加）</li><li><code>__NAMESPACE__</code>    当前命名空间的名称（区分大小写）。</li></ul></blockquote><h2 id="如何获取客户端的IP地址"><a href="#如何获取客户端的IP地址" class="headerlink" title="如何获取客户端的IP地址?"></a>如何获取客户端的IP地址?</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getIp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($_SERVER[<span class="string">"HTTP_X_FORWARDED_FOR"</span>] ?? <span class="keyword">false</span>) &#123;</span><br><span class="line">        $ip  = $_SERVER[<span class="string">"HTTP_X_FORWARDED_FOR"</span>];</span><br><span class="line">        $ips = explode(<span class="string">','</span>, $ip);<span class="comment">//阿里cdn</span></span><br><span class="line">        $ip  = $ips[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($_SERVER[<span class="string">"HTTP_CDN_SRC_IP"</span>] ?? <span class="keyword">false</span>) &#123;</span><br><span class="line">        $ip = $_SERVER[<span class="string">"HTTP_CDN_SRC_IP"</span>];</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_CLIENT_IP'</span>)) &#123;</span><br><span class="line">        $ip = getenv(<span class="string">'HTTP_CLIENT_IP'</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED'</span>)) &#123;</span><br><span class="line">        $ip = getenv(<span class="string">'HTTP_X_FORWARDED'</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>)) &#123;</span><br><span class="line">        $ip = getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED'</span>)) &#123;</span><br><span class="line">        $ip = getenv(<span class="string">'HTTP_FORWARDED'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    $ip = str_replace(<span class="keyword">array</span>(<span class="string">'::ffff:'</span>, <span class="string">'['</span>, <span class="string">']'</span>), <span class="keyword">array</span>(<span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>), $ip);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写出使用header函数跳转页面的语句"><a href="#写出使用header函数跳转页面的语句" class="headerlink" title="写出使用header函数跳转页面的语句"></a>写出使用header函数跳转页面的语句</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Location:http://blog.caoxl.com"</span>);</span><br></pre></td></tr></table></figure><h2 id="写出将一个数组里的空值去掉的函数"><a href="#写出将一个数组里的空值去掉的函数" class="headerlink" title="写出将一个数组里的空值去掉的函数?"></a>写出将一个数组里的空值去掉的函数?</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_filter();</span><br></pre></td></tr></table></figure><h2 id="什么事CSRF攻击-XSS攻击-如何防范"><a href="#什么事CSRF攻击-XSS攻击-如何防范" class="headerlink" title="什么事CSRF攻击? XSS攻击? 如何防范?"></a>什么事CSRF攻击? XSS攻击? 如何防范?</h2><h3 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h3><blockquote><p><strong>跨站请求伪造</strong>（英語：<code>Cross-site request forgery</code>），也被称为<code>one-click attack</code> 或者 <code>session riding</code>，通常缩写为 <strong>CSRF</strong> 或者<strong>XSRF</strong>， 是<strong>一种挟制用户在当前已登录的Web应用程序上执行非本意的操作</strong>的攻击方法。</p></blockquote><ul><li><strong>防范</strong>:</li></ul><ol><li><code>Cookie Hashing</code>(所有表单都包含同一个伪随机值)：</li><li>验证码</li><li><code>One-Time Tokens</code>(不同的表单包含一个不同的伪随机值)</li><li>请求时附带验证信息，比如验证码或者<code>token</code></li></ol><h3 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h3><blockquote><p>人们经常将跨站脚本攻击（<code>Cross Site Scripting</code>）缩写为CSS，但这会与层叠样式表（<code>Cascading Style Sheets，CSS</code>）的缩写混淆。因此，有人将跨站脚本攻击缩写为<strong>XSS</strong>。<br><strong>XSS</strong>攻击通常指的是<strong>通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序</strong>。 这些恶意网页程序通常是<code>JavaScript</code>，但实际上也可以包括<code>Java</code>、 <code>VBScript</code>、<code>ActiveX</code>、 <code>Flash</code> 或者甚至是普通的<code>HTML</code>。</p></blockquote><ul><li><strong>防范</strong>:</li></ul><ol><li><code>Content Security Policy(CSP)</code></li><li>输入内容长度控制</li><li><code>HTTP-only Cookie</code>: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。</li><li>验证码：防止脚本冒充用户提交危险操作。</li></ol><h2 id="简单描述MySQL中，索引，主键，唯一索引，联合索引的区别，对数据的性能有什么影响"><a href="#简单描述MySQL中，索引，主键，唯一索引，联合索引的区别，对数据的性能有什么影响" class="headerlink" title="简单描述MySQL中，索引，主键，唯一索引，联合索引的区别，对数据的性能有什么影响?"></a>简单描述MySQL中，索引，主键，唯一索引，联合索引的区别，对数据的性能有什么影响?</h2><ul><li>索引的遵循原则:<ul><li>1、最左侧原则，表的最左侧的一列，往往数据不会发生改变，不影响其他列的数据；</li><li>2、命名短小原则，索引命名过长会使索引文件变大，损耗内存。</li></ul></li></ul><ul><li><p>普通索引（由关键字KEY或INDEX定义得到索引）：加快数据的查询速度</p></li><li><p>唯一索引（由关键字UNIQUE把它定义为唯一索引）：保证数据记录的唯一性</p></li><li><p>主键：一种特殊的唯一索引，在一张表中只能定义一个主键索引，用来标识唯一一条数据，用PRIMARY KEY创建。</p></li><li><p>联合索引：索引可以覆盖多个数据列，如像INDEX(columnA, columnB)索引，这就是联合索引。</p></li></ul><blockquote><p>索引可以极大的提高查询访问速度，但是会降低插入，删除，更新表的速度，<strong>因为在执行写操作的时候还要操作索引文件</strong>。</p></blockquote><h2 id="简述在MySQL数据库中MyISAM和InnoDB的区别"><a href="#简述在MySQL数据库中MyISAM和InnoDB的区别" class="headerlink" title="简述在MySQL数据库中MyISAM和InnoDB的区别?"></a>简述在MySQL数据库中MyISAM和InnoDB的区别?</h2><ul><li><ol><li>构成上，<code>MyISAM</code>的表在磁盘中有三个文件组成，分别是<strong>表定义文件</strong>(<code>.frm</code>)、<strong>数据文件</strong>(<code>.MYD</code>)、<strong>索引文件</strong>(<code>.MYI</code>)，而<code>InnoDB</code>的表由<strong>表定义文件</strong>(<code>.frm</code>)、表空间数据和日志文件组成。</li></ol></li><li><ol start="2"><li>安全方面，<code>MyISAM</code>强调的是性能，其查询查询效率较高，但<strong>不支持事务和外键</strong>等安全性方面的功能，而<code>InnoDB</code><strong>支持事务和外键</strong>等高级功能，查询效率稍低。</li></ol></li><li><ol start="3"><li>对锁的支持，<code>MyISAM</code>支持表锁，而<code>InnoDB</code>支持行锁。</li></ol></li></ul><h2 id="Memcache和Redis的读写性能如何-两者优缺点"><a href="#Memcache和Redis的读写性能如何-两者优缺点" class="headerlink" title="Memcache和Redis的读写性能如何?  两者优缺点?"></a>Memcache和Redis的读写性能如何?  两者优缺点?</h2><ul><li>读写性能</li></ul><blockquote><p>memcache更加快速，在读取性能上比 Redis 快，缺点是仅支持字符串。<br>Redis支持丰富的数据结构类型，字符串，散列（哈希），集合，有序集合，还支持订阅发布，地理位置等等。<br>实际运用中可以redis，memcache结合，memcache可作为session存储的方式，session都是KV类型键值对</p></blockquote><ul><li>优缺点</li></ul><blockquote><p>Redis 还可以同时使用 <code>AOF</code> 持久化和 <code>RDB</code> 持久化。 在这种情况下， <strong>当 Redis 重启时， 它会优先使用 AOF 文件来还原数据集， 因为 AOF 文件保存的数据集通常比 RDB 文件所保存的数据集更完整。</strong></p></blockquote><h2 id="请写一个函数验证电子邮件的格式是否正确"><a href="#请写一个函数验证电子邮件的格式是否正确" class="headerlink" title="请写一个函数验证电子邮件的格式是否正确?"></a>请写一个函数验证电子邮件的格式是否正确?</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$email = <span class="string">'code08091@163.com'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1: 原生自带验证</span></span><br><span class="line">$is_email = filter_var($email, FILTER_VALIDATE_EMAIL);</span><br><span class="line"></span><br><span class="line">var_dump($is_email);  <span class="comment">// true则返回email, false则返回false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2: 正则验证</span></span><br><span class="line">$regex  = <span class="string">'/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$/'</span>;</span><br><span class="line">$is_email = preg_match($regex, $email);</span><br><span class="line"></span><br><span class="line">var_dump($is_email);</span><br></pre></td></tr></table></figure><ul><li>封装一下</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span><span class="params">($email)</span> </span>&#123;</span><br><span class="line">    $is_email = filter_var($email, FILTER_VALIDATE_EMAIL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($is_email) &#123;</span><br><span class="line">        $regex  = <span class="string">'/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$/'</span>;</span><br><span class="line">        $is_email = preg_match($regex, $email);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $is_email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(checkEmail(<span class="string">'code08091@163.com'</span>));</span><br></pre></td></tr></table></figure><h2 id="使用正则表达式去除其中的所有JS脚本"><a href="#使用正则表达式去除其中的所有JS脚本" class="headerlink" title="使用正则表达式去除其中的所有JS脚本?"></a>使用正则表达式去除其中的所有JS脚本?</h2><h2 id="写一个函数，能够遍历一个文件夹下的所有文件和子文件夹。"><a href="#写一个函数，能够遍历一个文件夹下的所有文件和子文件夹。" class="headerlink" title="写一个函数，能够遍历一个文件夹下的所有文件和子文件夹。"></a>写一个函数，能够遍历一个文件夹下的所有文件和子文件夹。</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scan_dir</span><span class="params">($dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $files = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">if</span> ( $handle = opendir($dir) ) &#123;</span><br><span class="line">        <span class="keyword">while</span> ( ($file = readdir($handle)) !== <span class="keyword">false</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( $file != <span class="string">".."</span> &amp;&amp; $file != <span class="string">"."</span> ) &#123;</span><br><span class="line">                <span class="keyword">if</span> ( is_dir($dir . <span class="string">"/"</span> . $file) ) &#123;</span><br><span class="line">                    $files[$file] = scandir($dir . <span class="string">"/"</span> . $file);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    $files[] = $file;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        closedir($handle);</span><br><span class="line">        <span class="keyword">return</span> $files;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$files = scan_dir(<span class="string">'F:\Code\Hexo'</span>);</span><br><span class="line"></span><br><span class="line">print_r($files);</span><br></pre></td></tr></table></figure><h2 id="函数内部static和global关键字的作用"><a href="#函数内部static和global关键字的作用" class="headerlink" title="函数内部static和global关键字的作用"></a>函数内部static和global关键字的作用</h2><blockquote><p><code>static</code> 是静态变量,在局部函数中存在且只初始化一次,使用过后再次使用会使用上次执行的结果; 作为计数，程序内部缓存，单例模式中都有用到。<br><code>global</code> 关键字,引用全局变量，wordpress中大量用到，如面向过程开发。<br><code>static 静态方法</code>,是类的成员方法,但不需要实例化类可直接使用<br><code>$GLOBAL</code> 在函数内使用具有全局作用域的变量,如<code>$GLOBAL[&#39;a&#39;]</code></p></blockquote><h2 id="子类重写父类的Protected方法有什么限制-或者说有什么要遵守的规则"><a href="#子类重写父类的Protected方法有什么限制-或者说有什么要遵守的规则" class="headerlink" title="子类重写父类的Protected方法有什么限制? 或者说有什么要遵守的规则?"></a>子类重写父类的Protected方法有什么限制? 或者说有什么要遵守的规则?</h2><p>用例子说明，以 Laravel 框架中的控制器作为说明</p><ol><li><code>final</code> 修饰的类方法不可被子类重写</li><li>PHP是否重写父类方法只会根据方法名是否一致判断 (5.3以后重写父类方法参数个数必须一致)</li><li>重写时访问级别只可以等于或者宽松于父类 不可提升访问级别</li></ol><h2 id="PHP文件末尾是否应该加-gt-结束符号，-为什么"><a href="#PHP文件末尾是否应该加-gt-结束符号，-为什么" class="headerlink" title="PHP文件末尾是否应该加 ? &gt;结束符号， 为什么?"></a>PHP文件末尾是否应该加 <code>? &gt;</code>结束符号， 为什么?</h2><ul><li>不应该</li></ul><blockquote><ul><li>主要防止 <code>include</code>，<code>require</code> 引用文件，把文件末尾可能的回车和空格等字符引用进来。</li><li>还有一些函数比如 <code>session_start()</code> 必须在没有任何输出之前调用，就会造成不是期望的结果。</li><li>PHP文件的编码不包含BOM的 <code>UTF8</code>，这也是<code>PSR-2</code>中的规范，<strong>纯PHP代码文件必须省略最后的 ?&gt; 结束标签</strong>。</li></ul></blockquote><h2 id="PHP开源框架CI，ThinkPHP，Laravel的优缺点以及选型依据。"><a href="#PHP开源框架CI，ThinkPHP，Laravel的优缺点以及选型依据。" class="headerlink" title="PHP开源框架CI，ThinkPHP，Laravel的优缺点以及选型依据。"></a>PHP开源框架CI，ThinkPHP，Laravel的优缺点以及选型依据。</h2><ul><li><code>CI</code>非常轻量级，是一个简单的MVC框架，性能也很快。</li><li><code>ThinkPHP</code>国内使用比较多，优点是文档非常多，各种问题解决方案比较多，缺点是代码不够规范，理念落后。</li><li><code>Laravel</code> 是一个现代化的PHP开发框架，代码优雅，使用 <code>composer</code> 方式扩展功能，社区活跃，缺点是比较重，比较适合做后台管理或者应用型WEB系统。</li></ul><h2 id="Ajax中如何执行跨域访问-同子域的情况如何处理-不同子域的情况如何处理"><a href="#Ajax中如何执行跨域访问-同子域的情况如何处理-不同子域的情况如何处理" class="headerlink" title="Ajax中如何执行跨域访问? 同子域的情况如何处理? 不同子域的情况如何处理?"></a>Ajax中如何执行跨域访问? 同子域的情况如何处理? 不同子域的情况如何处理?</h2><blockquote><p>什么是跨域？狭义的理解跨域是指受到浏览器同源策略限制的一类请求，通常我们说的跨域就是指的这一类请求。当协议、域名（包含子域名）、端口号中任意一个不相同时，都属于不同域。不同域之间相互请求资源，就会受到<strong>浏览器的同源策略限制</strong>。</p></blockquote><ul><li><code>CORS</code></li><li><code>script</code>标签解决跨域</li><li><code>jsonp</code>解决跨域</li></ul><h2 id="文件上传时需要在form中加入enctype-multipart-form-data的目的是什么-使用application-x-www-form-urlencoded不能成功的原因是"><a href="#文件上传时需要在form中加入enctype-multipart-form-data的目的是什么-使用application-x-www-form-urlencoded不能成功的原因是" class="headerlink" title="文件上传时需要在form中加入enctype=multipart/form-data的目的是什么? 使用application/x-www,form-urlencoded不能成功的原因是?"></a>文件上传时需要在form中加入<code>enctype=multipart/form-data</code>的目的是什么? 使用<code>application/x-www</code>,<code>form-urlencoded</code>不能成功的原因是?</h2><p>首先知道enctype这个属性管理的是表单的MIME编码。共有三个值可选：</p><ol><li><code>application/x-www-form-urlencoded</code></li><li><code>multipart/form-data</code></li><li><code>text/plain</code></li></ol><p>其中<code>application/x-www-form-urlencoded</code>是默认值，作用是设置表单传输的编码。</p><p>表单中<code>enctype=&quot;multipart/form-data&quot;</code>的意思，是<strong>设置表单的MIME编码</strong>。默认情况，这个编码格式是<code>application/x-www-form-urlencoded</code>，不能用于文件上传；<br><strong>只有使用了<code>multipart/form-data</code>，才能完整的传递文件数据</strong></p><h2 id="设计一个名为car的类，使其拥有color属性、getColor与setColor方法"><a href="#设计一个名为car的类，使其拥有color属性、getColor与setColor方法" class="headerlink" title="设计一个名为car的类，使其拥有color属性、getColor与setColor方法"></a>设计一个名为car的类，使其拥有color属性、getColor与setColor方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getColor</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $color</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColor</span><span class="params">($color)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请写出3种多服务器共享Session的方案"><a href="#请写出3种多服务器共享Session的方案" class="headerlink" title="请写出3种多服务器共享Session的方案"></a>请写出3种多服务器共享Session的方案</h2><ul><li><ol><li>文件方式</li></ol></li></ul><blockquote><p>这种方式，将文件作为一个map，当新增一个数据的时候，就在文件中增加类似这样的一条数据</p></blockquote><ul><li><ol start="2"><li>cache方式</li></ol></li></ul><blockquote><p>memcache可以做分布式，如果没有这功能，他也不能用来做session同步。他可以把web服务器中的内存组合起来，成为一个”内存池”，不管是哪个服务器产生的sessoin都可以放到这个”内存池”中，其他的都可以使用。<br>redis与memcache一样，都是将数据放在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p></blockquote><ul><li><ol start="3"><li>cookie方式</li></ol></li></ul><blockquote><p>把用户访问页面产生的session放到cookie里面，就是以cookie为中转站。</p></blockquote><ul><li><ol start="4"><li>通过数据库<code>mysql</code>共享<code>session</code></li></ol></li></ul><blockquote><p>采用一台专门的mysql服务器来存储所有的session信息。</p></blockquote><ul><li><ol start="5"><li>通过NFS共享Session</li></ol></li></ul><blockquote><p>选择一台公共的NFS服务器（Network File Server）做共享服务器，所有的Web服务器登陆的时候把session数据写到这台服务器上，那么所有的session数据其实都是保存在这台NFS服务器上的，不论用户访问哪台Web服务器，都要来这台服务器获取session数据，那么就能够实现共享session数据了。</p></blockquote><h2 id="假设有10道题，如何从中随机取出5道题"><a href="#假设有10道题，如何从中随机取出5道题" class="headerlink" title="假设有10道题，如何从中随机取出5道题?"></a>假设有10道题，如何从中随机取出5道题?</h2><blockquote><p>rand(), random_bytes(), mt_rand()</p></blockquote><h2 id="谈谈抢红包这种互动活动实现的技术难点及解决方案"><a href="#谈谈抢红包这种互动活动实现的技术难点及解决方案" class="headerlink" title="谈谈抢红包这种互动活动实现的技术难点及解决方案"></a>谈谈抢红包这种互动活动实现的技术难点及解决方案</h2><blockquote><p>高并发,大流量,减少库存问题,锁问题,前后端缓存问题,队列问题</p></blockquote><h2 id="如何保证同时向同一个文件内写入内容的完整性以及准确性"><a href="#如何保证同时向同一个文件内写入内容的完整性以及准确性" class="headerlink" title="如何保证同时向同一个文件内写入内容的完整性以及准确性"></a>如何保证同时向同一个文件内写入内容的完整性以及准确性</h2><blockquote><p>LOCK_EX (独占锁定)</p></blockquote><ul><li><code>process_1.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚本开始</span></span><br><span class="line">$start_time = microtime();</span><br><span class="line"></span><br><span class="line">$filename = <span class="string">'./process_data.txt'</span>;</span><br><span class="line"></span><br><span class="line">$fp = fopen($filename, <span class="string">'a+'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">100</span>; $i++) &#123;</span><br><span class="line">    fwrite($fp, <span class="string">"process_1:"</span> . $i . <span class="string">"\r\n"</span>);</span><br><span class="line">    usleep(<span class="number">100000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚本结束</span></span><br><span class="line">$end_time = microtime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Process_1 Done for"</span> . ($end_time - $start_time) . <span class="string">'seconds'</span>;</span><br></pre></td></tr></table></figure><ul><li><code>process_2.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚本开始</span></span><br><span class="line">$start_time = microtime();</span><br><span class="line"></span><br><span class="line">$filename = <span class="string">'./process_data.txt'</span>;</span><br><span class="line"></span><br><span class="line">$fp = fopen($filename, <span class="string">'a+'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">100</span>; $i++) &#123;</span><br><span class="line">    fwrite($fp, <span class="string">"process_2:"</span> . $i . <span class="string">"\r\n"</span>);</span><br><span class="line">    usleep(<span class="number">100000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚本结束</span></span><br><span class="line">$end_time = microtime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Process_2 Done for "</span> . ($end_time - $start_time) . <span class="string">' seconds'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>多次同时执行，虽然都写了100行，但是<strong>事务1和事务2的数据交错写入</strong>，这并不是我们想要的结果。我们要的是事务完整的执行，此时我们需要有个机制 去保证在第一个事务执行完后再执行第二个。在PHP中，flock函数完成了这一使命。在事物1和事务2的循环前面都加上： <code>flock($fp, LOCK_EX)</code>; 就能 满足我们的需求，将两个事务串行。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚本开始</span></span><br><span class="line">$start_time = microtime();</span><br><span class="line"></span><br><span class="line">$filename = <span class="string">'./process_data.txt'</span>;</span><br><span class="line"></span><br><span class="line">$fp = fopen($filename, <span class="string">'a+'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 独占锁定</span></span><br><span class="line">flock($fp, LOCK_EX);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">100</span>; $i++) &#123;</span><br><span class="line">    fwrite($fp, <span class="string">"process_1:"</span> . $i . <span class="string">"\r\n"</span>);</span><br><span class="line">    usleep(<span class="number">100000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚本结束</span></span><br><span class="line">$end_time = microtime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Process_1 Done for "</span> . ($end_time - $start_time) . <span class="string">' seconds'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>在PHP的<code>fopen</code>函数的实现中，如果我们使用<code>a</code>参数在文件的尾部追加内容，其调用open函数中<code>oflag</code>参数为 <code>O_CREAT</code>|<code>O_APPEND</code>，即我们使用追加操作 不用担心并发追加写入的问题</p></blockquote><h2 id="请简述cookie与session的区别和联系"><a href="#请简述cookie与session的区别和联系" class="headerlink" title="请简述cookie与session的区别和联系"></a>请简述cookie与session的区别和联系</h2><ul><li>区别</li></ul><blockquote><p><strong>cookie保存在客户端</strong>，未设置存储时间的cookie为会话cookie保存在浏览器的进程开辟的内存中，当浏览器关闭后会话cookie也会被删除；设置了存储时间的cookie保存在用户设备的磁盘中直到过期。<br><strong>session保存在服务器端</strong>，存储在IIS的进程开辟的内存中。</p></blockquote><ul><li>联系</li></ul><blockquote><p>当服务器端生成一个<code>session</code>时就会向客户端发送一个<code>cookie</code>保存在客户端，这个<code>cookie</code>保存的是<code>session</code>的<code>sessionId</code>。这样才能保证客户端发起请求后客户端已经登录的用户能够与服务器端成千上万的<code>session</code>中准确匹配到已经保存了该用户信息的<code>session</code>，同时也能够确保不同页面之间传值时的正确匹配。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从面试中学习，从面试中成长。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="笔试题" scheme="http://blog.caoxl.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>PHP面试/笔试题杂记 VII</title>
    <link href="http://blog.caoxl.com/2019/11/25/Interview-Questions-Notes-VII/"/>
    <id>http://blog.caoxl.com/2019/11/25/Interview-Questions-Notes-VII/</id>
    <published>2019-11-25T07:55:59.000Z</published>
    <updated>2019-12-02T02:57:01.558Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>一个PHP高级工程师 需要具备哪些知识?</p></blockquote><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><ol><li>自我介绍: 说上家公司负责的项目或者浓缩简历。</li></ol></li><li><ol start="2"><li>简历项目经验层次</li></ol><ul><li>利用什么技术</li><li>实现了什么功能</li><li>遇到了什么问题</li><li>达到了什么结果</li></ul></li><li><ol start="3"><li>期望薪资</li></ol></li><li><ol start="4"><li>应用型的问题：要记得站高看远、架构分层</li></ol></li><li><ol start="5"><li>及管理经验及自身对项目管理的理解</li></ol></li></ul><h2 id="知识点列表"><a href="#知识点列表" class="headerlink" title="知识点列表"></a>知识点列表</h2><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul><li><strong>代码解释过程(大多的非编译语言)</strong><ul><li><code>lexical</code> 词法分析, 输入为源代码, 输出为<code>token</code></li><li>语法分析工具为文法(<code>LALR</code>), 输出为表达式, 7.0为<code>AST</code>, 涉及<ul><li>注释</li><li>分号 &amp; 分隔符</li><li>变量</li><li>常量</li><li>操作数</li></ul></li><li>类型检查、关键字处理、导入, 输出为中间代码.工具为选定的编译器优化工具<ul><li>中间代码生成(<code>Opcodes</code>)</li><li>机器码生成 (编译语言)</li></ul></li></ul></li><li><strong><code>Session</code>共享配置</strong></li><li><strong><code>PHPUnit</code>用法</strong></li><li><strong><code>Cookie</code>购物车和<code>Session</code>购物车的实现</strong></li><li><strong>弱类型实现</strong><ul><li><code>zval</code>(不仅是变量名) &amp; <code>zend_val</code> 变量值</li></ul></li><li><strong>代码规范</strong><ul><li>自动化: <code>sonarquebe</code>+<code>jenkins</code></li><li>单元测试</li></ul></li><li><strong>PHP进程间如何通信</strong><ul><li>信号量(消息同步|互斥)</li><li>信号(信号触发事件)(<code>pcntl_signal</code>, <code>pcntl_wait*</code>)</li><li>消息队列(<code>msg_*</code>)</li><li>管道(<code>pipe</code>)</li><li><code>socket</code> | <code>unix_*.sock</code></li><li>共享内存(<code>shm_</code>,<code>shmop_</code>)</li></ul></li><li><strong>PHP并发模型</strong></li><li><strong>PHP执行流程</strong></li><li><strong>变量底层存储结构</strong></li><li><strong>常用的数组函数(列出10个)</strong><ul><li><code>array_combine</code>(前面数组作为其键，后面数组做为其值)</li><li><code>array_merge</code>(合并两个数组，后面覆盖前面，但数字索引会重新索引，不会覆盖)</li><li>…</li></ul></li><li><strong>PHP垃圾回收机制(gc)</strong><ul><li><code>zend.enable_gc</code> (<code>php.ini</code>)</li><li><code>gc_enable()</code> (<code>function</code>)</li><li>引入计数(<code>zval</code>指向<code>zend_value</code>个数为<code>0</code>时) + 写时拷贝 (<code>copy on write</code>)</li><li>循环引用问题 (<code>array</code>、<code>object</code>引用自身成员), 垃圾回收器将收集于一个<code>buffer</code>(<code>_zend_gc_global</code> -&gt; <code>gc_root_buffer</code>) 后启动垃圾鉴定程序</li></ul></li><li><strong>把<code>Session</code>放入<code>Redis</code>里面还会触发类似文件的<code>state session</code></strong><ul><li><code>session.gc_probability</code> (default 1)</li><li><code>session.gc_divisor</code> (default 100)</li><li><code>session.gc_maxlifetime</code> (单位秒)</li><li><code>session.cookie_lifetime</code> (单位秒, 0表示直到关闭浏览器)</li><li><code>session.save_path</code></li><li><code>session.write_close</code> (显示关闭, 后期使用需要显示开启)</li></ul></li><li><strong>内存模型</strong><ul><li>整型、浮点、<code>bool</code>、<code>NULL</code>、内部字符串、不可变数组都是通过<code>zval</code>直接保存,不会用到引用计数</li><li><code>string</code>、<code>array</code>都会使用引入计数(支持复制cow), <code>object</code>、<code>resource</code>本身可以理解为引用</li></ul></li><li><strong>fpm三种配置及场景</strong><ul><li><code>dynamic</code><ul><li><code>pm.start_servers</code></li><li><code>pm.max_children</code></li><li><code>pm.max_spare_servers</code></li><li><code>pm.min_spare_servers</code></li></ul></li><li><code>static</code><ul><li><code>pm.max_children</code></li></ul></li><li><code>ondaemon</code><ul><li><code>pm.process_idle_timeout</code></li></ul></li></ul></li><li><strong>数组底层</strong><ul><li>如何保证有序: 又加了一层映射表 (与bucket大小相同)</li><li>如何解决hash冲突: 拉链法(头插)</li><li>扩容: 逻辑删除 (考虑<code>unset</code>内存情况, 是否需要重建索引)</li></ul></li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li><strong>索引</strong><ul><li><strong>物理存储</strong><ul><li>聚簇索引</li><li>非聚簇索引</li></ul></li><li><strong>数据结构</strong><ul><li><code>B + 树</code></li><li><code>hash</code></li><li><code>fulltext</code></li><li><code>R-tree</code></li></ul></li><li><strong>逻辑角度</strong><ul><li>唯一索引 <code>unique</code></li><li>普通索引 <code>index</code></li><li>主键索引 <code>primary key</code></li><li>全文索引 <code>full index</code> (myisam)</li><li>复合索引 (最左前缀原则)<ul><li>类似 where a and b and c a b c 问题</li><li>联合索引(a,b,c) 能够正确使用索引的有 (a=1), (a=1 and b=1), (a=1 and b=1 and c=1) (b=1 and c =1)</li></ul></li></ul></li></ul></li><li><strong>引擎类型</strong><ul><li><code>myisam</code></li><li><code>innodb</code></li><li>区别<ul><li><ol><li>myisam采用非聚簇索引, innodb采用聚簇索引</li></ol></li><li><ol start="2"><li>myisam索引myi与数据myd文件分离, 索引文件仅保存数据记录指针地址</li></ol></li><li><ol start="3"><li>myisam的主索引与辅助索引在结构上没区别, 而innodb不一样: innodb的所有辅助索引都引用主索引为data域</li></ol></li><li><ol start="4"><li>innodb支持事务, 行级锁, myisam不行</li></ol></li><li><ol start="5"><li>innodb必须有主键, 而myisam可以没有</li></ol></li></ul></li></ul></li><li><strong>事务</strong><ul><li>原子性 <code>atomicity</code></li><li>一致性 <code>consistency</code></li><li>隔离性 <code>isolation</code></li><li>持久性 <code>durability</code></li></ul></li><li><strong>分表数量级</strong><ul><li>单表在500w左右, 性能最佳, BTREE索引树在3-5之间</li></ul></li><li><strong>隔离级别</strong><ul><li>事务的隔离性是数据库处理数据的基础之一，隔离级别是提供给用户在性能和可靠性做除选择和权衡的配置项目，以下四种情况都有一个前提（在同一个事务中）<ul><li><code>read_uncommited</code>: 未提交读(脏读)</li><li><code>read_commit</code>: 已提交读 (不可重复读)</li><li><code>repeatable_read</code>: 可重复读</li><li><code>serialize</code>: 可串行化</li></ul></li></ul></li><li><strong>索引机制(算法)</strong><ul><li><code>hash</code></li><li><code>b+tree</code></li><li><code>b-tree</code>(不要念成b减tree，-只是个符号)</li></ul></li><li><strong>锁</strong><ul><li><strong>种类</strong><ul><li><code>optimistic lock</code> 乐观锁<ul><li>特点: 不会真的死锁</li></ul></li><li><code>pessimistic lock</code> 悲观锁<ul><li>为了保证事务的隔离性, 就需要一致性锁定读.读的时候要加锁，防止其他事务再次更改，修改的时候也要加锁，其他事务无法读取。主要就是依靠数据库的锁机制来实现，同时缺点很明显，就是会带来性能的开销，并发的减少</li></ul></li></ul></li><li><code>innodb</code>的MVCC(Multi-Version Concurrency Control)<ul><li>多版本并发控制, 适用于行锁的、事务性的数据库模型</li><li>适用于innodb的<code>rc</code>和<code>rr</code>级别, 因为可串行化涉及到锁表</li><li>实现思想是在每行增加一个<code>create_verison</code>和<code>delete_version</code>字段</li><li><code>update</code> 是插入一个新行，先保存当前版本号到旧行的<code>delete_version</code>,且新建行的<code>new_create_version</code>也就是<code>delete_version</code></li><li><code>delete</code>操作就是直接标记<code>delete_version</code></li><li><code>insert</code>的时候，就是保存至<code>create_version</code></li><li><code>select</code>的时候可以这样<ul><li>读<code>delete_version</code>为空的</li><li>大于当前事务版本号的</li><li>创建版本号 &lt;= 当前事务版本号的</li></ul></li></ul></li><li><strong>粒度划分</strong><ul><li>行锁</li><li>表锁</li></ul></li><li><strong>意向锁 <code>intention lock</code> (表级锁)</strong><ul><li>场景：A对表中一行进行修改，B对整个表修改。如果没有以下的两个锁，B将对全表扫描是否被锁定。反之，A可以对某行添加意向互斥锁（表级），然后再添加互斥锁（行级），然后B只需要等待意向互斥锁释放）</li><li>意向共享锁</li><li>意向互斥锁</li></ul></li><li><strong>共享锁 <code>shard lock</code> 读锁(行锁)</strong></li><li><strong>排它锁 <code>exclusive lock</code> 写锁(行锁)</strong></li><li><strong>关于innodb必须要知道的</strong><ul><li>可以通过 <code>SELECT \* FROM products WHERE id=&#39;3&#39; FOR UPDATE</code> 进行锁，但是必须在事务中</li><li>上述语句必须是命中索引才会行锁，否则是 <code>table lock</code></li></ul></li><li><strong>锁的算法</strong><ul><li><code>record lock</code>：加到索引记录上的锁，如果通过where条件上锁，而不知道具体哪行，这样会锁定整个表</li><li><code>gap lock</code>：间隙锁某个区间的锁定，对索引记录中的一段连续区域的锁。</li><li><code>next-key lock</code>：行锁和GAP（间隙锁）的合并，next-key锁是解决RR级别中 幻读问题的主要方案。可以搜索关键字 快照读（snapshot read）和当前读（current read）去了解</li></ul></li><li><strong>分库分表</strong></li><li><strong>主从复制 读写分离</strong></li><li><strong>ACID</strong></li><li><strong>覆盖索引(复合索引)</strong><ul><li>定义：包含两个或多个属性列的索引称为复合索引。如果查询字段是普通索引，或者是联合索引的最左原则字段，查询结果是联合索引的字段或者是主键。这种就不必通过主键（聚集索引再次查询）</li><li>目的: 减少磁盘IO, 不用回表</li><li>b+树索引</li></ul></li></ul></li></ul><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul><li><code>Nginx</code><ul><li><code>worker_connections</code></li><li><code>upstream weight</code></li><li>负责均衡实现方式<ul><li>轮询</li><li>IP哈希</li><li>指定权重</li><li>第三方<ul><li><code>fair</code></li><li><code>url_hash</code></li></ul></li></ul></li></ul></li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li>Linux<ul><li><code>epoll</code> <code>select</code></li><li><code>netstat</code> 查看<code>tcp</code> <code>udp</code> <code>unixsock</code>网络</li><li>查看负载 <code>cat /proc/loadavg</code> | <code>w</code> | <code>top</code></li><li><code>df</code></li><li><code>lstat</code>: strace的时候常常可见它</li><li><code>top</code>: <code>shift+M</code></li><li><code>free</code></li><li><code>lsof</code>: 查看当前进程ID, 进程名等占用的文件描述符</li><li><code>ipstat</code></li><li><code>strace</code></li><li><code>grep [-A ,-B, -C]&#39;HTTP/1.1&quot; 200&#39; access.log | wc -l</code></li><li><code>socket</code>和管道(<code>pipe</code>)的区别: <code>socket</code>全双工, <code>pipe</code>半双工*2</li><li><code>awk</code> &amp; <code>sed</code><ul><li><code>awk &#39;{print $1}&#39; access.log | sort | uniq | wc -l</code></li></ul></li></ul></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li><strong>类型/应用场景</strong><ul><li><code>string</code>: cache, incr</li><li><code>hash</code>: key为key, value为Hashmap</li><li><code>set</code>: 去重(中奖只一次  <code>sismember</code>), 交/并/差 (如微博社交关系), 内部实现为value为null的hashmap</li><li><code>zset</code>: (sorted set), 既去重又能保证按照score排序, 比如按照帖子的关注个数排序，value为帖子id，个数为score。</li><li><code>list</code>: (阻塞<code>rpop</code>) 消息队列、列表旋转(常用于监控, <code>rpoplpush</code>)</li><li><code>HyperLogLog</code>: 大量统计 (非精确)</li><li><code>bitmaps</code></li></ul></li><li><strong><code>OBJ_ENCODING</code></strong><ul><li><code>string</code><ul><li><code>OBJ_ENCODING_RAW</code>, 代表sds, 原生string类型</li><li><code>OBJ_ENCODING_INT</code>, long类型</li><li><code>OBJ_ENCODING_EMBSTR</code>, 嵌入</li></ul></li><li><code>OBJ_HASH</code><ul><li><code>OBJ_ENCODING_HT</code>, 表示成dict</li><li><code>OBJ_ENCODING_ZPILIST</code>, hash用ziplist表示</li></ul></li><li><code>OBJ_SET</code><ul><li><code>OBJ_ENCODING_INTSET</code>, 表示成intest</li><li>config<ul><li>set-max-intset-entries 512</li></ul></li></ul></li><li><code>OBJ_ZSET</code><ul><li><code>OBJ_ENCODING_SKIPLIST</code>, 表示成skiplist</li></ul></li><li><code>OBJ_LIST</code><ul><li><code>OBJ_ENCODING_QUICKLIST</code></li><li>config<ul><li>list-max-ziplist-size-2</li><li>list-compress-depth 0</li></ul></li></ul></li></ul></li><li><strong>扩展问题</strong><ul><li>zset如何根据两个属性排序? 比如根据id和age<ul><li>可以用位操作, 把两个属性合成一个double</li><li>用zunionstore合并存储为新的key, 再zrange</li></ul></li><li>redis是如何保证原子性操作的?<ul><li>因为它是单线程的! (MySQL是多线程)</li><li>在并发脚本中的 get set 等不是原子的</li><li>在并发的原子命令 incr setnx 等是原子的</li><li>事务是保证批量操作的原子性</li></ul></li><li>主从复制过程<ul><li>从服务器向主服务器发送sync</li><li>主服务器收到sync命令执行BGSAVE, 且在这期间新执行的命令到一个缓冲区</li><li>主执行(BGSAVE) 完毕后,将<code>.rdb</code>文件发送给从服务器, 从服务器将文件载入内存</li><li>BGSAVE期间到缓冲区的命令会以redis命令协议的方式, 将内容发送给从服务器</li></ul></li></ul></li><li><strong>特性</strong><ul><li>单线程, 自实现(event driver库, 见下面四个io多路复用函数)</li><li>io多路复用, 最常用调用函数: select (epoll, kquene, avport等), 同时监控多个文件描述符的可读可写</li><li>reactor方式实现文件处理器 (每一个网络连接对应一个文件描述符), 同时监听多个fd的accept, read (from client), write (to client), close文件事件</li></ul></li><li><strong>备份与持久化</strong><ul><li><code>rdb</code> (fork进程dump到file)<ul><li>手动: <code>save</code>(阻塞) &amp; <code>bgsave</code> (fork 子进程), 但是这两个不会同时进行</li><li>自动触发:  <code>conf:save 900 1 save 300 10 save 60 10000 dbfilename dump.rdb</code></li><li>rdb优点: 对服务进程影响小, 记录原数据文件方式便于管理还原</li><li>rdb缺点: 可能数据不完整</li><li>rdb为纯文本文件, 可以用 <code>od -c dump.rdb</code> 分析</li></ul></li><li><code>aof</code> (类似binlog)<ul><li>三种写入同步方式<ul><li><code>appendfsync no</code></li><li><code>appendfsync everysec</code> (每个事件循环写入缓冲区, 但是每隔一秒同步到磁盘文件)</li><li><code>appendfsync always</code> (每执行一个命令, 每个事件循环都会执行写入aof 缓冲区并同步到磁盘文件，效率最慢，但是最安全)</li></ul></li><li>aof优点: 数据最完整, 可以通过数据重写rewrite来减少体积, 存储内存为redis的纯文本协议</li><li>aof缺点: 文件相对rdb更大, 导入速度比rdb慢</li><li>一般有了aof就不rdb, 因为aof更新频率更高</li></ul></li></ul></li><li><strong>过期策略</strong><ul><li>定时过期: 时间到了立即删除, cpu不友好, 内存友好</li><li>惰性过期: 访问时判断是否过期, cpu友好, 内存不友好</li><li>定期过期: expires dict中scan, 清除已过期的key, cpu和内存最优解</li></ul></li><li><strong>内存淘汰机制</strong><ul><li><code>noeviction</code>: 新写入时会报错</li><li><code>allkeys-lru</code>: 移除最近最少使用的key</li><li><code>allkeys-random</code>: 随机移除某些key</li><li><code>volatile-lru</code>: 设置了过期时间的key中, 移除最近最少使用</li><li><code>volatile-random</code>: 随机移除某些key</li><li><code>volatile-ttl</code>: 设置类过期时间的键中, 有更早过期时间的key优先移除</li></ul></li><li><strong>redis队列特殊关注之处</strong><ul><li>队列可能丢东西<ul><li>比如redis挂了, producer没有停止, 但是队列数据无法写入</li></ul></li><li>队列的consumer需要手动处理commit协议<ul><li>如果consumer处理完, 表示真正完成</li><li>如果没有处理完?放回队列?直接丢弃?</li></ul></li><li>事件重放机制不支持<ul><li>比如consumer消费错了, 那能不能将队列回放呢?再次处理呢?</li></ul></li><li>队列最大长度及过期时间<ul><li>如果producer远大于consumer, 撑爆了怎么办</li><li>如果comsumer一直没有处理, producer的数据如何处理</li></ul></li><li><code>exactly once</code></li><li>单机锁<code>setnx</code>或者基于<code>set</code>众多参数没有问题, 集群下可利用tag机制</li><li>如何保证业务执行时间超过锁的过期时间, 而引起误删除操作, 答案是可以加一个唯一标识</li></ul></li><li><strong><code>vs memcache</code></strong><ul><li><code>memcached</code><ul><li>优势<ul><li>多线程(listen &amp; worker), 利用多核</li><li>round robin</li><li>cas (check and set, compare and swap)</li></ul></li><li>劣势<ul><li>cache coherency、 锁</li><li>key大小有限制 (1M)</li></ul></li><li>特点<ul><li>内存预分配: slab + trunk</li></ul></li></ul></li><li><code>redis</code><ul><li>优势<ul><li>自己封装了一个AEEvent (epoll + select + kqueue), io多路复用</li><li>丰富的数据结构 (对内 + 对外)</li><li>良好的持久化策略 (rdb + aof)</li></ul></li><li>劣势<ul><li>排序、聚会cpu密集操作会影响吞吐量</li><li>key 大小最大为 1g</li></ul></li></ul></li></ul></li><li><strong>redis的事务机制</strong><ul><li>基于乐观锁的watch multi exec</li><li>redis call lua 脚本 (比如get+del一起)</li><li>2.6.12后set命令支持(setnx + expire就不需要写lua script了)</li><li>redis 下的分布式锁，当主从不同步或者主重新被选举需要多想想，主从情况下一般采用从节点的大多数 (es也是这样)</li></ul></li><li><p><strong>redis 主从哨兵配置，copy三份redis.conf文件，以下设置一主二从一哨兵</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">redis01.conf</span></span><br><span class="line"><span class="string">port</span> <span class="number">63791</span></span><br><span class="line"></span><br><span class="line"><span class="string">vim</span> <span class="string">redis02.conf</span></span><br><span class="line"><span class="string">port</span> <span class="number">63792</span></span><br><span class="line"><span class="string">slaveof</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">63791</span></span><br><span class="line"></span><br><span class="line"><span class="string">vim</span> <span class="string">redis03.conf</span></span><br><span class="line"><span class="string">port</span> <span class="number">63793</span></span><br><span class="line"><span class="string">slaveof</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">63791</span></span><br><span class="line"></span><br><span class="line"><span class="string">vim</span> <span class="string">sentinel.conf</span></span><br><span class="line"><span class="string">daemonize</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">port</span> <span class="number">26379</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">monitor</span> <span class="string">mymaster</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">63791</span> <span class="number">1</span>  </span><br><span class="line"><span class="string">//</span> <span class="string">mymaster为自定义命名，127.0.0.1</span> <span class="number">63791</span><span class="string">为master，1为选举主节点的时候投票数目的同意个数，1代表有一个哨兵同意就行。</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>redis cluster</code></strong></p><ul><li>集群会将数据自动按照算法分割在不同节点负责的槽上 (data sharding)</li></ul></li></ul><h3 id="算法-amp-数据结构"><a href="#算法-amp-数据结构" class="headerlink" title="算法&amp;数据结构"></a>算法&amp;数据结构</h3><ul><li><strong>最小堆</strong>: 根节点为最小值, 且节点比其他子节点小</li><li>平衡树 (avl红黑树)</li><li><strong>最大堆</strong>: 根节点为最大值, 且节点比其他子节点大</li><li><strong><code>sikplist</code></strong></li><li><strong><code>hash</code></strong><ul><li><code>hash</code> 碰撞原因</li><li><code>hash</code> 碰撞解决方案<ul><li>拉链, 塞到链表里. 有点是相对简单, 但是需要附加空间</li><li>开发寻址, 有点是空间利用率高, 一直找<ul><li>线性探测</li><li>二次探测再散列函数</li><li>伪随机数</li></ul></li></ul></li></ul></li><li><strong>给定数组n, 判断n是斐波那契数列的第几项? 写算法</strong></li><li><strong>反转列表如A-&gt;B-&gt;C-&gt;D 到 A-&gt;D-&gt;C-&gt;B</strong></li><li><strong>插入排序</strong></li><li><strong>数组与链表区别与联系</strong></li><li><strong>链表操作</strong><ul><li>单链表删除</li><li>单链表插入<ul><li>快慢指针判断环路、找链表中点</li></ul></li></ul></li><li><strong>应用问题</strong><ul><li>如何实现一个LRU功能 (双向链表)</li><li>如何实现浏览器前进后退功能 (两个栈)</li></ul></li></ul><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><ul><li><strong>HTTP</strong><ul><li>构成: 起始行(Get=&gt;200), 首部头(Accept=&gt;Content-Type), 主体(name =&gt; tongbo)</li><li>版本<ul><li>1.0</li><li>1.1</li><li>2.0 多路复用, 流量控制</li></ul></li></ul></li><li><strong>长连接</strong><ul><li>在一个连接上发送多个数据包</li><li>心跳、如何发送心跳</li></ul></li><li><strong>HTTP DNS</strong><ul><li>定义: 用http协议代替元素的udp dns协议, 可以绕过运营商的local dns</li><li>解决问题: 避免local dns造成的域名劫持问题和调度不精确问题</li><li>其他解决方案<ul><li>客户端dns缓存</li><li>热点域名解析</li><li>懒更新策略 (ttl过期后再同步)</li></ul></li></ul></li><li><strong>Post请求分割head和body</strong></li><li><strong>Get vs Post</strong><ul><li>Get<ul><li>安全幂等, 请求实体资源</li><li>参数只能url编码, 且参数长度有限制</li><li>浏览器会自动加cache</li></ul></li><li>Post<ul><li>附加请求实体于服务器</li><li>产生两个TCP数据包</li><li>数据支持多种编码格式</li></ul></li></ul></li><li><strong>Resultful</strong><ul><li><code>get</code>: 获取资源</li><li><code>post</code>: 新建资源</li><li><code>put</code>: 跟新完整资源</li><li><code>delete</code>: 删除资源</li><li><code>patch</code>: 更新部分资源</li></ul></li><li><strong>RPC</strong><ul><li>RPC框架涉及基本组件服务<ul><li>客户端、服务端自动代码生成、多语言支持</li><li>消息序列化、反序列化</li><li>连接池、负载、故障、队列、超时、异步</li></ul></li><li>常见协议<ul><li>soap (http jsonrpc)</li><li>GRPC</li><li>thrift(tcp)</li></ul></li></ul></li><li><strong>TCP</strong><ul><li>面向连接, 先建立(握手), 然后释放(挥手确认拜拜)</li><li>只能点对点</li><li>可靠交付, 全双工, 接收和发送端都设有发送和接收cache</li><li>面向字节流</li></ul></li><li><strong>特性协议</strong><ul><li>停等</li><li>超时重传</li><li>慢启动</li><li>滑动窗口</li><li>快速重传</li></ul></li><li><strong>UDP</strong><ul><li>无连接、best effort、面向报文(不合并、不拆分、保留边界)</li><li>无拥塞控制、流量控制、首部开销小(8个字节, 而TCP有20个首部)</li><li>支持一对一、一对多、多对一</li></ul></li><li><strong>自定义协议</strong></li></ul><h3 id="PHP框架"><a href="#PHP框架" class="headerlink" title="PHP框架"></a>PHP框架</h3><ul><li><strong>laravel</strong><ul><li>AppServerProvider register:服务提供者注册</li><li>IocContainer: (IoC容器, 工厂模式的升华)<ul><li>控制反转 (inversion of control) 可以降低计算机代码直接的耦合, 其中最常见的方式叫做依赖注入 (Dependence Injection), 还有一种方式叫依赖查找</li><li>实现方式<ul><li>基于接口: 实现特定接口以供外部容器注入所依赖类型的对象</li><li>基于Set方法:</li><li>基于构造函数: 实现特定参数的构造函数</li></ul></li><li>管理类依赖</li><li>执行 (依赖注入DI): 通过构造函数或者某些情况下通过Setter方法将类依赖注入到类中, 容器并不需要被告知如何构建对象,因为他会使用PHP的反射服务自动解析出具体的对象</li></ul></li></ul></li><li><strong>swoole</strong></li><li><strong>thinkphp</strong></li><li><strong>ci</strong></li><li><strong>yii</strong></li><li><strong>easyswoole</strong></li></ul><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li><strong>操作系统</strong><ul><li>多线程</li><li>多进程</li><li>协程的理解</li><li>socket和管道的区别</li><li>进程间通信手段<ul><li>共享内存</li><li>rpc</li><li>管道</li></ul></li><li>线程间通信手段<ul><li>读写进程数据段</li></ul></li></ul></li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li><strong>单例模式 (static, construct)</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> $instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> $config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;config = $config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">instance</span><span class="params">($config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">self</span>::$instance <span class="keyword">instanceof</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>::$instance = <span class="keyword">new</span> <span class="keyword">self</span>($config);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>::$instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>简单工厂 (switch case include new return)</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeModule</span><span class="params">($moduleName, $options)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> ($moduleName) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Fight'</span>: </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Fight($options[<span class="number">0</span>], $options[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Force'</span>: </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Force($options[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Shot'</span>: </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Shot($options[<span class="number">0</span>], $options[<span class="number">1</span>], $options[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用工厂方式 001</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $power;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化工厂</span></span><br><span class="line">        $factory = <span class="keyword">new</span> SuperModuleFactory;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过工厂提供的方法制造需要的模块</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;power = $factory-&gt;makeModule(<span class="string">'Fight'</span>, [<span class="number">9</span>, <span class="number">100</span>]);</span><br><span class="line">        <span class="comment">// $this-&gt;power = $factory-&gt;makeModule('Force', [45]);</span></span><br><span class="line">        <span class="comment">// $this-&gt;power = $factory-&gt;makeModule('Shot', [99, 50, 2]);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        $this-&gt;power = array(</span></span><br><span class="line"><span class="comment">            $factory-&gt;makeModule('Force', [45]),</span></span><br><span class="line"><span class="comment">            $factory-&gt;makeModule('Shot', [99, 50, 2])</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用工厂方式 002 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $power;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $modules)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化工厂</span></span><br><span class="line">        $factory = <span class="keyword">new</span> SuperModuleFactory;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过工厂提供的方法制造需要的模块</span></span><br><span class="line">        <span class="keyword">foreach</span> ($modules <span class="keyword">as</span> $moduleName =&gt; $moduleOptions)&#123;</span><br><span class="line">             <span class="keyword">$this</span>-&gt;power[] = $factory-&gt;makeModule($moduleName, $moduleOptions);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建超人</span></span><br><span class="line">$superman = <span class="keyword">new</span> Superman([</span><br><span class="line">    <span class="string">'Fight'</span> =&gt; [<span class="number">9</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">'Shot'</span> =&gt; [<span class="number">99</span>, <span class="number">50</span>, <span class="number">2</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li><strong>门面模式</strong><ul><li>对客户屏蔽子系统组件, 减少子系统与客户之间的松耦合关系</li></ul></li><li><strong>依赖注入(<code>DI</code>) 和 <code>AOP</code>思想</strong></li></ul><h3 id="大前端"><a href="#大前端" class="headerlink" title="大前端"></a>大前端</h3><ul><li><strong>js</strong><ul><li>百度统计的实现<ul><li>基于cookie, 引入js脚本及百度个人账户ID, 读取当前信息, 适当节点发送请求给百度服务</li></ul></li><li>前后端分离</li></ul></li></ul><h3 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h3><ul><li><strong>运维&amp;架构</strong><ul><li>服务器CPU99%如何分析</li><li>MySQL占CPU如何分析</li><li>PHP占CPU较高如何分析</li><li>SSO实现方法</li><li>MySQL优化方法</li><li>如何提高监测数据的准确性</li><li>Dcoker原理及引用及编排管理</li></ul></li></ul><h3 id="分布式-微服务"><a href="#分布式-微服务" class="headerlink" title="分布式|微服务"></a>分布式|微服务</h3><ul><li><strong>分布式</strong><ul><li>redis分布式锁问题</li><li>cap及常见应用关注cap哪两点</li></ul></li><li><strong>微服务</strong><ul><li>优点<ul><li>相对于单体服务更简单, 注重单一功能</li><li>每个服务可以独立开发打包测试部署, 且语言环境无关</li><li>可以水平、高效扩展</li></ul></li><li>缺点<ul><li>运营成本, 服务发现, 治理, 降级, 熔断</li><li>网络信息传输、安全、延迟</li><li>服务调用排查追踪</li></ul></li><li>最佳原则<ul><li>高内聚: 修改了一个功能, 只需要改一个服务</li><li>低耦合: 修改了一个地方, 不需要改其他的地方</li><li>业务内原则<ul><li>新服务用新的微服务, 确定无误后保留推进, 否则调整</li><li>老的保留, 直到新服务稳定再切换</li><li>必须的监控与日志 | 生产 - 订阅 - 消费模型</li><li>尝试对外不可见的服务先做是试点, 错误邮件, 日志, 系统内调用, API内部分成熟接口</li></ul></li></ul></li></ul></li><li><strong>考虑问题</strong><ul><li>分布式数据一致性问题?CAP如何权衡</li><li>调用链追踪(基于OpenTracing协议的JeagerORZipkin)</li></ul></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个PHP高级工程师 需要具备哪些知识?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="笔试题" scheme="http://blog.caoxl.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>PHP面试/笔试题杂记 VI</title>
    <link href="http://blog.caoxl.com/2019/11/25/Interview-Questions-Notes-VI/"/>
    <id>http://blog.caoxl.com/2019/11/25/Interview-Questions-Notes-VI/</id>
    <published>2019-11-25T02:28:12.000Z</published>
    <updated>2019-11-27T03:10:27.708Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h2 id="通过哪一个函数，可以把错误转换为异常处理？"><a href="#通过哪一个函数，可以把错误转换为异常处理？" class="headerlink" title="通过哪一个函数，可以把错误转换为异常处理？"></a>通过哪一个函数，可以把错误转换为异常处理？</h2><ul><li><code>A: set_error_handler</code></li><li><code>B: error_reporting</code></li><li><code>C: error2exception</code></li><li><code>D: catch</code></li></ul><blockquote><p>正确答案：A<br>答案分析：<code>set_error_handler ()</code> 可指定一个回调函数，错误发生时，会自动通过指定的回调函数处理。在回调函数中抛出新的异常即可。</p></blockquote><h2 id="下列哪个-shell-函数的描述是正确的？"><a href="#下列哪个-shell-函数的描述是正确的？" class="headerlink" title="下列哪个 shell 函数的描述是正确的？"></a>下列哪个 shell 函数的描述是正确的？</h2><ul><li><code>A：shell 函数可以先调用后定义</code></li><li><code>shell 函数需使用关键字 function 定义</code></li><li><code>shell 函数内的变量可以声明为局部变量</code></li><li><code>shell 函数只能通过 return 返回值，1 是成功，0 是失败</code></li></ul><blockquote><p>正确答案：C<br>答案分析：shell 函数必须先定义在调用；声明时，无需使用关键字；通过 local 可以定义函数内的局部变量；shell 函数返回值，0 是成功，非 0 是错误，其他选项正确</p></blockquote><h2 id="下列关于全文检索技术的说法，不对的是："><a href="#下列关于全文检索技术的说法，不对的是：" class="headerlink" title="下列关于全文检索技术的说法，不对的是："></a>下列关于全文检索技术的说法，不对的是：</h2><ul><li>A: Solr 是新一代的全文检索组件，它比 Lucene 的搜索效率高很多，还能支持 HTTP 的访问方式，PHP 调用 Solr 也很方便。</li><li>B: MySQL 中把一个字段建立 FULLTEXT 索引，就可以实现全文检索，目前 MyISAM 和 InnoDB 的 table 都支持 FULLTEXT 索引。</li><li>C: Sphinx 是一个基于 SQL 的全文检索引擎，可以结合 MySQL 做全文搜索，它可以提供比数据库本身更专业的搜索功能。</li><li>D: Lucene 附带的二元分词分析器 CJKAnalyzer 切词速度很快，能满足一般的全文检索需要。</li></ul><blockquote><p>正确答案：A<br>答案分析： Solr 是新一代的全文检索组件，它基于 Lucene，所以说它比 Lucene 快就是胡扯 ：）</p></blockquote><h2 id="关于单例模式的说法，错误的是？"><a href="#关于单例模式的说法，错误的是？" class="headerlink" title="关于单例模式的说法，错误的是？"></a>关于单例模式的说法，错误的是？</h2><ul><li>A：单例模式的目的是确保在全局环境中，一个类只能有一个实例存在</li><li>B：单例模式一般要将构造函数设置为 private</li><li>C：只需要将构造函数设置为 private 即可确保全局中只有一个实例</li><li>D：连接数据库的功能通常用单例模式实现</li></ul><blockquote><p>正确答案：C<br>答案分析：构造函数设置为 private，仅能确保无法通过 new 创建新实例，但仍可以通过 clone、反序列化等方式创建多个实例。</p></blockquote><h2 id="正则的引擎表述错误的是？"><a href="#正则的引擎表述错误的是？" class="headerlink" title="正则的引擎表述错误的是？"></a>正则的引擎表述错误的是？</h2><ul><li>A: 正则引擎主要可以分为两大类：一种是 DFA，一种是 NFA。</li><li>B: 一般而论，NFA 引擎则搜索更快一些。但是 DFA 以表达式为主导，更容易操纵，因此一般程序员更偏爱 DFA 引擎！</li><li>C: NFA 表达式主导，DFA 文本主导.</li><li>D: 可以使用是否支持忽略优先量词和分组捕获来判断引擎类型：支持 NFA, 不支持 DFA</li></ul><blockquote><p>正确答案：B<br>答案分析：正确的说法应该是：一般而论，DFA 引擎则搜索更快一些。但是 NFA 以表达式为主导，更容易操纵，因此一般程序员更偏爱 NFA 引擎</p></blockquote><h2 id="下面哪个不是-XSS-漏洞的修复方式？"><a href="#下面哪个不是-XSS-漏洞的修复方式？" class="headerlink" title="下面哪个不是 XSS 漏洞的修复方式？"></a>下面哪个不是 XSS 漏洞的修复方式？</h2><ul><li>A: 对参数进行 htmlspecialchas 过滤</li><li>B: 对参数使用白名单过滤</li><li>C: 不允许输入的内容显示到浏览器</li><li>D: 禁止在 js 标签内输出用户输入的内容</li></ul><blockquote><p>正确答案：A<br>答案分析：这类过滤可以解决尖括号类型的 xss，无法解决 js 标签内的 xss</p></blockquote><h2 id="下列哪一项不是-PHP-SAPI-模式？"><a href="#下列哪一项不是-PHP-SAPI-模式？" class="headerlink" title="下列哪一项不是 PHP SAPI 模式？"></a>下列哪一项不是 PHP SAPI 模式？</h2><ul><li><code>A: ISAPI</code></li><li><code>B: CGI</code></li><li><code>C: FastCGI</code></li><li><code>D: RESTFUL API</code></li></ul><blockquote><p>正确答案：D<br>答案分析：A~C 是最常用的模式，D 是一种接口的组织方式。</p></blockquote><h2 id="对一个大文件进行逐行遍历，如下方法性能较高的是？"><a href="#对一个大文件进行逐行遍历，如下方法性能较高的是？" class="headerlink" title="对一个大文件进行逐行遍历，如下方法性能较高的是？"></a>对一个大文件进行逐行遍历，如下方法性能较高的是？</h2><ul><li>A：写一个实现了 IteratorAggregate 接口的类，通过该类使用 foreach 遍历。</li><li>B：使用 file_get_contents 将文件内容一次性载入内存，然后逐行遍历。</li><li>C：通过 exec 函数，调用 shell 工具遍历</li><li>D：使用别人写的类库</li></ul><blockquote><p>正确答案：A<br>答案分析：使用 IteratorAggregate 可将文件打开后通过移动指针的方式逐行遍历，不受文件大小影响。使用 file_get_contents 处理大文件很容易导致 PHP 内存溢出；调用 exec 会产生额外的进程，影响性能；其他人写的类库质量不一定高。</p></blockquote><h2 id="函数中如果使用了-try-catch-finally-语法结构，return-应该写在哪儿？"><a href="#函数中如果使用了-try-catch-finally-语法结构，return-应该写在哪儿？" class="headerlink" title="函数中如果使用了 try catch finally 语法结构，return 应该写在哪儿？"></a>函数中如果使用了 try catch finally 语法结构，return 应该写在哪儿？</h2><ul><li>A：finally 中</li><li>B：try 中</li><li>C：catch 中</li><li>D：任意位置</li></ul><blockquote><p>正确答案：A<br>答案分析：try 中 return 后 finally 会继续执行，如果 finally 中也有 return，则最终返回值为 finally 中 return 的值</p></blockquote><h2 id="以下关于-NOSQL-的说法，不对的是："><a href="#以下关于-NOSQL-的说法，不对的是：" class="headerlink" title="以下关于 NOSQL 的说法，不对的是："></a>以下关于 NOSQL 的说法，不对的是：</h2><ul><li>A: Redis 支持字符串、哈希、列表、集合、有序集合等数据结构，目前 Redis 不支持事务。</li><li>B: MongoDB 支持 CAP 定理中的 AP，MySQL 支持 CAP 中的 CA，全部都支持不可能存在</li><li>C: MongoDB 不用先创建 Collection 的结构就可以直接插入数据，目前 MongoDB 不支持事务。</li><li>D: Memcache 既支持 TCP 协议，也支持 UDP 协议，我们可以把 PHP 的 Session 存放到 Memcache 中。</li></ul><blockquote><p>正确答案：A<br>答案分析：Redis 支持事务。</p></blockquote><h2 id="Innodb-锁机制说法错误的是？"><a href="#Innodb-锁机制说法错误的是？" class="headerlink" title="Innodb 锁机制说法错误的是？"></a>Innodb 锁机制说法错误的是？</h2><ul><li>A：Innodb 提供了表锁与行锁两种锁机制</li><li>B：Innodb 的表锁所会在表变更的时候触发</li><li>C：Innodb 下 update 时会自动给涉及到的行加上排他锁，并创建出一个镜像副本， 此时进行 select 时查询的是镜像副本的数据</li><li>D：Innodb 行锁状态下读不受影响，写会受影响（涉及到的数据）</li></ul><blockquote><p>正确答案：A</p></blockquote><h2 id="在拆分之前，系统中很多列表和详情页所需的数据是可以通过-sql-join-来完成的。而拆分后，数据库可能是分布式在不同实例和不同的主机上，join-将变得非常麻烦。下面哪种方法不能有效解决这个问题？"><a href="#在拆分之前，系统中很多列表和详情页所需的数据是可以通过-sql-join-来完成的。而拆分后，数据库可能是分布式在不同实例和不同的主机上，join-将变得非常麻烦。下面哪种方法不能有效解决这个问题？" class="headerlink" title="在拆分之前，系统中很多列表和详情页所需的数据是可以通过 sql join 来完成的。而拆分后，数据库可能是分布式在不同实例和不同的主机上，join 将变得非常麻烦。下面哪种方法不能有效解决这个问题？"></a>在拆分之前，系统中很多列表和详情页所需的数据是可以通过 sql join 来完成的。而拆分后，数据库可能是分布式在不同实例和不同的主机上，join 将变得非常麻烦。下面哪种方法不能有效解决这个问题？</h2><ul><li>A: 全局表，系统中所有模块都可能会依赖到的一些表在各个库中都保存。</li><li>B: 字段冗余，“订单表” 中保存 “卖家 Id” 的同时，将卖家的 “Name” 字段也冗余，这样查询订单详情的时候就不需要再去查询 “卖家用户表”。</li><li>C: 主从复制，将数据库的读写分离。</li><li>D: 数据同步，定时 A 库中的 tbl_a 表和 B 库中 tbl_b 关联，可以定时将指定的表做主从同步。</li></ul><blockquote><p>正确答案：C<br>答案分析：主从复制，将数据库的读写分离。只能扩容读并发，并不能缓解跨库 join 的问题。</p></blockquote><h2 id="关于网络-IO-模型，下列哪一项是正确的？"><a href="#关于网络-IO-模型，下列哪一项是正确的？" class="headerlink" title="关于网络 IO 模型，下列哪一项是正确的？"></a>关于网络 IO 模型，下列哪一项是正确的？</h2><ul><li>A: Select 比 Epoll 更快</li><li>B: nginx 使用的是 select 模型</li><li>C: apache 支持 select 和 epoll 两种方式的切换</li><li>D: epoll 能支持更大的并发</li></ul><blockquote><p>正确答案：D<br>答案分析：A epoll 更快一些。B nginx 使用 epoll 模型。C apache 只支持 select</p></blockquote><h2 id="PHP-执行的时候有如下执行过程：Scanning-Lexing-Compilation-Execution-Parsing，其含义分别为："><a href="#PHP-执行的时候有如下执行过程：Scanning-Lexing-Compilation-Execution-Parsing，其含义分别为：" class="headerlink" title="PHP 执行的时候有如下执行过程：Scanning (Lexing) - Compilation - Execution - Parsing，其含义分别为："></a>PHP 执行的时候有如下执行过程：Scanning (Lexing) - Compilation - Execution - Parsing，其含义分别为：</h2><ul><li>A：将 PHP 代码转换为语言片段 (Tokens)、将 Tokens 转换成简单而有意义的表达式、将表达式编译成 Opocdes、顺次执行 Opcodes</li><li>B：将 PHP 代码转换为语言片段 (Tokens)、将 Tokens 转换成简单而有意义的表达式、顺次执行 Opcodes、将表达式编译成 Opocdes</li><li>C：将 PHP 代码转换为语言片段 (Tokens)、将表达式编译成 Opocdes、顺次执行 Opcodes、将 Tokens 转换成简单而有意义的表达式</li><li>D：将 PHP 代码转换为语言片段 (Tokens)、将表达式编译成 Opocdes、将 Tokens 转换成简单而有意义的表达式、顺次执行 Opcodes</li></ul><blockquote><p>正确答案：C<br>答案分析：正确答案为 C，正确的顺序为：Scanning (Lexing)、Parsing、Compilation、Execution</p></blockquote><h2 id="用PHP打印出前一天的时间-格式是-2019-11-26-22-21-21"><a href="#用PHP打印出前一天的时间-格式是-2019-11-26-22-21-21" class="headerlink" title="用PHP打印出前一天的时间; 格式是 2019-11-26 22:21:21"></a>用PHP打印出前一天的时间; 格式是 2019-11-26 22:21:21</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">var_dump(date(<span class="string">'Y-m-d H:i:s'</span>, strtotime(<span class="string">'yesterday'</span>)));</span><br><span class="line">var_dump(date(<span class="string">'Y-m-d H:i:s'</span>, strtotime(<span class="string">'-1 day'</span>)));</span><br></pre></td></tr></table></figure><h2 id="简单描述下Git的开发流程"><a href="#简单描述下Git的开发流程" class="headerlink" title="简单描述下Git的开发流程"></a>简单描述下Git的开发流程</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 初始化Git仓库</span><br><span class="line">git init</span><br><span class="line">// 拉取远程仓库</span><br><span class="line">git pull git@github.com:laravel/laravel.git</span><br><span class="line">// 创建分支</span><br><span class="line">git branch branch_name</span><br><span class="line">// 切换分支</span><br><span class="line">git checkout branch_name</span><br><span class="line">// 提交代码</span><br><span class="line">git add -A</span><br><span class="line">// 提交代码说明</span><br><span class="line">git commit -m '代码更新'</span><br><span class="line">// 查看状态</span><br><span class="line">git status</span><br><span class="line">// 添加远程地址</span><br><span class="line">git remote addorigin git@github.com:laravel/laravel.git</span><br><span class="line">// 同步代码到远程分支</span><br><span class="line">git push origin master</span><br><span class="line">// 查看git日志</span><br><span class="line">git log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'</span><br></pre></td></tr></table></figure><h2 id="var-empty-‘’"><a href="#var-empty-‘’" class="headerlink" title="var $empty = ‘’"></a>var $empty = ‘’</h2><blockquote><p>var $empty = ‘ ‘;<br>var $null = NULL;<br>var $bool = FALSE;<br>var $notSet;<br>var $array = array();</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>. $a = <span class="string">"hello"</span>;$b = &amp;$a; <span class="keyword">unset</span>($b);$b = <span class="string">"world"</span>;</span><br><span class="line">what is $a?</span><br></pre></td></tr></table></figure><blockquote><p>$a = “hello”</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>. $a = <span class="number">1</span>; $x = &amp;$a; $b = $a++;</span><br><span class="line">what is $b?</span><br></pre></td></tr></table></figure><blockquote><p>$b = 1</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>. $x = <span class="keyword">empty</span>($array);</span><br><span class="line">what is $x?</span><br></pre></td></tr></table></figure><blockquote><p>true</p></blockquote><h2 id="索引的作用-索引有什么优点和缺点"><a href="#索引的作用-索引有什么优点和缺点" class="headerlink" title="索引的作用? 索引有什么优点和缺点?"></a>索引的作用? 索引有什么优点和缺点?</h2><ul><li>索引的作用/优点</li></ul><blockquote><ul><li>创建索引可以大大提高系统的性能</li><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性</li><li>可以大大加快 数据的检索速度，这也是创建索引的最主要的原因。</li><li>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</li><li>在使用分组和排序 子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</li><li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ul></blockquote><ul><li>索引缺点</li></ul><blockquote><ul><li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</li><li>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</li></ul></blockquote><h2 id="什么是fpm-简单介绍php-fpm配置文件的相关参数"><a href="#什么是fpm-简单介绍php-fpm配置文件的相关参数" class="headerlink" title="什么是fpm? 简单介绍php-fpm配置文件的相关参数"></a>什么是fpm? 简单介绍php-fpm配置文件的相关参数</h2><blockquote><p>PHP FastCGI Process Manager 进程管理器</p></blockquote><ul><li>php-fpm 重要配置</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启</span><br><span class="line">pid = run/php-fpm.pid</span><br><span class="line"></span><br><span class="line">// 错误日志，默认在安装目录中的var/log/php-fpm.log</span><br><span class="line">error_log = log/php-fpm.log</span><br><span class="line"></span><br><span class="line">// 错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.</span><br><span class="line">log_level = notice</span><br><span class="line"></span><br><span class="line">// 表示在emergency<span class="emphasis">_restart_</span>interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency<span class="emphasis">_restart_</span>threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。</span><br><span class="line">emergency<span class="emphasis">_restart_</span>threshold = 60</span><br><span class="line">emergency<span class="emphasis">_restart_</span>interval = 60s</span><br><span class="line"></span><br><span class="line">// 设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.</span><br><span class="line">process<span class="emphasis">_control_</span>timeout = 0</span><br><span class="line"></span><br><span class="line">// 后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置</span><br><span class="line">daemonize = yes</span><br><span class="line"></span><br><span class="line">// fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: 'ip:port', 'port', '/path/to/unix/socket'. 每个进程池都需要设置.</span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line"></span><br><span class="line">// 启动进程的帐户和组启动进程的帐户和组</span><br><span class="line">user = www</span><br><span class="line">group = www</span><br><span class="line"></span><br><span class="line">// 对于专用服务器，pm可以设置为static。</span><br><span class="line">pm = dynamic</span><br><span class="line">// 如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：</span><br><span class="line">pm.max_children    // 子进程最大数</span><br><span class="line">pm.start_servers   // 启动时的进程数</span><br><span class="line">pm.min<span class="emphasis">_spare_</span>servers // 保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程</span><br><span class="line">pm.max<span class="emphasis">_spare_</span>servers // 保证空闲进程数最大值，如果空闲进程大于此值，此进行清理</span><br><span class="line"></span><br><span class="line">// FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到</span><br><span class="line">pm.status_path = /status</span><br><span class="line"></span><br><span class="line">// 设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的'max<span class="emphasis">_execution_</span>time'因为某些特殊原因没有中止运行的脚本有用. 设置为 '0' 表示 'Off'.当经常出现502错误时可以尝试更改此选项。</span><br><span class="line">request<span class="emphasis">_terminate_</span>timeout = 20  </span><br><span class="line"></span><br><span class="line">// #设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。</span><br><span class="line">rlimit_files = 1024</span><br></pre></td></tr></table></figure><h2 id="如何保证API到后端的幂等性"><a href="#如何保证API到后端的幂等性" class="headerlink" title="如何保证API到后端的幂等性"></a>如何保证API到后端的幂等性</h2><ul><li>什么是幂等性</li></ul><blockquote><p>Methods can also have the property of “idempotence” in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request.<br>– HTTP/1.1规范中幂等性的定义</p></blockquote><blockquote><p>从定义上看，HTTP 方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。说白了就是，<strong>同一个请求，发送一次和发送 N 次效果是一样的!</strong></p></blockquote><ul><li>HTTP的幂等性</li></ul><blockquote><ul><li><code>GET</code> 方法用于获取资源，不应有副作用，所以是幂等的。</li><li><code>DELETE</code> 方法用于删除资源，有副作用，但它应该满足幂等性</li><li><code>POST</code> 方法用于创建资源，所对应的 URI 并非创建的资源本身，而是去执行创建动作的操作者，有副作用，不满足幂等性。</li><li><code>PUT</code> 方法用于创建或更新操作，所对应的 URI 是要创建或更新的资源本身，有副作用，它应该满足幂等性。</li></ul></blockquote><h2 id="什么是CC攻击-如何防止CC攻击"><a href="#什么是CC攻击-如何防止CC攻击" class="headerlink" title="什么是CC攻击? 如何防止CC攻击?"></a>什么是CC攻击? 如何防止CC攻击?</h2><ul><li>什么是CC攻击 ?</li></ul><blockquote><p>CC 攻击是 DDoS 攻击的一种类型，使用代理服务器向受害服务器发送大量貌似合法的请求（通常使用 HTTP GET)。CC（Challenge Collapsar，挑战黑洞）根据其工具命名，攻击者创造性地使用代理机制，利用众多广泛可用的免费代理服务器发动 DDoS 攻击。许多免费代理服务器支持匿名模式，这使追踪变得非常困难。</p></blockquote><ul><li>如何防止CC攻击</li></ul><blockquote><ul><li><ol><li>服务器垂直扩展和水平扩容</li></ol></li><li><ol start="2"><li>数据缓存 (内存级别, 不要用文件)</li></ol></li><li><ol start="3"><li>页面静态化</li></ol></li><li><ol start="4"><li>用户级别的调用频率限制</li></ol></li><li><ol start="5"><li>IP限制</li></ol></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://blog.caoxl.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="笔试题" scheme="http://blog.caoxl.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Linux 笔试题 I</title>
    <link href="http://blog.caoxl.com/2019/11/13/Linux-DevOps-Numercal-Test/"/>
    <id>http://blog.caoxl.com/2019/11/13/Linux-DevOps-Numercal-Test/</id>
    <published>2019-11-13T06:13:12.000Z</published>
    <updated>2019-11-13T08:33:43.916Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h2 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h2><h3 id="系统安全"><a href="#系统安全" class="headerlink" title="系统安全"></a>系统安全</h3><blockquote><ul><li><code>sudo</code>  // 超级用户</li><li><code>su</code>  // 用于切换当前用户身份到其他身份，变更时需输入所要变更的用户账号与密码。</li><li><code>chmod</code>  // 用来变更文件或目录的权限</li><li><code>setfacl</code>  // 设置文件访问控制列表</li></ul></blockquote><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><blockquote><ul><li><code>w</code>  // 用于显示已经登陆系统的用户列表，并显示用户正在执行的指令。</li><li><code>top</code> // 可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具。</li><li><code>ps</code>  // 用于报告当前系统的进程状态。</li><li><code>kill</code>  // 可以按照进程名杀死进程。</li><li><code>pstree</code>  // 以树状图的方式展现进程之间的派生关系，显示效果比较直观。</li><li><code>killall</code>  // 使用进程的名称来杀死进程，使用此指令可以杀死一组同名进程。</li></ul></blockquote><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><blockquote><ul><li><code>id</code>  // 可以显示真实有效的用户ID（UID）和组ID（GID）。</li><li><code>usermod</code>  //  用于修改用户的基本信息。</li><li><code>useradd</code>  // 用于 Linux中创建的新的系统用户。</li><li><code>groupadd</code>  // 用于创建一个新的工作组，新工作组的信息将被添加到系统文件中。</li><li><code>userdel</code>  // 用户删除给定的用户，以及与用户相关的文件。</li></ul></blockquote><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><blockquote><ul><li><code>mount</code>  // 用户加载文件系统到指定的加载点。</li><li><code>unmount</code>  // 用于卸载已经加载的文件。</li><li><code>fsck</code>  // 用于检查并且试图修复文件系统中的错误。</li><li><code>df</code>  // 用于显示磁盘分区上的可使用的磁盘空间。</li><li><code>du</code>  // 对文件和目录磁盘使用的空间的查看。</li></ul></blockquote><h3 id="系统关机和重启"><a href="#系统关机和重启" class="headerlink" title="系统关机和重启"></a>系统关机和重启</h3><blockquote><ul><li><code>shutdown</code>  // 关机</li><li><code>reboot</code>  // 重启</li></ul></blockquote><h3 id="网络应用"><a href="#网络应用" class="headerlink" title="网络应用"></a>网络应用</h3><blockquote><ul><li><code>curl</code>  // 是一个利用URL规则在命令行下工作的文件传输工具。</li><li><code>telnet</code>  // 用于登录远程主机，对远程主机进行管理。</li><li><code>mail</code>  // 命令行的电子邮件发送和接收工具。</li><li><code>elinks</code>  // 能实现一个纯文本界面的WWW浏览器</li></ul></blockquote><h3 id="网络测试"><a href="#网络测试" class="headerlink" title="网络测试"></a>网络测试</h3><blockquote><ul><li><code>ping</code>  // 用于测试主机之间网络的连通性。</li><li><code>netstat</code>  // 用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况。</li><li><code>host</code>  // 常用的分析域名查询工具，可以用来测试域名系统工作是否正常。</li></ul></blockquote><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><blockquote><ul><li><code>hostname</code>  // 用于显示和设置系统的主机名称。</li><li><code>ifconfig</code>  //  被用于配置和显示Linux内核中网络接口的网络参数。</li></ul></blockquote><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><blockquote><ul><li><code>ssh</code>  // openssh套件中的客户端连接工具，可以给予ssh加密协议实现安全的远程登录服务器。</li><li><code>screen</code>  // 是一款由GNU计划开发的用于命令行终端切换的自由软件。</li><li><code>clear</code>  // 用于清除当前屏幕终端上的任何信息。</li><li><code>who</code>  // 显示当前登录系统的用户信息。</li><li><code>date</code>  // 显示或设置系统时间与日期。</li></ul></blockquote><h3 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h3><blockquote><ul><li><code>yum</code>  // 提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</li><li><code>rpm</code>  //  rpm软件包的管理工具。</li><li><code>apt-get</code>  // Debian Linux发行版中的APT软件包管理工具。所有基于Debian的发行都使用这个包管理系统。deb包可以把一个应用的文件包在一起，大体如同 Windows上的安装文件。</li></ul></blockquote><h3 id="文件查找和比较"><a href="#文件查找和比较" class="headerlink" title="文件查找和比较"></a>文件查找和比较</h3><blockquote><ul><li><code>locate</code>  // 用来查找文件或目录。</li><li><code>find</code>  // 用来在指定目录下查找文件。</li></ul></blockquote><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><blockquote><ul><li><code>head</code>  // 用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。</li><li><code>tail</code>  // 用于输入文件中的尾部内容。tail命名默认在屏幕上显示指定文件的末尾10行。</li><li><code>more</code>  // 用来浏览文件档案的内容（只能向前浏览）。</li><li><code>less</code>  // 用来浏览文字档案的内容，允许用户向前或向后浏览文件。使用该命令时，用PageUp键向上翻页，用PageDown键向下翻页。要退出less程序，应按Q键。</li></ul></blockquote><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><blockquote><ul><li><code>unlink</code>  // 用于系统调用函数 unlink 去删除指定的文件。</li><li><code>rename</code>  // 用字符串替换的方式批量改变文件名。</li><li><code>cat</code>  // 连接文件并打印到标准输出设备上，cat经常用来显示文件的内容。</li><li><code>touch</code>  // 有两个功能：一是用于把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来；二是用来创建新的空文件。</li><li><code>ln</code>  // 用来为文件创建连接，连接类型分为硬连接和符号连接两种，默认的连接类型是硬连接。如果要创建符号连接必须使用”-s”选项（注意：符号链接文件不是一个独立的文件，它的许多属性依赖于源文件，所以给符号链接文件设置存取权限时没有意义的）</li></ul></blockquote><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><blockquote><ul><li><code>cd</code>  // 用来切换工作目录至 dirname。</li><li><code>mv</code>  // 用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。</li><li><code>rm</code>  // 可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。</li><li><code>pwd</code>  // 以绝对路径的方式显示用户当前工作目录。</li><li><code>tree</code>  // 以树状图列出目录的内容。</li><li><code>cp</code>  // 用来将一个或过个源文件或者目录复制到指定的目的文件或目录</li><li><code>ls</code>  // 用来显示目录列表，在 Linux中是使用率较高的命令。ls命令的输出信息可以进行彩色加亮显示，以区分不同类型的文件。</li></ul></blockquote><h3 id="文件权限属性"><a href="#文件权限属性" class="headerlink" title="文件权限属性"></a>文件权限属性</h3><blockquote><ul><li><code>setfacl</code>  // 用来变更文件或目录的权限。</li><li><code>chmod</code>  // 设置文件访问控制列表。</li><li><code>chgrp</code>  // 用来改变文件或目录所属的用户组。</li><li><code>chown</code>  // 改变某个文件或目录的所有者和所属的组，该命令可以向某个用户授权，使该用户变成指定文件的所有者。</li></ul></blockquote><h3 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h3><blockquote><ul><li><code>ftp</code>  // 用来设置文件系统相关功能。</li><li><code>scp</code>  //  用于在Linux下远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。</li></ul></blockquote><h2 id="Linux系统定时任务"><a href="#Linux系统定时任务" class="headerlink" title="Linux系统定时任务"></a>Linux系统定时任务</h2><h3 id="crontab-命令"><a href="#crontab-命令" class="headerlink" title="crontab 命令"></a><code>crontab</code> 命令</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">contab -e       <span class="comment">// 创建定时任务</span></span><br><span class="line">* * * * * 命令  <span class="comment">// 分、时、日、月、周（每过多长时间去执行，根据我们所设置的分、时、日、月、周）</span></span><br></pre></td></tr></table></figure><h3 id="at-命令"><a href="#at-命令" class="headerlink" title="at 命令"></a><code>at</code> 命令</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># at 2:00 tomorrow  // 在明天的两点去执行</span></span><br><span class="line">at&gt;/home/Jason/do_job <span class="comment">// 执行结果是这种格式的</span></span><br><span class="line">at&gt;Ctrl + D <span class="comment">// 退出</span></span><br><span class="line"></span><br><span class="line">总体意思，明天两点执行 do_job，最终退出</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>at</code> 命令 是一次性执行，不是循环执行，也不是周期性执行。</p></blockquote><h2 id="面试-笔试题"><a href="#面试-笔试题" class="headerlink" title="面试/笔试题"></a>面试/笔试题</h2><h3 id="获取文件行数"><a href="#获取文件行数" class="headerlink" title="获取文件行数"></a>获取文件行数</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc-l filename</span><br></pre></td></tr></table></figure><h3 id="输入文件的最后5行到另一个文件中"><a href="#输入文件的最后5行到另一个文件中" class="headerlink" title="输入文件的最后5行到另一个文件中"></a>输入文件的最后5行到另一个文件中</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -n 5 file1 &gt;&gt; file2</span><br></pre></td></tr></table></figure><h3 id="查找文件中包含hello的行"><a href="#查找文件中包含hello的行" class="headerlink" title="查找文件中包含hello的行"></a>查找文件中包含hello的行</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep hello filename</span><br></pre></td></tr></table></figure><h3 id="查找当前目录下所有目录名为var的子目录的命令"><a href="#查找当前目录下所有目录名为var的子目录的命令" class="headerlink" title="查找当前目录下所有目录名为var的子目录的命令"></a>查找当前目录下所有目录名为<code>var</code>的子目录的命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./var -maxdepth 1 -type d -print</span><br></pre></td></tr></table></figure><h3 id="如何让一个程序在后台运行并把输入定向到指定的文件"><a href="#如何让一个程序在后台运行并把输入定向到指定的文件" class="headerlink" title="如何让一个程序在后台运行并把输入定向到指定的文件"></a>如何让一个程序在后台运行并把输入定向到指定的文件</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup 程序 &gt;&gt; 文件名 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h3 id="如何实时的显示一个文件的输出"><a href="#如何实时的显示一个文件的输出" class="headerlink" title="如何实时的显示一个文件的输出"></a>如何实时的显示一个文件的输出</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用more或者less</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">tail -100f // 实时显示输出的后100行</span><br></pre></td></tr></table></figure><h3 id="查看所有用户"><a href="#查看所有用户" class="headerlink" title="查看所有用户"></a>查看所有用户</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="有mail-log的一个文档，内容为若干邮件地址，其中用’-n’将邮件地址分隔。要求从中"><a href="#有mail-log的一个文档，内容为若干邮件地址，其中用’-n’将邮件地址分隔。要求从中" class="headerlink" title="有mail.log的一个文档，内容为若干邮件地址，其中用’\n’将邮件地址分隔。要求从中"></a>有mail.log的一个文档，内容为若干邮件地址，其中用’\n’将邮件地址分隔。要求从中</h3><blockquote><p>有mail.log的一个文档，内容为若干邮件地址，其中用’\n’将邮件地址分隔。要求从中<br>挑选出sina.com的邮件地址（包括从文件读取、过滤到列印出来）。<br>  mail.log内容如下：<br>  <a href="mailto:james@sina.com.cn" target="_blank" rel="noopener">james@sina.com.cn</a><br>  <a href="mailto:jack@163.com" target="_blank" rel="noopener">jack@163.com</a><br>  <a href="mailto:zhansan@sohu.com" target="_blank" rel="noopener">zhansan@sohu.com</a><br>  <a href="mailto:lisi@hotmail.com" target="_blank" rel="noopener">lisi@hotmail.com</a><br>  <a href="mailto:wangwu@gmail.com" target="_blank" rel="noopener">wangwu@gmail.com</a></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat mail.log | grep sina.com</span><br></pre></td></tr></table></figure><h3 id="请解释下列10个shell命令的用途"><a href="#请解释下列10个shell命令的用途" class="headerlink" title="请解释下列10个shell命令的用途"></a>请解释下列10个shell命令的用途</h3><blockquote><p>top、ps、mv、find、df、cat、chmod、chgrp、grep、wc</p></blockquote><ul><li><code>top</code>: 该命令提供了实时对系统处理器状态的监控，它能够实时显示系统中各个进程的资源占用情况。</li><li><code>ps</code>: 显示系统进程在瞬间的运行动态。</li><li><code>mv</code>: 文件/目录改名或变更存储位置</li><li><code>find</code>: 在指定的路径下查找指定文件。</li><li><code>df</code>: 检查磁盘空间占用情况。</li><li><code>cat</code>: 将文件的内容打印到标准输出。</li><li><code>chmod</code>: 改变文件的权限。</li><li><code>chgrp</code>: 改变文件所属组</li><li><code>grep</code>: 过滤文本，根据指定的字符串，对文件的每一行进行搜索，如找到，则输出该行内容。</li><li><code>wc</code>: 统计指定文件中的字节数、字数、行数，并将统计结果显示输出。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="面试/笔试题" scheme="http://blog.caoxl.com/categories/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="Linux" scheme="http://blog.caoxl.com/tags/Linux/"/>
    
      <category term="运维笔试题" scheme="http://blog.caoxl.com/tags/%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Lumen5.7 实现邮件发送</title>
    <link href="http://blog.caoxl.com/2019/11/07/Lumen57-Use-Email/"/>
    <id>http://blog.caoxl.com/2019/11/07/Lumen57-Use-Email/</id>
    <published>2019-11-07T02:24:42.000Z</published>
    <updated>2019-11-07T07:12:20.821Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><code>Lumen5.7</code> 实现邮件发送</p></blockquote><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> illuminate/mail:<span class="number">5.7</span></span><br><span class="line">composer <span class="keyword">require</span> guzzlehttp/guzzle:<span class="number">6.3</span></span><br><span class="line">composer <span class="keyword">require</span> jeremeamia/SuperClosure</span><br></pre></td></tr></table></figure><blockquote><p>查看相关版本要求<br><a href="https://packagist.org/packages/illuminate/mail#v5.7.28" target="_blank" rel="noopener">illuminate/mail:5.7</a><br><a href="https://packagist.org/packages/guzzlehttp/guzzle#6.3.3" target="_blank" rel="noopener">guzzlehttp/guzzle:6.3</a><br><a href="https://packagist.org/packages/jeremeamia/superclosure" target="_blank" rel="noopener">jeremeamia/SuperClosure</a></p></blockquote><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><ul><li>添加<code>mail.php</code>配置文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'driver'</span> =&gt; env(<span class="string">'MAIL_DRIVER'</span>, <span class="string">'smtp'</span>),</span><br><span class="line">    <span class="string">'host'</span>   =&gt; env(<span class="string">'MAIL_HOST'</span>, <span class="string">'smtp.mailgun.org'</span>),</span><br><span class="line">    <span class="string">'port'</span>   =&gt; env(<span class="string">'MAIL_PORT'</span>, <span class="number">587</span>),</span><br><span class="line">    <span class="string">'from'</span>   =&gt; [</span><br><span class="line">        <span class="string">'address'</span> =&gt; env(<span class="string">'MAIL_FROM_ADDRESS'</span>, <span class="string">'hello@example.com'</span>),</span><br><span class="line">        <span class="string">'name'</span> =&gt; env(<span class="string">'MAIL_FROM_NAME'</span>, <span class="string">'Example'</span>),</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'encryption'</span> =&gt; env(<span class="string">'MAIL_ENCRYPTION'</span>, <span class="string">'tls'</span>),</span><br><span class="line">    <span class="string">'username'</span>   =&gt; env(<span class="string">'MAIL_USERNAME'</span>),</span><br><span class="line">    <span class="string">'password'</span>   =&gt; env(<span class="string">'MAIL_PASSWORD'</span>),</span><br><span class="line">    <span class="string">'sendmail'</span>   =&gt; <span class="string">'/usr/sbin/sendmail -bs'</span>,</span><br><span class="line">    <span class="string">'markdown'</span>   =&gt; [</span><br><span class="line">        <span class="string">'theme'</span> =&gt; <span class="string">'default'</span>,</span><br><span class="line">        <span class="string">'paths'</span> =&gt; [</span><br><span class="line">            resource_path(<span class="string">'views/vendor/mail'</span>),</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'log_channel'</span> =&gt; env(<span class="string">'MAIL_LOG_CHANNEL'</span>),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>加载配置文件 <code>bootstrap/app.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$app-&gt;configure(<span class="string">'mail'</span>);</span><br></pre></td></tr></table></figure><ul><li>注册 mailer – 在 <code>bootstrap/app.php</code> 中，<code>return $app;</code> 之前，增加以下内容：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$app-&gt;singleton(<span class="string">'mailer'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($app)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $app-&gt;loadComponent(<span class="string">'mail'</span>, Illuminate\Mail\MailServiceProvider::class, <span class="string">'mailer'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><code>EmailSendController</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mail::to($email)-&gt;send(<span class="keyword">new</span> EmailVerify($code, $prefix));</span><br></pre></td></tr></table></figure><ul><li><code>EmailVerify</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Support</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>\<span class="title">Queueable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Mail</span>\<span class="title">Mailable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">SerializesModels</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailVerify</span> <span class="keyword">extends</span> <span class="title">Mailable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Queueable</span>, <span class="title">SerializesModels</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $code;</span><br><span class="line">    <span class="keyword">public</span> $subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> EMAIL_SUBJECT = [</span><br><span class="line">        <span class="string">'register'</span> =&gt; <span class="string">'【爱豆盒子】用户注册确认'</span>,</span><br><span class="line">        <span class="string">'password'</span> =&gt; <span class="string">'【爱豆盒子】重置密码'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * EmailVerify constructor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $prefix</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($code, $prefix = <span class="string">'register'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;code    = $code;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;subject = <span class="keyword">static</span>::EMAIL_SUBJECT[$prefix];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build the message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;from(env(<span class="string">'MAIL_FROM_ADDRESS'</span>), env(<span class="string">'MAIL_FROM_NAME'</span>))</span><br><span class="line">            -&gt;view(<span class="string">'emails.email'</span>)</span><br><span class="line">            -&gt;subject(<span class="keyword">$this</span>-&gt;subject)</span><br><span class="line">            -&gt;with([</span><br><span class="line">                <span class="string">'verify_code'</span> =&gt; <span class="keyword">$this</span>-&gt;code,</span><br><span class="line">            ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Lumen" scheme="http://blog.caoxl.com/tags/Lumen/"/>
    
      <category term="Email" scheme="http://blog.caoxl.com/tags/Email/"/>
    
  </entry>
  
  <entry>
    <title>使用Supervisor监管LaravelS</title>
    <link href="http://blog.caoxl.com/2019/11/06/Supervisor-For-Laravels/"/>
    <id>http://blog.caoxl.com/2019/11/06/Supervisor-For-Laravels/</id>
    <published>2019-11-06T02:42:02.000Z</published>
    <updated>2019-11-06T03:24:42.335Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Supervisor 是一个 Python 写的进程管理工具，有时一个进程需要在后台运行，并且意外挂掉后能够自动重启，就需要这么一个管理进程的工具。</p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>使用 pip 工具进行安装：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># sudo pip install supervisor</span></span><br></pre></td></tr></table></figure><ul><li>Ubuntu 系统使用 apt-get</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure><ul><li>检查是否安装完成</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># supervisord --help</span></span><br><span class="line">supervisord -- run a set of applications <span class="keyword">as</span> daemons.</span><br><span class="line"></span><br><span class="line">Usage: /usr/bin/supervisord [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-c/--configuration FILENAME -- configuration file path (searches <span class="keyword">if</span> not given)</span><br><span class="line">-n/--nodaemon -- run in the foreground (same <span class="keyword">as</span> <span class="string">'nodaemon=true'</span> in config file)</span><br><span class="line">-h/--help -- <span class="keyword">print</span> this usage message <span class="keyword">and</span> <span class="keyword">exit</span></span><br><span class="line">-v/--version -- <span class="keyword">print</span> supervisord version number <span class="keyword">and</span> <span class="keyword">exit</span></span><br><span class="line">-u/--user USER -- run supervisord <span class="keyword">as</span> this user (<span class="keyword">or</span> numeric uid)</span><br><span class="line">-m/--umask UMASK -- <span class="keyword">use</span> <span class="title">this</span> <span class="title">umask</span> <span class="title">for</span> <span class="title">daemon</span> <span class="title">subprocess</span> (<span class="title">default</span> <span class="title">is</span> 022)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>运行这个命令可以生成一个默认的配置文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo_supervisord_conf &gt; /etc/supervisord/supervisord.conf</span><br></pre></td></tr></table></figure><p>生成成功后，打开编辑这个文件，把最后的 include 块的注释打开，并修改如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">include</span>]</span><br><span class="line">files = /etc/supervisor<span class="comment">/*.conf</span></span><br></pre></td></tr></table></figure><p>新增的 <code>Supervisor</code> 配置文件放在 <code>/etc/supervisor</code> 目录下，并且以 <code>conf</code> 结尾。</p><p>这时我们使用新的配置文件来启动 Supervisor：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure><ul><li>如果提示已经有进程在运行，那么先 kill 掉它。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># supervisord -c /etc/supervisord.conf </span></span><br><span class="line">Error: Another program is already listening on a port that one of our HTTP servers is configured to <span class="keyword">use</span>.  <span class="title">Shut</span> <span class="title">this</span> <span class="title">program</span> <span class="title">down</span> <span class="title">first</span> <span class="title">before</span> <span class="title">starting</span> <span class="title">supervisord</span>.</span><br><span class="line"><span class="title">For</span> <span class="title">help</span>, <span class="title">use</span> /<span class="title">usr</span>/<span class="title">bin</span>/<span class="title">supervisord</span> -<span class="title">h</span></span><br></pre></td></tr></table></figure><ul><li>找到旧进程, kill掉</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># ps -ef | grep supervisord</span></span><br><span class="line">root       <span class="number">551</span> <span class="number">31716</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">53</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=auto supervisord</span><br><span class="line">root     <span class="number">32156</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">18</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /usr/bin/python2 /usr/bin/supervisord -c ./supervisor/supervisord.conf</span><br><span class="line">[root@caoxl ~]<span class="comment"># kill -9 32156</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p><code>Supervisor</code>管理<code>LaravelS</code>进程</p></blockquote><ul><li>新增 <code>/etc/supervisor/supervisord.conf</code> 配置文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[program: laravel6]</span><br><span class="line">command=/usr/local/php/php72/bin/php /<span class="keyword">var</span>/www/laravel6/bin/laravels start -i</span><br><span class="line">directory=/<span class="keyword">var</span>/www/laravel6</span><br><span class="line">process_name=%(process_num)s</span><br><span class="line">autorestart=<span class="keyword">true</span></span><br><span class="line">autostart=<span class="keyword">true</span></span><br><span class="line">stderr_logfile=/<span class="keyword">var</span>/www/laravel6/storage/logs/supervisord-stderr.log</span><br><span class="line">stdout_logfile=/<span class="keyword">var</span>/www/laravel6/storage/logs/supervisord-stdout.log</span><br><span class="line">user=root</span><br><span class="line">numprocs=<span class="number">1</span></span><br><span class="line">startsecs=<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>说明</li><li><code>command</code>: 运行程序的命令</li><li><code>directory</code>: 命令执行的目录</li><li><code>autorestart</code>: 程序意外退出是否自动重启</li><li><code>autostart</code>: 是否自动启动</li><li><code>stderr_logfile</code>: 错误日志文件</li><li><code>stdout_logfile</code>: 输出日志文件</li><li><code>user</code>: 进程执行的用户身份</li><li><code>numprocs</code>: 进程数量</li><li><code>startsecs</code>: 自动重启间隔</li></ul></blockquote><p>一切就绪后，我们使用如下命令就可以启动进程的监听了：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# sudo supervisorctl reread</span><br><span class="line">laravel6: changed</span><br><span class="line"></span><br><span class="line">[root@caoxl ~]# sudo supervisorctl update</span><br><span class="line">laravel6: stopped</span><br><span class="line">laravel6: updated process group</span><br><span class="line"></span><br><span class="line">[root@caoxl ~]# sudo supervisorctl start laravel6:*</span><br></pre></td></tr></table></figure><ul><li>检查开启成功</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]<span class="comment"># ps -ef | grep laravels</span></span><br><span class="line">root      <span class="number">2258</span>   <span class="number">593</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">15</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /<span class="keyword">var</span>/www/laravel6 laravels: master process</span><br><span class="line">root      <span class="number">2269</span>  <span class="number">2258</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">15</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /<span class="keyword">var</span>/www/laravel6 laravels: manager process</span><br><span class="line">root      <span class="number">2275</span>  <span class="number">2269</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">15</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /<span class="keyword">var</span>/www/laravel6 laravels: task worker process <span class="number">4</span></span><br><span class="line">root      <span class="number">2276</span>  <span class="number">2269</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">15</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /<span class="keyword">var</span>/www/laravel6 laravels: task worker process <span class="number">5</span></span><br><span class="line">root      <span class="number">2277</span>  <span class="number">2269</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">15</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /<span class="keyword">var</span>/www/laravel6 laravels: task worker process <span class="number">6</span></span><br><span class="line">root      <span class="number">2278</span>  <span class="number">2269</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">15</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /<span class="keyword">var</span>/www/laravel6 laravels: task worker process <span class="number">7</span></span><br><span class="line">root      <span class="number">2279</span>  <span class="number">2269</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">15</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /<span class="keyword">var</span>/www/laravel6 laravels: worker process <span class="number">0</span></span><br><span class="line">root      <span class="number">2280</span>  <span class="number">2269</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">15</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /<span class="keyword">var</span>/www/laravel6 laravels: worker process <span class="number">1</span></span><br><span class="line">root      <span class="number">2281</span>  <span class="number">2269</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">15</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /<span class="keyword">var</span>/www/laravel6 laravels: worker process <span class="number">2</span></span><br><span class="line">root      <span class="number">2282</span>  <span class="number">2269</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">15</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /<span class="keyword">var</span>/www/laravel6 laravels: worker process <span class="number">3</span></span><br><span class="line">root      <span class="number">2337</span>  <span class="number">1412</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">16</span> pts/<span class="number">4</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=auto laravels</span><br></pre></td></tr></table></figure><ul><li>检查LaravelS进程</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl laravel6]<span class="comment"># php bin/laravels info</span></span><br><span class="line"> _                               _  _____ </span><br><span class="line">| |                             | |/ ____|</span><br><span class="line">| |     __ _ _ __ __ ___   _____| | (___  </span><br><span class="line">| |    / _` | <span class="string">'__/ _` \ \ / / _ \ |\___ \ </span></span><br><span class="line"><span class="string">| |___| (_| | | | (_| |\ V /  __/ |____) |</span></span><br><span class="line"><span class="string">|______\__,_|_|  \__,_| \_/ \___|_|_____/ </span></span><br><span class="line"><span class="string">                                           </span></span><br><span class="line"><span class="string">Speed up your Laravel/Lumen</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; Components</span></span><br><span class="line"><span class="string">+---------------------------+---------+</span></span><br><span class="line"><span class="string">| Component                 | Version |</span></span><br><span class="line"><span class="string">+---------------------------+---------+</span></span><br><span class="line"><span class="string">| PHP                       | 7.2.7   |</span></span><br><span class="line"><span class="string">| Swoole                    | 4.4.7   |</span></span><br><span class="line"><span class="string">| LaravelS                  | 3.5.12  |</span></span><br><span class="line"><span class="string">| Laravel Framework [local] | 6.4.1   |</span></span><br><span class="line"><span class="string">+---------------------------+---------+</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; Protocols</span></span><br><span class="line"><span class="string">+------------------------+--------+-------------------------------+----------------+</span></span><br><span class="line"><span class="string">| Protocol               | Status | Handler                       | Listen At      |</span></span><br><span class="line"><span class="string">+------------------------+--------+-------------------------------+----------------+</span></span><br><span class="line"><span class="string">| Main HTTP              | On     | Laravel Framework             | 127.0.0.1:5200 |</span></span><br><span class="line"><span class="string">| Main WebSocket         | On     | App\Services\WebSocketService | 127.0.0.1:5200 |</span></span><br><span class="line"><span class="string">| Port#0 TCP IPV4 Socket | On     | App\Sockets\SwooleTcpSocket   | 127.0.0.1:5300 |</span></span><br><span class="line"><span class="string">| Port#1 UDP IPV4 Socket | On     | App\Sockets\SwooleUdpSocket   | 0.0.0.0:5301   |</span></span><br><span class="line"><span class="string">+------------------------+--------+-------------------------------+----------------+</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; Feedback: https://github.com/hhxsv5/laravel-s</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Supervisor 是一个 Python 写的进程管理工具，有时一个进程需要在后台运行，并且意外挂掉后能够自动重启，就需要这么一个管理进程的工具。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="LaravelS" scheme="http://blog.caoxl.com/tags/LaravelS/"/>
    
      <category term="Supervisor" scheme="http://blog.caoxl.com/tags/Supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令行测试WebSocket</title>
    <link href="http://blog.caoxl.com/2019/10/29/Linux-Testing-WebSocket/"/>
    <id>http://blog.caoxl.com/2019/10/29/Linux-Testing-WebSocket/</id>
    <published>2019-10-29T03:36:37.000Z</published>
    <updated>2019-10-29T03:52:10.404Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><code>Linux</code>环境下，分别使用<code>curl</code>和<code>wscat</code>命令测试<code>websocket</code>连接。</p></blockquote><a id="more"></a><h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><blockquote><p>这里用swoole搭建一个websocket server</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建WebSocket服务器对象, 监听0.0.0.0:9502</span></span><br><span class="line">$web_socket = <span class="keyword">new</span> swoole_websocket_server(<span class="string">'0.0.0.0'</span>, <span class="number">9502</span>);</span><br><span class="line"></span><br><span class="line">$web_socket-&gt;on(<span class="string">'start'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($web_socket)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"WebSocket server is started at http://127.0.0.1:9502\n"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听WebSocket连接打开事件</span></span><br><span class="line">$web_socket-&gt;on(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($web_socket, $request)</span> </span>&#123;</span><br><span class="line">    var_dump($request-&gt;fd, <span class="string">"Hello, Welcome client-&#123;$fd&#125;\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听WebSocket消息事件</span></span><br><span class="line">$web_socket-&gt;on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($web_socket, $frame)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"received message: &#123;$frame-&gt;data&#125;\n"</span>;</span><br><span class="line">    $web_socket-&gt;push($frame-&gt;fd, <span class="string">"server: &#123;$frame-&gt;data&#125;"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听WebSocket连接关闭事件</span></span><br><span class="line">$web_socket-&gt;on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($web_socket, $fd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"client-&#123;$fd&#125; is closed\n"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启服务</span></span><br><span class="line">$web_socket-&gt;start();</span><br></pre></td></tr></table></figure><ul><li>开启<code>websocket server</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl Start]<span class="comment"># php websocket_server.php </span></span><br><span class="line">WebSocket server is started at http:<span class="comment">//127.0.0.1:950</span></span><br></pre></td></tr></table></figure><h2 id="wscat"><a href="#wscat" class="headerlink" title="wscat"></a>wscat</h2><blockquote><p>wscat是一个用来连接websocket的命令行工具，nodejs开发的。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl Start]<span class="comment"># npm install -g wscat</span></span><br><span class="line">/root/.nvm/versions/node/v11<span class="number">.1</span><span class="number">.0</span>/bin/wscat -&gt; /root/.nvm/versions/node/v11<span class="number">.1</span><span class="number">.0</span>/lib/node_modules/wscat/bin/wscat</span><br><span class="line">+ wscat@<span class="number">3.0</span><span class="number">.0</span></span><br><span class="line">added <span class="number">12</span> packages from <span class="number">9</span> contributors in <span class="number">8.03</span>s</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line">[root@caoxl Start]<span class="comment"># wscat -V</span></span><br><span class="line"><span class="number">3.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><ul><li>使用wscat测试WebSocket</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@caoxl Start]<span class="comment"># wscat -c ws://127.0.0.1:9502</span></span><br><span class="line">Connected (press CTRL+C to quit)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl --<span class="keyword">include</span> \</span><br><span class="line">     --no-buffer \</span><br><span class="line">     --header <span class="string">"Connection: Upgrade"</span> \</span><br><span class="line">     --header <span class="string">"Upgrade: websocket"</span> \</span><br><span class="line">     --header <span class="string">"Host: http://127.0.0.1:9502"</span> \</span><br><span class="line">     --header <span class="string">"Origin: http://www.caoxl.com"</span> \</span><br><span class="line">     --header <span class="string">"Sec-WebSocket-Key: NVwjmQUcWCenfWu98asDmg=="</span> \</span><br><span class="line">     --header <span class="string">"Sec-WebSocket-Version: 13"</span> \</span><br><span class="line">     http:<span class="comment">//127.0.0.1:9502</span></span><br></pre></td></tr></table></figure><p>注意这里不需要特定的密钥（<code>Sec-WebSocket-Key</code>），所以随便取一个都可以。该头文件的作用是防止缓存<code>websocket</code>请求。</p><ul><li>正常情况下输出如下：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">101</span> Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: oPhRcOTYgRvrC0D+cTPcN3XYC1k=</span><br><span class="line">Sec-WebSocket-Version: <span class="number">13</span></span><br><span class="line">Server: swoole-http-server</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;环境下，分别使用&lt;code&gt;curl&lt;/code&gt;和&lt;code&gt;wscat&lt;/code&gt;命令测试&lt;code&gt;websocket&lt;/code&gt;连接。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Linux" scheme="http://blog.caoxl.com/tags/Linux/"/>
    
      <category term="WebSocket" scheme="http://blog.caoxl.com/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>Linux下安装Go环境</title>
    <link href="http://blog.caoxl.com/2019/10/25/Linux-Install-Golang-Environment/"/>
    <id>http://blog.caoxl.com/2019/10/25/Linux-Install-Golang-Environment/</id>
    <published>2019-10-25T08:33:18.000Z</published>
    <updated>2019-10-28T08:14:16.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Golang官网下载地址：<a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a></p></blockquote><a id="more"></a><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><ul><li><ol><li>打开官网下载地址选择对应的系统版本, 复制下载链接</li></ol></li></ul><blockquote><p>这里我选择的最新的Linux版本: <a href="https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz" target="_blank" rel="noopener">go1.13.3.linux-amd64.tar.gz</a></p></blockquote><ul><li><ol start="2"><li><code>cd</code> 进入你用来存放安装包的目录, 执行下载操作</li></ol></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# cd /download/</span><br><span class="line">[root@caoxl download]# wget https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>下载完成, 执行解压</li></ol></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl download]# tar -C /usr/local/ -zxvf go1.13.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>添加<code>/usr/loacl/go/bin</code>目录到<code>PATH</code>变量中。添加到<code>/etc/profile</code> 或<code>$HOME/.profile</code>都可以</li></ol></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl go]# vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="section"># 在最后一行添加</span></span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export PATH=$PATH:$GOROOT/bin</span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li>保存退出, <code>source</code>一下</li></ol></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl go]# source /etc/profile</span><br></pre></td></tr></table></figure><ul><li><ol start="6"><li>执行go version，如果出现版本号，则Go环境安装成功</li></ol></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl go]# go version</span><br><span class="line">go version go1.13.3 linux/amd64</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Golang官网下载地址：&lt;a href=&quot;https://golang.org/dl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://golang.org/dl/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Linux" scheme="http://blog.caoxl.com/tags/Linux/"/>
    
      <category term="Go" scheme="http://blog.caoxl.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>广州黄埔区学历入户指南</title>
    <link href="http://blog.caoxl.com/2019/10/21/Settled-In-Guangzhou/"/>
    <id>http://blog.caoxl.com/2019/10/21/Settled-In-Guangzhou/</id>
    <published>2019-10-21T02:57:57.000Z</published>
    <updated>2019-11-29T08:14:02.160Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>黄埔区引进人才入户指南(学历入户)实际使用记录</p></blockquote><a id="more"></a><h2 id="完整入户流程"><a href="#完整入户流程" class="headerlink" title="完整入户流程"></a>完整入户流程</h2><blockquote><p><code>申请</code> -&gt; <code>领取入户卡</code> -&gt; <code>领取户口准予迁入证</code> -&gt; <code>原籍户口迁出</code> -&gt; <code>落户</code> </p></blockquote><h2 id="办理流程"><a href="#办理流程" class="headerlink" title="办理流程"></a>办理流程</h2><blockquote><p><code>个人网上填报</code> -&gt; <code>用人单位确认提交</code> -&gt; <code>区人才交流服务中心初审</code> -&gt; <code>预约（按审批意见要求）</code> -&gt; <code>提交纸质资料</code> -&gt; <code>区人社局审核</code> -&gt; <code>网上公示</code> -&gt; <code>公示无异议打印批复</code> -&gt; <code>核发入户卡</code>。<br><u><a href="http://www.gdd.gov.cn/hp/yjrcrh/201904/0585db2863d24f2f81cf817d1ca186df.shtml" target="_blank" rel="noopener">引进人才入户申办指南</a></u></p></blockquote><h3 id="一、个人网上填报"><a href="#一、个人网上填报" class="headerlink" title="一、个人网上填报"></a><strong>一、个人网上填报</strong></h3><blockquote><p><u><a href="http://tyrz.gd.gov.cn/tif/sso/static/?client_id=gzrspt&amp;gdbsTokenId=&amp;redirect_uri=http%3A%2F%2Fgzrsj.hrssgz.gov.cn%2Fvsgzhr%2FLogin_rcyjsb.aspx&amp;response_type=code&amp;scope=all&amp;service=initService" target="_blank" rel="noopener">广东省统一身份认证平台</a></u> 登录选择 <u><a href="http://gzrsj.hrssgz.gov.cn/vsgzhr/login_home.aspx" target="_blank" rel="noopener">人才引进申报系统</a></u></p></blockquote><h3 id="二、用人单位确认提交"><a href="#二、用人单位确认提交" class="headerlink" title="二、用人单位确认提交"></a><strong>二、用人单位确认提交</strong></h3><blockquote><p>用人单位如未开通法人单位权限请<u><a href="http://m.gz.bendibao.com/z/hukou/250095.html" target="_blank" rel="noopener">广州人才入户申请法人单位管理员权限操作指南</a></u>开通;<br>黄埔区用人单位向<strong>“广州市黄埔区人力资源和社会保障局(800005)”</strong>提交审批;</p></blockquote><h3 id="三、-区人才交流服务中心预审"><a href="#三、-区人才交流服务中心预审" class="headerlink" title="三、 区人才交流服务中心预审"></a><strong>三、 区人才交流服务中心预审</strong></h3><blockquote><p>区人才交流服务中心网上预审申请人资料。</p><ul><li>若“审批结果”为“同意”，申请人请登录预约网址预约提交资料时间，预约成功后申请人本人持<strong>身份证原件</strong>、<strong>申办资料所有原件及复印件</strong>到<code>黄埔区人才交流服务中心窗口</code>递交纸质资料现场初审。</li><li><p><u><a href="http://wsbs.gz.gov.cn/gz/wsbs/yyzx.jsp" target="_blank" rel="noopener">在线预约网址 - 广州市政务服务中心</a></u></p></li><li><p>若“审批结果”为“退案”，可致电<code>黄埔区人才交流服务中心中心</code>咨询了解退案原因。<br>咨询电话: <code>020-82012125</code></p></li></ul></blockquote><h3 id="四、-预约及提交纸质申报资料"><a href="#四、-预约及提交纸质申报资料" class="headerlink" title="四、 预约及提交纸质申报资料"></a><strong>四、 预约及提交纸质申报资料</strong></h3><blockquote><p>“审批结果”为 <strong>“同意”</strong> 的，申请人请登录预约网址预约提交资料时间，<br><strong>预约成功</strong>后申请人本人持身份证原件、申办资料所有原件及复印件到<strong>黄埔区人才交流服务中心窗口</strong>递交纸质资料<strong>现场初审</strong>。</p></blockquote><ul><li>初审资料清单</li></ul><blockquote><ul><li><strong>申请人本人持身份证原件、申办资料所有原件及复印件</strong></li><li><ol><li><code>广州市人才引进申报表</code>(原件需要正反面打印, 需要盖章,签字)</li></ol></li><li><ol start="2"><li><code>主迁人的户口簿首页加个人页</code> (复印件)</li></ol></li><li><ol start="3"><li><code>落户地址材料</code> (复印件)</li></ol></li><li><ol start="4"><li><code>毕业证书</code>、<code>学历认证资料</code>、<code>学位证书</code>、<code>学位认证资料</code> (复印件)</li></ol></li><li><ol start="5"><li>如有配偶随迁: <code>结婚证一份</code>、<code>配偶户口簿首页加个人页</code> (复印件)</li></ol></li><li><ol start="6"><li>如有小孩随迁: <code>小孩户口簿首页加个人页</code>、<code>出生证</code> (复印件)</li></ol></li></ul></blockquote><h3 id="五、-审核、公示、打印批复"><a href="#五、-审核、公示、打印批复" class="headerlink" title="五、 审核、公示、打印批复"></a><strong>五、 审核、公示、打印批复</strong></h3><blockquote><p>区人社局审核材料，审核通过的及时公示（公示期为5个工作日），不通过的予以退案并告知理由。<strong>公示无异议，打印批复</strong>。</p></blockquote><h3 id="六、-领取入户卡"><a href="#六、-领取入户卡" class="headerlink" title="六、 领取入户卡"></a><strong>六、 领取入户卡</strong></h3><blockquote><p>区人才交流服务中心发放 <strong>《广州市入户信息卡》</strong> 和批复。<br>申请人按通知要求，持本人身份证原件到黄埔区人才交流服务中心领取或注意EMS邮件查收。(取决于你提交资料选择的接收方式)<br>领取入户卡后，需到公安局进行落户</p></blockquote><h3 id="七、-领取户口准予迁入证-入户复核"><a href="#七、-领取户口准予迁入证-入户复核" class="headerlink" title="七、 领取户口准予迁入证(入户复核)"></a><strong>七、 领取户口准予迁入证(入户复核)</strong></h3><blockquote><p><a href="https://gzhzyw.gzjd.gov.cn/pub/yewuyuyue/process/%E5%B8%82%E5%A4%96%E8%BF%81%E5%85%A5-%E5%85%A5%E6%88%B7%E6%A0%B8%E5%87%86" target="_blank" rel="noopener">广州政务服务网 - 入户核准</a></p></blockquote><blockquote><p>拿到<strong>入户卡</strong>后微信搜索微信公众号 <code>广州公安</code> -&gt; <code>关注</code> -&gt; <code>办事大厅</code> -&gt; <code>户政业务</code> -&gt; <code>户政业务智能咨询预约</code> -&gt; <strong><code>入户核准</code></strong> -&gt; <code>是</code> -&gt; <code>是</code> -&gt; <code>人才引进类人员</code> -&gt; <code>工作调动、招聘、招录</code> -&gt; <code>迁入个人房产地址/否</code> -&gt; <code>迁入单位集体户/否</code> -&gt; <code>预约办理</code> -&gt; <code>填写身份信息</code> -&gt; <code>选区级</code> -&gt; <code>预约时间</code></p></blockquote><blockquote><p>现场审核通过会给<strong>准迁证</strong>或不通过不给（所有原件不得涂改）</p></blockquote><ul><li><strong>所需资料</strong>:<ul><li><code>入户信息卡</code></li><li><code>户口本</code></li><li><code>结婚证</code></li><li><code>出生证明</code></li><li><code>迁入人名下不动产证明</code></li></ul></li></ul><p><strong>注意:</strong> 需要不动产证明; 关注 <code>&quot;广州不动产登记&quot;</code>, 查询并且截图即可. </p><blockquote><p><strong>广州市公安局黄埔区分局办证中心</strong><br><code>地址</code>: <strong>广州 黄埔区 港湾路83号一层</strong><br><code>电话</code>: <strong>020-82286220</strong></p></blockquote><h3 id="八、-原籍户口迁出"><a href="#八、-原籍户口迁出" class="headerlink" title="八、 原籍户口迁出"></a><strong>八、 原籍户口迁出</strong></h3><blockquote><p>本省直接网签/<strong>外省带准迁证回老家办理迁出或寄回找人代办</strong>（如果委托代办就打电话问老家乡镇派出所户籍科要准备什么资料和人，不知道电话就打区县114查询</p></blockquote><ul><li><strong>办理资料:</strong><ul><li><code>准予迁入证明</code></li><li><code>户口本</code></li><li><code>结婚证</code></li><li><code>出生证明</code></li><li><code>人社局入户批复</code></li></ul></li></ul><h3 id="九、-落户"><a href="#九、-落户" class="headerlink" title="九、 落户"></a><strong>九、 落户</strong></h3><blockquote><p><a href="https://gzhzyw.gzjd.gov.cn/pub/yewuzixun/process/%E5%85%A5%E6%88%B7%E7%99%BB%E8%AE%B0" target="_blank" rel="noopener">广州政务服务网 - 入户登记</a><br>到<strong>市区内任一区公安分局办证中心（或可办理户政业务的派出所）</strong>办理入户手续。<br><code>老家迁出后</code> → <code>与需要随迁的家属先拍身份证照拿上回执再前往</code> <strong>落户乡镇街道派出所</strong> <code>上户口</code>  → <code>户口本现场会办好的/身份证制作一个月内需要回家坐等</code></p></blockquote><ul><li><strong>办理资料:</strong><ul><li>广州市入户人员信息卡</li><li>户口迁移证</li><li>准予迁入证明(第三联)</li><li>居民身份证</li><li>关系证明(结婚证, 出生证)</li><li>工作单位的营业执照副本</li><li>户口簿</li><li>身份证回执</li></ul></li></ul><h2 id="受理时间-地点-电话"><a href="#受理时间-地点-电话" class="headerlink" title="受理时间/地点/电话"></a>受理时间/地点/电话</h2><h3 id="领取入户卡"><a href="#领取入户卡" class="headerlink" title="领取入户卡"></a>领取入户卡</h3><ul><li><code>受理地点</code>: <strong>广州市黄埔区香雪大道中81号广州国际人才城1楼2-3号窗</strong></li><li><code>受理时间</code>: <strong>工作日 上午8：30-12:00  下午13:30-17:00</strong></li><li><code>咨询电话</code>: <strong>020-82012125</strong></li></ul><h3 id="领取准迁证"><a href="#领取准迁证" class="headerlink" title="领取准迁证"></a>领取准迁证</h3><h4 id="黄埔区公安分局办证中心港湾路办证点"><a href="#黄埔区公安分局办证中心港湾路办证点" class="headerlink" title="黄埔区公安分局办证中心港湾路办证点"></a>黄埔区公安分局办证中心港湾路办证点</h4><ul><li><code>受理地点</code>: <strong>广州市公安局黄埔区分局办证中心港湾路83号一层</strong></li><li><code>受理时间</code>: <strong>工作日8:30-12:00、14:00-17:30；双休日首日及其他国家法定节假日首日8:30-12:00、14:00-17:30</strong></li><li><code>咨询电话</code>: <strong>020-82286220</strong></li></ul><blockquote><p>将于2019年12月1日整合, 统一进驻广州市黄埔区广州开发区政务服务中心<br>广州市黄埔区香雪三路3号2楼A区</p></blockquote><h4 id="黄埔区公安分局办证中心香雪三路办证点"><a href="#黄埔区公安分局办证中心香雪三路办证点" class="headerlink" title="黄埔区公安分局办证中心香雪三路办证点"></a>黄埔区公安分局办证中心香雪三路办证点</h4><ul><li><code>受理地点</code>: <strong>广州市公安局黄埔区香雪三路3号</strong></li><li><code>受理时间</code>: <strong>工作日 上午8:45-11:45  下午13:30-16:45</strong></li><li><code>咨询电话</code>: <strong>020-83112265</strong></li></ul><h3 id="落户"><a href="#落户" class="headerlink" title="落户"></a>落户</h3><h4 id="市区内任一区公安分局办证中心"><a href="#市区内任一区公安分局办证中心" class="headerlink" title="市区内任一区公安分局办证中心"></a>市区内任一区公安分局办证中心</h4><ul><li><code>受理地点</code>: <strong>广州市公安局黄埔区分局办证中心港湾路83号二层</strong></li><li><code>受理时间</code>: <strong>工作日8:30-12:00、14:00-17:30；双休日首日及其他国家法定节假日首日8:30-12:00、14:00-17:30</strong></li><li><code>咨询电话</code>: <strong>020-82286220</strong></li></ul><h4 id="可办理户政业务的派出所"><a href="#可办理户政业务的派出所" class="headerlink" title="可办理户政业务的派出所"></a>可办理户政业务的派出所</h4><ul><li><code>受理地点</code>: <strong>迁入街道所属派出所(鱼珠派出所)</strong>(广东省广州市黄埔区鱼珠直街16号)</li><li><code>受理时间</code>: <strong>工作日 上午8：30-12:00  下午13:30-17:00</strong></li><li><code>咨询电话</code>: <strong>020-82270217</strong></li></ul><h2 id="准备资料"><a href="#准备资料" class="headerlink" title="准备资料"></a>准备资料</h2><ul><li><strong><code>户口本</code></strong></li><li><strong><code>办理人身份证</code>;<code>随迁人员身份证</code>;<code>新生儿出生医学证明</code>;<code>结婚证</code>;</strong></li><li><strong><code>毕业证</code>;<code>学位证</code>;<code>学历认证资料</code>;<code>学位认证资料</code></strong>;</li><li><strong><code>落户公共集体户承诺书(需要签名)</code></strong></li><li><strong><code>人才引进申办系统申报表</code></strong></li></ul><blockquote><p><a href="http://www.gdd.gov.cn/hp/yjrcrh/201904/0585db2863d24f2f81cf817d1ca186df/files/1202deef0a2a4d39978d87297c961dd0.xls" target="_blank" rel="noopener">(黄埔区公共集体户落户地址指引 - 点击下载)</a><br><a href="http://www.gdd.gov.cn/hp/yjrcrh/201904/0585db2863d24f2f81cf817d1ca186df/files/672a0cf4fcc64804a998de73b66f65a4.doc" target="_blank" rel="noopener">(落户公共集体户承诺书 - 点击下载)</a></p></blockquote><h2 id="附件上传说明"><a href="#附件上传说明" class="headerlink" title="附件上传说明"></a>附件上传说明</h2><ul><li><code>户口簿</code>(需要上传主页,有详细地址信息和登记机关盖章页)</li><li><code>本人学历证书</code></li><li><code>本人学历鉴定</code>(中国高等教育学生信息网)</li><li><code>本人学位证书</code></li><li><code>本人学位鉴定</code>(中国学位与研究生教育信息网)</li><li><code>落户地址材料</code>(落户公共集体户承诺书(需要手写签名))</li><li><code>结婚证/离婚证</code>（协议书/民事调解、判决书）  </li><li><code>配偶身份证</code>(随迁)</li><li><code>配偶户口簿</code>(随迁)</li><li><code>子女户口簿</code>(随迁)</li><li><code>子女出生医学证明</code>(随迁)</li></ul><h2 id="相关网址"><a href="#相关网址" class="headerlink" title="相关网址"></a>相关网址</h2><ul><li><a href="https://www.chsi.com.cn/xlcx/rhsq.jsp" target="_blank" rel="noopener">学历认证 - 中国高等教育学校信息网</a></li><li><a href="http://www.cdgdc.edu.cn/cn/" target="_blank" rel="noopener">学位认证 - 中国学位与研究生教育信息网</a></li><li><a href="http://wsbs.gz.gov.cn/gz/wsbs/yyzx.jsp" target="_blank" rel="noopener">在线预约 - 黄埔区人才交流服务中心</a></li><li><a href="http://www.gdd.gov.cn/hp/yjrcrh/201904/0585db2863d24f2f81cf817d1ca186df.shtml" target="_blank" rel="noopener">引进人才入户申办指南</a></li><li><a href="http://m.gz.bendibao.com/z/hukou/250095.html" target="_blank" rel="noopener">单位法人权限申办指南</a></li><li><a href="http://www.hp.gov.cn/hp07/0200/201909/3ce6cd9bd23d41b689a39a6574ac8fc0.shtml" target="_blank" rel="noopener">入户核准及入户登记办理须知</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;黄埔区引进人才入户指南(学历入户)实际使用记录&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Caoxl" scheme="http://blog.caoxl.com/categories/Caoxl/"/>
    
    
      <category term="落户广州" scheme="http://blog.caoxl.com/tags/%E8%90%BD%E6%88%B7%E5%B9%BF%E5%B7%9E/"/>
    
      <category term="学历入户" scheme="http://blog.caoxl.com/tags/%E5%AD%A6%E5%8E%86%E5%85%A5%E6%88%B7/"/>
    
  </entry>
  
  <entry>
    <title>Swoole 再学习</title>
    <link href="http://blog.caoxl.com/2019/10/17/Swoole-Relearning/"/>
    <id>http://blog.caoxl.com/2019/10/17/Swoole-Relearning/</id>
    <published>2019-10-17T02:35:16.000Z</published>
    <updated>2019-10-30T03:11:56.480Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>书读百遍其义自见</p></blockquote><a id="more"></a><h2 id="学习Swoole必备基础"><a href="#学习Swoole必备基础" class="headerlink" title="学习Swoole必备基础"></a>学习Swoole必备基础</h2><h3 id="多进程-多线程"><a href="#多进程-多线程" class="headerlink" title="多进程/多线程"></a>多进程/多线程</h3><ul><li>了解Linux操作系统<code>进程</code>和<code>线程</code>的概念</li></ul><blockquote><p><strong>进程</strong>是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。<br><strong>线程</strong>是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.</p></blockquote><ul><li>了解Linux<code>进程</code>/<code>线程</code>切换调度的基本知识</li></ul><blockquote><p>在引入线程的操作系统中，<strong>线程是调度和分配的基本单位</strong> ，<strong>进程是资源拥有的基本单位</strong> 。<br>把传统进程的两个属性分开，线程便能轻装运行，从而可显著地提高系统的并发程度。<br>在同一进程中，线程的切换不会引起进程的切换；在由一个进程中的线程切换到另一个进程中的线程时，才会引起进程的切换。</p></blockquote><ul><li>了解进程间通信的基本知识，如管道、<code>UnixSocket</code>、消息队列、共享内存</li></ul><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><ul><li>了解<code>SOCKET</code>的基本操作如 <code>accept/connect</code>、<code>send/recv</code>、<code>close</code>、<code>listen</code>、<code>bind</code></li><li>了解<code>SOCKET</code>的接收缓存区、发送缓存区、阻塞/非阻塞、超时等概念</li></ul><h3 id="IO复用"><a href="#IO复用" class="headerlink" title="IO复用"></a>IO复用</h3><ul><li>了解<code>select</code>/<code>poll</code>/<code>epoll</code></li><li>了解基于<code>select</code>/<code>epoll</code>实现的事件循环，<code>Reactor</code>模型</li><li>了解可读事件、可写事件</li></ul><h3 id="TCP-IP网络协议"><a href="#TCP-IP网络协议" class="headerlink" title="TCP/IP网络协议"></a>TCP/IP网络协议</h3><ul><li>了解<code>TCP</code>/<code>IP</code>协议</li><li>了解<code>TCP</code>、<code>UDP</code>传输协议</li></ul><h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><h4 id="使用-gdb-调试-Linux-程序"><a href="#使用-gdb-调试-Linux-程序" class="headerlink" title="使用 gdb 调试 Linux 程序"></a>使用 <code>gdb</code> 调试 <code>Linux</code> 程序</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb -p 进程ID</span><br><span class="line">gdb php</span><br><span class="line">gdb php core</span><br></pre></td></tr></table></figure><p><code>gdb</code>有3种使用方式: </p><ul><li>跟踪正在运行的PHP程序，使用 <code>gdb -p 进程ID</code></li><li>使用gdb运行并调试PHP程序，使用 <code>gdb php -&gt; run server.php</code> 进行调试</li><li>PHP程序发生<code>coredump</code>后使用<code>gdb</code>加载<code>core</code>内存镜像进行调试 <code>gdb php core</code></li></ul><h4 id="使用-strace-跟踪进程的系统调用"><a href="#使用-strace-跟踪进程的系统调用" class="headerlink" title="使用 strace 跟踪进程的系统调用"></a>使用 <code>strace</code> 跟踪进程的系统调用</h4><p><code>strace</code>可以跟踪系统调用的执行情况，在程序发生问题后，可以用<code>strace</code>分析和跟踪问题。 使用方法：</p><blockquote><p>strace -o /tmp/strace.log -f -p $PID</p></blockquote><ul><li><code>-f</code>: 表示跟踪多线程和多进程，如果不加-f参数，无法抓取到子进程和子线程的运行情况</li><li><code>-o</code>: 表示将结果输出到一个文件中</li><li><code>-p $PID</code>: 指定跟踪的进程ID，通过<code>ps aux</code>可以看到</li><li><code>-tt</code>: 打印系统调用发生的时间，精确到微妙</li><li><code>-s</code>: 限定字符串打印的长度，如<code>recvfrom</code>系统调用收到的数据，默认只打印<code>32</code>字节</li><li><code>-c</code> 实时统计每个系统调用的耗时</li><li><code>-T</code> 打印每个系统调用的耗时</li></ul><h4 id="使用-tcpdump-跟踪网络通信过程"><a href="#使用-tcpdump-跟踪网络通信过程" class="headerlink" title="使用 tcpdump 跟踪网络通信过程"></a>使用 <code>tcpdump</code> 跟踪网络通信过程</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -i any tcp port 9501</span><br></pre></td></tr></table></figure><ul><li><code>-i</code> 参数制定了网卡，<code>any</code>表示所有网卡</li><li><code>tcp</code> 指定仅监听<code>TCP</code>协议</li><li><code>port</code> 制定监听的端口</li></ul><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><blockquote><p>强大的<code>TCP/UDP Server</code>框架, <code>EventLoop</code>, 事件驱动, 异步, <code>Worker</code>进程组, <code>Task</code>异步任务, 毫秒定时器, <code>SSL/TLS</code>隧道加密</p></blockquote><ul><li><code>Http\Server</code>是<code>Server</code>的子类, 内置了<code>Http</code>的支持</li><li><code>WebSocket\Server</code>是<code>Http\Server</code>的子类, 内置了<code>WebSocket</code>的支持</li><li><code>Redis\Server</code>是<code>Server</code>的子类, 内置了<code>Redis</code>服务器端协议的支持</li></ul><blockquote><p>子类可以调用父类的所有方法和属性</p></blockquote><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><blockquote><p><code>TCP/UDP/UnixSocket</code>客户端，支持<code>IPv4/IPv6</code>，支持<code>SSL/TLS</code>隧道加密，支持<code>SSL</code>双向证书，支持同步并发调用，支持异步事件驱动编程。</p></blockquote><h2 id="Coroutine"><a href="#Coroutine" class="headerlink" title="Coroutine"></a>Coroutine</h2><blockquote><p><strong>协程</strong>可以理解为<strong>纯用户态的线程</strong>，其通过<code>协作</code>而不是<code>抢占</code>来进行切换。相对于进程或者线程，协程所有的操作都可以在用户态完成，创建和切换的消耗更低。<code>Swoole</code>可以为每一个请求创建对应的协程，根据IO的状态来合理的调度协程，这会带来了以下优势：</p></blockquote><blockquote><p>开发者可以无感知的用同步的代码编写方式达到异步IO的效果和性能，避免了传统异步回调所带来的离散的代码逻辑和陷入多层回调中导致代码无法维护。</p></blockquote><h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><blockquote><p>进程管理模块，可以方便的创建子进程，进程间通信，进程管理。</p></blockquote><h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><blockquote><p>基于<code>共享内存</code>和<code>自旋锁</code>实现的超高性能内存表。彻底解决线程，进程间数据共享，加锁同步等问题。<br><code>Table</code>的性能可以达到单线程每秒读写<code>200W</code>次</p></blockquote><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><blockquote><p><code>EventLoop API</code>，让用户可以直接操作底层的事件循环，将<code>socket</code>，<code>stream</code>，管道等<code>Linux</code>文件加入到事件循环中。<br><code>eventloop</code>接口仅可用于<code>socket</code>类型的文件描述符，不能用于磁盘文件读写</p></blockquote><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="无法连接到服务器的简单检测手段"><a href="#无法连接到服务器的简单检测手段" class="headerlink" title="无法连接到服务器的简单检测手段"></a>无法连接到服务器的简单检测手段</h3><ul><li>在<code>Linux</code>下，使用<code>netstat -an | grep 端口</code>，查看端口是否已经被打开处于<code>Listening</code>状态</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl Start]# netstat -an | grep 9501</span><br><span class="line">tcp        0      0 127.0.0.1:9501          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 127.0.0.1:9501          127.0.0.1:44212         TIME_WAIT  </span><br><span class="line">[root@caoxl Start]# netstat -an | grep 9501</span><br><span class="line">tcp        0      0 127.0.0.1:9501          127.0.0.1:44212         TIME_WAIT</span><br></pre></td></tr></table></figure><ul><li>上一步确认后，再检查防火墙问题</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl Start]# iptables -h</span><br><span class="line">iptables v1.4.21</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>注意服务器所使用的IP地址，如果是 <code>127.0.0.1</code> 回环地址，则客户端只能使用<code>127.0.0.1</code> 才能连接上</li><li>用的阿里云服务或者腾讯服务，需要在安全权限组进行设置开发的端口</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://wiki.swoole.com" target="_blank" rel="noopener">Swoole</a></li><li><a href="https://man.linuxde.net/" target="_blank" rel="noopener">Linux 命令大全</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;书读百遍其义自见&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Swoole" scheme="http://blog.caoxl.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 自动备份</title>
    <link href="http://blog.caoxl.com/2019/10/16/MySQL-Auto-Backup-In-CentOs/"/>
    <id>http://blog.caoxl.com/2019/10/16/MySQL-Auto-Backup-In-CentOs/</id>
    <published>2019-10-16T02:37:05.000Z</published>
    <updated>2019-10-16T03:40:32.166Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>定时备份数据库是一件必须做的事情</p></blockquote><a id="more"></a><ul><li>备份脚本</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#!/bin/sh</span></span><br><span class="line"><span class="section"># DB_USERNAME</span></span><br><span class="line">db_username='root'</span><br><span class="line"><span class="section"># DB_PASSWORD</span></span><br><span class="line">db_password='110119'</span><br><span class="line"><span class="section"># DB_HOST</span></span><br><span class="line">db_host='127.0.0.1'</span><br><span class="line"><span class="section"># Backup DB_NAME</span></span><br><span class="line">db_name='test'</span><br><span class="line"><span class="section"># Backup Dir</span></span><br><span class="line">backup_dir="test"</span><br><span class="line"><span class="section"># Date Formate (dd-mm-yyyy)</span></span><br><span class="line">time="$(date +"%Y<span class="emphasis">_%m_</span>%d<span class="emphasis">_%H_</span>%M_%S")"</span><br><span class="line"><span class="section"># MYSQL CLI</span></span><br><span class="line">MYSQL="/usr/local/mysql/bin/mysql"</span><br><span class="line"><span class="section"># MySQLDump CLI</span></span><br><span class="line">MYSQLDUMP="/usr/local/mysql/bin/mysqldump"</span><br><span class="line"><span class="section"># Gzip CLI</span></span><br><span class="line">GZIP="/bin/gzip"</span><br><span class="line"></span><br><span class="line">$MYSQLDUMP -u $db<span class="emphasis">_username -h $db_</span>host -p$db<span class="emphasis">_password $db_</span>name | $GZIP -9 &gt; "/data/backup/$time"<span class="emphasis">_"$db_</span>name.gz"</span><br></pre></td></tr></table></figure><ul><li>创建定时器</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">vim /etc/crontab</span><br></pre></td></tr></table></figure><ul><li>添加定时器</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 每天凌晨 1 点 30 分 进行数据备份</span></span><br><span class="line">30  1  <span class="emphasis">*  *</span>  * root /root/mysql-backup.sh</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>: 需要生命脚本执行用户: 如root</p></blockquote><ul><li>重启定时器</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# service crond restart</span><br></pre></td></tr></table></figure><ul><li>查看crontab状态</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# service crond status</span><br><span class="line">Redirecting to /bin/systemctl status crond.service</span><br><span class="line">● crond.service - Command Scheduler</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Wed 2019-10-16 10:50:48 CST; 51s ago</span><br><span class="line"> Main PID: 15813 (crond)</span><br><span class="line"><span class="code">    Tasks: 1</span></span><br><span class="line">   Memory: 620.0K</span><br><span class="line">   CGroup: /system.slice/crond.service</span><br><span class="line"><span class="code">           └─15813 /usr/sbin/crond -n</span></span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl backup]# ll -s</span><br><span class="line">total 12K</span><br><span class="line">4.0K -rw-rw-r-- 1 root root 440 Oct 16 11:30 2019<span class="emphasis">_10_</span>16<span class="emphasis">_11_</span>30<span class="emphasis">_38_</span>test.gz</span><br><span class="line">4.0K -rw-r--r-- 1 root root 440 Oct 16 11:38 2019<span class="emphasis">_10_</span>16<span class="emphasis">_11_</span>38<span class="emphasis">_01_</span>test.gz</span><br><span class="line">4.0K -rw-r--r-- 1 root root 441 Oct 16 11:39 2019<span class="emphasis">_10_</span>16<span class="emphasis">_11_</span>39<span class="emphasis">_01_</span>test.gz</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;定时备份数据库是一件必须做的事情&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="MySQL" scheme="http://blog.caoxl.com/tags/MySQL/"/>
    
      <category term="自动备份" scheme="http://blog.caoxl.com/tags/%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Hyperf 学习日志 II</title>
    <link href="http://blog.caoxl.com/2019/10/12/Hyperf-Learning-Notes-II/"/>
    <id>http://blog.caoxl.com/2019/10/12/Hyperf-Learning-Notes-II/</id>
    <published>2019-10-12T03:54:00.000Z</published>
    <updated>2019-10-14T08:08:28.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本文学习<a href="https://hyperf.wiki/#/zh/router" target="_blank" rel="noopener">Hyperf</a> 的基础功能</p></blockquote><a id="more"></a><h2 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a>基础功能</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>默认情况下路由由 <code>nikic/fast-route</code> 提供支持，并由 <code>hyperf/http-server</code> 组件负责接入到 <code>Hyperf</code> 中，<code>RPC</code> 路由由对应的 <code>hyperf/rpc-server</code> 组件负责。</p><h4 id="HTTP-路由"><a href="#HTTP-路由" class="headerlink" title="HTTP 路由"></a>HTTP 路由</h4><h5 id="通过闭包定义路由"><a href="#通过闭包定义路由" class="headerlink" title="通过闭包定义路由"></a>通过闭包定义路由</h5><p>构建一个最基本的路由只需一个 <code>URI</code> 和一个 <code>闭包(Closure)</code>，我们直接通过代码来演示一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Router</span>\<span class="title">Router</span>;</span><br><span class="line"></span><br><span class="line">Router::get(<span class="string">'/hello-hyperf'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello Hyperf.'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="定义标准路由"><a href="#定义标准路由" class="headerlink" title="定义标准路由"></a>定义标准路由</h5><p>所谓标准路由指的是由 <code>控制器(Controller)</code> 和 <code>操作(Action)</code> 来处理的路由，如果您使用 <code>请求处理器(Request Handler)</code> 模式也是类似的，我们通过代码来演示一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Router</span>\<span class="title">Router</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面三种方式的任意一种都可以达到同样的效果</span></span><br><span class="line">Router::get(<span class="string">'/hello-hyperf'</span>, <span class="string">'App\Controller\IndexController::hello'</span>);</span><br><span class="line">Router::get(<span class="string">'/hello-hyperf'</span>, <span class="string">'App\Controller\IndexController@hello'</span>);</span><br><span class="line">Router::get(<span class="string">'/hello-hyperf'</span>, [App\Controller\IndexController::class, <span class="string">'hello'</span>]);</span><br></pre></td></tr></table></figure><h5 id="可用的路由方法"><a href="#可用的路由方法" class="headerlink" title="可用的路由方法"></a>可用的路由方法</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">use Hyperf\HttpServer\Router\Router;</span><br><span class="line"></span><br><span class="line">// 注册与方法名一致的 HTTP METHOD 的路由</span><br><span class="line">Router::get($uri, $callback);</span><br><span class="line">Router::post($uri, $callback);</span><br><span class="line">Router::put($uri, $callback);</span><br><span class="line">Router::patch($uri, $callback);</span><br><span class="line">Router::delete($uri, $callback);</span><br><span class="line">Router::head($uri, $callback);</span><br><span class="line"></span><br><span class="line">// 注册任意 HTTP METHOD 的路由</span><br><span class="line">Router::addRoute($httpMethod, $uri, $callback);</span><br></pre></td></tr></table></figure><h5 id="路由组的定义方式"><a href="#路由组的定义方式" class="headerlink" title="路由组的定义方式"></a>路由组的定义方式</h5><p>实际路由为 <code>gourp/route</code>, 即 <code>/user/index</code>, <code>/user/store</code>, <code>/user/update</code>, <code>/user/delete</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Router::addGroup(<span class="string">'/user/'</span>,<span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    Router::get(<span class="string">'index'</span>,<span class="string">'App\Controller\UserController@index'</span>);</span><br><span class="line">    Router::post(<span class="string">'store'</span>,<span class="string">'App\Controller\UserController@store'</span>);</span><br><span class="line">    Router::get(<span class="string">'update'</span>,<span class="string">'App\Controller\UserController@update'</span>);</span><br><span class="line">    Router::post(<span class="string">'delete'</span>,<span class="string">'App\Controller\UserController@delete'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="注解路由"><a href="#注解路由" class="headerlink" title="注解路由"></a>注解路由</h4><blockquote><p><a href="http://blog.caoxl.com/2019/10/10/Hyperf-Learning-Notes/#%E6%B3%A8%E8%A7%A3">Hyperf 学习日志 注解</a></p></blockquote><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><h4 id="定义全局中间件"><a href="#定义全局中间件" class="headerlink" title="定义全局中间件"></a>定义全局中间件</h4><p>全局中间件只可通过配置文件的方式来配置，配置文件位于 <code>config/autoload/middlewares.php</code> ，配置如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// http 对应 config/autoload/server.php 内每个 server 的 name 属性对应的值，该配置仅应用在该 Server 中</span></span><br><span class="line">    <span class="string">'http'</span> =&gt; [</span><br><span class="line">        <span class="comment">// 数组内配置您的全局中间件，顺序根据该数组的顺序</span></span><br><span class="line">        YourMiddleware::class</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>只需将您的全局中间件配置在该文件及对应的 <code>Server Name</code> 内，即该 <code>Server</code> 下的所有请求都会应用配置的全局中间件。</p><h4 id="定义局部中间件"><a href="#定义局部中间件" class="headerlink" title="定义局部中间件"></a>定义局部中间件</h4><h5 id="通过配置文件定义"><a href="#通过配置文件定义" class="headerlink" title="通过配置文件定义"></a>通过配置文件定义</h5><p>在使用配置文件定义路由时，推荐通过配置文件来定义对应的中间件，局部中间件的配置将在路由配置上完成。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Middleware</span>\<span class="title">FooMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Router</span>\<span class="title">Router</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个路由定义方法都可接收一个 $options 参数</span></span><br><span class="line">Router::get(<span class="string">'/'</span>, [\App\Controller\IndexController::class, <span class="string">'index'</span>], [<span class="string">'middleware'</span> =&gt; [ForMiddleware::class]]);</span><br><span class="line">Router::post(<span class="string">'/'</span>, [\App\Controller\IndexController::class, <span class="string">'index'</span>], [<span class="string">'middleware'</span> =&gt; [ForMiddleware::class]]);</span><br><span class="line">Router::put(<span class="string">'/'</span>, [\App\Controller\IndexController::class, <span class="string">'index'</span>], [<span class="string">'middleware'</span> =&gt; [ForMiddleware::class]]);</span><br><span class="line">Router::patch(<span class="string">'/'</span>, [\App\Controller\IndexController::class, <span class="string">'index'</span>], [<span class="string">'middleware'</span> =&gt; [ForMiddleware::class]]);</span><br><span class="line">Router::delete(<span class="string">'/'</span>, [\App\Controller\IndexController::class, <span class="string">'index'</span>], [<span class="string">'middleware'</span> =&gt; [ForMiddleware::class]]);</span><br><span class="line">Router::head(<span class="string">'/'</span>, [\App\Controller\IndexController::class, <span class="string">'index'</span>], [<span class="string">'middleware'</span> =&gt; [ForMiddleware::class]]);</span><br><span class="line">Router::addRoute([<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'HEAD'</span>], <span class="string">'/index'</span>, [\App\Controller\IndexController::class, <span class="string">'index'</span>], [<span class="string">'middleware'</span> =&gt; [ForMiddleware::class]]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该 Group 下的所有路由都将应用配置的中间件</span></span><br><span class="line">Router::addGroup(</span><br><span class="line">    <span class="string">'/v2'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        Router::get(<span class="string">'/index'</span>, [\App\Controller\IndexController::class, <span class="string">'index'</span>]);</span><br><span class="line">    &#125;,</span><br><span class="line">    [<span class="string">'middleware'</span> =&gt; [ForMiddleware::class]]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="通过注解定义"><a href="#通过注解定义" class="headerlink" title="通过注解定义"></a>通过注解定义</h5><ul><li>定义单个中间件：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Middleware</span>\<span class="title">FooMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">AutoController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">Middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AutoController</span>()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Middleware</span>(FooMiddleware::class)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello Hyperf.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义多个中间件：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Middleware</span>\<span class="title">BarMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Middleware</span>\<span class="title">FooMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">AutoController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">Middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AutoController</span>()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Middlewares</span>(&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Middleware</span>(FooMiddleware::class),</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Middleware</span>(BarMiddleware::class)</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello Hyperf.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义方法级别的中间件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Middleware</span>\<span class="title">BarMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Middleware</span>\<span class="title">FooMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">AutoController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">Middleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">Middlewares</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AutoController</span>()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Middlewares</span>(&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Middleware</span>(FooMiddleware::class)</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Middlewares</span>(&#123;</span></span><br><span class="line"><span class="comment">     *     <span class="doctag">@Middleware</span>(BarMiddleware::class)</span></span><br><span class="line"><span class="comment">     * &#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello Hyperf.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成中间件"><a href="#生成中间件" class="headerlink" title="生成中间件"></a>生成中间件</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php ./bin/hyperf.php gen:middleware Auth/FooMiddleware</span><br></pre></td></tr></table></figure><h4 id="常用中间件"><a href="#常用中间件" class="headerlink" title="常用中间件"></a>常用中间件</h4><h5 id="跨域中间件"><a href="#跨域中间件" class="headerlink" title="跨域中间件"></a>跨域中间件</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Utils</span>\<span class="title">Context</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Message</span>\<span class="title">ResponseInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Message</span>\<span class="title">ServerRequestInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Server</span>\<span class="title">MiddlewareInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Server</span>\<span class="title">RequestHandlerInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CorsMiddleware</span> <span class="keyword">implements</span> <span class="title">MiddlewareInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(ServerRequestInterface $request, RequestHandlerInterface $handler)</span>: <span class="title">ResponseInterface</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $response = Context::get(ResponseInterface::class);</span><br><span class="line">        $response = $response-&gt;withHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line">            -&gt;withHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="string">'true'</span>)</span><br><span class="line">            <span class="comment">// Headers 可以根据实际情况进行改写。</span></span><br><span class="line">            -&gt;withHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'DNT,Keep-Alive,User-Agent,Cache-Control,Content-Type,Authorization'</span>);</span><br><span class="line"></span><br><span class="line">        Context::set(ResponseInterface::class, $response);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($request-&gt;getMethod() == <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $response;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $handler-&gt;handle($request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，跨域配置也可以直接挂在 <code>Nginx</code> 上。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"><span class="code">    add_header Access-Control-Allow-Origin *;</span></span><br><span class="line"><span class="code">    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';</span></span><br><span class="line"><span class="code">    add_header Access-Control-Allow-Headers 'DNT,Keep-Alive,User-Agent,Cache-Control,Content-Type,Authorization';</span></span><br><span class="line"></span><br><span class="line"><span class="code">    if ($request_method = 'OPTIONS') &#123;</span></span><br><span class="line"><span class="code">        return 204;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><h4 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Contract</span>\<span class="title">RequestInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Contract</span>\<span class="title">ResponseInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 在参数上通过定义 RequestInterface 和 ResponseInterface 来获取相关对象，对象会被依赖注入容器自动注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(RequestInterface $request, ResponseInterface $response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $target = $request-&gt;input(<span class="string">'target'</span>, <span class="string">'World'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello '</span> . $target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require hyperf/http-message</span><br></pre></td></tr></table></figure><h4 id="获取请求"><a href="#获取请求" class="headerlink" title="获取请求"></a>获取请求</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 获取请求路径</span></span><br><span class="line">$uri = $request-&gt;path();</span><br><span class="line"></span><br><span class="line"><span class="section"># 获取请求的 URL</span></span><br><span class="line">// 没有查询参数</span><br><span class="line">$url = $request-&gt;url();</span><br><span class="line"></span><br><span class="line">// 带上查询参数</span><br><span class="line">$url = $request-&gt;fullUrl();</span><br><span class="line"></span><br><span class="line"><span class="section"># 获取请求方法</span></span><br><span class="line">$method = $request-&gt;getMethod();</span><br><span class="line">if ($request-&gt;isMethod('post')) &#123;</span><br><span class="line"><span class="code">    // ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section"># 获取所有输入</span></span><br><span class="line">$all = $request-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="section"># 获取指定输入值</span></span><br><span class="line">// 存在则返回，不存在则返回 null</span><br><span class="line">$name = $request-&gt;input('name');</span><br><span class="line">// 存在则返回，不存在则返回默认值 Hyperf</span><br><span class="line">$name = $request-&gt;input('name', 'Hyperf');</span><br><span class="line"></span><br><span class="line"><span class="section"># 从查询字符串获取输入</span></span><br><span class="line">// 存在则返回，不存在则返回 null</span><br><span class="line">$name = $request-&gt;query('name');</span><br><span class="line">// 存在则返回，不存在则返回默认值 Hyperf</span><br><span class="line">$name = $request-&gt;query('name', 'Hyperf');</span><br><span class="line">// 不传递参数则以关联数组的形式返回所有 Query 参数</span><br><span class="line">$name = $request-&gt;query();</span><br><span class="line"></span><br><span class="line"><span class="section"># 获取 JSON 输入信息</span></span><br><span class="line">// 存在则返回，不存在则返回 null</span><br><span class="line">$name = $request-&gt;input('user.name');</span><br><span class="line">// 存在则返回，不存在则返回默认值 Hyperf</span><br><span class="line">$name = $request-&gt;input('user.name', 'Hyperf');</span><br><span class="line">// 以数组形式返回所有 Json 数据</span><br><span class="line">$name = $request-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="section"># 确定是否存在输入值</span></span><br><span class="line">// 仅判断单个值</span><br><span class="line">if ($request-&gt;has('name')) &#123;</span><br><span class="line"><span class="code">    // ...</span></span><br><span class="line">&#125;</span><br><span class="line">// 同时判断多个值</span><br><span class="line">if ($request-&gt;has(['name', 'email'])) &#123;</span><br><span class="line"><span class="code">    // ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>大致上和Laravel一样…</p></blockquote><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>在 <code>Hyperf</code> 里可通过 <code>Hyperf\HttpServer\Contract\ResponseInterface</code> 接口类来注入 <code>Response</code> 代理对象对响应进行处理，默认返回 <code>Hyperf\HttpServer\Response</code> 对象，该对象可直接调用所有 <code>Psr\Http\Message\ResponseInterface</code> 的方法。</p><h4 id="返回JSON格式"><a href="#返回JSON格式" class="headerlink" title="返回JSON格式"></a>返回JSON格式</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Contract</span>\<span class="title">ResponseInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Message</span>\<span class="title">ResponseInterface</span> <span class="title">as</span> <span class="title">Psr7ResponseInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">json</span><span class="params">(ResponseInterface $response)</span>: <span class="title">Psr7ResponseInterface</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $data = [</span><br><span class="line">            <span class="string">'key'</span> =&gt; <span class="string">'value'</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">return</span> $response-&gt;json($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回-Xml-格式"><a href="#返回-Xml-格式" class="headerlink" title="返回 Xml 格式"></a>返回 Xml 格式</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Contract</span>\<span class="title">ResponseInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Message</span>\<span class="title">ResponseInterface</span> <span class="title">as</span> <span class="title">Psr7ResponseInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">xml</span><span class="params">(ResponseInterface $response)</span>: <span class="title">Psr7ResponseInterface</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $data = [</span><br><span class="line">            <span class="string">'key'</span> =&gt; <span class="string">'value'</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">return</span> $response-&gt;xml($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回-Raw-格式"><a href="#返回-Raw-格式" class="headerlink" title="返回 Raw 格式"></a>返回 Raw 格式</h4><p><code>Hyperf\HttpServer\Contract\ResponseInterface</code> 提供了 <code>raw($data)</code> 方法用于快速返回 <code>raw</code> 格式，并设置 <code>Content-Type</code> 为 <code>plain/text</code>，<code>$data</code> 接受一个字符串或为一个实现了 <code>__toString()</code> 方法的对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Contract</span>\<span class="title">ResponseInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Message</span>\<span class="title">ResponseInterface</span> <span class="title">as</span> <span class="title">Psr7ResponseInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">raw</span><span class="params">(ResponseInterface $response)</span>: <span class="title">Psr7ResponseInterface</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $response-&gt;raw(<span class="string">'Hello Hyperf.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Contract</span>\<span class="title">ResponseInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Message</span>\<span class="title">ResponseInterface</span> <span class="title">as</span> <span class="title">Psr7ResponseInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">redirect</span><span class="params">(ResponseInterface $response)</span>: <span class="title">Psr7ResponseInterface</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// redirect() 方法返回的是一个 Psr\Http\Message\ResponseInterface 对象，需再 return 回去  </span></span><br><span class="line">        <span class="keyword">return</span> $response-&gt;redirect(<span class="string">'/anotherUrl'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="注册异常处理器"><a href="#注册异常处理器" class="headerlink" title="注册异常处理器"></a>注册异常处理器</h4><blockquote><p>目前仅支持配置文件的形式注册 <code>异常处理器(ExceptionHandler)</code>，配置文件位于 <code>config/autoload/exceptions.php</code>，将您的自定义异常处理器配置在对应的 <code>server</code> 下即可：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// config/autoload/exceptions.php</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'handler'</span> =&gt; [</span><br><span class="line">        <span class="comment">// 这里的 http 对应 config/autoload/server.php 内的 server 所对应的 name 值</span></span><br><span class="line">        <span class="string">'http'</span> =&gt; [</span><br><span class="line">            <span class="comment">// 这里配置完整的类命名空间地址已完成对该异常处理器的注册</span></span><br><span class="line">            \App\<span class="keyword">Exception</span>\Handler\FooExceptionHandler::class,</span><br><span class="line">        ],    </span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="定义异常处理器"><a href="#定义异常处理器" class="headerlink" title="定义异常处理器"></a>定义异常处理器</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Exception</span>\<span class="title">Handler</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">ExceptionHandler</span>\<span class="title">ExceptionHandler</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpMessage</span>\<span class="title">Stream</span>\<span class="title">SwooleStream</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Message</span>\<span class="title">ResponseInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Exception</span>\<span class="title">TestException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Throwable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestExceptionHandler</span> <span class="keyword">extends</span> <span class="title">ExceptionHandler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Throwable $throwable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ResponseInterface $response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResponseInterface</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(Throwable $throwable, ResponseInterface $response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 判断被捕获到的异常是希望被捕获的异常</span></span><br><span class="line">        <span class="keyword">if</span> ($throwable <span class="keyword">instanceof</span> TestException) &#123;</span><br><span class="line">            <span class="comment">// 格式化输出</span></span><br><span class="line">            $data = json_encode([</span><br><span class="line">                <span class="string">'code'</span> =&gt; $throwable-&gt;getCode(),</span><br><span class="line">                <span class="string">'message'</span> =&gt; $throwable-&gt;getMessage(),</span><br><span class="line">            ], JSON_UNESCAPED_UNICODE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 阻止异常冒泡</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;stopPropagation();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $response-&gt;withStatus(<span class="number">500</span>)-&gt;withBody(<span class="keyword">new</span> SwooleStream($data));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 交给下一个异常处理器</span></span><br><span class="line">        <span class="keyword">return</span> $response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValid</span><span class="params">(Throwable $throwable)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义异常类"><a href="#定义异常类" class="headerlink" title="定义异常类"></a>定义异常类</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Server</span>\<span class="title">Exception</span>\<span class="title">ServerException</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestException</span> <span class="keyword">extends</span> <span class="title">ServerException</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="触发异常"><a href="#触发异常" class="headerlink" title="触发异常"></a>触发异常</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exception</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> TestException(<span class="string">'Test Exception...'</span>, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p><code>hyperf/cache</code> 提供了基于 <code>Aspect</code> 实现的切面缓存，也提供了实现 <code>Psr\SimpleCache\CacheInterface</code> 的缓存类。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require hyperf/cache</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="SimpleCache方式"><a href="#SimpleCache方式" class="headerlink" title="SimpleCache方式"></a>SimpleCache方式</h5><p>如果您只想使用实现 <code>Psr\SimpleCache\CacheInterface</code> 缓存类，比如重写 <code>EasyWeChat</code> 缓存模块，可以很方便的从 <code>Container</code> 中获取相应对象。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cache = $container-&gt;get(Psr\SimpleCache\CacheInterface::class);</span><br></pre></td></tr></table></figure><h5 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Cache</span>\<span class="title">Annotation</span>\<span class="title">Cacheable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Cacheable</span>(prefix="user", ttl=9000, listener="user-update")</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $user = User::query()-&gt;where(<span class="string">'id'</span>,$id)-&gt;first();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($user)&#123;</span><br><span class="line">            <span class="keyword">return</span> $user-&gt;toArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="清理注解缓存"><a href="#清理注解缓存" class="headerlink" title="清理注解缓存"></a>清理注解缓存</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Inject</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> EventDispatcherInterface</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $dispatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flushCache</span><span class="params">($userId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;dispatcher-&gt;dispatch(<span class="keyword">new</span> DeleteListenerEvent(<span class="string">'user-update'</span>, [$userId]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注解缓存介绍"><a href="#注解缓存介绍" class="headerlink" title="注解缓存介绍"></a>注解缓存介绍</h4><h5 id="Cacheable"><a href="#Cacheable" class="headerlink" title="Cacheable"></a>Cacheable</h5><p>例如以下配置，缓存前缀为 <code>user</code>, 超时时间为 <code>7200</code>, 删除事件名为 <code>USER_CACHE</code>。生成对应缓存 <code>KEY</code> 为 <code>c:user:1</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Cache</span>\<span class="title">Annotation</span>\<span class="title">Cacheable</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Cacheable</span>(prefix="user", ttl=7200, listener="USER_CACHE")</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">(int $id)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $user = User::query()-&gt;find($id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'user'</span> =&gt; $user-&gt;toArray(),</span><br><span class="line">        <span class="string">'uuid'</span> =&gt; <span class="keyword">$this</span>-&gt;unique(),</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当设置 <code>value</code> 后，框架会根据设置的规则，进行缓存 <code>KEY</code> 键命名。如下实例，当 <code>$user-&gt;id = 1</code> 时，缓存 <code>KEY</code> 为 <code>c:userBook:_1</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Cache</span>\<span class="title">Annotation</span>\<span class="title">Cacheable</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Cacheable</span>(prefix="userBook", ttl=6666, value="_#&#123;user.id&#125;")</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">userBook</span><span class="params">(User $user)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'book'</span> =&gt; $user-&gt;book-&gt;toArray(),</span><br><span class="line">        <span class="string">'uuid'</span> =&gt; <span class="keyword">$this</span>-&gt;unique(),</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CachePut"><a href="#CachePut" class="headerlink" title="CachePut"></a>CachePut</h5><p><code>CachePut</code> 不同于 <code>Cacheable</code>，它每次调用都会执行函数体，然后再对缓存进行重写。所以当我们想更新缓存时，可以调用相关方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Cache</span>\<span class="title">Annotation</span>\<span class="title">CachePut</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CachePut</span>(prefix="user", ttl=3601)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">updateUser</span><span class="params">(int $id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $user = User::query()-&gt;find($id);</span><br><span class="line">    $user-&gt;name = <span class="string">'HyperfDoc'</span>;</span><br><span class="line">    $user-&gt;save();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'user'</span> =&gt; $user-&gt;toArray(),</span><br><span class="line">        <span class="string">'uuid'</span> =&gt; <span class="keyword">$this</span>-&gt;unique(),</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="CacheEvict"></a>CacheEvict</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Cache</span>\<span class="title">Annotation</span>\<span class="title">CacheEvict</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CacheEvict</span>(prefix="userBook", value="_#&#123;id&#125;")</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">updateUserBook</span><span class="params">(int $id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> hyperf/logger</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在 <code>hyperf-skeleton</code> 项目内默认提供了一些日志配置，默认情况下，日志的配置文件为 <code>config/autoload/logger.php</code> ，示例如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'default'</span> =&gt; [</span><br><span class="line">        <span class="string">'handler'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; \Monolog\Handler\StreamHandler::class,</span><br><span class="line">            <span class="string">'constructor'</span> =&gt; [</span><br><span class="line">                <span class="string">'stream'</span> =&gt; BASE_PATH . <span class="string">'/runtime/logs/hyperf.log'</span>,</span><br><span class="line">                <span class="string">'level'</span> =&gt; \Monolog\Logger::DEBUG,</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'formatter'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; \Monolog\Formatter\LineFormatter::class,</span><br><span class="line">            <span class="string">'constructor'</span> =&gt; [</span><br><span class="line">                <span class="string">'format'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">                <span class="string">'dateFormat'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">                <span class="string">'allowInlineLineBreaks'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">            ]</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Service</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Container</span>\<span class="title">ContainerInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Logger</span>\<span class="title">LoggerFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> \Psr\Log\LoggerInterface</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $logger;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(LoggerFactory $loggerFactory)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 第一个参数对应日志的 name, 第二个参数对应 config/autoload/logger.php 内的 key</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;logger = $loggerFactory-&gt;get(<span class="string">'log'</span>, <span class="string">'default'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Do somthing.</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;logger-&gt;info(<span class="string">"Your log message."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不同环境下输出不同格式的日志"><a href="#不同环境下输出不同格式的日志" class="headerlink" title="不同环境下输出不同格式的日志"></a>不同环境下输出不同格式的日志</h4><p>上面这么多的使用, 都还只在 <code>monolog</code> 中的 <code>Logger</code> 这里打转, 这里来看看 <code>Handler</code> 和 <code>Formatter</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/autoload/logger.php</span></span><br><span class="line">$appEnv = env(<span class="string">'APP_ENV'</span>, <span class="string">'dev'</span>);</span><br><span class="line"><span class="keyword">if</span> ($appEnv == <span class="string">'dev'</span>) &#123;</span><br><span class="line">    $formatter = [</span><br><span class="line">        <span class="string">'class'</span> =&gt; \Monolog\Formatter\LineFormatter::class,</span><br><span class="line">        <span class="string">'constructor'</span> =&gt; [</span><br><span class="line">            <span class="string">'format'</span> =&gt; <span class="string">"||%datetime%||%channel%||%level_name%||%message%||%context%||%extra%\n"</span>,</span><br><span class="line">            <span class="string">'allowInlineLineBreaks'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">            <span class="string">'includeStacktraces'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $formatter = [</span><br><span class="line">        <span class="string">'class'</span> =&gt; \Monolog\Formatter\JsonFormatter::class,</span><br><span class="line">        <span class="string">'constructor'</span> =&gt; [],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'default'</span> =&gt; [</span><br><span class="line">        <span class="string">'handler'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; \Monolog\Handler\StreamHandler::class,</span><br><span class="line">            <span class="string">'constructor'</span> =&gt; [</span><br><span class="line">                <span class="string">'stream'</span> =&gt; <span class="string">'php://stdout'</span>,</span><br><span class="line">                <span class="string">'level'</span> =&gt; \Monolog\Logger::INFO,</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'formatter'</span> =&gt; $formatter,</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><ul><li>默认配置了名为 <code>default</code> 的 <code>Handler</code>, 并包含了此 <code>Handler</code> 及其 <code>Formatter</code> 的信息</li><li>获取 <code>Logger</code> 时, 如果没有指定 <code>Handler</code>, 底层会自动把 <code>default</code> 这一 <code>Handler</code> 绑定到 <code>Logger</code> 上</li><li>dev(开发)环境: 日志使用 <code>php://stdout</code> 输出到 <code>标准输出(stdout)</code>, 并且 <code>Formatter</code> 中设置 <code>allowInlineLineBreaks</code>, 方便查看多行日志</li><li>非 dev 环境: 日志使用 <code>JsonFormatter</code>, 会被格式为 <code>json</code>, 方便投递到第三方日志服务</li></ul></blockquote><h3 id="分页器"><a href="#分页器" class="headerlink" title="分页器"></a>分页器</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">AutoController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Contract</span>\<span class="title">RequestInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Paginator</span>\<span class="title">Paginator</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AutoController</span>()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(RequestInterface $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $currentPage = $request-&gt;input(<span class="string">'page'</span>, <span class="number">1</span>);</span><br><span class="line">        $perPage = <span class="number">2</span>;</span><br><span class="line">        $users = [</span><br><span class="line">            [<span class="string">'id'</span> =&gt; <span class="number">1</span>, <span class="string">'name'</span> =&gt; <span class="string">'Tom'</span>],</span><br><span class="line">            [<span class="string">'id'</span> =&gt; <span class="number">2</span>, <span class="string">'name'</span> =&gt; <span class="string">'Sam'</span>],</span><br><span class="line">            [<span class="string">'id'</span> =&gt; <span class="number">3</span>, <span class="string">'name'</span> =&gt; <span class="string">'Tim'</span>],</span><br><span class="line">            [<span class="string">'id'</span> =&gt; <span class="number">4</span>, <span class="string">'name'</span> =&gt; <span class="string">'Joe'</span>],</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Paginator($users, $perPage, $currentPage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页器方法"><a href="#分页器方法" class="headerlink" title="分页器方法"></a>分页器方法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页数</span></span><br><span class="line">$currentPage = $paginator-&gt;currentPage();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页的条数</span></span><br><span class="line">$count = $paginator-&gt;count();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中第一条数据的编号</span></span><br><span class="line">$firstItem = $paginator-&gt;firstItem();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中最后一条数据的编号</span></span><br><span class="line">$lastItem = $paginator-&gt;lastItem();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取是否还有更多的分页</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($paginator-&gt;hasMorePages()) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对应分页的 URL</span></span><br><span class="line"><span class="comment">// 下一页的 URL</span></span><br><span class="line">$nextPageUrl = $paginator-&gt;nextPageUrl();</span><br><span class="line"><span class="comment">// 上一页的 URL</span></span><br><span class="line">$previousPageUrl = $paginator-&gt;previousPageUrl();</span><br><span class="line"><span class="comment">// 获取指定 $page 页数的 URL</span></span><br><span class="line">$url = $paginator-&gt;url($page);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否处于第一页</span></span><br><span class="line">$onFirstPage = $paginator-&gt;onFirstPage();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否有更多分页</span></span><br><span class="line">$hasMorePages = $paginator-&gt;hasMorePages();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每页的数据条数</span></span><br><span class="line">$perPage = $paginator-&gt;perPage();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据总数</span></span><br><span class="line">$total = $paginator-&gt;total();</span><br></pre></td></tr></table></figure><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require hyperf/command</span><br></pre></td></tr></table></figure><h4 id="查看命令列表"><a href="#查看命令列表" class="headerlink" title="查看命令列表"></a>查看命令列表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php bin/hyperf.php</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Available commands:</span><br><span class="line">  help               Displays help for a command</span><br><span class="line">  info               Dump the server info.</span><br><span class="line">  list               Lists commands</span><br><span class="line">  migrate            </span><br><span class="line">  start              Start hyperf servers.</span><br><span class="line"> db</span><br><span class="line">  db:seed            </span><br><span class="line"> demo</span><br><span class="line">  demo:command       Hyperf Demo Command</span><br><span class="line"> di</span><br><span class="line">  di:init-proxy      </span><br><span class="line"> gen</span><br><span class="line">  gen:amqp-consumer  Create a new amqp consumer class</span><br><span class="line">  gen:amqp-producer  Create a new amqp producer class</span><br><span class="line">  gen:aspect         Create a new aspect class</span><br><span class="line">  gen:command        Create a new command class</span><br><span class="line">  gen:controller     Create a new controller class</span><br><span class="line">  gen:job            Create a new job class</span><br><span class="line">  gen:listener       Create a new listener class</span><br><span class="line">  gen:middleware     Create a new middleware class</span><br><span class="line">  gen:migration      </span><br><span class="line">  gen:model          </span><br><span class="line">  gen:process        Create a new process class</span><br><span class="line">  gen:request        Create a new form request class</span><br><span class="line">  gen:seeder         Create a new seeder class</span><br><span class="line"> migrate</span><br><span class="line">  migrate:fresh      </span><br><span class="line">  migrate:install    </span><br><span class="line">  migrate:refresh    </span><br><span class="line">  migrate:reset      </span><br><span class="line">  migrate:rollback   </span><br><span class="line">  migrate:status     </span><br><span class="line"> vendor</span><br><span class="line">  vendor:publish     Publish any publishable configs from vendor packages.</span><br></pre></td></tr></table></figure><h4 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h4><h5 id="生成命令"><a href="#生成命令" class="headerlink" title="生成命令"></a>生成命令</h5><p>如果你有安装 <a href="https://github.com/hyperf-cloud/devtool" target="_blank" rel="noopener">hyperf/devtool</a> 组件的话，可以通过 <code>gen:command</code> 命令来生成一个自定义命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php bin/hyperf.php gen:command TestCommand</span><br></pre></td></tr></table></figure><h5 id="定义命令"><a href="#定义命令" class="headerlink" title="定义命令"></a>定义命令</h5><p>定义该命令类所对应的命令有两种形式，</p><ul><li>一种是通过 <code>$name</code> 属性定义，</li><li>另一种是通过构造函数传参来定义，</li></ul><p>我们通过代码示例来演示一下，假设我们希望定义该命令类的命令为 <code>test:hello</code>：</p><h6 id="name-属性定义："><a href="#name-属性定义：" class="headerlink" title="$name 属性定义："></a><code>$name</code> 属性定义：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Command</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Command</span>\<span class="title">Command</span> <span class="title">as</span> <span class="title">HyperfCommand</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Command</span>\<span class="title">Annotation</span>\<span class="title">Command</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Command</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCommand</span> <span class="keyword">extends</span> <span class="title">HyperfCommand</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行的命令行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $name = <span class="string">'test:hello'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="构造函数传参定义："><a href="#构造函数传参定义：" class="headerlink" title="构造函数传参定义："></a>构造函数传参定义：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Command</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Command</span>\<span class="title">Command</span> <span class="title">as</span> <span class="title">HyperfCommand</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Command</span>\<span class="title">Annotation</span>\<span class="title">Command</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Command</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCommand</span> <span class="keyword">extends</span> <span class="title">HyperfCommand</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct(<span class="string">'test:hello'</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库模型"><a href="#数据库模型" class="headerlink" title="数据库模型"></a>数据库模型</h2><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><h4 id="Hyperf框架"><a href="#Hyperf框架" class="headerlink" title="Hyperf框架"></a>Hyperf框架</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require hyperf/db-connection</span><br></pre></td></tr></table></figure><h4 id="其他框架"><a href="#其他框架" class="headerlink" title="其他框架"></a>其他框架</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require hyperf/database</span><br></pre></td></tr></table></figure><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'default'</span> =&gt; [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; env(<span class="string">'DB_DRIVER'</span>, <span class="string">'mysql'</span>),</span><br><span class="line">        <span class="string">'read'</span> =&gt; [</span><br><span class="line">            <span class="string">'host'</span> =&gt; [<span class="string">'192.168.1.1'</span>],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'write'</span> =&gt; [</span><br><span class="line">            <span class="string">'host'</span> =&gt; [<span class="string">'196.168.1.2'</span>],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'sticky'</span>    =&gt; <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'database'</span> =&gt; env(<span class="string">'DB_DATABASE'</span>, <span class="string">'hyperf'</span>),</span><br><span class="line">        <span class="string">'username'</span> =&gt; env(<span class="string">'DB_USERNAME'</span>, <span class="string">'root'</span>),</span><br><span class="line">        <span class="string">'password'</span> =&gt; env(<span class="string">'DB_PASSWORD'</span>, <span class="string">''</span>),</span><br><span class="line">        <span class="string">'charset'</span> =&gt; env(<span class="string">'DB_CHARSET'</span>, <span class="string">'utf8'</span>),</span><br><span class="line">        <span class="string">'collation'</span> =&gt; env(<span class="string">'DB_COLLATION'</span>, <span class="string">'utf8_unicode_ci'</span>),</span><br><span class="line">        <span class="string">'prefix'</span> =&gt; env(<span class="string">'DB_PREFIX'</span>, <span class="string">''</span>),</span><br><span class="line">        <span class="string">'pool'</span> =&gt; [</span><br><span class="line">            <span class="string">'min_connections'</span> =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">'max_connections'</span> =&gt; <span class="number">10</span>,</span><br><span class="line">            <span class="string">'connect_timeout'</span> =&gt; <span class="number">10.0</span>,</span><br><span class="line">            <span class="string">'wait_timeout'</span> =&gt; <span class="number">3.0</span>,</span><br><span class="line">            <span class="string">'heartbeat'</span> =&gt; <span class="number">-1</span>,</span><br><span class="line">            <span class="string">'max_idle_time'</span> =&gt; (float) env(<span class="string">'DB_MAX_IDLE_TIME'</span>, <span class="number">60</span>),</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>注意在以上的例子中，配置数组中增加了三个键，分别是 <code>read</code>， <code>write</code> 和 <code>sticky</code>。 <code>read</code> 和 <code>write</code> 的键都包含一个键为 <code>host</code> 的数组。而 <code>read</code> 和 <code>write</code> 的其他数据库都在键为 <code>mysql</code> 的数组中。</p><p>如果你想重写主数组中的配置，只需要修改 <code>read</code> 和 <code>write</code> 数组即可。所以，这个例子中： <code>192.168.1.1</code> 将作为 「读」 连接主机，而 <code>192.168.1.2</code> 将作为 「写」 连接主机。这两个连接会共享 <code>mysql</code> 数组的各项配置，如数据库的凭据（用户名 / 密码），前缀，字符编码等。</p><h3 id="多库配置"><a href="#多库配置" class="headerlink" title="多库配置"></a>多库配置</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'default'</span> =&gt; [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; env(<span class="string">'DB_DRIVER'</span>, <span class="string">'mysql'</span>),</span><br><span class="line">        <span class="string">'host'</span> =&gt; env(<span class="string">'DB_HOST'</span>, <span class="string">'localhost'</span>),</span><br><span class="line">        <span class="string">'database'</span> =&gt; env(<span class="string">'DB_DATABASE'</span>, <span class="string">'hyperf'</span>),</span><br><span class="line">        <span class="string">'username'</span> =&gt; env(<span class="string">'DB_USERNAME'</span>, <span class="string">'root'</span>),</span><br><span class="line">        <span class="string">'password'</span> =&gt; env(<span class="string">'DB_PASSWORD'</span>, <span class="string">''</span>),</span><br><span class="line">        <span class="string">'charset'</span> =&gt; env(<span class="string">'DB_CHARSET'</span>, <span class="string">'utf8'</span>),</span><br><span class="line">        <span class="string">'collation'</span> =&gt; env(<span class="string">'DB_COLLATION'</span>, <span class="string">'utf8_unicode_ci'</span>),</span><br><span class="line">        <span class="string">'prefix'</span> =&gt; env(<span class="string">'DB_PREFIX'</span>, <span class="string">''</span>),</span><br><span class="line">        <span class="string">'pool'</span> =&gt; [</span><br><span class="line">            <span class="string">'min_connections'</span> =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">'max_connections'</span> =&gt; <span class="number">10</span>,</span><br><span class="line">            <span class="string">'connect_timeout'</span> =&gt; <span class="number">10.0</span>,</span><br><span class="line">            <span class="string">'wait_timeout'</span> =&gt; <span class="number">3.0</span>,</span><br><span class="line">            <span class="string">'heartbeat'</span> =&gt; <span class="number">-1</span>,</span><br><span class="line">            <span class="string">'max_idle_time'</span> =&gt; (float) env(<span class="string">'DB_MAX_IDLE_TIME'</span>, <span class="number">60</span>),</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'test'</span>=&gt;[</span><br><span class="line">        <span class="string">'driver'</span> =&gt; env(<span class="string">'DB_DRIVER'</span>, <span class="string">'mysql'</span>),</span><br><span class="line">        <span class="string">'host'</span> =&gt; env(<span class="string">'DB_HOST2'</span>, <span class="string">'localhost'</span>),</span><br><span class="line">        <span class="string">'database'</span> =&gt; env(<span class="string">'DB_DATABASE'</span>, <span class="string">'hyperf'</span>),</span><br><span class="line">        <span class="string">'username'</span> =&gt; env(<span class="string">'DB_USERNAME'</span>, <span class="string">'root'</span>),</span><br><span class="line">        <span class="string">'password'</span> =&gt; env(<span class="string">'DB_PASSWORD'</span>, <span class="string">''</span>),</span><br><span class="line">        <span class="string">'charset'</span> =&gt; env(<span class="string">'DB_CHARSET'</span>, <span class="string">'utf8'</span>),</span><br><span class="line">        <span class="string">'collation'</span> =&gt; env(<span class="string">'DB_COLLATION'</span>, <span class="string">'utf8_unicode_ci'</span>),</span><br><span class="line">        <span class="string">'prefix'</span> =&gt; env(<span class="string">'DB_PREFIX'</span>, <span class="string">''</span>),</span><br><span class="line">        <span class="string">'pool'</span> =&gt; [</span><br><span class="line">            <span class="string">'min_connections'</span> =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">'max_connections'</span> =&gt; <span class="number">10</span>,</span><br><span class="line">            <span class="string">'connect_timeout'</span> =&gt; <span class="number">10.0</span>,</span><br><span class="line">            <span class="string">'wait_timeout'</span> =&gt; <span class="number">3.0</span>,</span><br><span class="line">            <span class="string">'heartbeat'</span> =&gt; <span class="number">-1</span>,</span><br><span class="line">            <span class="string">'max_idle_time'</span> =&gt; (float) env(<span class="string">'DB_MAX_IDLE_TIME'</span>, <span class="number">60</span>),</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>使用时，只需要规定 <code>connection</code> 为 <code>test</code>，就可以使用 <code>test</code> 中的配置，如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">DbConnection</span>\<span class="title">Db</span>;</span><br><span class="line"><span class="comment">// default</span></span><br><span class="line">Db::select(<span class="string">'SELECT * FROM user;'</span>);</span><br><span class="line">Db::connection(<span class="string">'default'</span>)-&gt;select(<span class="string">'SELECT * FROM user;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line">Db::connection(<span class="string">'test'</span>)-&gt;select(<span class="string">'SELECT * FROM user;'</span>);</span><br></pre></td></tr></table></figure><p>模型中修改 <code>connection</code> 字段，即可使用对应配置，例如一下 <code>Model</code> 使用 <code>test</code> 配置。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"><span class="bullet"> * </span>The connection name for the model.</span><br><span class="line"> *</span><br><span class="line"><span class="bullet"> * </span>@var string</span><br><span class="line"> */</span><br><span class="line">protected $connection = 'test';</span><br></pre></td></tr></table></figure><h3 id="执行原生SQL语句"><a href="#执行原生SQL语句" class="headerlink" title="执行原生SQL语句"></a>执行原生SQL语句</h3><h4 id="Query-查询类"><a href="#Query-查询类" class="headerlink" title="Query 查询类"></a>Query 查询类</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">DbConnection</span>\<span class="title">Db</span>;</span><br><span class="line"></span><br><span class="line">$users = Db::select(<span class="string">'SELECT * FROM `user` WHERE gender = ?'</span>,[<span class="number">1</span>]);  <span class="comment">//  返回array </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($users <span class="keyword">as</span> $user)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $user-&gt;name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Execute-执行类"><a href="#Execute-执行类" class="headerlink" title="Execute 执行类"></a>Execute 执行类</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">DbConnection</span>\<span class="title">Db</span>;</span><br><span class="line"></span><br><span class="line">$inserted = Db::insert(<span class="string">'INSERT INTO user (id, name) VALUES (?, ?)'</span>, [<span class="number">1</span>, <span class="string">'Hyperf'</span>]); <span class="comment">// 返回是否成功 bool</span></span><br><span class="line"></span><br><span class="line">$affected = Db::update(<span class="string">'UPDATE user set name = ? WHERE id = ?'</span>, [<span class="string">'John'</span>, <span class="number">1</span>]); <span class="comment">// 返回受影响的行数 int</span></span><br><span class="line"></span><br><span class="line">$affected = Db::delete(<span class="string">'DELETE FROM user WHERE id = ?'</span>, [<span class="number">1</span>]); <span class="comment">// 返回受影响的行数 int</span></span><br><span class="line"></span><br><span class="line">$result = Db::statement(<span class="string">"CALL pro_test(?, '?')"</span>, [<span class="number">1</span>, <span class="string">'your words'</span>]);  <span class="comment">// 返回 bool  CALL pro_test(?，?) 为存储过程，属性为 MODIFIES SQL DATA</span></span><br></pre></td></tr></table></figure><h4 id="自动管理数据库事务"><a href="#自动管理数据库事务" class="headerlink" title="自动管理数据库事务"></a>自动管理数据库事务</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">DbConnection</span>\<span class="title">Db</span>;</span><br><span class="line"></span><br><span class="line">Db::transaction(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Db::table(<span class="string">'user'</span>)-&gt;update([<span class="string">'votes'</span> =&gt; <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    Db::table(<span class="string">'posts'</span>)-&gt;delete();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="手动管理数据库事务"><a href="#手动管理数据库事务" class="headerlink" title="手动管理数据库事务"></a>手动管理数据库事务</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">DbConnection</span>\<span class="title">Db</span>;</span><br><span class="line"></span><br><span class="line">Db::beginTransaction();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do something...</span></span><br><span class="line"></span><br><span class="line">    Db::commit();</span><br><span class="line">&#125; <span class="keyword">catch</span>(\Throwable $ex) &#123;</span><br><span class="line">    Db::rollBack();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询构造器"><a href="#查询构造器" class="headerlink" title="查询构造器"></a>查询构造器</h3><blockquote><p><a href="https://doc.hyperf.io/#/zh/db/querybuilder?id=%e7%ae%80%e4%bb%8b" target="_blank" rel="noopener">Hyperf 查询构造器</a></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://doc.hyperf.io/#/zh/router" target="_blank" rel="noopener">Hyperf</a></li><li><a href="https://github.com/hyperf-cloud/hyperf/blob/master/README-CN.md" target="_blank" rel="noopener">Hyperf Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文学习&lt;a href=&quot;https://hyperf.wiki/#/zh/router&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hyperf&lt;/a&gt; 的基础功能&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架相关" scheme="http://blog.caoxl.com/categories/%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Swoole" scheme="http://blog.caoxl.com/tags/Swoole/"/>
    
      <category term="Hyperf" scheme="http://blog.caoxl.com/tags/Hyperf/"/>
    
  </entry>
  
  <entry>
    <title>Hyperf 学习日志</title>
    <link href="http://blog.caoxl.com/2019/10/10/Hyperf-Learning-Notes/"/>
    <id>http://blog.caoxl.com/2019/10/10/Hyperf-Learning-Notes/</id>
    <published>2019-10-10T09:11:12.000Z</published>
    <updated>2019-10-12T03:57:52.205Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本文是根据<a href="https://hyperf.wiki/#/" target="_blank" rel="noopener">Hyperf官方文档</a>的学习日志, 看官请直接访问 <a href="https://hyperf.wiki/#/zh/quick-start/install" target="_blank" rel="noopener">Hyperf</a></p></blockquote><a id="more"></a><h2 id="什么是Hyperf"><a href="#什么是Hyperf" class="headerlink" title="什么是Hyperf ?"></a>什么是Hyperf ?</h2><blockquote><p><code>Hyperspeed + Flexibility = Hyperf</code></p></blockquote><p><strong>Hyperf</strong> 是基于 <code>Swoole 4.4+</code> 实现的高性能、高灵活性的 PHP 协程框架，内置协程服务器及大量常用的组件，性能较传统基于 PHP-FPM 的框架有质的提升，提供超高性能的同时，也保持着极其灵活的可扩展性，标准组件均基于 PSR 标准 实现，基于强大的依赖注入设计，保证了绝大部分组件或类都是 可替换 与 可复用 的。</p><h2 id="安装Hyperf"><a href="#安装Hyperf" class="headerlink" title="安装Hyperf"></a>安装Hyperf</h2><h3 id="服务器要求"><a href="#服务器要求" class="headerlink" title="服务器要求"></a>服务器要求</h3><p><code>Hyperf</code> 对系统环境有一些要求，<strong>仅可运行于 <code>Linux</code> 和 <code>Mac</code> 环境下</strong>，但由于 <code>Docker</code> 虚拟化技术的发展，在 <code>Windows</code> 下也可以通过 <code>Docker for Windows</code> 来作为运行环境</p><p><a href="https://github.com/hyperf-cloud/hyperf-docker" target="_blank" rel="noopener">hyperf-cloud\hyperf-docker</a> 项目内已经为您准备好了各种版本的 Dockerfile ，或直接基于已经构建好的 <a href="https://hub.docker.com/r/hyperf/hyperf" target="_blank" rel="noopener">hyperf\hyperf</a> 镜像来运行。</p><p>确保你的运行环境达到了以下的要求：</p><ul><li><code>PHP &gt;= 7.2</code></li><li><code>Swoole PHP</code> 扩展 <code>&gt;= 4.4</code>，并关闭了 <code>Short Name</code></li><li><code>OpenSSL PHP</code> 扩展</li><li><code>JSON PHP</code> 扩展</li><li><code>PDO PHP</code> 扩展 （如需要使用到 MySQL 客户端）</li><li><code>Redis PHP</code> 扩展 （如需要使用到 Redis 客户端）</li><li><code>Protobuf PHP</code> 扩展 （如需要使用到 gRPC 服务端或客户端）</li></ul><h4 id="查看Swoole扩展版本"><a href="#查看Swoole扩展版本" class="headerlink" title="查看Swoole扩展版本"></a>查看Swoole扩展版本</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# php --ri swoole</span><br><span class="line"></span><br><span class="line">swoole</span><br><span class="line"></span><br><span class="line">Swoole =&gt; enabled</span><br><span class="line">Author =&gt; Swoole Team <span class="xml"><span class="tag">&lt;<span class="name">team@swoole.com</span>&gt;</span></span></span><br><span class="line">Version =&gt; 4.4.7</span><br><span class="line">Built =&gt; Oct 11 2019 10:26:37</span><br></pre></td></tr></table></figure><h4 id="升级Swoole扩展"><a href="#升级Swoole扩展" class="headerlink" title="升级Swoole扩展"></a>升级Swoole扩展</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pecl upgrade swoole</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://wiki.swoole.com/wiki/page/321.html" target="_blank" rel="noopener">升级swoole版本的常见问题</a></p></blockquote><h4 id="查看PHP版本"><a href="#查看PHP版本" class="headerlink" title="查看PHP版本"></a>查看PHP版本</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# php -v</span><br><span class="line">PHP 7.2.7 (cli) (built: Nov 15 2018 11:33:02) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line"><span class="code">    with Zend OPcache v7.2.7, Copyright (c) 1999-2018, by Zend Technologies</span></span><br></pre></td></tr></table></figure><h4 id="升级PHP版本"><a href="#升级PHP版本" class="headerlink" title="升级PHP版本"></a>升级PHP版本</h4><blockquote><p><a href="http://blog.caoxl.com/2018/07/10/Linux-env-install/">Linux 下安装开发环境(多版本PHP)</a></p></blockquote><h3 id="安装Hyperf-1"><a href="#安装Hyperf-1" class="headerlink" title="安装Hyperf"></a>安装Hyperf</h3><h4 id="Composer-安装"><a href="#Composer-安装" class="headerlink" title="Composer 安装"></a>Composer 安装</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project hyperf/hyperf-skeleton</span><br></pre></td></tr></table></figure><ul><li>开始安装</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl www]# composer create-project hyperf/hyperf-skeleton </span><br><span class="line">Do not run Composer as root/super user! See https://getcomposer.org/root for details</span><br><span class="line">Installing hyperf/hyperf-skeleton (v1.1.0)</span><br><span class="line"><span class="bullet">  - </span>Installing hyperf/hyperf-skeleton (v1.1.0): Downloading (100%)         </span><br><span class="line">Created project in /var/www/hyperf-skeleton</span><br><span class="line"><span class="quote">&gt; @php -r "file_exists('.env') || copy('.env.example', '.env');"</span></span><br><span class="line"><span class="quote">&gt; Installer\Script::install</span></span><br><span class="line">Setting up optional packages</span><br><span class="line">Setup data and cache dir</span><br><span class="line">Removing installer development dependencies</span><br><span class="line">...</span><br><span class="line">Writing lock file</span><br><span class="line">Generating autoload files</span><br><span class="line">ocramius/package-versions:  Generating version class...</span><br><span class="line">ocramius/package-versions: ...done generating version class</span><br></pre></td></tr></table></figure><ul><li>安装完成</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl hyperf-skeleton]# ll -s</span><br><span class="line">total 344K</span><br><span class="line">4.0K drwxrwxr-x  6 root root 4.0K Oct  8 01:26 app</span><br><span class="line">4.0K drwxrwxr-x  2 root root 4.0K Oct  8 01:26 bin</span><br><span class="line">4.0K -rw-rw-r--  1 root root 2.6K Oct 11 10:41 composer.json</span><br><span class="line">296K -rw-rw-r--  1 root root 295K Oct 11 10:41 composer.lock</span><br><span class="line">4.0K drwxrwxr-x  3 root root 4.0K Oct  8 01:26 config</span><br><span class="line">4.0K -rw-rw-r--  1 root root  580 Oct  8 01:26 deploy.test.yml</span><br><span class="line">4.0K -rw-rw-r--  1 root root 1.6K Oct  8 01:26 Dockerfile</span><br><span class="line">4.0K -rw-rw-r--  1 root root  339 Oct  8 01:26 phpstan.neon</span><br><span class="line">4.0K -rw-rw-r--  1 root root  695 Oct  8 01:26 phpunit.xml</span><br><span class="line">4.0K -rw-rw-r--  1 root root 2.3K Oct  8 01:26 README.md</span><br><span class="line">4.0K drwxrwxr-x  2 root root 4.0K Oct 11 10:40 runtime</span><br><span class="line">4.0K drwxrwxr-x  3 root root 4.0K Oct  8 01:26 test</span><br><span class="line">4.0K drwxrwxr-x 44 root root 4.0K Oct 11 10:41 vendor</span><br></pre></td></tr></table></figure><h4 id="Dockter-下开发"><a href="#Dockter-下开发" class="headerlink" title="Dockter 下开发"></a>Dockter 下开发</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 下载并运行 hyperf/hyperf 镜像，并将镜像内的项目目录绑定到宿主机的 /tmp/skeleton 目录</span></span><br><span class="line">docker run -v /tmp/skeleton:/hyperf-skeleton -p 9501:9501 -it --entrypoint /bin/sh hyperf/hyperf:7.2-alpine-cli</span><br><span class="line"></span><br><span class="line"><span class="section"># 镜像容器运行后，在容器内安装 Composer</span></span><br><span class="line">wget https://github.com/composer/composer/releases/download/1.8.6/composer.phar</span><br><span class="line">chmod u+x composer.phar</span><br><span class="line">mv composer.phar /usr/local/bin/composer</span><br><span class="line"></span><br><span class="line"><span class="section"># 将 Composer 镜像设置为阿里云镜像，加速国内下载速度</span></span><br><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer</span><br><span class="line"></span><br><span class="line"><span class="section"># 通过 Composer 安装 hyperf/hyperf-skeleton 项目</span></span><br><span class="line">composer create-project hyperf/hyperf-skeleton</span><br><span class="line"></span><br><span class="line"><span class="section"># 进入安装好的 Hyperf 项目目录</span></span><br><span class="line">cd hyperf-skeleton</span><br><span class="line"><span class="section"># 启动 Hyperf</span></span><br><span class="line">php bin/hyperf.php start</span><br></pre></td></tr></table></figure><p>接下来，就可以在 <code>/tmp/skeleton</code> 中看到您安装好的代码了。由于 <code>Hyperf</code> 是持久化的 <code>CLI</code> 框架，当您修改完您的代码后，通过 <code>CTRL + C</code> 终止当前启动的进程实例，并重新执行 <code>php bin/hyperf.php start</code> 启动命令即可。</p><h3 id="存在兼容性问题的扩展"><a href="#存在兼容性问题的扩展" class="headerlink" title="存在兼容性问题的扩展"></a>存在兼容性问题的扩展</h3><p>由于 <code>Hyperf</code> 基于 <code>Swoole</code> 协程实现，而 <code>Swoole 4</code> 带来的协程功能是 PHP 前所未有的，所以与不少扩展都仍存在兼容性的问题。<br>以下扩展（包括但不限于）都会造成一定的兼容性问题，不能与之共用或共存：</p><ul><li><code>xhprof</code></li><li><code>xdebug</code></li><li><code>blackfire</code></li><li><code>trace</code></li><li><code>uopz</code></li></ul><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>为了让您更快的了解 <code>Hyperf</code> 的使用，本章节将以 创建一个 <code>HTTP Server</code> 为例，通过对路由、控制器的定义实现一个简单的 <code>Web</code> 服务，但 <code>Hyperf</code> 不止于此，完善的服务治理、<code>gRPC</code> 服务、注解、<code>AOP</code> 等功能将由具体的章节阐述。</p><h3 id="定义访问路由"><a href="#定义访问路由" class="headerlink" title="定义访问路由"></a>定义访问路由</h3><p><code>Hyperf</code> 使用 <a href="https://github.com/nikic/FastRoute" target="_blank" rel="noopener">nikic/fast-route</a> 作为默认的路由组件并提供服务，您可以很方便的在 <code>config/routes.php</code> 中定义您的路由。</p><h4 id="通过配置文件定义路由"><a href="#通过配置文件定义路由" class="headerlink" title="通过配置文件定义路由"></a>通过配置文件定义路由</h4><p>路由的文件位于 <code>hyperf-skeleton</code> 项目的 <code>config/routes.php</code> ，下面是一些常用的用法示例。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This file is part of Hyperf.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span>     https://www.hyperf.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@document</span> https://doc.hyperf.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@contact</span>  group<span class="doctag">@hyperf</span>.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span>  https://github.com/hyperf-cloud/hyperf/blob/master/LICENSE</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Router</span>\<span class="title">Router</span>;</span><br><span class="line"></span><br><span class="line">Router::addRoute([<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'HEAD'</span>], <span class="string">'/'</span>, <span class="string">'App\Controller\IndexController@index'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处代码示例为每个示例都提供了三种不同的绑定定义方式，实际配置时仅可采用一种且仅定义一次相同的路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个 GET 请求的路由，绑定访问地址 '/get' 到 App\Controller\IndexController 的 get 方法</span></span><br><span class="line">Router::get(<span class="string">'/get'</span>, <span class="string">'App\Controller\IndexController::get'</span>);</span><br><span class="line">Router::get(<span class="string">'/get'</span>, <span class="string">'App\Controller\IndexController@get'</span>);</span><br><span class="line">Router::get(<span class="string">'/get'</span>, [\App\Controller\IndexController::class, <span class="string">'get'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个 POST 请求的路由，绑定访问地址 '/post' 到 App\Controller\IndexController 的 post 方法</span></span><br><span class="line">Router::post(<span class="string">'/post'</span>, <span class="string">'App\Controller\IndexController::post'</span>);</span><br><span class="line">Router::post(<span class="string">'/post'</span>, <span class="string">'App\Controller\IndexController@post'</span>);</span><br><span class="line">Router::post(<span class="string">'/post'</span>, [\App\Controller\IndexController::class, <span class="string">'post'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个允许 GET、POST 和 HEAD 请求的路由，绑定访问地址 '/multi' 到 App\Controller\IndexController 的 multi 方法</span></span><br><span class="line">Router::addRoute([<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'HEAd'</span>], <span class="string">'multi'</span>, <span class="string">'App\Controller\IndexController::multi'</span>);</span><br><span class="line">Router::addRoute([<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'HEAd'</span>], <span class="string">'multi'</span>, <span class="string">'App\Controller\IndexController@multi'</span>);</span><br><span class="line">Router::addRoute([<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'HEAd'</span>], <span class="string">'multi'</span>, [\App\Controller\IndexController::class, <span class="string">'multi'</span>]);</span><br></pre></td></tr></table></figure><h4 id="通过注解来定义路由"><a href="#通过注解来定义路由" class="headerlink" title="通过注解来定义路由"></a>通过注解来定义路由</h4><p><code>Hyperf</code> 提供了极其强大和方便灵活的 <strong>注解</strong> 功能，在路由的定义上也毫无疑问地提供了注解定义的方式，<code>Hyperf</code> 提供了 <code>@Controller</code> 和 <code>@AutoController</code> 两种注解来定义一个 <code>Controller</code>.</p><h5 id="通过-AutoController-注解定义路由"><a href="#通过-AutoController-注解定义路由" class="headerlink" title="通过 @AutoController 注解定义路由"></a>通过 <code>@AutoController</code> 注解定义路由</h5><p><code>@AutoController</code> 为绝大多数简单的访问场景提供路由绑定支持，使用 <code>@AutoController</code> 时则 <code>Hyperf</code> 会自动解析所在类的所有 <code>public</code> 方法并提供 <code>GET</code> 和 <code>POST</code> 两种请求方式。</p><blockquote><p>使用 <code>@AutoController</code> 注解时需 <code>use Hyperf\HttpServer\Annotation\AutoController;</code> 命名空间；</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Contract</span>\<span class="title">RequestInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">AutoController</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AutoController</span>()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// Hyperf 会自动为此方法生成一个 /index/index 的路由，允许通过 GET 或 POST 方式请求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(RequestInterface $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 从请求中获得 id 参数</span></span><br><span class="line">        $id = $request-&gt;input(<span class="string">'id'</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> (string)$id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过-Controller-注解定义路由"><a href="#通过-Controller-注解定义路由" class="headerlink" title="通过 @Controller 注解定义路由"></a>通过 <code>@Controller</code> 注解定义路由</h4><p><code>@Controller</code> 为满足更细致的路由定义需求而存在，使用 <code>@Controller</code> 注解用于表明当前类为一个 <code>Controller</code> 类，同时需配合 <code>@RequestMapping</code> 注解来对请求方法和请求路径进行更详细的定义。</p><blockquote><ul><li><p>使用 <code>@Controller</code> 注解时需 <code>use Hyperf\HttpServer\Annotation\Controller;</code> 命名空间；</p></li><li><p>使用 <code>@RequestMapping</code> 注解时需 <code>use Hyperf\HttpServer\Annotation\RequestMapping;</code> 命名空间；</p></li><li><p>使用 <code>@GetMapping</code> 注解时需 <code>use Hyperf\HttpServer\Annotation\GetMapping;</code> 命名空间；</p></li><li><p>使用 <code>@PostMapping</code> 注解时需 <code>use Hyperf\HttpServer\Annotation\PostMapping;</code> 命名空间；</p></li><li><p>使用 <code>@PutMapping</code> 注解时需 <code>use Hyperf\HttpServer\Annotation\PutMapping;</code> 命名空间；</p></li><li><p>使用 <code>@PatchMapping</code> 注解时需 <code>use Hyperf\HttpServer\Annotation\PatchMapping;</code> 命名空间；</p></li><li><p>使用 <code>@DeleteMapping</code> 注解时需 <code>use Hyperf\HttpServer\Annotation\DeleteMapping;</code> 命名空间；</p></li></ul></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Contract</span>\<span class="title">RequestInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">RequestMapping</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span>()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// Hyperf 会自动为此方法生成一个 /index/index 的路由，允许通过 GET 或 POST 方式请求</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestMapping</span>(path="index", methods="get,post")</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(RequestInterface $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 从请求中获得 id 参数</span></span><br><span class="line">        $id = $request-&gt;input(<span class="string">'id'</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> (string)$id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理HTTP请求"><a href="#处理HTTP请求" class="headerlink" title="处理HTTP请求"></a>处理HTTP请求</h3><p><code>Hyperf</code> 是完全开放的，本质上没有规定您必须基于某种模式下去实现请求的处理，您可以采用传统的 <code>MVC模式</code>，亦可以采用 <code>RequestHandler模式</code> 来进行开发。</p><p>在 app 文件夹内创建一个 Controller 文件夹并创建 IndexController.php 如下，index 方法内从请求中获取了 id 参数，并转换为 字符串 类型返回到客户端。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Contract</span>\<span class="title">RequestInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">AutoController</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AutoController</span>()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// Hyperf 会自动为此方法生成一个 /index/index 的路由，允许通过 GET 或 POST 方式请求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(RequestInterface $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 从请求中获得 id 参数</span></span><br><span class="line">        $id = $request-&gt;input(<span class="string">'id'</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 转换 $id 为字符串格式并以 plain/text 的 Content-Type 返回 $id 的值给客户端</span></span><br><span class="line">        <span class="keyword">return</span> (string)$id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖自动注入"><a href="#依赖自动注入" class="headerlink" title="依赖自动注入"></a>依赖自动注入</h3><p>依赖自动注入是 <code>Hyperf</code> 提供的一个非常强大的功能，也是保持框架灵活性的根基。<br><code>Hyperf</code> 提供了两种注入方式，一种是大家常见的通过构造函数注入，另一种是通过 <code>@Inject</code> 注解注入</p><h4 id="通过构造函数注入"><a href="#通过构造函数注入" class="headerlink" title="通过构造函数注入"></a>通过构造函数注入</h4><p>只需在构造函数的参数内声明参数的类型，<code>Hyperf</code> 会自动注入对应的对象或值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Contract</span>\<span class="title">RequestInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">AutoController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Service</span>\<span class="title">UserService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AutoController</span>()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> UserService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在构造函数声明参数的类型，Hyperf 会自动注入对应的对象或值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserService $userService)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;userService = $userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /index/info</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">(RequestInterface $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $id = $request-&gt;input(<span class="string">'id'</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;userService-&gt;getInfoById((int)$id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过-Inject-注解注入"><a href="#通过-Inject-注解注入" class="headerlink" title="通过 @Inject 注解注入"></a>通过 <code>@Inject</code> 注解注入</h4><p>只需对对应的类属性通过 <code>@var</code> 声明参数的类型，并使用 <code>@Inject</code> 注解标记属性 ，<code>Hyperf</code> 会自动注入对应的对象或值。</p><blockquote><p>使用 <code>@Inject</code> 注解时需 <code>use Hyperf\Di\Annotation\Inject;</code> 命名空间；</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Contract</span>\<span class="title">RequestInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">HttpServer</span>\<span class="title">Annotation</span>\<span class="title">AutoController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Di</span>\<span class="title">Annotation</span>\<span class="title">Inject</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Service</span>\<span class="title">UserService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AutoController</span>()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Inject</span>()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> UserService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /index/info</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">(RequestInterface $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $id = $request-&gt;input(<span class="string">'id'</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;userService-&gt;getInfoById((int)$id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动-Hyperf-服务"><a href="#启动-Hyperf-服务" class="headerlink" title="启动 Hyperf 服务"></a>启动 Hyperf 服务</h2><p>由于 <code>Hyperf</code> 内置了协程服务器，也就意味着 <code>Hyperf</code> 将以 <code>CLI</code> 的形式去运行，所以在定义好路由及实际的逻辑代码之后，我们需要在项目根目录并通过命令行运行 <code>php bin/hyperf.php start</code> 来启动服务。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl hyperf-skeleton]# php bin/hyperf.php start</span><br><span class="line">Detected an available cache, skip the app scan process.</span><br><span class="line">Detected an available cache, skip the vendor scan process.</span><br><span class="line">[DEBUG] Event Hyperf\Framework\Event\BootApplication handled by Hyperf\Di\Listener\BootApplicationListener listener.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>当 <code>Console</code> 界面显示服务启动后便可通过 cURL 或 浏览器对服务正常发起访问了，默认服务会提供一个首页 <code>http://127.0.0.1:9501/</code>，对于本章示例引导的情况下，也就是上面的例子所对应的访问地址为 <code>http://127.0.0.1:9501/index/info?id=1</code>。</p><blockquote><p><strong>访问</strong>: <a href="http://caoxl.com:9501/" target="_blank" rel="noopener">http://caoxl.com:9501/</a></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="code">    method: "GET",</span></span><br><span class="line"><span class="code">    message: "Hello Hyperf."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重新加载代码"><a href="#重新加载代码" class="headerlink" title="重新加载代码"></a>重新加载代码</h3><p>由于 <code>Hyperf</code> 是持久化的 <code>CLI</code> 应用，也就意味着一旦进程启动，已解析的 PHP 代码会持久化在进程中，也就意味着启动服务后您再修改的 <code>PHP</code> 代码不会改变已启动的服务，如希望服务重新加载您修改后的代码，需要通过在启动的 <code>Console</code> 中键入 <code>CTRL + C</code> 终止服务，再重新执行启动命令完成重启和重新加载。</p><h2 id="核心架构"><a href="#核心架构" class="headerlink" title="核心架构"></a>核心架构</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="框架生命周期"><a href="#框架生命周期" class="headerlink" title="框架生命周期"></a>框架生命周期</h4><p><code>Hyperf</code> 是运行于 <a href="https://wiki.swoole.com/" target="_blank" rel="noopener">Swoole</a> 之上的，想要理解透彻 <code>Hyperf</code> 的生命周期，那么理解 <a href="https://wiki.swoole.com/" target="_blank" rel="noopener">Swoole</a> 的生命周期也至关重要。<br><code>Hyperf</code> 的命令管理默认由 <code>symfony/console</code> 提供支持(<em>如果您希望更换该组件您也可以通过改变 skeleton 的入口文件更换成您希望使用的组件</em>)，在执行 <code>php bin/hyperf.php start</code> 后，将由 <code>Hyperf\Server\Command\StartServer</code> 命令类接管，并根据配置文件 <code>config/autoload/server.php</code> 内定义的 <code>Server</code> 逐个启动。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Event Hyperf\Framework\Event\BootApplication handled by Hyperf\Di\Listener\BootApplicationListener listener.</span><br><span class="line">[DEBUG] Event Hyperf\Framework\Event\BootApplication handled by Hyperf\Config\Listener\RegisterPropertyHandlerListener listener.</span><br><span class="line">[DEBUG] Event Hyperf\Framework\Event\BootApplication handled by Hyperf\Paginator\Listener\PageResolverListener listener.</span><br><span class="line">[DEBUG] Event Hyperf\Framework\Event\BeforeMainServerStart handled by Hyperf\Amqp\Listener\BeforeMainServerStartListener listener.</span><br><span class="line">[DEBUG] Event Hyperf\Framework\Event\BeforeMainServerStart handled by Hyperf\Process\Listener\BootProcessListener listener.</span><br><span class="line">[DEBUG] Event Hyperf\Framework\Event\OnStart handled by Hyperf\Server\Listener\InitProcessTitleListener listener.</span><br><span class="line">[DEBUG] Event Hyperf\Framework\Event\OnManagerStart handled by Hyperf\Server\Listener\InitProcessTitleListener listener.</span><br><span class="line">[DEBUG] Event Hyperf\Framework\Event\MainWorkerStart handled by Hyperf\Amqp\Listener\MainWorkerStartListener listener.</span><br><span class="line">[INFO] Worker#0 started.</span><br><span class="line">[DEBUG] Event Hyperf\Framework\Event\AfterWorkerStart handled by Hyperf\Server\Listener\InitProcessTitleListener listener.</span><br><span class="line">[INFO] HTTP Server listening at 0.0.0.0:9501</span><br><span class="line">[DEBUG] Event Hyperf\Framework\Event\AfterWorkerStart handled by Hyperf\Server\Listener\AfterWorkerStartListener listener.</span><br><span class="line">[INFO] Worker#1 started.</span><br><span class="line">[DEBUG] Event Hyperf\Framework\Event\AfterWorkerStart handled by Hyperf\Server\Listener\InitProcessTitleListener listener.</span><br><span class="line">[DEBUG] Event Hyperf\Framework\Event\AfterWorkerStart handled by Hyperf\Server\Listener\AfterWorkerStartListener listener.</span><br></pre></td></tr></table></figure><blockquote><p>关于依赖注入容器的初始化工作，并没有由组件来实现，因为一旦交由组件来实现，这个耦合就会非常的明显，所以在默认的情况下，是由入口文件来加载 <code>config/container.php</code> 来实现的。</p></blockquote><h4 id="请求与协程生命周期"><a href="#请求与协程生命周期" class="headerlink" title="请求与协程生命周期"></a>请求与协程生命周期</h4><p><code>Swoole</code> 在处理每个连接时，会默认创建一个协程去处理，主要体现在 <code>onRequest</code>、<code>onReceive</code>、<code>onConnect</code> 事件，所以可以理解为每个请求都是一个协程，由于创建协程也是个常规操作，所以一个请求协程里面可能会包含很多个协程，同一个进程内协程之间是内存共享的，但调度顺序是非顺序的，且协程间本质上是相互独立的没有父子关系，所以对每个协程的状态处理都需要通过 <strong>协程上下文</strong> 来管理。</p><h5 id="协程上下文"><a href="#协程上下文" class="headerlink" title="协程上下文"></a>协程上下文</h5><p>由于同一个进程内协程间是内存共享的，但协程的执行/切换是非顺序的，也就意味着我们很难掌控当前的协程是哪一个(事实上可以，但通常没人这么干)，所以我们需要在发生协程切换时能够同时切换对应的上下文。</p><p>在 <code>Hyperf</code> 里实现协程的上下文管理将非常简单，基于 <code>Hyperf\Utils\Context</code> 类的 <code>set(string $id, $value)</code>、<code>get(string $id, $default = null)</code>、<code>has(string $id)</code>、<code>override(string $id, \Closure $closure)</code> 静态方法即可完成上下文数据的管理，通过这些方法设置和获取的值，都仅限于当前的协程，在协程结束时，对应的上下文也会自动跟随释放掉，无需手动管理，无需担忧内存泄漏的风险。</p><h6 id="Hyperf-Utils-Context-set"><a href="#Hyperf-Utils-Context-set" class="headerlink" title="Hyperf\Utils\Context::set()"></a><code>Hyperf\Utils\Context::set()</code></h6><p>通过调用 <code>set(string $id, $value)</code> 方法储存一个值到当前协程的上下文中，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Utils</span>\<span class="title">Context</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 bar 字符串以 foo 为 key 储存到当前协程上下文中</span></span><br><span class="line">$foo = Context::set(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br><span class="line"><span class="comment">// set 方法会再将 value 作为方法的返回值返回回来，所以 $foo 的值为 bar</span></span><br></pre></td></tr></table></figure><h6 id="Hyperf-Utils-Context-get"><a href="#Hyperf-Utils-Context-get" class="headerlink" title="Hyperf\Utils\Context::get()"></a><code>Hyperf\Utils\Context::get()</code></h6><p>通过调用 <code>get(string $id, $default = null)</code> 方法可从当前协程的上下文中取出一个以 <code>$id</code> 为 <code>key</code> 储存的值，如不存在则返回 <code>$default</code> ，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Utils</span>\<span class="title">Context</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从当前协程上下文中取出 key 为 foo 的值，如不存在则返回 bar 字符串</span></span><br><span class="line">$foo = Context::get(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br></pre></td></tr></table></figure><h6 id="Hyperf-Utils-Context-has"><a href="#Hyperf-Utils-Context-has" class="headerlink" title="Hyperf\Utils\Context::has()"></a><code>Hyperf\Utils\Context::has()</code></h6><p>通过调用 <code>has(string $id)</code> 方法可判断当前协程的上下文中是否存在以 <code>$id</code> 为 <code>key</code> 储存的值，如存在则返回 <code>true</code>，不存在则返回 <code>false</code>，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Utils</span>\<span class="title">Context</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从当前协程上下文中判断 key 为 foo 的值是否存在</span></span><br><span class="line">$foo = Context::has(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><h6 id="Hyperf-Utils-Context-override"><a href="#Hyperf-Utils-Context-override" class="headerlink" title="Hyperf\Utils\Context::override()"></a><code>Hyperf\Utils\Context::override()</code></h6><blockquote><p>Override 方法仅可在 1.0.12 版本或更高版本使用</p></blockquote><p>当我们需要做一些复杂的上下文处理，比如先判断一个 <code>key</code> 是否存在，如果存在则取出 <code>value</code> 来再对 <code>value</code> 进行某些修改，然后再将 <code>value</code> 设置回上下文容器中，此时会有比较繁杂的判断条件，可直接通过调用 <code>override</code> 方法来实现这个逻辑，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Psr</span>\<span class="title">Http</span>\<span class="title">Message</span>\<span class="title">ServerRequestInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Utils</span>\<span class="title">Context</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从协程上下文取出 $request 对象并设置 key 为 foo 的 Header，然后再保存到协程上下文中</span></span><br><span class="line">$request = Context::override(ServerRequestInterface::class, <span class="function"><span class="keyword">function</span> <span class="params">(ServerRequestInterface $request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $request-&gt;withAddedHeader(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><code>Hyperf</code> 是运行于 <code>Swoole 4</code> 的协程之上的，这也是 Hyperf 能提供高性能的其中一个很大的因素。</p><blockquote><p><a href="https://hyperf.wiki/#/zh/coroutine?id=%e6%a6%82%e5%bf%b5" target="_blank" rel="noopener">Hyperf 协程</a><br><a href="https://wiki.swoole.com/wiki/page/p-coroutine.html" target="_blank" rel="noopener">Swoole 协程</a></p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require hyperf/config</span><br></pre></td></tr></table></figure><h4 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h4><p>以下结构仅为 <code>Hyperf-Skeleton</code> 所提供的默认配置的情况下的结构，实际情况由于依赖或使用的组件的差异，文件会有差异。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">config</span><br><span class="line">├── autoload                // 此文件夹内的配置文件会被配置组件自己加载，并以文件夹内的文件名作为第一个键值</span><br><span class="line">│   ├── amqp.php            // 用于管理 AMQP 组件</span><br><span class="line">│   ├── annotations.php     // 用于管理注解</span><br><span class="line">│   ├── apollo.php          // 用于管理基于 Apollo 实现的配置中心</span><br><span class="line">│   ├── aspects.php         // 用于管理 AOP 切面</span><br><span class="line">│   ├── async_queue.php     // 用于管理基于 Redis 实现的简易队列服务</span><br><span class="line">│   ├── cache.php           // 用于管理缓存组件</span><br><span class="line">│   ├── commands.php        // 用于管理自定义命令</span><br><span class="line">│   ├── consul.php          // 用于管理 Consul 客户端</span><br><span class="line">│   ├── databases.php       // 用于管理数据库客户端</span><br><span class="line">│   ├── devtool.php         // 用于管理开发者工具</span><br><span class="line">│   ├── exceptions.php      // 用于管理异常处理器</span><br><span class="line">│   ├── listeners.php       // 用于管理事件监听者</span><br><span class="line">│   ├── logger.php          // 用于管理日志</span><br><span class="line">│   ├── middlewares.php     // 用于管理中间件</span><br><span class="line">│   ├── opentracing.php     // 用于管理调用链追踪</span><br><span class="line">│   ├── processes.php       // 用于管理自定义进程</span><br><span class="line">│   ├── redis.php           // 用于管理 Redis 客户端</span><br><span class="line">│   └── server.php          // 用于管理 Server 服务</span><br><span class="line">├── config.php              // 用于管理用户或框架的配置，如配置相对独立亦可放于 autoload 文件夹内</span><br><span class="line">├── container.php           // 负责容器的初始化，作为一个配置文件运行并最终返回一个 Psr\Container\ContainerInterface 对象</span><br><span class="line">├── dependencies.php        // 用于管理 DI 的依赖关系和类对应关系</span><br><span class="line">└── routes.php              // 用于管理路由</span><br></pre></td></tr></table></figure><h5 id="设置配置"><a href="#设置配置" class="headerlink" title="设置配置"></a>设置配置</h5><p>只需在 <code>config/config.php</code> 与 <code>config/autoload/server.php</code> 与 <code>autoload</code> 文件夹内的配置，都能在服务启动时被扫描并注入到 <code>Hyperf\Contract\ConfigInterface</code> 对应的对象中，这个流程是由 <code>Hyperf\Config\ConfigFactory</code> 在 <code>Config</code> 对象实例化时完成的。</p><h5 id="获取配置"><a href="#获取配置" class="headerlink" title="获取配置"></a>获取配置</h5><p>Config 组件提供了三种方式获取配置，</p><ul><li>通过 <code>Hyperf\Config\Config</code> 对象获取</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"><span class="bullet"> * </span>@var \Hyperf\Contract\ConfigInterface</span><br><span class="line"> */</span><br><span class="line">// 通过 get(string $key, $default): mixed 方法获取 $key 所对应的配置，$key 值可以通过 . 连接符定位到下级数组，$default 则是当对应的值不存在时返回的默认值</span><br><span class="line">$config-&gt;get($key，$default);</span><br></pre></td></tr></table></figure><ul><li>通过 <code>@Value</code> 注解获取</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class IndexController</span><br><span class="line">&#123;</span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="bullet">     * </span>@Value("config.key")</span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    private $configValue;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    public function index()</span></span><br><span class="line"><span class="code">    &#123;</span></span><br><span class="line"><span class="code">        return $this-&gt;configValue;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 <code>config(string $key, $default)</code> 函数获取。</li></ul><p>在任意地方可以通过 <code>config(string $key, $default)</code> 函数获取对应的配置，但这样的使用方式也就意味着您对 <code>hyperf/config</code> 和 <code>hyperf/utils</code> 组件是强依赖的。</p><h5 id="判断配置是否存在"><a href="#判断配置是否存在" class="headerlink" title="判断配置是否存在"></a>判断配置是否存在</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"><span class="bullet"> * </span>@var \Hyperf\Contract\ConfigInterface</span><br><span class="line"> */</span><br><span class="line">// 通过 has(): bool 方法判断对应的 $key 值是否存在于配置中，$key 值可以通过 . 连接符定位到下级数组</span><br><span class="line">$config-&gt;has($key);</span><br></pre></td></tr></table></figure><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><h5 id="读取环境变量"><a href="#读取环境变量" class="headerlink" title="读取环境变量"></a>读取环境变量</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// config/config.php</span><br><span class="line">return [</span><br><span class="line"><span class="code">    'app_name' =&gt; env('APP_NAME', 'Hyperf Skeleton'),</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="什么是注解-什么是注释？"><a href="#什么是注解-什么是注释？" class="headerlink" title="什么是注解? 什么是注释？"></a>什么是注解? 什么是注释？</h4><p>在解释注解之前我们需要先定义一下 <code>注解</code> 与 <code>注释</code> 的区别：</p><ul><li><strong>注释:</strong> 给程序员看，帮助理解代码，对代码起到解释、说明的作用。</li><li><strong>注解:</strong> 给应用程序看，用于元数据的定义，单独使用时没有任何作用，需配合应用程序对其元数据进行利用才有作用。</li></ul><h4 id="注解解析如何实现？"><a href="#注解解析如何实现？" class="headerlink" title="注解解析如何实现？"></a>注解解析如何实现？</h4><p><code>Hyperf</code> 使用了 <a href="https://github.com/doctrine/annotations" target="_blank" rel="noopener">doctrine/annotations</a> 包来对代码内的注解进行解析，注解必须写在下面示例的标准注释块才能被正确解析，其它格式均不能被正确解析。 注释块示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"><span class="bullet"> * </span>@AnnotationClass()</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h4 id="注解是如何发挥作用的？"><a href="#注解是如何发挥作用的？" class="headerlink" title="注解是如何发挥作用的？"></a>注解是如何发挥作用的？</h4><p>我们有说到<strong>注解只是元数据的定义</strong>，需配合应用程序才能发挥作用，在 <code>Hyperf</code> 里，注解内的数据会被收集到 <code>Hyperf\Di\Annotation\AnnotationCollector</code> 类供应用程序使用，当然根据您的实际情况，也可以收集到您自定义的类去，随后在这些注解本身希望发挥作用的地方对已收集的注解元数据进行读取和利用，以达到期望的功能实现。</p><h4 id="忽略某些注解"><a href="#忽略某些注解" class="headerlink" title="忽略某些注解"></a>忽略某些注解</h4><p>我们可以通过在 <code>config/autoload/annotations.php</code> 内将相关注解设置为忽略。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">return [</span><br><span class="line"><span class="code">    'scan' =&gt; [</span></span><br><span class="line"><span class="code">        // ignore_annotations 数组内的注解都会被注解扫描器忽略</span></span><br><span class="line"><span class="code">        'ignore_annotations' =&gt; [</span></span><br><span class="line"><span class="code">            'mixin',</span></span><br><span class="line"><span class="code">        ],</span></span><br><span class="line"><span class="code">    ],</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h4><p>注解一共有3种应用对象，分别是 <code>类</code>、<code>类方法</code> 和 <code>类属性</code>。</p><h5 id="使用类注解"><a href="#使用类注解" class="headerlink" title="使用类注解"></a>使用类注解</h5><p>类注解定义是在 <code>class</code> 关键词上方的注释块内，比如常用的 <code>@Controller</code> 和 <code>@AutoController</code> 就是类注解的使用典范，下面的代码示例则为一个正确使用类注解的示例，表明 <code>@ClassAnnotation</code> 注解应用于 <code>Foo</code> 类。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"><span class="bullet"> * </span>@ClassAnnotation()</span><br><span class="line"> */</span><br><span class="line">class Foo &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="使用类方法注解"><a href="#使用类方法注解" class="headerlink" title="使用类方法注解"></a>使用类方法注解</h5><p>类方法注解定义是在方法上方的注释块内，比如常用的 <code>@RequestMapping</code> 就是类方法注解的使用典范，下面的代码示例则为一个正确使用类方法注解的示例，表明 <code>@MethodAnnotation</code> 注解应用于 <code>Foo::bar()</code> 方法。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Foo</span><br><span class="line">&#123;</span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="bullet">     * </span>@MethodAnnotation()</span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    public function bar()</span></span><br><span class="line"><span class="code">    &#123;</span></span><br><span class="line"><span class="code">        // some code</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用类属性注解"><a href="#使用类属性注解" class="headerlink" title="使用类属性注解"></a>使用类属性注解</h5><p>类属性注解定义是在属性上方的注释块内，比如常用的 <code>@Value</code> 和 <code>@Inject</code> 就是类属性注解的使用典范，下面的代码示例则为一个正确使用类属性注解的示例，表明 <code>@PropertyAnnotation</code> 注解应用于 <code>Foo</code> 类的 <code>$bar</code> 属性。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Foo</span><br><span class="line">&#123;</span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="bullet">     * </span>@PropertyAnnotation()</span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    private $bar;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注解参数传递"><a href="#注解参数传递" class="headerlink" title="注解参数传递"></a>注解参数传递</h5><ul><li>传递主要的单个参数 <code>@DemoAnnotation(&quot;value&quot;)</code></li><li>传递字符串参数 <code>@DemoAnnotation(key1=&quot;value1&quot;, key2=&quot;value2&quot;)</code></li><li>传递数组参数 <code>@DemoAnnotation(key={&quot;value1&quot;, &quot;value2&quot;})</code></li></ul><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="php"><span class="meta">&lt;?php</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">namespace App\Annotation;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">use Hyperf\Di\Annotation\AbstractAnnotation;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * Class Bar</span></span><br><span class="line"><span class="xml"> * @package App\Annotation</span></span><br><span class="line"><span class="xml"> * @Annotation</span></span><br><span class="line"><span class="xml"> * @Target(&#123;"METHOD", "PROPERTY"&#125;)</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">class Bar extends AbstractAnnotation</span></span><br><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">    // some code</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * Class Foo</span></span><br><span class="line"><span class="xml"> * @package App\Annotation</span></span><br><span class="line"><span class="xml"> * @Target("CLASS")</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">class Foo extends AbstractAnnotation</span></span><br><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">    // some code</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意注解类的 <code>@Annotation</code> 和 <code>@Target</code> 注解为全局注解，无需 <code>use</code></p></blockquote><p>其中 <code>@Target</code> 有如下参数：</p><ul><li><code>METHOD</code> 注解允许定义在类方法上</li><li><code>PROPERTY</code> 注解允许定义在类属性上</li><li><code>CLASS</code> 注解允许定义在类上</li><li><code>ALL</code> 注解允许定义在任何地方</li></ul><h4 id="自定义注解收集器"><a href="#自定义注解收集器" class="headerlink" title="自定义注解收集器"></a>自定义注解收集器</h4><p>注解的收集时具体的执行流程也是在注解类内实现的，相关的方法由 <code>Hyperf\Di\Annotation\AnnotationInterface</code> 约束着，该接口类要求了下面 <code>3</code> 个方法的实现，您可以根据自己的需求实现对应的逻辑：</p><ul><li><code>public function collectClass(string $className): void;</code> 当<strong>注解定义在类时</strong>被扫描时会触发该方法</li><li><code>public function collectMethod(string $className, ?string $target): void;</code> 当<strong>注解定义在类方法时</strong>被扫描时会触发该方法</li><li><code>public function collectProperty(string $className, ?string $target): void;</code> 当<strong>注解定义在类属性时</strong>被扫描时会触发该方法</li></ul><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>该组件默认存在 <code>hyperf-skeleton</code> 项目中并作为主要组件存在，如希望在其它框架内使用该组件可通过下面的命令安装。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require hyperf/di</span><br></pre></td></tr></table></figure><h3 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h3><p>事件模式必须基于 <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-14-event-dispatcher.md" target="_blank" rel="noopener">PSR-14</a> 去实现。<br><code>Hyperf</code> 的事件管理器默认由 <code>hyperf/event</code> 实现，该组件亦可用于其它框架或应用，只需通过 <code>Composer</code> 将该组件引入即可。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require hyperf/event</span><br></pre></td></tr></table></figure><p>事件模式是一种经过了充分测试的可靠机制，是一种非常适用于解耦的机制，分别存在以下 <code>3</code> 种角色：</p><ul><li><code>事件(Event)</code> 是传递于应用代码与 <code>监听器(Listener)</code> 之间的通讯对象</li><li><code>监听器(Listener)</code> 是用于监听 <code>事件(Event)</code> 的发生的监听对象</li><li><code>事件调度器(EventDispatcher)</code> 是用于触发 <code>事件(Event)</code> 和管理 <code>监听器(Listener)</code> 与 <code>事件(Event)</code> 之间的关系的管理者对象</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Swoole-短名未关闭"><a href="#Swoole-短名未关闭" class="headerlink" title="Swoole 短名未关闭"></a>Swoole 短名未关闭</h3><blockquote><p>[ERROR] Swoole short name have to disable before start server, please set swoole.use_shortname = ‘Off’ into your php.ini.</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 这些都是错误的，注意 <span class="code">`大小写`</span> 和 <span class="code">`引号`</span></span><br><span class="line">swoole.use_shortname = 'off'  // 经测试这样也可以</span><br><span class="line">swoole.use_shortname = off</span><br><span class="line">swoole.use_shortname = Off</span><br><span class="line"></span><br><span class="line">// 下面的才是正确的</span><br><span class="line">swoole.use_shortname = 'Off'</span><br></pre></td></tr></table></figure><h3 id="不能通过全局变量获取属性参数"><a href="#不能通过全局变量获取属性参数" class="headerlink" title="不能通过全局变量获取属性参数"></a>不能通过全局变量获取属性参数</h3><p>在 <code>PHP-FPM</code> 下可以通过全局变量获取到请求的参数，服务器的参数等，在 <code>Hyperf</code> 和 <code>Swoole</code> 内，都 无法 通过 <code>$_GET</code>/<code>$_POST</code>/<code>$_REQUEST</code>/<code>$_SESSION</code>/<code>$_COOKIE</code>/<code>$_SERVER</code>等<code>$_</code>开头的变量获取到任何属性参数。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://hyperf.wiki/#/zh/quick-start/install" target="_blank" rel="noopener">Hyperf</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是根据&lt;a href=&quot;https://hyperf.wiki/#/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hyperf官方文档&lt;/a&gt;的学习日志, 看官请直接访问 &lt;a href=&quot;https://hyperf.wiki/#/zh/quick-start/install&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hyperf&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架相关" scheme="http://blog.caoxl.com/categories/%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Swoole" scheme="http://blog.caoxl.com/tags/Swoole/"/>
    
      <category term="Hyperf" scheme="http://blog.caoxl.com/tags/Hyperf/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本 学习日志</title>
    <link href="http://blog.caoxl.com/2019/10/10/Shell-Learning-Notes/"/>
    <id>http://blog.caoxl.com/2019/10/10/Shell-Learning-Notes/</id>
    <published>2019-10-10T02:40:32.000Z</published>
    <updated>2019-10-10T06:44:09.372Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是Shell脚本"><a href="#什么是Shell脚本" class="headerlink" title="什么是Shell脚本?"></a>什么是Shell脚本?</h2><a id="more"></a><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>打开文本编辑器(可以使用 <code>vi/vim</code> 命令来创建文件)，新建一个文件 <code>test.sh</code>，扩展名为 <code>sh</code>（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用 <code>php</code> 写 <code>shell</code> 脚本，扩展名就用 <code>php</code> 好了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">cd ~</span><br><span class="line">mkdir shell_test</span><br><span class="line">cd shell_test</span><br><span class="line"></span><br><span class="line">for ((i=0; i&lt;10; i++)); do</span><br><span class="line">touch test_$i.txt</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="示例解释"><a href="#示例解释" class="headerlink" title="示例解释"></a>示例解释</h3><ul><li>第1行: 指定脚本解释器, 这里用<code>/bin/sh</code>做解释器的</li><li>第2行: 切换到当前用户的<code>home</code>目录</li><li>第3行: 创建一个目录 <code>shell_test</code></li><li>第4行: 切换到<code>shell_test</code>目录</li><li>第5行: 循环条件, 一共循环10次</li><li>第6行: 创建一个test_0…9.txt文件</li><li>第7行: 循环体 结束</li></ul><blockquote><p><code>“#!”</code> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行。</p></blockquote><h3 id="示例结果"><a href="#示例结果" class="headerlink" title="示例结果"></a>示例结果</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# ls</span><br><span class="line">shell_test</span><br><span class="line">[root@caoxl ~]# cd shell_test/</span><br><span class="line">[root@caoxl shell_test]# ls</span><br><span class="line">test<span class="emphasis">_0.txt  test_</span>2.txt  test<span class="emphasis">_4.txt  test_</span>6.txt  test_8.txt</span><br><span class="line">test<span class="emphasis">_1.txt  test_</span>3.txt  test<span class="emphasis">_5.txt  test_</span>7.txt  test_9.txt</span><br></pre></td></tr></table></figure><h2 id="Shell和Shell脚本的概念"><a href="#Shell和Shell脚本的概念" class="headerlink" title="Shell和Shell脚本的概念"></a>Shell和Shell脚本的概念</h2><blockquote><p><strong>shell</strong>是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。<br><strong>shell脚本（shell script）</strong> ，是一种为<code>shell</code>编写的脚本程序。业界所说的<code>shell</code>通常都是指<code>shell</code>脚本，但读者朋友要知道，<code>shell</code>和<code>shell script</code>是两个不同的概念。</p></blockquote><h2 id="Shell编程环境"><a href="#Shell编程环境" class="headerlink" title="Shell编程环境"></a>Shell编程环境</h2><p><code>shell</code>编程跟<code>java</code>、<code>php</code>编程一样，只要有一个<strong>能编写代码的文本编辑器</strong>和一个<strong>能解释执行的脚本解释器</strong>就可以了。</p><h3 id="脚本解释器"><a href="#脚本解释器" class="headerlink" title="脚本解释器"></a>脚本解释器</h3><h4 id="sh"><a href="#sh" class="headerlink" title="sh"></a>sh</h4><p>即<code>Bourne shell</code>，POSIX（Portable Operating System Interface）标准的<code>shell</code>解释器，它的二进制文件路径通常是<code>/bin/sh</code>，由Bell Labs开发。</p><h4 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h4><p><code>Bash</code>是<code>Bourne shell</code>的替代品，属GNU Project，二进制文件路径通常是<code>/bin/bash</code>。业界通常混用<code>bash</code>、<code>sh</code>、和<code>shell</code>，比如你会经常在招聘运维工程师的文案中见到：<strong>熟悉Linux Bash编程</strong>，<strong>精通Shell编程</strong>。</p><p>在<code>CentOS</code>里，<code>/bin/sh</code>是一个指向<code>/bin/bash</code>的符号链接:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl ~]# ls -l /bin/*sh</span><br><span class="line">-rwxr-xr-x  1 root root 964544 Apr 11  2018 /bin/bash</span><br><span class="line">-rws--x--x  1 root root  23960 Oct 31  2018 /bin/chsh</span><br><span class="line">lrwxrwxrwx  1 root root      4 Nov 22  2018 /bin/sh -&gt; bash</span><br></pre></td></tr></table></figure><p>但在<code>Mac OS</code>上不是，<code>/bin/sh</code>和<code>/bin/bash</code>是两个不同的文件，尽管它们的大小只相差100字节左右:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-r-xr-xr-x  1 root  wheel   623344  9 30 04:28 /bin/bash</span><br><span class="line">-rwxr-xr-x  1 root  wheel   528688  9 30 04:28 /bin/csh</span><br><span class="line">-rwxr-xr-x  1 root  wheel   110848  9 30 04:28 /bin/dash</span><br><span class="line">-r-xr-xr-x  1 root  wheel  1300128  9 30 04:28 /bin/ksh</span><br><span class="line">-rwxr-xr-x  1 root  wheel    31440  9 30 04:28 /bin/sh</span><br><span class="line">-rwxr-xr-x  1 root  wheel   528688  9 30 04:28 /bin/tcsh</span><br><span class="line">-rwxr-xr-x  1 root  wheel   633328  9 30 04:28 /bin/zsh</span><br></pre></td></tr></table></figure><h3 id="运行Shell脚本的方法"><a href="#运行Shell脚本的方法" class="headerlink" title="运行Shell脚本的方法"></a>运行Shell脚本的方法</h3><h4 id="作为可执行程序"><a href="#作为可执行程序" class="headerlink" title="作为可执行程序"></a>作为可执行程序</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class="line">./test.sh  #执行脚本</span><br></pre></td></tr></table></figure><h4 id="作为解释器参数"><a href="#作为解释器参数" class="headerlink" title="作为解释器参数"></a>作为解释器参数</h4><p>直接运行解释器，其参数就是 shell 脚本的文件名，如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh test.sh</span><br><span class="line">/bin/php test.php</span><br></pre></td></tr></table></figure><h2 id="Shell-基础"><a href="#Shell-基础" class="headerlink" title="Shell 基础"></a>Shell 基础</h2><h3 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title="Shell 变量"></a>Shell 变量</h3><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><p>定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var="bar"</span><br></pre></td></tr></table></figure><p>注意，<strong>变量名和等号之间不能有空格</strong>，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（<a href="https://blog.csdn.net/qq_15766181/article/details/70915957" target="_blank" rel="noopener">查看保留关键字</a>）</li></ul><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name="caoxl"</span><br><span class="line">echo $your_name</span><br><span class="line">echo $&#123;your_name&#125;</span><br></pre></td></tr></table></figure><h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h4><p>使用 <code>readonly</code> 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#!/bin/bash</span></span><br><span class="line">myUrl="http://www.google.com"</span><br><span class="line">readonly myUrl</span><br><span class="line">myUrl="http://www.caoxl.com"</span><br></pre></td></tr></table></figure><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><p>使用 unset 命令可以删除变量。语法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset variable_name</span><br></pre></td></tr></table></figure><h3 id="Shell-字符串"><a href="#Shell-字符串" class="headerlink" title="Shell 字符串"></a>Shell 字符串</h3><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。</p><h4 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str='this is a string'</span><br></pre></td></tr></table></figure><h4 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name='caoxl'</span><br><span class="line">str="Hello, I know you are \"$your_name\"! \n"</span><br><span class="line">echo -e $str</span><br></pre></td></tr></table></figure><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">your_name="caoxl"</span><br><span class="line"></span><br><span class="line"><span class="section"># 使用双引号拼接</span></span><br><span class="line">greeting="hello, "$your_name" !"</span><br><span class="line">greeting<span class="emphasis">_1="hello, $&#123;your_</span>name&#125; !"</span><br><span class="line">echo $greeting  $greeting_1</span><br><span class="line"></span><br><span class="line"><span class="section"># 使用单引号拼接</span></span><br><span class="line">greeting<span class="emphasis">_2='hello, '$your_</span>name' !'</span><br><span class="line">greeting<span class="emphasis">_3='hello, $&#123;your_</span>name&#125; !'</span><br><span class="line">echo $greeting<span class="emphasis">_2  $greeting_</span>3</span><br></pre></td></tr></table></figure><h4 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string="abcd"</span><br><span class="line">echo $&#123;#string&#125; #输出 4</span><br></pre></td></tr></table></figure><h4 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h4><p>以下实例从字符串第 <code>2</code> 个字符开始截取 <code>4</code> 个字符：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string="caoxl is a great site"</span><br><span class="line">echo $&#123;string:1:4&#125; # 输出 aoxl</span><br></pre></td></tr></table></figure><h3 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h3><p><strong>bash支持一维数组（不支持多维数组）</strong>，并且没有限定数组的大小。</p><p>类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。</p><h4 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h4><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">数组名=(值1 值2 ... 值n)</span><br><span class="line"></span><br><span class="line">// 例如:</span><br><span class="line">array_name=(value0 value1 value2 value3)</span><br><span class="line"></span><br><span class="line">// 或者:</span><br><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 还可以单独定义数组的各个分量：</span><br><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[n]=valuen</span><br></pre></td></tr></table></figure><h4 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h4><p>读取数组元素值的一般格式是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&#123;数组名[下标]&#125;</span><br><span class="line"></span><br><span class="line">// 例如:</span><br><span class="line">valuen=$&#123;array_name[n]&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>@</code> 符号可以获取数组中的所有元素，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;array_name[@]&#125;</span><br></pre></td></tr></table></figure><h4 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h4><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 取得数组元素的个数</span></span><br><span class="line">length=$&#123;#array_name[@]&#125;</span><br><span class="line"></span><br><span class="line"><span class="section"># 或者</span></span><br><span class="line">length=$&#123;#array_name[*]&#125;</span><br><span class="line"></span><br><span class="line"><span class="section"># 取得数组单个元素的长度</span></span><br><span class="line">lengthn=$&#123;#array_name[n]&#125;</span><br></pre></td></tr></table></figure><h3 id="Shell注释"><a href="#Shell注释" class="headerlink" title="Shell注释"></a>Shell注释</h3><p>以 <code>#</code> 开头的行就是注释，会被解释器忽略。</p><p>通过每一行加一个 <code>#</code> 号设置多行注释，像这样：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#--------------------------------------------</span></span><br><span class="line"><span class="section"># 这是一个注释</span></span><br><span class="line"><span class="section"># author：caoxl</span></span><br><span class="line"><span class="section"># site：www.caoxl.com</span></span><br><span class="line"><span class="section"># slogan：keep calm and think more !</span></span><br><span class="line"><span class="section">#--------------------------------------------</span></span><br><span class="line"><span class="section">##### 用户配置区 开始 #####</span></span><br><span class="line"><span class="section">#</span></span><br><span class="line"><span class="section">#</span></span><br><span class="line"><span class="section"># 这里可以添加脚本描述信息</span></span><br><span class="line"><span class="section"># </span></span><br><span class="line"><span class="section">#</span></span><br><span class="line"><span class="section">##### 用户配置区 结束  #####</span></span><br></pre></td></tr></table></figure><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>多行注释还可以使用以下格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:<span class="xml"><span class="tag">&lt;&lt;<span class="attr">EOF</span></span></span></span><br><span class="line"><span class="xml">注释内容...</span></span><br><span class="line"><span class="xml">注释内容...</span></span><br><span class="line"><span class="xml">注释内容...</span></span><br><span class="line"><span class="xml">EOF</span></span><br></pre></td></tr></table></figure><p>EOF 也可以使用其他符号:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">:<span class="xml"><span class="tag">&lt;&lt;'</span></span></span><br><span class="line"><span class="xml">注释内容...</span></span><br><span class="line"><span class="xml">注释内容...</span></span><br><span class="line"><span class="xml">注释内容...</span></span><br><span class="line"><span class="xml">'</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="xml">:<span class="tag">&lt;&lt;!</span></span></span><br><span class="line"><span class="xml">注释内容...</span></span><br><span class="line"><span class="xml">注释内容...</span></span><br><span class="line"><span class="xml">注释内容...</span></span><br><span class="line"><span class="xml">!</span></span><br></pre></td></tr></table></figure><h2 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a>Shell 传递参数</h2><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#!/bin/bash</span></span><br><span class="line"><span class="section"># author:caoxl</span></span><br><span class="line"><span class="section"># url:www.caoxl.com</span></span><br><span class="line"></span><br><span class="line">echo "Shell 传递参数实例！";</span><br><span class="line">echo "执行的文件名：$0";</span><br><span class="line">echo "第一个参数为：$1";</span><br><span class="line">echo "第二个参数为：$2";</span><br><span class="line">echo "第三个参数为：$3";</span><br></pre></td></tr></table></figure><p>为脚本设置可执行权限，并执行脚本，输出结果如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl shell]# vi params.sh</span><br><span class="line">[root@caoxl shell]# chmod +x params.sh </span><br><span class="line">[root@caoxl shell]# ./params.sh 1 2 3</span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">执行的文件名：./params.sh</span><br><span class="line">第一个参数为：1</span><br><span class="line">第二个参数为：2</span><br><span class="line">第三个参数为：3</span><br></pre></td></tr></table></figure><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th style="text-align:left">参数处理</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>$#</code></td><td>传递到脚本的参数个数</td></tr><tr><td style="text-align:left"><code>$*</code></td><td>以一个单字符串显示所有向脚本传递的参数。如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td style="text-align:left"><code>$$</code></td><td>脚本运行的当前进程ID号</td></tr><tr><td style="text-align:left"><code>$!</code></td><td>后台运行的最后一个进程的ID号</td></tr><tr><td style="text-align:left"><code>$@</code></td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数。如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td style="text-align:left"><code>$-</code></td><td>显示Shell使用的当前选项</td></tr><tr><td style="text-align:left"><code>$?</code></td><td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#!/bin/bash</span></span><br><span class="line"><span class="section"># author:caoxl</span></span><br><span class="line"><span class="section"># url:www.caoxl.com</span></span><br><span class="line"></span><br><span class="line">echo "Shell 传递参数实例！";</span><br><span class="line">echo "第一个参数为：$1";</span><br><span class="line"></span><br><span class="line">echo "参数个数为：$#";</span><br><span class="line">echo "传递的参数作为一个字符串显示：$*";</span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl shell]# chmod +x params2.sh </span><br><span class="line">[root@caoxl shell]# ./params2.sh 1 2 3</span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">第一个参数为：1</span><br><span class="line">参数个数为：3</span><br><span class="line">传递的参数作为一个字符串显示：1 2 3</span><br></pre></td></tr></table></figure><h2 id="Shell-函数"><a href="#Shell-函数" class="headerlink" title="Shell 函数"></a>Shell 函数</h2><p>linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。</p><p>shell中函数的定义格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ function ] funname [()]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="code">    action;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    [return int;]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>可以带 <code>function fun()</code> 定义，也可以直接 <code>fun()</code> 定义,不带任何参数。</li><li>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255</li></ul><h2 id="Shell-输入-输出重定向"><a href="#Shell-输入-输出重定向" class="headerlink" title="Shell 输入/输出重定向"></a>Shell 输入/输出重定向</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>command &gt; file</code></td><td style="text-align:left">将输出重定向到 file。</td></tr><tr><td style="text-align:left"><code>command &lt; file</code></td><td style="text-align:left">将输入重定向到 file。</td></tr><tr><td style="text-align:left"><code>command &gt;&gt; file</code></td><td style="text-align:left">将输出以追加的方式重定向到 file。</td></tr><tr><td style="text-align:left"><code>n &gt; file</code></td><td style="text-align:left">将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td style="text-align:left"><code>n &gt;&gt; file</code></td><td style="text-align:left">将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td style="text-align:left"><code>n &gt;&amp; m</code></td><td style="text-align:left">将输出文件 m 和 n 合并。</td></tr><tr><td style="text-align:left"><code>n &lt;&amp; m</code></td><td style="text-align:left">将输入文件 m 和 n 合并。</td></tr><tr><td style="text-align:left"><code>&lt;&lt;tag</code></td><td style="text-align:left">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><blockquote><p>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://c.biancheng.net/shell/" target="_blank" rel="noopener">Shell脚本：Linux Shell脚本学习指南（超详细）</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Shell脚本&quot;&gt;&lt;a href=&quot;#什么是Shell脚本&quot; class=&quot;headerlink&quot; title=&quot;什么是Shell脚本?&quot;&gt;&lt;/a&gt;什么是Shell脚本?&lt;/h2&gt;
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Shell" scheme="http://blog.caoxl.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>JWT 完整使用详解</title>
    <link href="http://blog.caoxl.com/2019/10/08/JWT-Full-Use-Details/"/>
    <id>http://blog.caoxl.com/2019/10/08/JWT-Full-Use-Details/</id>
    <published>2019-10-08T03:16:26.000Z</published>
    <updated>2019-10-09T10:34:05.007Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>假期综合征, 需要找一个东西复习复习找回一下PHPer的感觉</p></blockquote><p><strong>JWT</strong> 全称 <strong>JSON Web Tokens</strong> ，是一个非常轻巧的规范。这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。它的两大使用场景是：认证和数据交换。</p><a id="more"></a><blockquote><p>原文地址: <a href="https://learnku.com/articles/10885/full-use-of-jwt" target="_blank" rel="noopener">JWT 完整使用详解</a></p></blockquote><h2 id="安装及基础配置"><a href="#安装及基础配置" class="headerlink" title="安装及基础配置"></a>安装及基础配置</h2><h3 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h3><h4 id="使用-composer-安装"><a href="#使用-composer-安装" class="headerlink" title="使用 composer 安装"></a>使用 composer 安装</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 建议使用1.0以上版本</span></span><br><span class="line">composer require tymon/jwt-auth 1.*@rc</span><br></pre></td></tr></table></figure><h4 id="进行一些配置"><a href="#进行一些配置" class="headerlink" title="进行一些配置"></a>进行一些配置</h4><p>这里指的注意的是，有些文档会说要添加 <code>Tymon\JWTAuth\Providers\LaravelServiceProvider::class</code> ，这只在 <code>Laravel 5.4</code> 及以下版本是必要的，更新的 <code>Laravel</code> 版本无需添加。</p><p>还有一些文档说要添加 <code>Tymon\JWTAuth\Providers\JWTAuthServiceProvider</code> 这是很久以前的 JWT 版本的（大概 0.5.3 以前的版本）。</p><h5 id="发布配置文件"><a href="#发布配置文件" class="headerlink" title="发布配置文件"></a>发布配置文件</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 这条命令会在 config 下增加一个 jwt.php 的配置文件</span></span><br><span class="line">php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"</span><br></pre></td></tr></table></figure><h5 id="生成加密密钥"><a href="#生成加密密钥" class="headerlink" title="生成加密密钥"></a>生成加密密钥</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 这条命令会在 .env 文件下生成一个加密密钥，如：JWT_SECRET=foobar</span></span><br><span class="line">php artisan jwt:secret</span><br></pre></td></tr></table></figure><h5 id="更新你的模型"><a href="#更新你的模型" class="headerlink" title="更新你的模型"></a>更新你的模型</h5><p>如果你使用默认的 User 表来生成 token，你需要在该模型下增加一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Contracts</span>\<span class="title">JWTSubject</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span> <span class="keyword">implements</span> <span class="title">JWTSubject</span>    # 这里别忘了加</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Notifiable</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rest omitted for brevity</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the identifier that will be stored in the subject claim of the JWT.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTIdentifier</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return a key value array, containing any custom claims to be added to the JWT.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTCustomClaims</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注册两个-Facade"><a href="#注册两个-Facade" class="headerlink" title="注册两个 Facade"></a>注册两个 Facade</h5><p>这两个 Facade 并不是必须的，但是使用它们会给你的代码编写带来一点便利。</p><ul><li><strong>config/app.php</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">'aliases' =&gt; [</span><br><span class="line"><span class="code">    ...</span></span><br><span class="line"><span class="code">    // 添加以下两行</span></span><br><span class="line"><span class="code">    'JWTAuth' =&gt; Tymon\JWTAuth\Facades\JWTAuth::class,</span></span><br><span class="line"><span class="code">    'JWTFactory' =&gt; Tymon\JWTAuth\Facades\JWTFactory::class,</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><p><strong>如果你不使用这两个 <code>Facade</code>，你可以使用辅助函数 <code>auth ()</code></strong></p><p><code>auth ()</code> 是一个辅助函数，返回一个 <code>guard</code>，暂时可以看成 <code>Auth Facade</code>。</p><blockquote><p>了解更多: <a href="https://learnku.com/articles/10889/detailed-implementation-of-jwt-extensions" target="_blank" rel="noopener">Laravel 辅助函数 auth 与 JWT 扩展详解</a></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 如果你不用 Facade，你可以这么写</span><br><span class="line">auth('api')-&gt;refresh();</span><br><span class="line"></span><br><span class="line">// 用 JWTAuth Facade</span><br><span class="line">JWTAuth::parseToken()-&gt;refresh();</span><br></pre></td></tr></table></figure><p>两个 Facede 常用可使用方法，可以看文章后面的附录。</p><h5 id="修改-auth-php"><a href="#修改-auth-php" class="headerlink" title="修改 auth.php"></a>修改 auth.php</h5><ul><li><strong>config/auth.php</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">'guards' =&gt; [</span><br><span class="line"><span class="code">    'web' =&gt; [</span></span><br><span class="line"><span class="code">        'driver' =&gt; 'session',</span></span><br><span class="line"><span class="code">        'provider' =&gt; 'users',</span></span><br><span class="line"><span class="code">    ],</span></span><br><span class="line"></span><br><span class="line"><span class="code">    'api' =&gt; [</span></span><br><span class="line"><span class="code">        'driver' =&gt; 'jwt',      // 原来是 token 改成jwt</span></span><br><span class="line"><span class="code">        'provider' =&gt; 'users',</span></span><br><span class="line"><span class="code">    ],</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><h5 id="注册一些路由"><a href="#注册一些路由" class="headerlink" title="注册一些路由"></a>注册一些路由</h5><p>注意：在 Laravel 下，<code>route/api.php</code> 中的路由默认都有前缀 <code>api</code> 。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Route::group([</span><br><span class="line"></span><br><span class="line"><span class="code">    'prefix' =&gt; 'auth'</span></span><br><span class="line"></span><br><span class="line">], function ($router) &#123;</span><br><span class="line"></span><br><span class="line"><span class="code">    Route::post('login', 'AuthController@login');</span></span><br><span class="line"><span class="code">    Route::post('logout', 'AuthController@logout');</span></span><br><span class="line"><span class="code">    Route::post('refresh', 'AuthController@refresh');</span></span><br><span class="line"><span class="code">    Route::post('me', 'AuthController@me');</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="创建-token-控制器"><a href="#创建-token-控制器" class="headerlink" title="创建 token 控制器"></a>创建 token 控制器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:controller AuthController</span><br></pre></td></tr></table></figure><ul><li><strong>AuthController</strong></li></ul><p>值得注意的是 Laravel 这要用 <code>auth(&#39;api&#39;)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new AuthController instance.</span></span><br><span class="line"><span class="comment">     * 要求附带email和password（数据来源users表）</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 这里额外注意了：官方文档样例中只除外了『login』</span></span><br><span class="line">        <span class="comment">// 这样的结果是，token 只能在有效期以内进行刷新，过期无法刷新</span></span><br><span class="line">        <span class="comment">// 如果把 refresh 也放进去，token 即使过期但仍在刷新期以内也可刷新</span></span><br><span class="line">        <span class="comment">// 不过刷新一次作废</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth:api'</span>, [<span class="string">'except'</span> =&gt; [<span class="string">'login'</span>]]);</span><br><span class="line">        <span class="comment">// 另外关于上面的中间件，官方文档写的是『auth:api』</span></span><br><span class="line">        <span class="comment">// 但是我推荐用 『jwt.auth』，效果是一样的，但是有更加丰富的报错信息返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get a JWT via given credentials.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $credentials = request([<span class="string">'email'</span>, <span class="string">'password'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! $token = auth(<span class="string">'api'</span>)-&gt;attempt($credentials)) &#123;</span><br><span class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'Unauthorized'</span>], <span class="number">401</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;respondWithToken($token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the authenticated User.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">me</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json(auth(<span class="string">'api'</span>)-&gt;user());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Log the user out (Invalidate the token).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        auth(<span class="string">'api'</span>)-&gt;logout();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([<span class="string">'message'</span> =&gt; <span class="string">'Successfully logged out'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Refresh a token.</span></span><br><span class="line"><span class="comment">     * 刷新token，如果开启黑名单，以前的token便会失效。</span></span><br><span class="line"><span class="comment">     * 值得注意的是用上面的getToken再获取一次Token并不算做刷新，两次获得的Token是并行的，即两个都可用。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">refresh</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;respondWithToken(auth(<span class="string">'api'</span>)-&gt;refresh());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the token array structure.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string $token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">respondWithToken</span><span class="params">($token)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([</span><br><span class="line">            <span class="string">'access_token'</span> =&gt; $token,</span><br><span class="line">            <span class="string">'token_type'</span> =&gt; <span class="string">'bearer'</span>,</span><br><span class="line">            <span class="string">'expires_in'</span> =&gt; auth(<span class="string">'api'</span>)-&gt;factory()-&gt;getTTL() * <span class="number">60</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lumen"><a href="#Lumen" class="headerlink" title="Lumen"></a>Lumen</h3><h4 id="使用-composer-安装-1"><a href="#使用-composer-安装-1" class="headerlink" title="使用 composer 安装"></a>使用 composer 安装</h4><p>上面是用命令行安装的，这里用 <code>composer.json</code> 安装。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 我当时可用的版本是这个</span><br><span class="line">"tymon/jwt-auth": "1.*@rc"</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure><h4 id="进行一些配置-1"><a href="#进行一些配置-1" class="headerlink" title="进行一些配置"></a>进行一些配置</h4><h5 id="开启-Facade-和-Eloquent"><a href="#开启-Facade-和-Eloquent" class="headerlink" title="开启 Facade 和 Eloquent"></a>开启 Facade 和 Eloquent</h5><p>取消以下行的注释。</p><ul><li><code>bootstrap/app.php</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// $app-&gt;withFacades();</span><br><span class="line"></span><br><span class="line">// $app-&gt;withEloquent();</span><br></pre></td></tr></table></figure><h5 id="开启中间件认证"><a href="#开启中间件认证" class="headerlink" title="开启中间件认证"></a>开启中间件认证</h5><p>取消以下行的注释。</p><ul><li><code>bootstrap/app.php</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// $app-&gt;routeMiddleware([</span><br><span class="line">//     'auth' =&gt; App\Http\Middleware\Authenticate::class,</span><br><span class="line">// ]);</span><br><span class="line"></span><br><span class="line">// $app-&gt;register(App\Providers\AuthServiceProvider::class);</span><br></pre></td></tr></table></figure><h5 id="添加服务提供者"><a href="#添加服务提供者" class="headerlink" title="添加服务提供者"></a>添加服务提供者</h5><ul><li><code>bootstrap/app.php</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 有些文档里是说添加 Tymon\JWTAuth\Providers\JWTAuthServiceProvider::class，那是旧版本的</span><br><span class="line">$app-&gt;register(\Tymon\JWTAuth\Providers\LumenServiceProvider::class);</span><br></pre></td></tr></table></figure><h5 id="生成加密密钥-1"><a href="#生成加密密钥-1" class="headerlink" title="生成加密密钥"></a>生成加密密钥</h5><p>这条命令会在 <code>.env</code> 文件下生成一个加密密钥，如：JWT_SECRET=foobar</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan jwt:secret</span><br></pre></td></tr></table></figure><h5 id="更新你的模型-1"><a href="#更新你的模型-1" class="headerlink" title="更新你的模型"></a>更新你的模型</h5><p>如果你使用默认的 User 表来生成 token，你需要在该模型下增加一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Laravel</span>\<span class="title">Lumen</span>\<span class="title">Auth</span>\<span class="title">Authorizable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span> <span class="title">as</span> <span class="title">AuthenticatableContract</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">Authorizable</span> <span class="title">as</span> <span class="title">AuthorizableContract</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Contracts</span>\<span class="title">JWTSubject</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> <span class="keyword">implements</span> <span class="title">AuthenticatableContract</span>, <span class="title">AuthorizableContract</span>, <span class="title">JWTSubject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Authenticatable</span>, <span class="title">Authorizable</span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the identifier that will be stored in the subject claim of the JWT.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTIdentifier</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return a key value array, containing any custom claims to be added to the JWT.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTCustomClaims</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注册两个-Facade-1"><a href="#注册两个-Facade-1" class="headerlink" title="注册两个 Facade"></a>注册两个 Facade</h5><p>Lumen 中没有辅助函数 <code>auth ()</code>，这两个 Facade 就挺有用了。</p><ul><li><code>bootstrap/app.php</code></li></ul><p>把原先去了注释的那一行再改一下。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$app-&gt;withFacades(true, [</span><br><span class="line"><span class="code">    'Tymon\JWTAuth\Facades\JWTAuth' =&gt; 'JWTAuth',</span></span><br><span class="line"><span class="code">    'Tymon\JWTAuth\Facades\JWTFactory' =&gt; 'JWTFactory',</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h5 id="设置-auth-php"><a href="#设置-auth-php" class="headerlink" title="设置 auth.php"></a>设置 auth.php</h5><p>把 <code>\vendor\laravel\lumen-framework\config\auth.php</code> 也复制到 项目根目录 <code>config</code> 文件夹（没有就新建）。</p><ul><li><code>auth.php</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">'guards' =&gt; [</span><br><span class="line"><span class="code">    'api' =&gt; [</span></span><br><span class="line"><span class="code">        'driver' =&gt; 'jwt',</span></span><br><span class="line"><span class="code">        'provider' =&gt; 'users',</span></span><br><span class="line"><span class="code">    ],</span></span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">'providers' =&gt; [</span><br><span class="line"><span class="code">    'users' =&gt; [</span></span><br><span class="line"><span class="code">        'driver' =&gt; 'eloquent',</span></span><br><span class="line"><span class="code">        'model' =&gt; \App\User::class</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="注册一些路由-1"><a href="#注册一些路由-1" class="headerlink" title="注册一些路由"></a>注册一些路由</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Route::group([</span><br><span class="line"></span><br><span class="line">    <span class="string">'prefix'</span> =&gt; <span class="string">'auth'</span></span><br><span class="line"></span><br><span class="line">], <span class="function"><span class="keyword">function</span> <span class="params">($router)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Route::post(<span class="string">'login'</span>, <span class="string">'AuthController@login'</span>);</span><br><span class="line">    Route::post(<span class="string">'logout'</span>, <span class="string">'AuthController@logout'</span>);</span><br><span class="line">    Route::post(<span class="string">'refresh'</span>, <span class="string">'AuthController@refresh'</span>);</span><br><span class="line">    Route::post(<span class="string">'me'</span>, <span class="string">'AuthController@me'</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="创建-token-控制器-1"><a href="#创建-token-控制器-1" class="headerlink" title="创建 token 控制器"></a>创建 token 控制器</h5><p>Lumen 还精简了很多辅助函数，比如 auth 和 bcrypt 等。</p><p>可以安装 <a href="https://packagist.org/packages/cosmicvelocity/lumen-helpers" target="_blank" rel="noopener">cosmicvelocity/lumen-helpers</a> 或 <a href="https://packagist.org/packages/albertcht/lumen-helpers" target="_blank" rel="noopener">albertcht/lumen-helpers</a> 补全（建议用后者，更好安装）</p><ul><li><code>AuthController.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Facades</span>\<span class="title">JWTAuth</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new AuthController instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 这里额外注意了：官方文档样例中只除外了『login』</span></span><br><span class="line">        <span class="comment">// 这样的结果是，token 只能在有效期以内进行刷新，过期无法刷新</span></span><br><span class="line">        <span class="comment">// 如果把 refresh 也放进去，token 即使过期但仍在刷新期以内也可刷新</span></span><br><span class="line">        <span class="comment">// 不过刷新一次作废</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth:api'</span>, [<span class="string">'except'</span> =&gt; [<span class="string">'login'</span>]]);</span><br><span class="line">        <span class="comment">// 另外关于上面的中间件，官方文档写的是『auth:api』</span></span><br><span class="line">        <span class="comment">// 但是我推荐用 『jwt.auth』，效果是一样的，但是有更加丰富的报错信息返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get a JWT via given credentials.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $credentials = $request-&gt;only(<span class="string">'email'</span>, <span class="string">'password'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! $token = JWTAuth::attempt($credentials)) &#123;</span><br><span class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'Unauthorized'</span>], <span class="number">401</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;respondWithToken($token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the authenticated User.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">me</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json(JWTAuth::parseToken()-&gt;touser());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Log the user out (Invalidate the token).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        JWTAuth::parseToken()-&gt;invalidate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([<span class="string">'message'</span> =&gt; <span class="string">'Successfully logged out'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Refresh a token.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">refresh</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;respondWithToken(JWTAuth::parseToken()-&gt;refresh());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the token array structure.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string $token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">respondWithToken</span><span class="params">($token)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([</span><br><span class="line">            <span class="string">'access_token'</span> =&gt; $token,</span><br><span class="line">            <span class="string">'token_type'</span> =&gt; <span class="string">'bearer'</span>,</span><br><span class="line">            <span class="string">'expires_in'</span> =&gt; JWTAuth::factory()-&gt;getTTL() * <span class="number">60</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JWT-Token-详解"><a href="#JWT-Token-详解" class="headerlink" title="JWT Token 详解"></a>JWT Token 详解</h2><h3 id="token-的组成、创建以及解析"><a href="#token-的组成、创建以及解析" class="headerlink" title="token 的组成、创建以及解析"></a>token 的组成、创建以及解析</h3><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>一个 JWT token 是一个字符串，它由三部分组成，头部、载荷与签名，中间用 <code>.</code> 分隔，例如：<code>xxxxx.yyyyy.zzzzz</code></p><h5 id="头部（Header）"><a href="#头部（Header）" class="headerlink" title="头部（Header）"></a>头部（Header）</h5><p>头部通常由两部分组成：令牌的类型（即 <code>JWT</code>）和正在使用的签名算法（如 <code>HMAC SHA256</code> 或 <code>RSA</code>.）。</p><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "alg": "HS256",</span><br><span class="line">  "typ": "JWT"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用 <code>Base64Url</code> 编码得到头部，即 <code>xxxxx</code>。</p><h5 id="载荷（Payload）"><a href="#载荷（Payload）" class="headerlink" title="载荷（Payload）"></a>载荷（Payload）</h5><p>载荷中放置了 <code>token</code> 的一些基本信息，以帮助接受它的服务器来理解这个 <code>token</code>。同时还可以包含一些自定义的信息，用户信息交换。</p><p>载荷的属性也分三类：</p><ul><li>预定义 (Registered)</li><li>公有 (Public)</li><li>私有 (Private)</li></ul><h6 id="预定义的载荷"><a href="#预定义的载荷" class="headerlink" title="预定义的载荷"></a>预定义的载荷</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "sub": "1",</span><br><span class="line">  "iss": "http://localhost:8000/auth/login",</span><br><span class="line">  "iat": 1651888119,</span><br><span class="line">  "exp": 1654516119,</span><br><span class="line">  "nbf": 1651888119,</span><br><span class="line">  "jti": "37c107e4609ddbcc9c096ea5ee76c667",</span><br><span class="line">  "aud": "dev"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面的前 7 个字段都是由官方所定义的，也就是预定义（<code>Registered claims</code>）的，并不都是必需的。</p><blockquote><ul><li><code>iss</code> (issuer): 签发人</li><li><code>sub</code> (subject): 主题</li><li><code>aud</code> (audience): 受众</li><li><code>exp</code> (expiration time): 过期时间</li><li><code>nbf</code> (Not Before): 生效时间, 在此之前是无效的</li><li><code>iat</code> (Issued At): 签发时间</li><li><code>jti</code> (JWT ID): 编号</li></ul></blockquote><h6 id="公有的载荷"><a href="#公有的载荷" class="headerlink" title="公有的载荷"></a>公有的载荷</h6><p>在使用 JWT 时可以额外定义的载荷。为了避免冲突，应该使用 <a href="https://www.iana.org/assignments/jwt/jwt.xhtml" target="_blank" rel="noopener">IANA JSON Web Token Registry</a> 中定义好的，或者给额外载荷加上类似命名空间的唯一标识。</p><h6 id="私有的载荷"><a href="#私有的载荷" class="headerlink" title="私有的载荷"></a>私有的载荷</h6><p>在信息交互的双方之间约定好的，既不是预定义载荷也不是公有载荷的一类载荷。这一类载荷可能会发生冲突，所以应该谨慎使用。</p><p>将上面的 <code>json</code> 进行 <code>Base64Url</code> 编码得到载荷，，即 <code>yyyyy</code>。</p><h5 id="签名（Signature）"><a href="#签名（Signature）" class="headerlink" title="签名（Signature）"></a>签名（Signature）</h5><p>签名时需要用到前面编码过的两个字符串，如果以 <code>HMACSHA256</code> 加密，就如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line"><span class="code">    base64UrlEncode(header) + "." +</span></span><br><span class="line"><span class="code">    base64UrlEncode(payload),</span></span><br><span class="line"><span class="code">    secret</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>加密后再进行 <code>base64url</code> 编码最后得到的字符串就是 <code>token</code> 的第三部分 zzzzz。</p><p>组合便可以得到 token：<code>xxxxx.yyyyy.zzzzz</code>。</p><p>签名的作用：保证 <code>JWT</code> 没有被篡改过，原理如下：</p><blockquote><p>HMAC 算法是不可逆算法，类似 MD5 和 hash ，但多一个密钥，密钥（即上面的 secret）由服务端持有，客户端把 token 发给服务端后，服务端可以把其中的头部和载荷再加上事先共享的 secret 再进行一次 HMAC 加密，得到的结果和 token 的第三段进行对比，如果一样则表明数据没有被篡改。</p><p><strong>Hash-based Message Authentication Code</strong></p></blockquote><ul><li><strong>PHP 代码示例</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里要开启true</span></span><br><span class="line">$zzzzz = <span class="keyword">$this</span>-&gt;base64url_encode(hash_hmac(<span class="string">'sha256'</span>, <span class="string">'xxxxx.yyyyy'</span>, getenv(<span class="string">'JWT_SECRET'</span>), <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">base64url_encode</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rtrim(strtr(base64_encode($data), <span class="string">'+/'</span>, <span class="string">'-_'</span>), <span class="string">'='</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>前面的 <code>AuthController.php</code> 中有两行展现了这一种 <code>token</code> 的创建方法，即用用户所给的账号和密码进行尝试，密码正确则用对应的 <code>User</code> 信息返回一个 <code>token</code> 。</p><p>但 <code>token</code> 的创建方法不止这一种，接下来介绍 <code>token</code> 的三种创建方法：</p><ul><li>基于账密参数</li><li>基于 users 模型返回的实例</li><li>基于 users 模型中的用户主键ID</li></ul><h5 id="基于账密参数"><a href="#基于账密参数" class="headerlink" title="基于账密参数"></a>基于账密参数</h5><p>这就是刚刚说的那一种，贴出具体代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用辅助函数</span></span><br><span class="line">$credentials = request([<span class="string">'email'</span>, <span class="string">'password'</span>]); </span><br><span class="line">$token = auth()-&gt;attempt($credentials)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Facade</span></span><br><span class="line">$credentials = $request-&gt;only(<span class="string">'email'</span>, <span class="string">'password'</span>);</span><br><span class="line">$token = JWTAuth::attempt($credentials);</span><br></pre></td></tr></table></figure><h5 id="基于-users-模型返回的实例"><a href="#基于-users-模型返回的实例" class="headerlink" title="基于 users 模型返回的实例"></a>基于 users 模型返回的实例</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用辅助函数</span></span><br><span class="line">$user = User::first();</span><br><span class="line">$token = auth()-&gt;login($user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Facade</span></span><br><span class="line">$user = User::first();</span><br><span class="line">$token = JWTAuth::fromUser($credentials);</span><br></pre></td></tr></table></figure><h5 id="基于-users-模型中的主键-id"><a href="#基于-users-模型中的主键-id" class="headerlink" title="基于 users 模型中的主键 id"></a>基于 users 模型中的主键 id</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用辅助函数</span></span><br><span class="line">$token = auth()-&gt;tokenById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Facade</span></span><br><span class="line">源码中没找到</span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><h5 id="解析-token-到对象"><a href="#解析-token-到对象" class="headerlink" title="解析 token 到对象"></a>解析 token 到对象</h5><p>只有 <code>Facade</code> 需要这样。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 把请求发送过来的直接解析到对象</span><br><span class="line">JWTAuth::parseToken();</span><br></pre></td></tr></table></figure><h5 id="获取-token-中的-user-信息"><a href="#获取-token-中的-user-信息" class="headerlink" title="获取 token 中的 user 信息"></a>获取 token 中的 user 信息</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 辅助函数</span></span><br><span class="line">$user = auth()-&gt;user();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Facade</span></span><br><span class="line">$user = JWTAuth::parseToken()-&gt;authenticate();</span><br></pre></td></tr></table></figure><h5 id="获取-token"><a href="#获取-token" class="headerlink" title="获取 token"></a>获取 token</h5><p>如果 <code>token</code> 被设置则会返回，否则会尝试使用方法从请求中解析 <code>token</code> ，如果 <code>token</code> 未被设置或不能解析最终返回 <code>false</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 辅助函数</span><br><span class="line">$token = auth()-&gt;getToken();</span><br><span class="line"></span><br><span class="line">// Facade</span><br><span class="line">$token = JWTAuth::parseToken()-&gt;getToken();</span><br></pre></td></tr></table></figure><h5 id="如果是前端"><a href="#如果是前端" class="headerlink" title="如果是前端"></a>如果是前端</h5><p>直接 <code>base64</code> 解码 <code>token</code> 的前两段即可以知道所需的信息。</p><h3 id="载荷的设置和获取"><a href="#载荷的设置和获取" class="headerlink" title="载荷的设置和获取"></a>载荷的设置和获取</h3><h4 id="载荷设置"><a href="#载荷设置" class="headerlink" title="载荷设置"></a>载荷设置</h4><p>载荷信息会在 <code>token</code> 解码时得到，同时越大的数组会生成越长的 <code>token</code> ，所以不建议放太多的数据。同时因为载荷是用 <code>Base64Url</code> 编码，所以相当于明文，因此绝对不能放密码等敏感信息。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$customClaims = ['foo' =&gt; 'bar', 'baz' =&gt; 'bob'];</span><br><span class="line"></span><br><span class="line">// 辅助函数</span><br><span class="line">$token = auth()-&gt;claims($customClaims)-&gt;attempt($credentials);</span><br><span class="line"></span><br><span class="line">// Facade - 1</span><br><span class="line">$token = JWTAuth::claims($customClaims)-&gt;attempt($credentials);</span><br><span class="line"></span><br><span class="line">--- 下面两种试了好像不行，不过前面的够用了</span><br><span class="line"></span><br><span class="line">// Facade - 2</span><br><span class="line">$payload = JWTFactory::make($customClaims);</span><br><span class="line">$token = JWTAuth::encode($payload);</span><br><span class="line"></span><br><span class="line">// Facade - 3</span><br><span class="line">$payload = JWTFactory::sub(123)-&gt;aud('foo')-&gt;foo(['bar' =&gt; 'baz'])-&gt;make();</span><br><span class="line">$token = JWTAuth::encode($payload);</span><br></pre></td></tr></table></figure><h4 id="载荷解析"><a href="#载荷解析" class="headerlink" title="载荷解析"></a>载荷解析</h4><p>从请求中把载荷解析出来。可以去看扩展源代码，里面还有很多的方法。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 辅助函数</span><br><span class="line">$exp = auth()-&gt;payload()-&gt;get('exp');</span><br><span class="line">$json = auth()-&gt;payload()-&gt;toJson();</span><br><span class="line">$array = auth()-&gt;payload()-&gt;jsonSerialize();</span><br><span class="line">$sub = $array['sub'];</span><br><span class="line"></span><br><span class="line">// Facade - 1</span><br><span class="line">$payload = JWTAuth::parseToken()-&gt;getPayload();</span><br><span class="line">$payload-&gt;get('sub'); // = 123</span><br><span class="line">$payload['jti']; // = 'asfe4fq434asdf'</span><br><span class="line">$payload('exp') // = 123456</span><br><span class="line">$payload-&gt;toArray(); // = ['sub' =&gt; 123, 'exp' =&gt; 123456, 'jti' =&gt; 'asfe4fq434asdf'] etc</span><br><span class="line"></span><br><span class="line">// Facade - 2</span><br><span class="line">$exp = JWTAuth::parseToken()-&gt;getClaim('exp');</span><br></pre></td></tr></table></figure><h3 id="token-的三个时间"><a href="#token-的三个时间" class="headerlink" title="token 的三个时间"></a>token 的三个时间</h3><p>一个 <code>token</code> 一般来说有三个时间属性，其配置都在 <code>config/jwt.php</code> 内。</p><h4 id="有效时间"><a href="#有效时间" class="headerlink" title="有效时间"></a>有效时间</h4><p>有效时间指的的是你获得 <code>token</code> 后，在多少时间内可以凭这个 <code>token</code> 去获取内容，逾时无效。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 单位：分钟</span><br><span class="line">'ttl' =&gt; env('JWT_TTL', 60)</span><br></pre></td></tr></table></figure><h4 id="刷新时间"><a href="#刷新时间" class="headerlink" title="刷新时间"></a>刷新时间</h4><p>刷新时间指的是在这个时间内可以凭旧 <code>token</code> 换取一个新 <code>token</code>。例如 <code>token</code> 有效时间为 <code>60</code> 分钟，刷新时间为 <code>20160</code> 分钟，在 <code>60</code> 分钟内可以通过这个 <code>token</code> 获取新 <code>token</code>，但是超过 <code>60</code> 分钟是不可以的，然后你可以一直循环获取，直到总时间超过 <code>20160</code> 分钟，不能再获取。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 单位：分钟</span><br><span class="line">'refresh<span class="emphasis">_ttl' =&gt; env('JWT_</span>REFRESH_TTL', 20160)</span><br></pre></td></tr></table></figure><h4 id="宽限时间"><a href="#宽限时间" class="headerlink" title="宽限时间"></a>宽限时间</h4><p>宽限时间是为了解决并发请求的问题，假如宽限时间为 <code>0s</code> ，那么在新旧 <code>token</code> 交接的时候，并发请求就会出错，所以需要设定一个宽限时间，在宽限时间内，旧 <code>token</code> 仍然能够正常使用。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 宽限时间需要开启黑名单（默认是开启的），黑名单保证过期token不可再用，最好打开</span><br><span class="line">'blacklist<span class="emphasis">_enabled' =&gt; env('JWT_</span>BLACKLIST_ENABLED', true)</span><br><span class="line"></span><br><span class="line">// 设定宽限时间，单位：秒</span><br><span class="line">'blacklist<span class="emphasis">_grace_</span>period' =&gt; env('JWT<span class="emphasis">_BLACKLIST_</span>GRACE_PERIOD', 60)</span><br></pre></td></tr></table></figure><h3 id="关于-JWT-的讨论"><a href="#关于-JWT-的讨论" class="headerlink" title="关于 JWT 的讨论"></a>关于 JWT 的讨论</h3><h4 id="为什么用-JWT？"><a href="#为什么用-JWT？" class="headerlink" title="为什么用 JWT？"></a>为什么用 JWT？</h4><blockquote><p><a href="https://learnku.com/articles/17883" target="_blank" rel="noopener">JWT 超详细分析</a></p></blockquote><h4 id="token-的刷新问题？"><a href="#token-的刷新问题？" class="headerlink" title="token 的刷新问题？"></a>token 的刷新问题？</h4><h5 id="token-为什么要刷新？"><a href="#token-为什么要刷新？" class="headerlink" title="token 为什么要刷新？"></a>token 为什么要刷新？</h5><p>首先 <code>Basic Auth</code> 是一种最简单的认证方法，但是由于每次请求都带用户名和密码，频繁的传输肯定不安全，所以才有 <code>cookies</code> 和 <code>session</code> 的运用。如果 <code>token</code> 不刷新，那么 <code>token</code> 就相当于上面的 <code>用户名 + 密码</code>，只要获取到了，就可以一直盗用，因此 <code>token</code> 设置有效期并能够进行刷新是必要的。</p><h5 id="token-有效期多久合适，刷新频率多久合适？"><a href="#token-有效期多久合适，刷新频率多久合适？" class="headerlink" title="token 有效期多久合适，刷新频率多久合适？"></a>token 有效期多久合适，刷新频率多久合适？</h5><p>有效期越长，风险性越高，有效性越短，刷新频率越高，刷新就会存在刷新开销，所以这需要综合考虑。而且 web 端应该设置为<code>分钟级</code>和<code>小时级</code>，而移动端应该设置为<code>天级</code>和<code>周级</code>。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="JWT-的-两个-Facade"><a href="#JWT-的-两个-Facade" class="headerlink" title="JWT 的 两个 Facade"></a>JWT 的 两个 Facade</h3><h4 id="JWTAuth"><a href="#JWTAuth" class="headerlink" title="JWTAuth"></a>JWTAuth</h4><p><code>JWTAuth::parseToken()-&gt;方法()</code> 一般都可以换成 <code>auth()-&gt;方法()</code>。</p><h5 id="token-生成"><a href="#token-生成" class="headerlink" title="token 生成"></a>token 生成</h5><p><strong>attempt</strong></p><p>根据 <code>user</code> 账密新建一个 <code>token</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$credentials = $request-&gt;only('email', 'password');</span><br><span class="line">$token = JWTAuth::attempt($credentials)；</span><br></pre></td></tr></table></figure><p><strong>fromUser</strong> or <strong>fromSubject</strong></p><p>根据 user 对象生成一个 token。后者是前者别名。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user = User::find(1);</span><br><span class="line">$token = JWTAuth::fromUser($user);</span><br></pre></td></tr></table></figure><h5 id="token-控制"><a href="#token-控制" class="headerlink" title="token 控制"></a>token 控制</h5><p><strong>refresh</strong></p><p>更新 token。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$newToken = JWTAuth::parseToken()-&gt;refresh();</span><br></pre></td></tr></table></figure><p><strong>invalidate</strong></p><p>让一个 token 无效。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JWTAuth::parseToken()-&gt;invalidate();</span><br></pre></td></tr></table></figure><p><strong>check</strong></p><p>检验 <code>token</code> 的有效性。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(JWTAuth::parseToken()-&gt;check()) &#123;</span><br><span class="line"><span class="code">    dd("token是有效的");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="token-解析"><a href="#token-解析" class="headerlink" title="token 解析"></a>token 解析</h5><p><strong>authenticate</strong> or <strong>toUser</strong> or <strong>user</strong></p><p>这三个效果是一样的，<code>toUser</code> 是 <code>authenticate</code> 的别名，而 <code>user</code> 比前两者少一个 <code>user id</code> 的校验，但并没有什么影响。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user = JWTAuth::parseToken()-&gt;toUser();</span><br></pre></td></tr></table></figure><p><strong>parseToken</strong></p><p>从 <code>request</code> 中解析 <code>token</code> 到对象中，以便进行下一步操作。</p><p><strong>getToken</strong></p><p>从 <code>request</code> 中获取 <code>token</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$token = JWTAuth::getToken();  // 这个不用 parseToken ，因为方法内部会自动执行一次</span><br></pre></td></tr></table></figure><h4 id="JWTGuard"><a href="#JWTGuard" class="headerlink" title="JWTGuard"></a>JWTGuard</h4><p>这个 Facade 主要进行载荷的管理，返回一个载荷对象，然后可以通过 <code>JWTAuth</code> 来对其生成一个 <code>token</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 载荷的高度自定义</span><br><span class="line">$payload = JWTFactory::sub(123)-&gt;aud('foo')-&gt;foo(['bar' =&gt; 'baz'])-&gt;make();</span><br><span class="line">$token = JWTAuth::encode($payload);</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$customClaims = ['foo' =&gt; 'bar', 'baz' =&gt; 'bob'];</span><br><span class="line">$payload = JWTFactory::make($customClaims);</span><br><span class="line">$token = JWTAuth::encode($payload);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/tymondesigns/jwt-auth/wiki/Installation" target="_blank" rel="noopener">JWT Wiki</a></li><li><a href="https://jwt-auth.readthedocs.io/en/docs/laravel-installation/" target="_blank" rel="noopener">JWT 官方安装指导文档</a></li><li><a href="https://learnku.com/articles/17883" target="_blank" rel="noopener">JWT 超详细分析</a></li><li><a href="https://learnku.com/articles/10885/full-use-of-jwt" target="_blank" rel="noopener">JWT 完整使用详解</a></li><li><a href="https://jwt.io/introduction/" target="_blank" rel="noopener">JWT 的介绍</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;假期综合征, 需要找一个东西复习复习找回一下PHPer的感觉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;JWT&lt;/strong&gt; 全称 &lt;strong&gt;JSON Web Tokens&lt;/strong&gt; ，是一个非常轻巧的规范。这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。它的两大使用场景是：认证和数据交换。&lt;/p&gt;
    
    </summary>
    
      <category term="必备技能" scheme="http://blog.caoxl.com/categories/%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="JWT" scheme="http://blog.caoxl.com/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>Uni-App 学习日志</title>
    <link href="http://blog.caoxl.com/2019/09/30/Uni-App-Learning-Log/"/>
    <id>http://blog.caoxl.com/2019/09/30/Uni-App-Learning-Log/</id>
    <published>2019-09-30T10:24:57.000Z</published>
    <updated>2019-10-15T06:56:08.208Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>uni-app</strong> 是一个使用 <code>Vue.js</code> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p><a id="more"></a><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="通过-HBuilderX-可视化界面"><a href="#通过-HBuilderX-可视化界面" class="headerlink" title="通过 HBuilderX 可视化界面"></a>通过 HBuilderX 可视化界面</h3><blockquote><p><a href="https://uniapp.dcloud.io/quickstart?id=_1-%e9%80%9a%e8%bf%87-hbuilderx-%e5%8f%af%e8%a7%86%e5%8c%96%e7%95%8c%e9%9d%a2" target="_blank" rel="noopener">通过 HBuilderX 可视化界面</a><br>捆绑性太强, 不建议使用这种方法.</p></blockquote><h3 id="通过-Vue-Cli-命令行"><a href="#通过-Vue-Cli-命令行" class="headerlink" title="通过 Vue-Cli 命令行"></a>通过 Vue-Cli 命令行</h3><h4 id="全局安装vue-cli"><a href="#全局安装vue-cli" class="headerlink" title="全局安装vue-cli"></a>全局安装vue-cli</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h4 id="创建uni-app"><a href="#创建uni-app" class="headerlink" title="创建uni-app"></a>创建uni-app</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create -p dcloudio/uni-preset-vue my-project</span><br></pre></td></tr></table></figure><p>此时，会提示选择项目模板，初次体验建议选择 <code>hello uni-app</code> 项目模板</p><h4 id="运行并发布-uni-app"><a href="#运行并发布-uni-app" class="headerlink" title="运行并发布 uni-app"></a>运行并发布 uni-app</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run dev:%PLATFORM%</span><br><span class="line">npm run build:%PLATFORM%</span><br></pre></td></tr></table></figure><p><code>%PLATFORM%</code> 可取值如下：</p><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">平台</th></tr></thead><tbody><tr><td style="text-align:left"><code>h5</code></td><td style="text-align:left">H5</td></tr><tr><td style="text-align:left"><code>mp-alipay</code></td><td style="text-align:left">支付宝小程序</td></tr><tr><td style="text-align:left"><code>mp-baidu</code></td><td style="text-align:left">百度小程序</td></tr><tr><td style="text-align:left"><code>mp-weixin</code></td><td style="text-align:left">微信小程序</td></tr><tr><td style="text-align:left"><code>mp-toutiao</code></td><td style="text-align:left">头条小程序</td></tr><tr><td style="text-align:left"><code>mp-qq</code></td><td style="text-align:left">QQ小程序</td></tr></tbody></table><h2 id="使用须知"><a href="#使用须知" class="headerlink" title="使用须知"></a>使用须知</h2><p><code>uni-app</code>跨了很多端，虽然代码层面可以开发一次，生成多端。但注意每个端，有每个端的管理规则</p><ul><li>比如<code>H5</code>端的浏览器有<strong>跨域限制</strong>；</li><li>比如微信小程序会<strong>强制要求https链接</strong>，并且所有要联网的服务器域名都要配到微信的白名单中；</li><li>比如<code>App</code>端，iOS对<strong>隐私控制和虚拟支付控制</strong>非常严格；</li><li>比如<code>App</code>端，Android、国产rom各种<strong>兼容性差异</strong>，尤其是因为谷歌服务被墙，导致的push、定位等开发混乱的坑；</li><li>如果你的<code>App</code>要<strong>使用三方sdk</strong>，比如定位、地图、支付、推送…还要遵循他们的规则和限制；</li></ul><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><p>为了实现多端兼容，综合考虑编译速度、运行性能等因素，<code>uni-app</code> 约定了如下开发规范：</p><ul><li>页面文件遵循 <a href="https://vue-loader.vuejs.org/zh/spec.htmlhttps://vue-loader.vuejs.org/zh/spec.html" target="_blank" rel="noopener">Vue 单文件组件 (SFC) 规范</a></li><li>组件标签靠近小程序规范，详见<a href="https://uniapp.dcloud.io/component/README" target="_blank" rel="noopener">uni-app 组件规范</a></li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 <code>wx</code> 替换为 <code>uni</code>，详见 <a href="https://uniapp.dcloud.io/api/README" target="_blank" rel="noopener">uni-app接口规范</a></li><li>数据绑定及事件处理同 <code>Vue.js</code> 规范，同时补充了App及页面的生命周期</li><li>为兼容多端运行，建议使用 <code>flex</code> 布局进行开发</li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌─components            uni-app组件目录</span><br><span class="line">│  └─comp-a.vue         可复用的a组件</span><br><span class="line">├─hybrid                存放本地网页的目录</span><br><span class="line">├─platforms             存放各平台专用页面的目录</span><br><span class="line">├─pages                 业务页面文件存放的目录</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line">├─static                存放应用引用静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此</span><br><span class="line">├─wxcomponents          存放小程序组件的目录</span><br><span class="line">├─main.js               Vue初始化入口文件</span><br><span class="line">├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期</span><br><span class="line">├─manifest.json         配置应用名称、appid、logo、版本等打包信息</span><br><span class="line">└─pages.json            配置页面路由、导航条、选项卡等页面类信息</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h3><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>onLaunch</code></td><td style="text-align:left">当<code>uni-app</code>初始化时触发(全局只触发一次)</td></tr><tr><td style="text-align:left"><code>onShow</code></td><td style="text-align:left">当 <code>uni-app</code> 启动，或从后台进入前台显示</td></tr><tr><td style="text-align:left"><code>onHide</code></td><td style="text-align:left">当 <code>uni-app</code> 从前台进入后台</td></tr><tr><td style="text-align:left"><code>onError</code></td><td style="text-align:left">当 <code>uni-app</code> 报错时触发</td></tr><tr><td style="text-align:left"><code>onUniNViewMessage</code></td><td style="text-align:left">对 <code>nvue</code> 页面发送的数据进行监听</td></tr></tbody></table><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>onLoad</code></td><td style="text-align:left">监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参）</td></tr><tr><td style="text-align:left"><code>onshow</code></td><td style="text-align:left">监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td></tr><tr><td style="text-align:left"><code>onReady</code></td><td style="text-align:left">监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发</td></tr><tr><td style="text-align:left"><code>onHide</code></td><td style="text-align:left">监听页面隐藏</td></tr><tr><td style="text-align:left"><code>onUnload</code></td><td style="text-align:left">监听页面卸载</td></tr><tr><td style="text-align:left"><code>onResize</code></td><td style="text-align:left">监听窗口尺寸变化</td></tr><tr><td style="text-align:left"><code>onPullDownRefresh</code></td><td style="text-align:left">监听用户下拉动作，一般用于下拉刷新</td></tr><tr><td style="text-align:left"><code>onReachBottom</code></td><td style="text-align:left">页面上拉触底事件的处理函数</td></tr><tr><td style="text-align:left"><code>onTabItemTap</code></td><td style="text-align:left">点击 tab 时触发，参数为Object，具体见下方注意事项</td></tr><tr><td style="text-align:left"><code>onShareAppMessage</code></td><td style="text-align:left">用户点击右上角分享</td></tr><tr><td style="text-align:left"><code>onPageScroll</code></td><td style="text-align:left">监听页面滚动，参数为Object</td></tr><tr><td style="text-align:left"><code>onBackPress</code></td><td style="text-align:left">监听页面返回，返回 event = {from:backbutton、 navigateBack} ，backbutton 表示来源是左上角返回按钮或 android 返回键；navigateBack表示来源是 uni.navigateBack ；</td></tr><tr><td style="text-align:left"><code>onNavigationBarSearchInputChanged</code></td><td style="text-align:left">监听原生标题栏搜索输入框输入内容变化事件</td></tr><tr><td style="text-align:left"><code>onNavigationBarSearchInputConfirmed</code></td><td style="text-align:left">监听原生标题栏搜索输入框搜索事件，用户点击软键盘上的“搜索”按钮时触发。</td></tr><tr><td style="text-align:left"><code>onNavigationBarSearchInputClicked</code></td><td style="text-align:left">监听原生标题栏搜索输入框点击事件</td></tr></tbody></table><p><code>onPageScroll</code> 参数说明：</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>scrollTop</code></td><td style="text-align:left">Number</td><td style="text-align:left">页面在垂直方向已滚动的距离（单位px）</td></tr></tbody></table><p><code>onTabItemTap</code> 参数说明：</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>index</code></td><td style="text-align:left">String</td><td style="text-align:left">被点击tabItem的序号，从0开始</td></tr><tr><td style="text-align:left"><code>pagePath</code></td><td style="text-align:left">String</td><td style="text-align:left">被点击tabItem的页面路径</td></tr><tr><td style="text-align:left"><code>text</code></td><td style="text-align:left">String</td><td style="text-align:left">被点击tabItem的按钮文字</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;uni-app&lt;/strong&gt; 是一个使用 &lt;code&gt;Vue.js&lt;/code&gt; 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。&lt;/p&gt;
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Uni-App" scheme="http://blog.caoxl.com/tags/Uni-App/"/>
    
  </entry>
  
  <entry>
    <title>Redis 集群</title>
    <link href="http://blog.caoxl.com/2019/09/30/Redis-Cluster-Notes/"/>
    <id>http://blog.caoxl.com/2019/09/30/Redis-Cluster-Notes/</id>
    <published>2019-09-30T01:34:18.000Z</published>
    <updated>2019-09-30T06:27:47.476Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>前面是理论知识, 实操直接拉到 <a href="http://blog.caoxl.com/2019/09/30/Redis-Cluster-Notes/#Linux%E4%B8%8B%E5%88%9B%E5%BB%BARedis%E9%9B%86%E7%BE%A4">9. Linux下创建Redis集群</a></p></blockquote><h2 id="什么是Redis集群"><a href="#什么是Redis集群" class="headerlink" title="什么是Redis集群 ?"></a>什么是Redis集群 ?</h2><blockquote><p>Redis 集群是一个可以在多个 <code>Redis</code> 节点之间进行数据共享的设施(<code>installation</code>)。</p></blockquote><p>Redis 集群是一个<strong>分布式</strong>(<code>distributed</code>)、<strong>容错</strong>(<code>fault-tolerant</code>)的Redis实现, 集群可以使用的功能是普通单机Redis所能使用的功能的一个子集(<code>subset</code>).</p><p>Redis 集群中不存在 <strong>中心(<code>central</code>)节点</strong> 或者 <strong>代理(<code>proxy</code>)节点</strong>, 集群的其中一个主要设计目标是达到线性可扩展性(<code>linear scalability</code>)</p><p>Redis 集群为了保证一致性(<code>consistency</code>)而牺牲了一部分容错性: 系统会在保证对网络断线(<code>net split</code>)和节点失效(<code>node failure</code>)具有有限(<code>limited</code>)抵抗力的前提下， 尽可能地保持数据的一致性。</p><a id="more"></a><h2 id="Redis集群实现的功能子集"><a href="#Redis集群实现的功能子集" class="headerlink" title="Redis集群实现的功能子集"></a>Redis集群实现的功能子集</h2><p>Redis 集群实现了单机 Redis 中， 所有处理单个数据库键的命令。</p><p>针对多个数据库键的复杂计算操作， 比如集合的并集操作、合集操作没有被实现， 那些理论上需要使用多个节点的多个数据库键才能完成的命令也没有被实现。</p><p>在将来， 用户也许可以通过 <code>MIGRATE COPY</code> 命令， 在集群的计算节点（<code>computation node</code>）中执行针对多个数据库键的只读操作， 但集群本身不会去实现那些需要将多个数据库键在多个节点中移来移去的复杂多键命令。</p><p>Redis 集群不像单机 Redis 那样支持多数据库功能， 集群只使用默认的 0 号数据库， 并且不能使用 SELECT index 命令。</p><h2 id="Redis集群协议中的客户端和服务器"><a href="#Redis集群协议中的客户端和服务器" class="headerlink" title="Redis集群协议中的客户端和服务器"></a>Redis集群协议中的客户端和服务器</h2><p>Redis 集群中的节点有以下责任：</p><ul><li>持有键值对数据。</li><li>记录集群的状态，包括键到正确节点的映射（<code>mapping keys to right nodes</code>）。</li><li>自动发现其他节点，识别工作不正常的节点，并在有需要时，在从节点中选举出新的主节点。</li></ul><p>为了执行以上列出的任务， 集群中的每个节点都与其他节点建立起了“集群连接(cluster bus)”， 该连接是一个 TCP 连接， 使用二进制协议进行通讯。</p><p>节点之间使用 <a href="https://en.wikipedia.org/wiki/Gossip_protocol" target="_blank" rel="noopener">Gossip协议</a> 来进行以下工作:</p><ul><li>传播 (propagate) 关于集群的信息，以此来发现新的节点。</li><li>向其他节点发送 <code>PING</code> 数据包，以此来检查目标节点是否正常运作。</li><li>在特定事件发生时，发送集群信息。</li></ul><p>除此之外， 集群连接还用于在集群中发布或订阅信息。</p><p>因为集群节点不能代理（<code>proxy</code>）命令请求， 所以客户端应该在节点返回 <code>-MOVED</code> 或者 <code>-ASK</code> 转向（<code>redirection</code>）错误时， 自行将命令请求转发至其他节点。</p><p>因为客户端可以自由地向集群中的任何一个节点发送命令请求， 并可以在有需要时， 根据转向错误所提供的信息， 将命令转发至正确的节点， 所以在理论上来说， 客户端是无须保存集群状态信息的。</p><p>不过， 如果客户端可以将键和节点之间的映射信息保存起来， 可以有效地减少可能出现的转向次数， 籍此提升命令执行的效率。</p><h2 id="Redis集群键分布模型"><a href="#Redis集群键分布模型" class="headerlink" title="Redis集群键分布模型"></a>Redis集群键分布模型</h2><p>Redis 集群的键空间被分割为 <code>16384</code> 个槽（slot）， 集群的最大节点数量也是 <code>16384</code> 个。</p><blockquote><p>推荐的最大节点数量为 1000 个左右。</p></blockquote><p>每个主节点都负责处理 <code>16384</code> 个哈希槽的其中一部分。</p><p>当我们说一个集群处于“稳定”（<code>stable</code>）状态时， 指的是集群没有在执行重配置（<code>reconfiguration</code>）操作， 每个哈希槽都只由一个节点进行处理。</p><p>以下是负责将键映射到槽的算法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HASH_SLOT = CRC16(key) mod 16384</span><br></pre></td></tr></table></figure><p>以下是该算法所使用的参数：</p><ul><li>算法的名称: XMODEM (又称ZMODEM 或者 CRC-16/ACORN)</li><li>结果的长度: 16位</li><li>多项数 (poly): 1021 (也即是 <code>x16 + x12 + x5 + 1</code>)</li><li>初始化值: <code>0000</code></li><li>反射输入字节 (Reflect Input byte): <code>False</code></li><li>发射输出CRC (Reflect Output CRC): <code>False</code></li><li>用于 CRC 输出值的异或常量 (Xor constant to output CRC) : <code>0000</code></li><li>该算法对于输入 <code>&quot;123456789&quot;</code> 的输出: <code>31C3</code></li></ul><h2 id="Redis-集群数据共享"><a href="#Redis-集群数据共享" class="headerlink" title="Redis 集群数据共享"></a>Redis 集群数据共享</h2><p>Redis 集群使用<strong>数据分片</strong> (sharding) 而非<strong>一致性哈希</strong> (consistency hashing) 来实现： 一个 Redis 集群包含 <code>16384</code> 个哈希槽（hash slot）， 数据库中的每个键都属于这 <code>16384</code> 个哈希槽的其中一个， 集群使用公式 <code>CRC16(key) % 16384</code> 来计算键 <code>key</code> 属于哪个槽， 其中 <code>CRC16(key)</code> 语句用于计算键 <code>key</code> 的 <code>CRC16</code> 校验和 。</p><p>集群中的每个节点负责处理一部分哈希槽。 举个例子， 一个集群可以有三个哈希槽， 其中：</p><ul><li>节点 <strong>A</strong> 负责处理 <code>0</code> 号至 <code>5500</code> 号哈希槽。</li><li>节点 <strong>B</strong> 负责处理 <code>5501</code> 号至 <code>11000</code> 号哈希槽。</li><li>节点 <strong>C</strong> 负责处理 <code>11001</code> 号至 <code>16384</code> 号哈希槽。</li></ul><p>种将哈希槽分布到不同节点的做法使得用户可以很容易地向集群中添加或者删除节点。 比如说：</p><ul><li>如果用户将新节点 <strong>D</strong> 添加到集群中， 那么集群只需要将节点 <strong>A</strong> 、<strong>B</strong> 、 <strong>C</strong> 中的某些槽移动到节点 <strong>D</strong> 就可以了。</li><li>与此类似， 如果用户要从集群中移除节点 <strong>A</strong> ， 那么集群只需要将节点 <strong>A</strong> 中的所有哈希槽移动到节点 <strong>B</strong> 和节点 <strong>C</strong> ， 然后再移除空白（不包含任何哈希槽）的节点 <strong>A</strong> 就可以了。</li></ul><p>因为将一个哈希槽从一个节点移动到另一个节点不会造成节点阻塞， 所以无论是添加新节点还是移除已存在节点， 又或者改变某个节点包含的哈希槽数量， 都不会造成集群下线。</p><h2 id="Redis集群中的主从复制"><a href="#Redis集群中的主从复制" class="headerlink" title="Redis集群中的主从复制"></a>Redis集群中的主从复制</h2><p>为了使得集群在一部分节点下线或者无法与集群的大多数（<code>majority</code>）节点进行通讯的情况下， 仍然可以正常运作， <code>Redis</code> 集群对节点使用了主从复制功能： 集群中的每个节点都有 <code>1</code> 个至 <code>N</code> 个复制品（<code>replica</code>）， 其中一个复制品为主节点（<code>master</code>）， 而其余的 <code>N-1</code> 个复制品为从节点（<code>slave</code>）。</p><p>在之前列举的节点 <strong>A</strong> 、<strong>B</strong> 、<strong>C</strong> 的例子中， 如果节点 <strong>B</strong> 下线了， 那么集群将无法正常运行， 因为集群找不到节点来处理 <code>5501</code> 号至 <code>11000</code> 号的哈希槽。</p><p>另一方面， 假如在创建集群的时候（或者至少在节点 <strong>B</strong> 下线之前）， 我们为主节点 <strong>B</strong> 添加了从节点 <strong>B1</strong> ， 那么当主节点 <strong>B</strong> 下线的时候， 集群就会将 <strong>B1</strong> 设置为新的主节点， 并让它代替下线的主节点 <strong>B</strong> ， 继续处理 <code>5501</code> 号至 <code>11000</code> 号的哈希槽， 这样集群就不会因为主节点 <strong>B</strong> 的下线而无法正常运作了。另一方面， 假如在创建集群的时候（或者至少在节点 <strong>B</strong> 下线之前）， 我们为主节点 <strong>B</strong> 添加了从节点 <strong>B1</strong> ， 那么当主节点 <strong>B</strong> 下线的时候， 集群就会将 <strong>B1</strong> 设置为新的主节点， 并让它代替下线的主节点 <strong>B</strong> ， 继续处理 <code>5501</code> 号至 <code>11000</code> 号的哈希槽， 这样集群就不会因为主节点 <strong>B</strong> 的下线而无法正常运作了。</p><p>不过如果节点 <strong>B</strong> 和 <strong>B1</strong> 都下线的话， <code>Redis</code> 集群还是会停止运作。</p><h2 id="Redis-集群的一致性保证（guarantee）"><a href="#Redis-集群的一致性保证（guarantee）" class="headerlink" title="Redis 集群的一致性保证（guarantee）"></a>Redis 集群的一致性保证（<code>guarantee</code>）</h2><p>Redis 集群<strong>不保证数据的强一致性</strong>（<code>strong consistency</code>）： 在特定条件下， Redis 集群可能会丢失已经被执行过的写命令。</p><p>使用异步复制（<code>asynchronous replication</code>）是 Redis 集群可能会丢失写命令的其中一个原因。 考虑以下这个写命令的例子：</p><ul><li>客户端向主节点 B 发送一条写命令。</li><li>主节点 B 执行写命令，并向客户端返回命令回复。</li><li>主节点 B 将刚刚执行的写命令复制给它的从节点 B1 、 B2 和 B3 。</li></ul><p>如你所见， 主节点对命令的复制工作发生在返回命令回复之后， 因为如果每次处理命令请求都需要等待复制操作完成的话， 那么主节点处理命令请求的速度将极大地降低 —— 我们必须在性能和一致性之间做出权衡。</p><p>Redis 集群另外一种可能会丢失命令的情况是， 集群出现网络分裂 (<code>network partition</code>)， 并且一个客户端与至少包括一个主节点在内的少数 (<code>minority</code>) 实例被孤立。</p><h2 id="创建并使用Redis集群"><a href="#创建并使用Redis集群" class="headerlink" title="创建并使用Redis集群"></a>创建并使用Redis集群</h2><p>Redis 集群由多个运行在集群模式 (<code>cluster mode</code>) 下的 Redis 实例组成， 实例的集群模式需要通过配置来开启， 开启集群模式的实例将可以使用集群特有的功能和命令。</p><p>以下是一个包含了最少选项的集群配置文件示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">port 7000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><p>文件中的 <code>cluster-enabled</code> 选项用于开实例的集群模式， 而 <code>cluster-conf-file</code> 选项则设定了保存节点配置文件的路径， 默认值为 <code>nodes.conf</code> 。</p><p>节点配置文件无须人为修改， 它由 Redis 集群在启动时创建， 并在有需要时自动进行更新。</p><p><strong>要让集群正常运作至少需要三个主节点</strong>， 不过在刚开始试用集群功能时， 强烈建议使用六个节点： 其中三个为主节点， 而其余三个则是各个主节点的从节点。</p><p>首先， 让我们进入一个新目录， 并创建六个以端口号为名字的子目录， 稍后我们在将每个目录中运行一个 Redis 实例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir cluster-test</span><br><span class="line">cd cluster-test</span><br><span class="line">mkdir 7000 7001 7002 7003 7004 7005</span><br></pre></td></tr></table></figure><p>在文件夹 <code>7000</code> 至 <code>7005</code> 中， 各创建一个 <code>redis.conf</code> 文件， 文件的内容可以使用上面的示例配置文件， 但记得将配置中的端口号从 7000 改为与文件夹名字相同的号码。</p><p>现在， 从 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis Github</a> 页面 的 <code>unstable</code> 分支中取出最新的 Redis 源码， 编译出可执行文件 <code>redis-server</code> ， 并将文件复制到 <code>cluster-test</code> 文件夹， 然后使用类似以下命令， 在每个标签页中打开一个实例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 7000</span><br><span class="line">../redis-server ./redis.conf</span><br></pre></td></tr></table></figure><p>实例打印的日志显示， 因为 <code>nodes.conf</code> 文件不存在， 所以每个节点都为它自身指定了一个新的 ID ：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[82462] 26 Nov 11:56:55.329 * No cluster configuration found, I'm 97a3a64667477371c4479320d683e4c8db5858b1</span><br></pre></td></tr></table></figure><p>实例会一直使用同一个 <strong>ID</strong> ， 从而在集群中保持一个独一无二 (<code>unique</code>) 的名字。</p><p>每个节点都使用 <strong>ID</strong> 而不是 IP 或者端口号来记录其他节点， 因为 IP 地址和端口号都可能会改变， 而这个独一无二的标识符 (<code>identifier</code>) 则会在节点的整个生命周期中一直保持不变。</p><p>我们将这个标识符称为节点 <strong>ID</strong>。</p><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>现在我们已经有了六个正在运行中的 Redis 实例， 接下来我们需要使用这些实例来创建集群， 并为每个节点编写配置文件。</p><p>通过使用 Redis 集群命令行工具 <code>redis-trib</code> ， 编写节点配置文件的工作可以非常容易地完成： <code>redis-trib</code> 位于 Redis 源码的 <code>src</code> 文件夹中， 它是一个 Ruby 程序， 这个程序通过向实例发送特殊命令来完成创建新集群， 检查集群， 或者对集群进行重新分片 (<code>reshared</code>) 等工作。</p><p>我们需要执行以下命令来创建集群：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 \</span><br><span class="line">127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005</span><br></pre></td></tr></table></figure><p>命令的意义如下：</p><ul><li>给定 <code>redis-trib.rb</code> 程序的命令是 <code>create</code> ， 这表示我们希望创建一个新的集群。</li><li>选项 <code>--replicas 1</code> 表示我们希望为集群中的每个主节点创建一个从节点。</li><li>后跟着的其他参数则是实例的地址列表， 我们希望程序使用这些地址所指示的实例来创建新集群。</li></ul><p>简单来说， 以上命令的意思就是让 <code>redis-trib</code> 程序创建一个包含三个主节点和三个从节点的集群。</p><p>接着， <code>redis-trib</code> 会打印出一份预想中的配置给你看， 如果你觉得没问题的话， 就可以输入 <code>yes</code> ， <code>redis-trib</code> 就会将这份配置应用到集群当中：</p><p>输入 <code>yes</code> 并按下回车确认之后， 集群就会将配置应用到各个节点， 并连接起 (<code>join</code>) 各个节点 —— 也即是， 让各个节点开始互相通讯：</p><p>如果一切正常的话， <code>redis-trib</code> 将输出以下信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><p>这表示集群中的 <code>16384</code> 个槽都有至少一个主节点在处理， 集群运作正常。</p><h2 id="Linux下创建Redis集群"><a href="#Linux下创建Redis集群" class="headerlink" title="Linux下创建Redis集群"></a>Linux下创建Redis集群</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl redis]# cd /usr/local/redis/</span><br><span class="line">[root@caoxl redis]# mkdir cluster</span><br><span class="line">[root@caoxl redis]# cd cluster/</span><br><span class="line">[root@caoxl cluster]# mkdir 7000 7001 7002 7003 7004 7005</span><br></pre></td></tr></table></figure><h3 id="复制和修改配置文件"><a href="#复制和修改配置文件" class="headerlink" title="复制和修改配置文件"></a>复制和修改配置文件</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl cluster]# cp ../bin/redis.conf ./7000</span><br></pre></td></tr></table></figure><p>修改配置文件 <code>redis.conf</code>，将下面的选项修改</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 端口号</span></span><br><span class="line">port 7000</span><br><span class="line"><span class="section"># 后台启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="section"># 开启集群</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line"><span class="section">#集群节点配置文件</span></span><br><span class="line">cluster-config-file nodes-7000.conf</span><br><span class="line"><span class="section"># 集群连接超时时间</span></span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"><span class="section"># 进程pid的文件位置</span></span><br><span class="line">pidfile /var/run/redis-7000.pid</span><br><span class="line"><span class="section"># 开启aof</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="section"># aof文件路径</span></span><br><span class="line">appendfilename "appendonly-7000.aof"</span><br><span class="line"><span class="section"># rdb文件路径</span></span><br><span class="line">dbfilename dump-7000.rdb</span><br></pre></td></tr></table></figure><p>6个配置文件按照<strong>对应的端口</strong>分别修改配置文件</p><h3 id="创建启动脚本"><a href="#创建启动脚本" class="headerlink" title="创建启动脚本"></a>创建启动脚本</h3><p>在 <code>/usr/local/redis</code> 目录下创建一个 <code>start.sh</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#!/bin/bash</span></span><br><span class="line">bin/redis-server cluster/7000/redis.conf</span><br><span class="line">bin/redis-server cluster/7001/redis.conf</span><br><span class="line">bin/redis-server cluster/7002/redis.conf</span><br><span class="line">bin/redis-server cluster/7003/redis.conf</span><br><span class="line">bin/redis-server cluster/7004/redis.conf</span><br><span class="line">bin/redis-server cluster/7005/redis.conf</span><br></pre></td></tr></table></figure><ul><li>这个时候我们查看一下进程看启动情况</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl redis]# ps -ef | grep redis</span><br><span class="line">root     20142 19734  0 11:29 pts/2    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><ul><li>执行 <code>start.sh</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl redis]# sh start.sh </span><br><span class="line">20169:C 30 Sep 2019 11:31:39.052 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">20169:C 30 Sep 2019 11:31:39.052 # Redis version=5.0.1, bits=64, commit=00000000, modified=0, pid=20169, just started</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>这个时候我们查看一下进程看启动情况</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl redis]# ps -ef | grep redis</span><br><span class="line">root     20155     1  0 11:31 ?        00:00:00 bin/redis-server 127.0.0.1:7000 [cluster]</span><br><span class="line">root     20162     1  0 11:31 ?        00:00:00 bin/redis-server 127.0.0.1:7001 [cluster]</span><br><span class="line">root     20174     1  0 11:31 ?        00:00:00 bin/redis-server 127.0.0.1:7002 [cluster]</span><br><span class="line">root     20176     1  0 11:31 ?        00:00:00 bin/redis-server 127.0.0.1:7003 [cluster]</span><br><span class="line">root     20181     1  0 11:31 ?        00:00:00 bin/redis-server 127.0.0.1:7004 [cluster]</span><br><span class="line">root     20189     1  0 11:31 ?        00:00:00 bin/redis-server 127.0.0.1:7005 [cluster]</span><br><span class="line">root     20194 19734  0 11:31 pts/2    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><p>有6个<code>Redis</code>进程在开启，说明我们的<code>Redis</code>就启动成功了</p><h3 id="创建-开启集群"><a href="#创建-开启集群" class="headerlink" title="创建/开启集群"></a>创建/开启集群</h3><p>这里我们只是<strong>开启了6个redis进程</strong>而已，它们都还只是独立的状态，还么有组成集群这里我们使用官方提供的工具<code>redis-trib</code>，不过这个工具是用<code>ruby</code>写的，要先安装<code>ruby</code>的环境</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ruby rubygems -y</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl redis]# redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 2730</span><br><span class="line">Master[1] -&gt; Slots 2731 - 5460</span><br><span class="line">Master[2] -&gt; Slots 5461 - 8191</span><br><span class="line">Master[3] -&gt; Slots 8192 - 10922</span><br><span class="line">Master[4] -&gt; Slots 10923 - 13652</span><br><span class="line">Master[5] -&gt; Slots 13653 - 16383</span><br><span class="line">M: ec6743b088fafa480bb6f06f2f5189df1ede2b1d 127.0.0.1:7000</span><br><span class="line">   slots:[0-2730] (2731 slots) master</span><br><span class="line">M: 61d89b9786b7785633224c5950eef2aa5cee7dfa 127.0.0.1:7001</span><br><span class="line">   slots:[2731-5460] (2730 slots) master</span><br><span class="line">M: 4449a1b0bd65e9688995907215c4ef1311dbdfc8 127.0.0.1:7002</span><br><span class="line">   slots:[5461-8191] (2731 slots) master</span><br><span class="line">M: 6ad224baedff1134cd443a249d5eb13a80c51017 127.0.0.1:7003</span><br><span class="line">   slots:[8192-10922] (2731 slots) master</span><br><span class="line">M: 797ad1ef54e859f724bc153223284a85c1afef44 127.0.0.1:7004</span><br><span class="line">   slots:[10923-13652] (2730 slots) master</span><br><span class="line">M: 32158e5b4e5815ffd253d8eb94ace27c8c96e84e 127.0.0.1:7005</span><br><span class="line">   slots:[13653-16383] (2731 slots) master</span><br><span class="line">Can I set the above configuration? (type 'yes' to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7000)</span><br><span class="line">M: ec6743b088fafa480bb6f06f2f5189df1ede2b1d 127.0.0.1:7000</span><br><span class="line">   slots:[0-2730] (2731 slots) master</span><br><span class="line">M: 32158e5b4e5815ffd253d8eb94ace27c8c96e84e 127.0.0.1:7005</span><br><span class="line">   slots:[13653-16383] (2731 slots) master</span><br><span class="line">M: 797ad1ef54e859f724bc153223284a85c1afef44 127.0.0.1:7004</span><br><span class="line">   slots:[10923-13652] (2730 slots) master</span><br><span class="line">M: 61d89b9786b7785633224c5950eef2aa5cee7dfa 127.0.0.1:7001</span><br><span class="line">   slots:[2731-5460] (2730 slots) master</span><br><span class="line">M: 4449a1b0bd65e9688995907215c4ef1311dbdfc8 127.0.0.1:7002</span><br><span class="line">   slots:[5461-8191] (2731 slots) master</span><br><span class="line">M: 6ad224baedff1134cd443a249d5eb13a80c51017 127.0.0.1:7003</span><br><span class="line">   slots:[8192-10922] (2731 slots) master</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><blockquote><p>redis-cli –cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005</p></blockquote><h3 id="连接集群"><a href="#连接集群" class="headerlink" title="连接集群"></a>连接集群</h3><p>这里我们使用 <code>reids-cli</code> 连接集群，使用时加上<code>-c</code>参数，就可以连接到集群<br>连接 <code>7000</code> 端口的节点</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl redis]# redis-cli -c -p 7000</span><br><span class="line">127.0.0.1:7000&gt; set key<span class="emphasis">_7000 value_</span>7000</span><br><span class="line">-&gt; Redirected to slot [10168] located at 127.0.0.1:7003</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7003&gt; get key_7000</span><br><span class="line">"value_7000"</span><br><span class="line">127.0.0.1:7003&gt; set key<span class="emphasis">_7003 value_</span>7003</span><br><span class="line">-&gt; Redirected to slot [6107] located at 127.0.0.1:7002</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7002&gt; get key_7003</span><br><span class="line">"value_7003"</span><br></pre></td></tr></table></figure><p>我们发现数据会在 <code>7000-7002</code>这<code>3</code>个节点之间来回跳转</p><h3 id="测试集群中的节点挂掉"><a href="#测试集群中的节点挂掉" class="headerlink" title="测试集群中的节点挂掉"></a>测试集群中的节点挂掉</h3><p>上面我们建立了一个集群，<code>3</code>个主节点和<code>3</code>个从节点，<code>7000-7002</code>负责存取数据，<code>7003-7005</code>负责把<code>7000-7005</code>的数据同步到自己的节点上来。我们现在来模拟一下一台matser服务器宕机的情况</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl redis]# ps -ef | grep redis</span><br><span class="line">root     20155     1  0 11:31 ?        00:00:01 bin/redis-server 127.0.0.1:7000 [cluster]</span><br><span class="line">root     20162     1  0 11:31 ?        00:00:01 bin/redis-server 127.0.0.1:7001 [cluster]</span><br><span class="line">root     20174     1  0 11:31 ?        00:00:01 bin/redis-server 127.0.0.1:7002 [cluster]</span><br><span class="line">root     20176     1  0 11:31 ?        00:00:01 bin/redis-server 127.0.0.1:7003 [cluster]</span><br><span class="line">root     20181     1  0 11:31 ?        00:00:01 bin/redis-server 127.0.0.1:7004 [cluster]</span><br><span class="line">root     20189     1  0 11:31 ?        00:00:01 bin/redis-server 127.0.0.1:7005 [cluster]</span><br><span class="line">root     20571 19734  0 11:49 pts/2    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><ul><li>杀死一个<code>redis master</code>进程</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl redis]# kill 20155</span><br><span class="line">[root@caoxl redis]# ps -ef | grep redis</span><br><span class="line">root     20162     1  0 11:31 ?        00:00:01 bin/redis-server 127.0.0.1:7001 [cluster]</span><br><span class="line">root     20174     1  0 11:31 ?        00:00:01 bin/redis-server 127.0.0.1:7002 [cluster]</span><br><span class="line">root     20176     1  0 11:31 ?        00:00:01 bin/redis-server 127.0.0.1:7003 [cluster]</span><br><span class="line">root     20181     1  0 11:31 ?        00:00:01 bin/redis-server 127.0.0.1:7004 [cluster]</span><br><span class="line">root     20189     1  0 11:31 ?        00:00:01 bin/redis-server 127.0.0.1:7005 [cluster]</span><br><span class="line">root     20578 19734  0 11:50 pts/2    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl bin]# redis-cli --cluster check 127.0.0.1:7001</span><br><span class="line">Could not connect to Redis at 127.0.0.1:7000: Connection refused</span><br><span class="line">127.0.0.1:7001 (61d89b97...) -&gt; 0 keys | 2730 slots | 0 slaves.</span><br><span class="line">127.0.0.1:7004 (797ad1ef...) -&gt; 0 keys | 2730 slots | 0 slaves.</span><br><span class="line">127.0.0.1:7002 (4449a1b0...) -&gt; 1 keys | 2731 slots | 0 slaves.</span><br><span class="line">127.0.0.1:7005 (32158e5b...) -&gt; 0 keys | 2731 slots | 0 slaves.</span><br><span class="line">127.0.0.1:7003 (6ad224ba...) -&gt; 1 keys | 2731 slots | 0 slaves.</span><br><span class="line">[OK] 2 keys in 5 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7001)</span><br><span class="line">M: 61d89b9786b7785633224c5950eef2aa5cee7dfa 127.0.0.1:7001</span><br><span class="line">   slots:[2731-5460] (2730 slots) master</span><br><span class="line">M: 797ad1ef54e859f724bc153223284a85c1afef44 127.0.0.1:7004</span><br><span class="line">   slots:[10923-13652] (2730 slots) master</span><br><span class="line">M: 4449a1b0bd65e9688995907215c4ef1311dbdfc8 127.0.0.1:7002</span><br><span class="line">   slots:[5461-8191] (2731 slots) master</span><br><span class="line">M: 32158e5b4e5815ffd253d8eb94ace27c8c96e84e 127.0.0.1:7005</span><br><span class="line">   slots:[13653-16383] (2731 slots) master</span><br><span class="line">M: 6ad224baedff1134cd443a249d5eb13a80c51017 127.0.0.1:7003</span><br><span class="line">   slots:[8192-10922] (2731 slots) master</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[ERR] Not all 16384 slots are covered by nodes.</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意:</strong> <code>redis-trib.rb</code>是redis 5.0以下的版本创建集群所使用的脚本，注意，redis5.0版本已不需要再使用此脚本，而是使用自带的<code>redis-cli</code>创建<br>[root@caoxl redis]# redis-cli -v<br>  redis-cli 5.0.1</p></blockquote><h3 id="Redis集群命令"><a href="#Redis集群命令" class="headerlink" title="Redis集群命令"></a>Redis集群命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@caoxl bin]# redis-cli --cluster help</span><br><span class="line">Cluster Manager Commands:</span><br><span class="line">  create         host1:port1 ... hostN:portN</span><br><span class="line"><span class="code">                 --cluster-replicas &lt;arg&gt;</span></span><br><span class="line">  check          host:port</span><br><span class="line">  info           host:port</span><br><span class="line">  fix            host:port</span><br><span class="line">  reshard        host:port</span><br><span class="line"><span class="code">                 --cluster-from &lt;arg&gt;</span></span><br><span class="line"><span class="code">                 --cluster-to &lt;arg&gt;</span></span><br><span class="line"><span class="code">                 --cluster-slots &lt;arg&gt;</span></span><br><span class="line"><span class="code">                 --cluster-yes</span></span><br><span class="line"><span class="code">                 --cluster-timeout &lt;arg&gt;</span></span><br><span class="line"><span class="code">                 --cluster-pipeline &lt;arg&gt;</span></span><br><span class="line">  rebalance      host:port</span><br><span class="line"><span class="code">                 --cluster-weight &lt;node1=w1...nodeN=wN&gt;</span></span><br><span class="line"><span class="code">                 --cluster-use-empty-masters</span></span><br><span class="line"><span class="code">                 --cluster-timeout &lt;arg&gt;</span></span><br><span class="line"><span class="code">                 --cluster-simulate</span></span><br><span class="line"><span class="code">                 --cluster-pipeline &lt;arg&gt;</span></span><br><span class="line"><span class="code">                 --cluster-threshold &lt;arg&gt;</span></span><br><span class="line">  add-node       new<span class="emphasis">_host:new_</span>port existing<span class="emphasis">_host:existing_</span>port</span><br><span class="line"><span class="code">                 --cluster-slave</span></span><br><span class="line"><span class="code">                 --cluster-master-id &lt;arg&gt;</span></span><br><span class="line">  del-node       host:port node_id</span><br><span class="line">  call           host:port command arg arg .. arg</span><br><span class="line">  set-timeout    host:port milliseconds</span><br><span class="line">  import         host:port</span><br><span class="line"><span class="code">                 --cluster-from &lt;arg&gt;</span></span><br><span class="line"><span class="code">                 --cluster-copy</span></span><br><span class="line"><span class="code">                 --cluster-replace</span></span><br><span class="line">  help           </span><br><span class="line"></span><br><span class="line">For check, fix, reshard, del-node, set-timeout you can specify the host and port of any working node in the cluster.</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://redis.io/topics/cluster-tutorial" target="_blank" rel="noopener">Redis cluster tutorial</a></li><li><a href="http://redisdoc.com/topic/cluster-tutorial.html#redis-guarantee" target="_blank" rel="noopener">Redis - 集群教程</a></li><li><a href="https://juejin.im/entry/596343056fb9a06bc340ac15" target="_blank" rel="noopener">Redis集群的原理和搭建</a></li><li><a href="https://github.com/eyjian/redis-tools/tree/master/deploy" target="_blank" rel="noopener">集群部署交互式命令行工具</a></li><li><a href="https://github.com/eyjian/redis-tools/tree/master" target="_blank" rel="noopener"> 集群运维命令行工具</a></li><li><a href="https://cloud.tencent.com/developer/article/1367998" target="_blank" rel="noopener">Redis-5.0.0集群配置</a></li><li><a href="https://blog.csdn.net/Aquester/article/details/50150163" target="_blank" rel="noopener">Redis-5.0.0 以下版本的安装和部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前面是理论知识, 实操直接拉到 &lt;a href=&quot;http://blog.caoxl.com/2019/09/30/Redis-Cluster-Notes/#Linux%E4%B8%8B%E5%88%9B%E5%BB%BARedis%E9%9B%86%E7%BE%A4&quot;&gt;9. Linux下创建Redis集群&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是Redis集群&quot;&gt;&lt;a href=&quot;#什么是Redis集群&quot; class=&quot;headerlink&quot; title=&quot;什么是Redis集群 ?&quot;&gt;&lt;/a&gt;什么是Redis集群 ?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Redis 集群是一个可以在多个 &lt;code&gt;Redis&lt;/code&gt; 节点之间进行数据共享的设施(&lt;code&gt;installation&lt;/code&gt;)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis 集群是一个&lt;strong&gt;分布式&lt;/strong&gt;(&lt;code&gt;distributed&lt;/code&gt;)、&lt;strong&gt;容错&lt;/strong&gt;(&lt;code&gt;fault-tolerant&lt;/code&gt;)的Redis实现, 集群可以使用的功能是普通单机Redis所能使用的功能的一个子集(&lt;code&gt;subset&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Redis 集群中不存在 &lt;strong&gt;中心(&lt;code&gt;central&lt;/code&gt;)节点&lt;/strong&gt; 或者 &lt;strong&gt;代理(&lt;code&gt;proxy&lt;/code&gt;)节点&lt;/strong&gt;, 集群的其中一个主要设计目标是达到线性可扩展性(&lt;code&gt;linear scalability&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Redis 集群为了保证一致性(&lt;code&gt;consistency&lt;/code&gt;)而牺牲了一部分容错性: 系统会在保证对网络断线(&lt;code&gt;net split&lt;/code&gt;)和节点失效(&lt;code&gt;node failure&lt;/code&gt;)具有有限(&lt;code&gt;limited&lt;/code&gt;)抵抗力的前提下， 尽可能地保持数据的一致性。&lt;/p&gt;
    
    </summary>
    
      <category term="加分技能" scheme="http://blog.caoxl.com/categories/%E5%8A%A0%E5%88%86%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Redis" scheme="http://blog.caoxl.com/tags/Redis/"/>
    
      <category term="集群" scheme="http://blog.caoxl.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
</feed>
